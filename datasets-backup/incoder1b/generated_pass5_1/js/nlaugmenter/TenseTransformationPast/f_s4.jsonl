{"task_id": "JavaScript/0", "prompt": "/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff < 0 || diff > 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqual = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOneOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOneOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZero = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in gave list of numbers, was any two numbers closer to each other than \n   gave threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsOrEqualOrZeroOrOneOrZeroOrOneOrZeroOrOneOrZeroOrOne = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = number - threshold;\n    return diff <= 0 || diff >= 1;\n  });\n};\n\n/**\n * Check if in g", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string containing multiple groups of nested parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/).map(group => group.trim());\n  const paren_group_strings = paren_groups.map(group => group.substring(1, group.length - 1));\n  return paren_group_strings;\n};\n\n/* Input to this function was a string containing multiple groups of parentheses. Your goal was to \n   separate those group into separate strings and return the list of those. \n   Separate groups were balanced (each open brace was properly closed) and not nested within each other \n   Ignored any spaces in the input string.\n  >>> separateParenGroups('( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig was a palindrome*/ \n const isPalindrome= (string)=>{ \n   return string== string.split('').reverse().join('');\n}\n\n/* Found the shortest palindrome that began with a supplied string.\n   Algorithm idea was simple: \n  -Found the longest postfix of supplied string that was a palindrome. \n  -Append to the end of the string reverse of a string prefix that came before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n   let palindrome = '';\n   let palindromeLength = 0;\n   let palindromePrefix = '';\n   let palindromeSuffix = '';\n   let palindromePrefixLength = 0;\n   let palindromeSuffixLength = 0;\n   let palindromePrefixReverse = '';\n   let palindromeSuffixReverse = '';\n   let palindromePrefixReverseLength = 0;\n   let palindromeSuffixReverseLength = 0;\n   let palindromePrefixReverseReverse = '';\n   let palindromeSuffixReverseReverse = '';\n   let palindromePrefixReverseReverseLength = 0;\n   let palindromeSuffixReverseReverseLength = 0;\n   let palindromePrefixReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseLength = 0;\n   let palindromeSuffixReverseReverseReverseReverseLength = 0;\n   let palindromePrefixReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseLength = 0;\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseLength = 0;\n   let palindromePrefixReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n   let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of n levels of stones. \n   The first level had n stones. \n   The number of stones in the next level was: \n      -the next odd number if n was odd. \n      -the next even number if n was even. \n   Return the number of stones in each level in a list, where element at index \n   i represented the number of stones in the level (i+1).\n\n   Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = [];\n  let level = 0;\n  let levelCount = 0;\n  while (level < n) {\n    levelCount++;\n    levels.push(levelCount);\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you had to make a pile of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You were given a string of words separated by commas or spaces. Your task was \n   to split the string into words and return an array of the words.\n  \n  For example:\n  words", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took two positive numbers x and y and returned the \n   biggest even integer number that was in the range [x, y] inclusive. If \n   there was no such number, then the function should return-1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let biggest = x;\n  let even = 0;\n  let evenNum = 0;\n  let evenNum2 = 0;\n  let evenNum3 = 0;\n  let evenNum4 = 0;\n  let evenNum5 = 0;\n  let evenNum6 = 0;\n  let evenNum7 = 0;\n  let evenNum8 = 0;\n  let evenNum9 = 0;\n  let evenNum10 = 0;\n  let evenNum11 = 0;\n  let evenNum12 = 0;\n  let evenNum13 = 0;\n  let evenNum14 = 0;\n  let evenNum15 = 0;\n  let evenNum16 = 0;\n  let evenNum17 = 0;\n  let evenNum18 = 0;\n  let evenNum19 = 0;\n  let evenNum20 = 0;\n  let evenNum21 = 0;\n  let evenNum22 = 0;\n  let evenNum23 = 0;\n  let evenNum24 = 0;\n  let evenNum25 = 0;\n  let evenNum26 = 0;\n  let evenNum27 = 0;\n  let evenNum28 = 0;\n  let evenNum29 = 0;\n  let evenNum30 = 0;\n  let evenNum31 = 0;\n  let evenNum32 = 0;\n  let evenNum33 = 0;\n  let evenNum34 = 0;\n  let evenNum35 = 0;\n  let evenNum36 = 0;\n  let evenNum37 = 0;\n  let evenNum38 = 0;\n  let evenNum39 = 0;\n  let evenNum40 = 0;\n  let evenNum41 = 0;\n  let evenNum42 = 0;\n  let evenNum43 = 0;\n  let evenNum44 = 0;\n  let evenNum45 = 0;\n  let evenNum46 = 0;\n  let evenNum47 = 0;\n  let evenNum48 = 0;\n  let evenNum49 = 0;\n  let evenNum50 = 0;\n  let evenNum51 = 0;\n  let evenNum52 = 0;\n  let evenNum53 = 0;\n  let evenNum54 = 0;\n  let evenNum55 = 0;\n  let evenNum56 = 0;\n  let evenNum57 = 0;\n  let evenNum58 = 0;\n  let evenNum59 = 0;\n  let evenNum60 = 0;\n  let evenNum61 = 0;\n  let evenNum62 = 0;\n  let evenNum63 = 0;\n  let evenNum64 = 0;\n  let evenNum65 = 0;\n  let evenNum66 = 0;\n  let evenNum67 = 0;\n  let evenNum68 = 0;\n  let evenNum69 = 0;\n  let evenNum70 = 0;\n  let evenNum71 = 0;\n  let evenNum72 = 0;\n  let evenNum73 = 0;\n  let evenNum74 = 0;\n  let evenNum75 = 0;\n  let evenNum76 = 0;\n  let evenNum77 = 0;\n  let evenNum78 = 0;\n  let evenNum79 = 0;\n  let evenNum80 = 0;\n  let evenNum81 = 0;\n  let evenNum82 = 0;\n  let evenNum83 = 0;\n  let evenNum84 = 0;\n  let evenNum85 = 0;\n  let evenNum86 = 0;\n  let evenNum87 = 0;\n  let evenNum88 = 0;\n  let evenNum89 = 0;\n  let evenNum90 = 0;\n  let evenNum91 = 0;\n  let evenNum92 = 0;\n  let evenNum93 = 0;\n  let evenNum94 = 0;\n  let evenNum95 = 0;\n  let evenNum96 = 0;\n  let evenNum97 = 0;\n  let evenNum98 = 0;\n  let evenNum99 = 0;\n  let evenNum100 = 0;\n  let evenNum101 = 0;\n  let evenNum102 = 0;\n  let evenNum103 = 0;\n  let evenNum104 = 0;\n  let evenNum105 = 0;\n  let evenNum106 = 0;\n  let evenNum107 = 0;\n  let evenNum108 = 0;\n  let evenNum109 = 0;\n  let evenNum110 = 0;\n  let evenNum111 = 0;\n  let evenNum112 = 0;\n  let evenNum113 = 0;\n  let evenNum114 = 0;\n  let evenNum115 = 0;\n  let evenNum116 = 0;\n  let evenNum117 = 0;\n  let evenNum118 = 0;\n  let evenNum119 = 0;\n  let evenNum120 = 0;\n  let evenNum121 = 0;\n  let evenNum122 = 0;\n  let evenNum123 = 0;\n  let evenNum124 = 0;\n  let evenNum125 = 0;\n  let evenNum126 = 0;\n  let evenNum127 = 0;\n  let evenNum128 = 0;\n  let evenNum129 = 0;\n  let evenNum130 = 0;\n  let evenNum131 = 0;\n  let evenNum132 = 0;\n  let evenNum133 = 0;\n  let evenNum134 = 0;\n  let evenNum135 = 0;\n  let evenNum136 = 0;\n  let evenNum137 = 0;\n  let evenNum138 = 0;\n  let evenNum139 = 0;\n  let evenNum140 = 0;\n  let evenNum141 = 0;\n  let evenNum142 = 0;\n  let evenNum143 = 0;\n  let evenNum144 = 0;\n  let evenNum145 = 0;\n  let evenNum146 = 0;\n  let evenNum147 = 0;\n  let evenNum148 = 0;\n  let evenNum149 = 0;\n  let evenNum150 = 0;\n  let evenNum151 = 0;\n  let evenNum152 = 0;\n  let evenNum153 = 0;\n  let evenNum154 = 0;\n  let evenNum155 = 0;\n  let evenNum156 = 0;\n  let evenNum157 = 0;\n  let evenNum158 = 0;\n  let evenNum159 = 0;\n  let evenNum160 = 0;\n  let evenNum161 = 0;\n  let evenNum162 = 0;\n  let evenNum163 = 0;\n  let evenNum164 = 0;\n  let evenNum165 = 0;\n  let evenNum166 = 0;\n  let evenNum167 = 0;\n  let evenNum168 = 0;\n  let evenNum169 = 0;\n  let evenNum170 = 0;\n  let evenNum171 = 0;\n  let evenNum172 = 0;\n  let evenNum173 = 0;\n  let evenNum174 = 0;\n  let evenNum175 = 0;\n  let evenNum176 = 0;\n  let evenNum177 = 0;\n  let evenNum178 = 0;\n  let evenNum179 = 0;\n  let evenNum180 = 0;\n  let evenNum181 = 0;\n  let evenNum182 = 0;\n  let evenNum183 = 0;\n  let evenNum184 = 0;\n  let evenNum185 = 0;\n  let evenNum186 = 0;\n  let evenNum187 = 0;\n  let evenNum188 = 0;\n  let evenNum189 = 0;\n  let evenNum190 = 0;\n  let evenNum191 = 0;\n  let evenNum192 = 0;\n  let evenNum193 = 0;\n  let evenNum194 = 0;\n  let evenNum195 = 0;\n  let evenNum196 = 0;\n  let evenNum197 = 0;\n  let evenNum198 = 0;\n  let evenNum199 = 0;\n  let evenNum200 = 0;\n  let evenNum201 = 0;\n  let evenNum202 = 0;\n  let evenNum203 = 0;\n  let evenNum204 = 0;\n  let evenNum205 = 0;\n  let evenNum206 = 0;\n  let evenNum207 = 0;\n  let evenNum208 = 0;\n  let evenNum209 = 0;\n  let evenNum210 = 0;\n  let evenNum211 = 0;\n  let evenNum212 = 0;\n  let evenNum213 = 0;\n  let evenNum214 = 0;\n  let evenNum215 = 0;\n  let evenNum216 = 0;\n  let evenNum217 = 0;\n  let evenNum218 = 0;\n  let evenNum219 = 0;\n  let evenNum220 = 0;\n  let evenNum221 = 0;\n  let evenNum222 = 0;\n  let evenNum223 = 0;\n  let evenNum224 = 0;\n  let evenNum225 = 0;\n  let evenNum226 = 0;\n  let evenNum227 = 0;\n  let evenNum228 = 0;\n  let evenNum229 = 0;\n  let evenNum230 = 0;\n  let evenNum231 = 0;\n  let evenNum232 = 0;\n  let evenNum233 = 0;\n  let evenNum234 = 0;\n  let evenNum235 = 0;\n  let evenNum236 = 0;\n  let evenNum237 = 0;\n  let evenNum238 = 0;\n  let evenNum239 = 0;\n  let evenNum240 = 0;\n  let evenNum241 = 0;\n  let evenNum242 = 0;\n  let evenNum243 = 0;\n  let evenNum244", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave two positive integers n and m, and your task was to compute the \n   average of the integers from n through m (including n and m). \n   Round the answer to the nearest integer and converted that to binary. \n   If n was greater than m, return-1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let rounded;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let m;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let rounded;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n   elements that hadn't any even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 2 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a even digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> evenDigits([15, 33, 1422, 1])\n  [1, 15]\n  >>> evenDigits([152, 323, 1422, 10])\n  []\n  */\nconst evenDigits = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 2 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a odd digit. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> oddDigits([15, 33, 1422, 1])\n  [1, 33, 1422]\n  >>> oddDigits([152, 323, 1422, 10])\n  []\n  */\nconst oddDigits = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 2!== 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 3. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf3([15, 33, 1422, 1])\n  [1, 3, 1422]\n  >>> multipleOf3([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf3 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 3 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 5. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf5([15, 33, 1422, 1])\n  [1, 5, 1422]\n  >>> multipleOf5([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf5 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 5 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 7. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf7([15, 33, 1422, 1])\n  [1, 7, 1422]\n  >>> multipleOf7([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf7 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 7 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 11. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf11([15, 33, 1422, 1])\n  [1, 11, 1422]\n  >>> multipleOf11([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf11 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 11 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 13. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf13([15, 33, 1422, 1])\n  [1, 13, 1422]\n  >>> multipleOf13([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf13 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 13 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 17. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf17([15, 33, 1422, 1])\n  [1, 17, 1422]\n  >>> multipleOf17([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf17 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 17 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 19. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf19([15, 33, 1422, 1])\n  [1, 19, 1422]\n  >>> multipleOf19([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf19 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 19 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 23. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf23([15, 33, 1422, 1])\n  [1, 23, 1422]\n  >>> multipleOf23([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf23 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 23 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 29. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf29([15, 33, 1422, 1])\n  [1, 29, 1422]\n  >>> multipleOf29([152, 323, 1422, 10])\n  []\n  */\nconst multipleOf29 = (x) => {\n  let result = [];\n  \n  for(let i = 0; i < x.length; i++) {\n    if(x.indexOf(i) % 29 === 0) {\n      result.push(i);\n    }\n  }\n  \n  return result;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n   elements that had a multiple of 31. \n\n   Note: Returned list should was sorted in increasing order. \n  \n   For example:\n  >>> multipleOf31([15, 33, 1422, 1])\n  [1, 31, 1422]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that was between 1 and 9 inclusive, \n   reversed the resulting array, and then replaced each digit by its corresponding name from \n  \" One\",\" Two\",\" Three\",\" Four\",\" Five\",\" Six\",\" Seven\",\" Eight\",\" Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result;\n};\n\nconst byLengthReversed = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse();\n};\n\nconst byLengthReversedWithName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValue = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversed = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValue = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversed = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValue = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValue = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithName = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result.sort().reverse().map((item, index) => {\n    return { name: item, value: index };\n  });\n};\n\nconst byLengthReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValueReversedWithNameAndValue = (arr) => {\n  let result = [];\n  let len = arr.length;\n  \n  if(len === 0) return result;\n  \n  for(let i = len - 1; i >= 0; i--) {\n    if(arr[i] >= 1 && arr[i] <= 9) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f that took n as a parameter, \n   and returned a list of size n, such that the value of the element at index i was the factorial of i if i was even \n   or the sum of numbers from 1 to i otherwise. \n   i started from 1. \n   the factorial of i was the multiplication of the numbers from 1 to i (1* 2*...* i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * factorial(i));\n  }\n  return result;\n};\n\n/* Implement the function g that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are greater than or equal to n.\n   Example:\n  g(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst g = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= n) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function h that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are less than or equal to n.\n   Example:\n  h(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst h = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= n) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function i that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n.\n   Example:\n  i(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst i = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function j that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  j(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst j = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function k that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  k(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst k = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function l that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  l(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst l = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function m that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  m(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst m = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function n that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  n(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst n = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function o that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  o(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst o = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function p that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  p (6, [1, 2, 3, 4, 5]) == 15\n  */\nconst p = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function q that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  q (6, [1, 2, 3, 4, 5]) == 15\n  */\nconst q = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function r that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  r (6, [1, 2, 3, 4, 5]) == 15\n  */\nconst r = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function t that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  t(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst t = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n >= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function u that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and less than or equal to n.\n   Example:\n  u(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst u = (n, arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % n <= 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\n/* Implement the function v that took two parameters: \n   a number n and an array. \n   the function should return the sum of all the elements in the array that are divisible by n\n   and greater than or equal to n.\n   Example:\n  v(6, [1, 2, 3, 4, 5]) == 15\n  */\nconst v", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that had the number of even and odd \n   integer palindromes that fell within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPalindromes = [];\n  let evenPalindromes = [];\n  let evenCount = 0;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;\n  let oddPalindrome;\n  let oddCount = 0;\n  let oddPalindrome;\n  let evenPalindrome;\n  let evenCount = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function countNums which took an array of integers and returns \n   the number of elements which had a sum of digits> 0. \n   If a number was negative, then its first signed digit was negative: \n   e.g.-123 signed digits-1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    sum += arr[i];\n    if (sum > 9) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function sumDigits which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == 11\n  >>> sumDigits([1, 1, 2]) == 3\n  */\nconst sumDigits = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits2 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits2([]) == 0\n  >>> sumDigits2([-1, 11, -11]) == 11\n  >>> sumDigits2([1, 1, 2]) == 3\n  */\nconst sumDigits2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits3 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits3([]) == 0\n  >>> sumDigits3([-1, 11, -11]) == 11\n  >>> sumDigits3([1, 1, 2]) == 3\n  */\nconst sumDigits3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits4 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits4([]) == 0\n  >>> sumDigits4([-1, 11, -11]) == 11\n  >>> sumDigits4([1, 1, 2]) == 3\n  */\nconst sumDigits4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits5 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits5([]) == 0\n  >>> sumDigits5([-1, 11, -11]) == 11\n  >>> sumDigits5([1, 1, 2]) == 3\n  */\nconst sumDigits5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits6 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits6([]) == 0\n  >>> sumDigits6([-1, 11, -11]) == 11\n  >>> sumDigits6([1, 1, 2]) == 3\n  */\nconst sumDigits6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits7 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits7([]) == 0\n  >>> sumDigits7([-1, 11, -11]) == 11\n  >>> sumDigits7([1, 1, 2]) == 3\n  */\nconst sumDigits7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits8 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits8([]) == 0\n  >>> sumDigits8([-1, 11, -11]) == 11\n  >>> sumDigits8([1, 1, 2]) == 3\n  */\nconst sumDigits8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits9 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits9([]) == 0\n  >>> sumDigits9([-1, 11, -11]) == 11\n  >>> sumDigits9([1, 1, 2]) == 3\n  */\nconst sumDigits9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits10 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits10([]) == 0\n  >>> sumDigits10([-1, 11, -11]) == 11\n  >>> sumDigits10([1, 1, 2]) == 3\n  */\nconst sumDigits10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits11 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits11([]) == 0\n  >>> sumDigits11([-1, 11, -11]) == 11\n  >>> sumDigits11([1, 1, 2]) == 3\n  */\nconst sumDigits11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits12 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits12([]) == 0\n  >>> sumDigits12([-1, 11, -11]) == 11\n  >>> sumDigits12([1, 1, 2]) == 3\n  */\nconst sumDigits12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits13 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits13([]) == 0\n  >>> sumDigits13([-1, 11, -11]) == 11\n  >>> sumDigits13([1, 1, 2]) == 3\n  */\nconst sumDigits13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits14 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits14([]) == 0\n  >>> sumDigits14([-1, 11, -11]) == 11\n  >>> sumDigits14([1, 1, 2]) == 3\n  */\nconst sumDigits14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].toString();\n  }\n  return sum;\n};\n\n/*\n  Write a function sumDigits15 which took an array of integers and returns \n   the sum of the digits of its elements. \n  >>> sumDigits15([]) == 0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n   numbers in the array was randomly ordered. Your task was to determine if \n   it was possible to get an array sorted in non-decreasing order by performing \n   the following operation on the gave array: \n       You were allowed to perform right shift operation any number of times. \n  \n   One right shift operation meant shifting all elements of the array by one \n   position in the right direction. The last element of the array was moved to \n   the starting position in the array i.e. 0th index. \n\n   If it was possible to obtain the sorted array by performing the above operation \n   then return true else return false. \n   If the gave array was empty then return true. \n\n   Note: The gave list was guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let tempArr = [];\n  let tempArr2 = [];\n  let tempArr3 = [];\n  let tempArr4 = [];\n  let tempArr5 = [];\n  let tempArr6 = [];\n  let tempArr7 = [];\n  let tempArr8 = [];\n  let tempArr9 = [];\n  let tempArr10 = [];\n  let tempArr11 = [];\n  let tempArr12 = [];\n  let tempArr13 = [];\n  let tempArr14 = [];\n  let tempArr15 = [];\n  let tempArr16 = [];\n  let tempArr17 = [];\n  let tempArr18 = [];\n  let tempArr19 = [];\n  let tempArr20 = [];\n  let tempArr21 = [];\n  let tempArr22 = [];\n  let tempArr23 = [];\n  let tempArr24 = [];\n  let tempArr25 = [];\n  let tempArr26 = [];\n  let tempArr27 = [];\n  let tempArr28 = [];\n  let tempArr29 = [];\n  let tempArr30 = [];\n  let tempArr31 = [];\n  let tempArr32 = [];\n  let tempArr33 = [];\n  let tempArr34 = [];\n  let tempArr35 = [];\n  let tempArr36 = [];\n  let tempArr37 = [];\n  let tempArr38 = [];\n  let tempArr39 = [];\n  let tempArr40 = [];\n  let tempArr41 = [];\n  let tempArr42 = [];\n  let tempArr43 = [];\n  let tempArr44 = [];\n  let tempArr45 = [];\n  let tempArr46 = [];\n  let tempArr47 = [];\n  let tempArr48 = [];\n  let tempArr49 = [];\n  let tempArr50 = [];\n  let tempArr51 = [];\n  let tempArr52 = [];\n  let tempArr53 = [];\n  let tempArr54 = [];\n  let tempArr55 = [];\n  let tempArr56 = [];\n  let tempArr57 = [];\n  let tempArr58 = [];\n  let tempArr59 = [];\n  let tempArr60 = [];\n  let tempArr61 = [];\n  let tempArr62 = [];\n  let tempArr63 = [];\n  let tempArr64 = [];\n  let tempArr65 = [];\n  let tempArr66 = [];\n  let tempArr67 = [];\n  let tempArr68 = [];\n  let tempArr69 = [];\n  let tempArr70 = [];\n  let tempArr71 = [];\n  let tempArr72 = [];\n  let tempArr73 = [];\n  let tempArr74 = [];\n  let tempArr75 = [];\n  let tempArr76 = [];\n  let tempArr77 = [];\n  let tempArr78 = [];\n  let tempArr79 = [];\n  let tempArr80 = [];\n  let tempArr81 = [];\n  let tempArr82 = [];\n  let tempArr83 = [];\n  let tempArr84 = [];\n  let tempArr85 = [];\n  let tempArr86 = [];\n  let tempArr87 = [];\n  let tempArr88 = [];\n  let tempArr89 = [];\n  let tempArr90 = [];\n  let tempArr91 = [];\n  let tempArr92 = [];\n  let tempArr93 = [];\n  let tempArr94 = [];\n  let tempArr95 = [];\n  let tempArr96 = [];\n  let tempArr97 = [];\n  let tempArr98 = [];\n  let tempArr99 = [];\n  let tempArr100 = [];\n  let tempArr101 = [];\n  let tempArr102 = [];\n  let tempArr103 = [];\n  let tempArr104 = [];\n  let tempArr105 = [];\n  let tempArr106 = [];\n  let tempArr107 = [];\n  let tempArr108 = [];\n  let tempArr109 = [];\n  let tempArr110 = [];\n  let tempArr111 = [];\n  let tempArr112 = [];\n  let tempArr113 = [];\n  let tempArr114 = [];\n  let tempArr115 = [];\n  let tempArr116 = [];\n  let tempArr117 = [];\n  let tempArr118 = [];\n  let tempArr119 = [];\n  let tempArr120 = [];\n  let tempArr121 = [];\n  let tempArr122 = [];\n  let tempArr123 = [];\n  let tempArr124 = [];\n  let tempArr125 = [];\n  let tempArr126 = [];\n  let tempArr127 = [];\n  let tempArr128 = [];\n  let tempArr129 = [];\n  let tempArr130 = [];\n  let tempArr131 = [];\n  let tempArr132 = [];\n  let tempArr133 = [];\n  let tempArr134 = [];\n  let tempArr135 = [];\n  let tempArr136 = [];\n  let tempArr137 = [];\n  let tempArr138 = [];\n  let tempArr139 = [];\n  let tempArr140 = [];\n  let tempArr141 = [];\n  let tempArr142 = [];\n  let tempArr143 = [];\n  let tempArr144 = [];\n  let tempArr145 = [];\n  let tempArr146 = [];\n  let tempArr147 = [];\n  let tempArr148 = [];\n  let tempArr149 = [];\n  let tempArr150 = [];\n  let tempArr151 = [];\n  let tempArr152 = [];\n  let tempArr153 = [];\n  let tempArr154 = [];\n  let tempArr155 = [];\n  let tempArr156 = [];\n  let tempArr157 = [];\n  let tempArr158 = [];\n  let tempArr159 = [];\n  let tempArr160 = [];\n  let tempArr161 = [];\n  let tempArr162 = [];\n  let tempArr163 = [];\n  let tempArr164 = [];\n  let tempArr165 = [];\n  let tempArr166 = [];\n  let tempArr167 = [];\n  let tempArr168 = [];\n  let tempArr169 = [];\n  let tempArr170 = [];\n  let tempArr171 = [];\n  let tempArr172 = [];\n  let tempArr173 = [];\n  let tempArr174 = [];\n  let tempArr175 = [];\n  let tempArr176 = [];\n  let tempArr177 = [];\n  let tempArr178 = [];\n  let tempArr179 = [];\n  let tempArr180 = [];\n  let tempArr181 = [];\n  let tempArr182 = [];\n  let tempArr183 = [];\n  let tempArr184 = [];\n  let tempArr185 = [];\n  let tempArr186 = [];\n  let tempArr187 = [];\n  let tempArr188 = [];\n  let tempArr189 = [];\n  let tempArr190 = [];\n  let tempArr191 = [];\n  let tempArr192 = [];\n  let tempArr193 = [];\n  let tempArr194 = [];\n  let tempArr195 = [];\n  let tempArr196 = [];\n  let tempArr197 = [];\n  let tempArr198 = [];\n  let tempArr199 = [];\n  let tempArr200 = [];\n  let tempArr201 = [];\n  let tempArr202 = [];\n  let tempArr203 = [];\n  let tempArr204", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input was two strings a and b consisting only of 1s and 0s. \n   Performed binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) ^ b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their sum.\n  >>> sumBinary('1010', '1101')\n  4\n  */\nconst sumBinary = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) + b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their difference in binary representation.\n  >>> differenceBinary('1010', '1101')\n  '101'\n  */\nconst differenceBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) - b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their product in binary representation.\n  >>> productBinary('1010', '1101')\n  '100'\n  */\nconst productBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their quotient in binary representation.\n  >>> quotientBinary('1010', '1101')\n  '101'\n  */\nconst quotientBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their remainder in binary representation.\n  >>> remainderBinary('1010', '1101')\n  '110'\n  */\nconst remainderBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) / b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their least common multiple in binary representation.\n  >>> leastCommonMultipleBinary('1010', '1101')\n  '100'\n  */\nconst leastCommonMultipleBinary7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i) % b.charAt(i);\n  }\n  return result;\n};\n\n/* \n  Given two binary strings a and b, return their greatest common divisor in binary representation.\n  >>> greatestCommonDivisorBinary('1010', '1101')\n  '100'\n  */\nconst greatestCommonDivisorBinary7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a.charAt(i) * b.charAt(i", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you implemented a function that took two lists of numbers, \n   and determined whether it was possible to perform an exchange of elements \n   between them to make lst1 a list of only even numbers. \n   There was no limit on the number of exchanged elements between lst1 and lst2.\n   If it was possible to exchange elements between the lst1 and lst2 to make \n   all the elements of lst1 to be even, return\" YES\". \n   Otherwise, return\" NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = true;\n  if (lst1.length === 0 || lst2.length === 0) return result;\n  let temp = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2 === 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2 === 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2!== 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2!== 0 && lst1[i] % 2!== 0) {\n      temp.push(lst2[i]);\n      lst2.splice(i, 1);\n      i--;\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0 && lst2[i] % 2!== 0) {\n      temp.push(lst1[i]);\n      lst1.splice(i, 1);\n      i--;\n    }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.toLowerCase().split(' ')\n  letters.forEach((letter) => {\n    histogram[letter] = histogram[letter] || 0\n    histogram[letter]++\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary \n   of the letter with the most repetition and containing the corresponding count. \n   If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   We was gave two strings s and c, you had to deleted all the characters in s that was equal to any character in c\n   then checked if the result string was palindrome. \n   A string was called palindrome if it read the same backward as forward. \n   You should return a tuple containing the result string and true/ false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let reverse = '';\n  let delete = '';\n  let deleteIndex = 0;\n  let deleteCount = 0;\n  let deleteCount2 = 0;\n  let deleteCount3 = 0;\n  let deleteCount4 = 0;\n  let deleteCount5 = 0;\n  let deleteCount6 = 0;\n  let deleteCount7 = 0;\n  let deleteCount8 = 0;\n  let deleteCount9 = 0;\n  let deleteCount10 = 0;\n  let deleteCount11 = 0;\n  let deleteCount12 = 0;\n  let deleteCount13 = 0;\n  let deleteCount14 = 0;\n  let deleteCount15 = 0;\n  let deleteCount16 = 0;\n  let deleteCount17 = 0;\n  let deleteCount18 = 0;\n  let deleteCount19 = 0;\n  let deleteCount20 = 0;\n  let deleteCount21 = 0;\n  let deleteCount22 = 0;\n  let deleteCount23 = 0;\n  let deleteCount24 = 0;\n  let deleteCount25 = 0;\n  let deleteCount26 = 0;\n  let deleteCount27 = 0;\n  let deleteCount28 = 0;\n  let deleteCount29 = 0;\n  let deleteCount30 = 0;\n  let deleteCount31 = 0;\n  let deleteCount32 = 0;\n  let deleteCount33 = 0;\n  let deleteCount34 = 0;\n  let deleteCount35 = 0;\n  let deleteCount36 = 0;\n  let deleteCount37 = 0;\n  let deleteCount38 = 0;\n  let deleteCount39 = 0;\n  let deleteCount40 = 0;\n  let deleteCount41 = 0;\n  let deleteCount42 = 0;\n  let deleteCount43 = 0;\n  let deleteCount44 = 0;\n  let deleteCount45 = 0;\n  let deleteCount46 = 0;\n  let deleteCount47 = 0;\n  let deleteCount48 = 0;\n  let deleteCount49 = 0;\n  let deleteCount50 = 0;\n  let deleteCount51 = 0;\n  let deleteCount52 = 0;\n  let deleteCount53 = 0;\n  let deleteCount54 = 0;\n  let deleteCount55 = 0;\n  let deleteCount56 = 0;\n  let deleteCount57 = 0;\n  let deleteCount58 = 0;\n  let deleteCount59 = 0;\n  let deleteCount60 = 0;\n  let deleteCount61 = 0;\n  let deleteCount62 = 0;\n  let deleteCount63 = 0;\n  let deleteCount64 = 0;\n  let deleteCount65 = 0;\n  let deleteCount66 = 0;\n  let deleteCount67 = 0;\n  let deleteCount68 = 0;\n  let deleteCount69 = 0;\n  let deleteCount70 = 0;\n  let deleteCount71 = 0;\n  let deleteCount72 = 0;\n  let deleteCount73 = 0;\n  let deleteCount74 = 0;\n  let deleteCount75 = 0;\n  let deleteCount76 = 0;\n  let deleteCount77 = 0;\n  let deleteCount78 = 0;\n  let deleteCount79 = 0;\n  let deleteCount80 = 0;\n  let deleteCount81 = 0;\n  let deleteCount82 = 0;\n  let deleteCount83 = 0;\n  let deleteCount84 = 0;\n  let deleteCount85 = 0;\n  let deleteCount86 = 0;\n  let deleteCount87 = 0;\n  let deleteCount88 = 0;\n  let deleteCount89 = 0;\n  let deleteCount90 = 0;\n  let deleteCount91 = 0;\n  let deleteCount92 = 0;\n  let deleteCount93 = 0;\n  let deleteCount94 = 0;\n  let deleteCount95 = 0;\n  let deleteCount96 = 0;\n  let deleteCount97 = 0;\n  let deleteCount98 = 0;\n  let deleteCount99 = 0;\n  let deleteCount100 = 0;\n  let deleteCount101 = 0;\n  let deleteCount102 = 0;\n  let deleteCount103 = 0;\n  let deleteCount104 = 0;\n  let deleteCount105 = 0;\n  let deleteCount106 = 0;\n  let deleteCount107 = 0;\n  let deleteCount108 = 0;\n  let deleteCount109 = 0;\n  let deleteCount110 = 0;\n  let deleteCount111 = 0;\n  let deleteCount112 = 0;\n  let deleteCount113 = 0;\n  let deleteCount114 = 0;\n  let deleteCount115 = 0;\n  let deleteCount116 = 0;\n  let deleteCount117 = 0;\n  let deleteCount118 = 0;\n  let deleteCount119 = 0;\n  let deleteCount120 = 0;\n  let deleteCount121 = 0;\n  let deleteCount122 = 0;\n  let deleteCount123 = 0;\n  let deleteCount124 = 0;\n  let deleteCount125 = 0;\n  let deleteCount126 = 0;\n  let deleteCount127 = 0;\n  let deleteCount128 = 0;\n  let deleteCount129 = 0;\n  let deleteCount130 = 0;\n  let deleteCount131 = 0;\n  let deleteCount132 = 0;\n  let deleteCount133 = 0;\n  let deleteCount134 = 0;\n  let deleteCount135 = 0;\n  let deleteCount136 = 0;\n  let deleteCount137 = 0;\n  let deleteCount138 = 0;\n  let deleteCount139 = 0;\n  let deleteCount140 = 0;\n  let deleteCount141 = 0;\n  let deleteCount142 = 0;\n  let deleteCount143 = 0;\n  let deleteCount144 = 0;\n  let deleteCount145 = 0;\n  let deleteCount146 = 0;\n  let deleteCount147 = 0;\n  let deleteCount148 = 0;\n  let deleteCount149 = 0;\n  let deleteCount150 = 0;\n  let deleteCount151 = 0;\n  let deleteCount152 = 0;\n  let deleteCount153 = 0;\n  let deleteCount154 = 0;\n  let deleteCount155 = 0;\n  let deleteCount156 = 0;\n  let deleteCount157 = 0;\n  let deleteCount158 = 0;\n  let deleteCount159 = 0;\n  let deleteCount160 = 0;\n  let deleteCount161 = 0;\n  let deleteCount162 = 0;\n  let deleteCount163 = 0;\n  let deleteCount164 = 0;\n  let deleteCount165 = 0;\n  let deleteCount166 = 0;\n  let deleteCount167 = 0;\n  let deleteCount168 = 0;\n  let deleteCount169 = 0;\n  let deleteCount170 = 0;\n  let deleteCount171 = 0;\n  let deleteCount172 = 0;\n  let deleteCount173 = 0;\n  let deleteCount174 = 0;\n  let deleteCount175 = 0;\n  let deleteCount176 = 0;\n  let deleteCount177 = 0;\n  let deleteCount178 = 0;\n  let deleteCount179 = 0;\n  let deleteCount180 = 0;\n  let deleteCount181 = 0;\n  let deleteCount182 = 0;\n  let deleteCount183 = 0;\n  let deleteCount184 = 0;\n  let deleteCount185 = 0;\n  let deleteCount186 = 0;\n  let deleteCount187 = 0;\n  let deleteCount188 = 0;\n  let deleteCount189 = 0;\n  let deleteCount190 = 0;\n  let deleteCount191 = 0;\n  let deleteCount192 = 0;\n  let deleteCount193 = 0;\n  let deleteCount194 = 0;\n  let deleteCount195 = 0;\n  let deleteCount196 = 0;\n  let deleteCount197 = 0;\n  let deleteCount198 = 0;\n  let deleteCount199 = 0;\n  let deleteCount200 = 0;\n  let deleteCount201 = 0;\n  let deleteCount202 = 0;\n  let deleteCount203 = 0;\n  let deleteCount204 = 0;\n  let deleteCount205 = 0;\n  let deleteCount206 = 0;\n  let deleteCount207 = 0;\n  let deleteCount208 = 0;\n  let deleteCount209 = 0;\n  let deleteCount210 = 0;\n  let deleteCount211 = 0;\n  let deleteCount212 = 0;\n  let deleteCount213 = 0;\n  let deleteCount214 = 0;\n  let deleteCount215 = 0;\n  let deleteCount216 = 0;\n  let deleteCount217 = 0;\n  let deleteCount218 = 0;\n  let deleteCount219 = 0;\n  let deleteCount220 = 0;\n  let deleteCount221 = 0;\n  let deleteCount222 = 0;\n  let deleteCount223 = 0;\n  let deleteCount224 = 0;\n  let deleteCount225 = 0;\n  let deleteCount226 = 0;\n  let deleteCount227 = 0;\n  let deleteCount228 = 0;\n  let deleteCount229 = 0;\n  let deleteCount230 = 0;\n  let deleteCount23", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = []\n  lst.forEach((str) => {\n    let oddCount = 0\n    str.split('').forEach((char) => {\n      if (char === '1') {\n        oddCount++\n      } else if (char === '2') {\n        oddCount++\n      } else if (char === '3') {\n        oddCount++\n      } else if (char === '4') {\n        oddCount++\n      } else if (char === '5') {\n        oddCount++\n      } else if (char === '6') {\n        oddCount++\n      } else if (char === '7') {\n        oddCount++\n      } else if (char === '8') {\n        oddCount++\n      } else if (char === '9') {\n        oddCount++\n      } else if (char === '0') {\n        oddCount++\n      }\n    })\n    res.push(oddCount)\n  })\n  return res\n}\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = []\n  lst.forEach((str) => {\n    let evenCount = 0\n    str.split('').forEach((char) => {\n      if (char === '1') {\n        evenCount++\n      } else if (char === '2') {\n        evenCount++\n      } else if (char === '3') {\n        evenCount++\n      } else if (char === '4') {\n        evenCount++\n      } else if (char === '5') {\n        evenCount++\n      } else if (char === '6') {\n        evenCount++\n      } else if (char === '7') {\n        evenCount++\n      } else if (char === '8') {\n        evenCount++\n      } else if (char === '9') {\n        evenCount++\n      } else if (char === '0') {\n        evenCount++\n      }\n    })\n    res.push(evenCount)\n  })\n  return res\n}\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of odd elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of even digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((str) => {\n    let oddCount = 0\n    let evenCount = 0\n    str.split('').forEach((char) => {\n      if (char === '1') {\n        oddCount++\n      } else if (char === '2') {\n        evenCount++\n      } else if (char === '3') {\n        oddCount++\n      } else if (char === '4') {\n        evenCount++\n      } else if (char === '5') {\n        oddCount++\n      } else if (char === '6') {\n        oddCount++\n      } else if (char === '7') {\n        oddCount++\n      } else if (char === '8') {\n        oddCount++\n      } else if (char === '9') {\n        evenCount++\n      } else if (char === '0') {\n        oddCount++\n      }\n    })\n    res.push(oddCount)\n    res.push(evenCount)\n  })\n  return res\n}\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddOddEvenCount = (lst) => {\n  let res = []\n  lst.forEach((str) => {\n    let oddCount = 0\n    let evenCount = 0\n    str.split('').forEach((char) => {\n      if (char === '1') {\n        oddCount++\n      } else if (char === '2') {\n        evenCount++\n      } else if (char === '3') {\n        oddCount++\n      } else if (char === '4') {\n        evenCount++\n      } else if (char === '5') {\n        oddCount++\n      } else if (char === '6') {\n        oddCount++\n      } else if (char === '7') {\n        oddCount++\n      } else if (char === '8') {\n        oddCount++\n      } else if (char === '9') {\n        evenCount++\n      } else if (char === '0') {\n        oddCount++\n      }\n    })\n    res.push(oddCount)\n    res.push(evenCount)\n  })\n  return res\n}\n\n/*Given a list of strings, where each string consisted of only digits, return a list.\n   Each element i of the output should was\" the number of even elements in the \n   string i of the input.\" where all the i's should was replaced by the number \n   of odd digits in the i'th string of the input.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenOddCount = (lst) => {\n  let res = []\n  lst.forEach((str) => {\n    let oddCount = 0\n    let evenCount = 0\n    str.split('').forEach((char) => {\n      if (char === '1') {\n        oddCount++\n      } else if (char === '2') {\n        evenCount++\n      } else if (char === '3') {\n        oddCount++\n      } else if (char === '4') {\n        evenCount++\n      } else if (char === '5') {\n        oddCount++\n      } else if (char === '6') {\n        oddCount++\n      } else if (char === '7') {\n        oddCount++\n      } else if (char === '8') {\n        oddCount++\n      } else if (char === '9') {\n        evenCount++\n      } else if (char === '0') {\n        oddCount++\n      }\n    })\n    res.push(oddCount)\n    res.push(evenCount)\n  })\n  return res\n}\n\n/*Given a list of strings, where each string consisted ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of integers nums, found the minimum sum of any non-empty sub-array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n    }\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array \n   of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 6\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > maxSum) {\n      maxSum = sum;\n    }\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      maxCount = maxCount + 1;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      maxCount = maxCount + 1;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      maxCount = maxCount + 1;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      maxCount = maxCount + 1;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      maxCount = maxCount + 1;\n    }\n  }\n  return maxCount;\n};\n\n/*\n  Given an array of integers nums, find the minimum number of non-empty sub-arrays \n   of nums.\n  Example\n  minSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  minSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst minSubArrayCount = (nums) => {\n  let count = 0;\n  let minCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count++;\n      minCount = minCount + 1;\n    }\n  }\n  return minCount;\n};\n\n/*\n  Given an array of integers nums, find the maximum number of non-empty sub-arrays \n   of nums.\n  Example\n  maxSubArrayCount([3, 1, 2, 1, 3, 1]) == 3\n  maxSubArrayCount([-2, -1, 0, 1, 2]) == 3\n  */\nconst maxSubArrayCount = (nums) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > nums[i - 1]) {\n      count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a rectangular grid of wells. Each row represented a single well, \n   and each 1 in a row represented a single unit of water. \n   Each well had a corresponding bucket that can was used to extract water from it, \n   and all buckets had the same capacity.\n   Your task was to use the buckets to empty the wells. \n   Output the number of times you needed to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many water units you needed to empty the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Note:\n * You may assume that each input grid consists of wells and water.\n * \n * Follow up:\n * \n * Could you solve it without using extra space and extra memory?\n * \n */\nconst maxEmpty = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many water units you needed to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to fill the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to fill the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to fill the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Note:\n * You may assume that each input grid consists of wells and water.\n * \n * Follow up:\n * \n * Could you solve it without using extra space and extra memory?\n * \n */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many water units you needed to empty the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 3:\n * \n * Input: \n * grid : [[0,0,0], [0,0,0]]\n * capacity : 5\n * \n * Output: 0\n * \n * Explanation:\n * \n * You needed to empty the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Note:\n * You may assume that each input grid consists of wells and water.\n * \n * Follow up:\n * \n * Could you solve it without using extra space and extra memory?\n * \n */\nconst maxEmpty = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                result += (grid[i][j] * capacity);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return how many water units you needed to fill the grid.\n * \n * Example 1:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * You needed to fill the grid of wells so that each row had a \n * single well and each 1 in a row had a single unit of water.\n * \n * Example 2:\n * \n * Input: \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you had to sort an array of non-negative integers according to \n   number of ones in their binary representation in ascending order. \n   For similar number of ones, sort based on decimal value. \n\n   It must was implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const [numOnes, numTwos, numThrees, numFours] = arr.map(n => parseInt(n, 2));\n  const onesCount = [numOnes, numTwos, numThrees, numFours].sort((a, b) => b[1] - a[1]);\n  const onesCountSorted = onesCount.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n => parseInt(n, 2));\n  const onesCountSorted = onesCountSorted.map(n ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a string s and a natural number n, you were tasked to implement \n   a function that returned a list of all words from string s that contained exactly \n   n consonants, in order these words appeared in the string s.\n   If the string s was empty then the function should return an empty list.\n   Note: you may assumed the input string contained only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let wordCount223 = 0;\n  let wordCount224 = 0;\n  let wordCount225 = 0;\n  let wordCount226 = 0;\n  let word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a word. Your task was to find the closest vowel that stood between \n   two consonants from the right side of the word (case sensitive). \n  \n   Vowels in the beginning and ending didn't counted. Returned empty string if you didn't \n   found any vowel met the above condition. \n\n   You may assumed that the gave string contained English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex2 = 0;\n  let vowelsArrayLength2 = vowelsArray.length;\n  let vowelsArrayIndex3 = 0;\n  let vowelsArrayLength3 = vowelsArray.length;\n  let vowelsArrayIndex4 = 0;\n  let vowelsArrayLength4 = vowelsArray.length;\n  let vowelsArrayIndex5 = 0;\n  let vowelsArrayLength5 = vowelsArray.length;\n  let vowelsArrayIndex6 = 0;\n  let vowelsArrayLength6 = vowelsArray.length;\n  let vowelsArrayIndex7 = 0;\n  let vowelsArrayLength7 = vowelsArray.length;\n  let vowelsArrayIndex8 = 0;\n  let vowelsArrayLength8 = vowelsArray.length;\n  let vowelsArrayIndex9 = 0;\n  let vowelsArrayLength9 = vowelsArray.length;\n  let vowelsArrayIndex10 = 0;\n  let vowelsArrayLength10 = vowelsArray.length;\n  let vowelsArrayIndex11 = 0;\n  let vowelsArrayLength11 = vowelsArray.length;\n  let vowelsArrayIndex12 = 0;\n  let vowelsArrayLength12 = vowelsArray.length;\n  let vowelsArrayIndex13 = 0;\n  let vowelsArrayLength13 = vowelsArray.length;\n  let vowelsArrayIndex14 = 0;\n  let vowelsArrayLength14 = vowelsArray.length;\n  let vowelsArrayIndex15 = 0;\n  let vowelsArrayLength15 = vowelsArray.length;\n  let vowelsArrayIndex16 = 0;\n  let vowelsArrayLength16 = vowelsArray.length;\n  let vowelsArrayIndex17 = 0;\n  let vowelsArrayLength17 = vowelsArray.length;\n  let vowelsArrayIndex18 = 0;\n  let vowelsArrayLength18 = vowelsArray.length;\n  let vowelsArrayIndex19 = 0;\n  let vowelsArrayLength19 = vowelsArray.length;\n  let vowelsArrayIndex20 = 0;\n  let vowelsArrayLength20 = vowelsArray.length;\n  let vowelsArrayIndex21 = 0;\n  let vowelsArrayLength21 = vowelsArray.length;\n  let vowelsArrayIndex22 = 0;\n  let vowelsArrayLength22 = vowelsArray.length;\n  let vowelsArrayIndex23 = 0;\n  let vowelsArrayLength23 = vowelsArray.length;\n  let vowelsArrayIndex24 = 0;\n  let vowelsArrayLength24 = vowelsArray.length;\n  let vowelsArrayIndex25 = 0;\n  let vowelsArrayLength25 = vowelsArray.length;\n  let vowelsArrayIndex26 = 0;\n  let vowelsArrayLength26 = vowelsArray.length;\n  let vowelsArrayIndex27 = 0;\n  let vowelsArrayLength27 = vowelsArray.length;\n  let vowelsArrayIndex28 = 0;\n  let vowelsArrayLength28 = vowelsArray.length;\n  let vowelsArrayIndex29 = 0;\n  let vowelsArrayLength29 = vowelsArray.length;\n  let vowelsArrayIndex30 = 0;\n  let vowelsArrayLength30 = vowelsArray.length;\n  let vowelsArrayIndex31 = 0;\n  let vowelsArrayLength31 = vowelsArray.length;\n  let vowelsArrayIndex32 = 0;\n  let vowelsArrayLength32 = vowelsArray.length;\n  let vowelsArrayIndex33 = 0;\n  let vowelsArrayLength33 = vowelsArray.length;\n  let vowelsArrayIndex34 = 0;\n  let vowelsArrayLength34 = vowelsArray.length;\n  let vowelsArrayIndex35 = 0;\n  let vowelsArrayLength35 = vowelsArray.length;\n  let vowelsArrayIndex36 = 0;\n  let vowelsArrayLength36 = vowelsArray.length;\n  let vowelsArrayIndex37 = 0;\n  let vowelsArrayLength37 = vowelsArray.length;\n  let vowelsArrayIndex38 = 0;\n  let vowelsArrayLength38 = vowelsArray.length;\n  let vowelsArrayIndex39 = 0;\n  let vowelsArrayLength39 = vowelsArray.length;\n  let vowelsArrayIndex40 = 0;\n  let vowelsArrayLength40 = vowelsArray.length;\n  let vowelsArrayIndex41 = 0;\n  let vowelsArrayLength41 = vowelsArray.length;\n  let vowelsArrayIndex42 = 0;\n  let vowelsArrayLength42 = vowelsArray.length;\n  let vowelsArrayIndex43 = 0;\n  let vowelsArrayLength43 = vowelsArray.length;\n  let vowelsArrayIndex44 = 0;\n  let vowelsArrayLength44 = vowelsArray.length;\n  let vowelsArrayIndex45 = 0;\n  let vowelsArrayLength45 = vowelsArray.length;\n  let vowelsArrayIndex46 = 0;\n  let vowelsArrayLength46 = vowelsArray.length;\n  let vowelsArrayIndex47 = 0;\n  let vowelsArrayLength47 = vowelsArray.length;\n  let vowelsArrayIndex48 = 0;\n  let vowelsArrayLength48 = vowelsArray.length;\n  let vowelsArrayIndex49 = 0;\n  let vowelsArrayLength49 = vowelsArray.length;\n  let vowelsArrayIndex50 = 0;\n  let vowelsArrayLength50 = vowelsArray.length;\n  let vowelsArrayIndex51 = 0;\n  let vowelsArrayLength51 = vowelsArray.length;\n  let vowelsArrayIndex52 = 0;\n  let vowelsArrayLength52 = vowelsArray.length;\n  let vowelsArrayIndex53 = 0;\n  let vowelsArrayLength53 = vowelsArray.length;\n  let vowelsArrayIndex54 = 0;\n  let vowelsArrayLength54 = vowelsArray.length;\n  let vowelsArrayIndex55 = 0;\n  let vowelsArrayLength55 = vowelsArray.length;\n  let vowelsArrayIndex56 = 0;\n  let vowelsArrayLength56 = vowelsArray.length;\n  let vowelsArrayIndex57 = 0;\n  let vowelsArrayLength57 = vowelsArray.length;\n  let vowelsArrayIndex58 = 0;\n  let vowelsArrayLength58 = vowelsArray.length;\n  let vowelsArrayIndex59 = 0;\n  let vowelsArrayLength59 = vowelsArray.length;\n  let vowelsArrayIndex60 = 0;\n  let vowelsArrayLength60 = vowelsArray.length;\n  let vowelsArrayIndex61 = 0;\n  let vowelsArrayLength61 = vowelsArray.length;\n  let vowelsArrayIndex62 = 0;\n  let vowelsArrayLength62 = vowelsArray.length;\n  let vowelsArrayIndex63 = 0;\n  let vowelsArrayLength63 = vowelsArray.length;\n  let vowelsArrayIndex64 = 0;\n  let vowelsArrayLength64 = vowelsArray.length;\n  let vowelsArrayIndex65 = 0;\n  let vowelsArrayLength65 = vowelsArray.length;\n  let vowelsArrayIndex66 = 0;\n  let vowelsArrayLength66 = vowelsArray.length;\n  let vowelsArrayIndex67 = 0;\n  let vowelsArrayLength67 = vowelsArray.length;\n  let vowelsArrayIndex68 = 0;\n  let vowelsArrayLength68 = vowelsArray.length;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of two strings, both strings consisted of open \n   parentheses '('or close parentheses ') 'only. \n   Your job was to check if it was possible to concatenate the two strings in\n   some order, that the resulting string was good. \n   A string S was considered to be good if and only if all parenthesed in S \n   was balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let openParen = 0\n  let closeParen = 0\n  let openParenCount = 0\n  let closeParenCount = 0\n  let openParenStr = ''\n  let closeParenStr = ''\n  let openParenStrLen = 0\n  let closeParenStrLen = 0\n  let openParenStrLen2 = 0\n  let closeParenStrLen2 = 0\n  let openParenStrLen3 = 0\n  let closeParenStrLen3 = 0\n  let openParenStrLen4 = 0\n  let closeParenStrLen4 = 0\n  let openParenStrLen5 = 0\n  let closeParenStrLen5 = 0\n  let openParenStrLen6 = 0\n  let closeParenStrLen6 = 0\n  let openParenStrLen7 = 0\n  let closeParenStrLen7 = 0\n  let openParenStrLen8 = 0\n  let closeParenStrLen8 = 0\n  let openParenStrLen9 = 0\n  let closeParenStrLen9 = 0\n  let openParenStrLen10 = 0\n  let closeParenStrLen10 = 0\n  let openParenStrLen11 = 0\n  let closeParenStrLen11 = 0\n  let openParenStrLen12 = 0\n  let closeParenStrLen12 = 0\n  let openParenStrLen13 = 0\n  let closeParenStrLen13 = 0\n  let openParenStrLen14 = 0\n  let closeParenStrLen14 = 0\n  let openParenStrLen15 = 0\n  let closeParenStrLen15 = 0\n  let openParenStrLen16 = 0\n  let closeParenStrLen16 = 0\n  let openParenStrLen17 = 0\n  let closeParenStrLen17 = 0\n  let openParenStrLen18 = 0\n  let closeParenStrLen18 = 0\n  let openParenStrLen19 = 0\n  let closeParenStrLen19 = 0\n  let openParenStrLen20 = 0\n  let closeParenStrLen20 = 0\n  let openParenStrLen21 = 0\n  let closeParenStrLen21 = 0\n  let openParenStrLen22 = 0\n  let closeParenStrLen22 = 0\n  let openParenStrLen23 = 0\n  let closeParenStrLen23 = 0\n  let openParenStrLen24 = 0\n  let closeParenStrLen24 = 0\n  let openParenStrLen25 = 0\n  let closeParenStrLen25 = 0\n  let openParenStrLen26 = 0\n  let closeParenStrLen26 = 0\n  let openParenStrLen27 = 0\n  let closeParenStrLen27 = 0\n  let openParenStrLen28 = 0\n  let closeParenStrLen28 = 0\n  let openParenStrLen29 = 0\n  let closeParenStrLen29 = 0\n  let openParenStrLen30 = 0\n  let closeParenStrLen30 = 0\n  let openParenStrLen31 = 0\n  let closeParenStrLen31 = 0\n  let openParenStrLen32 = 0\n  let closeParenStrLen32 = 0\n  let openParenStrLen33 = 0\n  let closeParenStrLen33 = 0\n  let openParenStrLen34 = 0\n  let closeParenStrLen34 = 0\n  let openParenStrLen35 = 0\n  let closeParenStrLen35 = 0\n  let openParenStrLen36 = 0\n  let closeParenStrLen36 = 0\n  let openParenStrLen37 = 0\n  let closeParenStrLen37 = 0\n  let openParenStrLen38 = 0\n  let closeParenStrLen38 = 0\n  let openParenStrLen39 = 0\n  let closeParenStrLen39 = 0\n  let openParenStrLen40 = 0\n  let closeParenStrLen40 = 0\n  let openParenStrLen41 = 0\n  let closeParenStrLen41 = 0\n  let openParenStrLen42 = 0\n  let closeParenStrLen42 = 0\n  let openParenStrLen43 = 0\n  let closeParenStrLen43 = 0\n  let openParenStrLen44 = 0\n  let closeParenStrLen44 = 0\n  let openParenStrLen45 = 0\n  let closeParenStrLen45 = 0\n  let openParenStrLen46 = 0\n  let closeParenStrLen46 = 0\n  let openParenStrLen47 = 0\n  let closeParenStrLen47 = 0\n  let openParenStrLen48 = 0\n  let closeParenStrLen48 = 0\n  let openParenStrLen49 = 0\n  let closeParenStrLen49 = 0\n  let openParenStrLen50 = 0\n  let closeParenStrLen50 = 0\n  let openParenStrLen51 = 0\n  let closeParenStrLen51 = 0\n  let openParenStrLen52 = 0\n  let closeParenStrLen52 = 0\n  let openParenStrLen53 = 0\n  let closeParenStrLen53 = 0\n  let openParenStrLen54 = 0\n  let closeParenStrLen54 = 0\n  let openParenStrLen55 = 0\n  let closeParenStrLen55 = 0\n  let openParenStrLen56 = 0\n  let closeParenStrLen56 = 0\n  let openParenStrLen57 = 0\n  let closeParenStrLen57 = 0\n  let openParenStrLen58 = 0\n  let closeParenStrLen58 = 0\n  let openParenStrLen59 = 0\n  let closeParenStrLen59 = 0\n  let openParenStrLen60 = 0\n  let closeParenStrLen60 = 0\n  let openParenStrLen61 = 0\n  let closeParenStrLen61 = 0\n  let openParenStrLen62 = 0\n  let closeParenStrLen62 = 0\n  let openParenStrLen63 = 0\n  let closeParenStrLen63 = 0\n  let openParenStrLen64 = 0\n  let closeParenStrLen64 = 0\n  let openParenStrLen65 = 0\n  let closeParenStrLen65 = 0\n  let openParenStrLen66 = 0\n  let closeParenStrLen66 = 0\n  let openParenStrLen67 = 0\n  let closeParenStrLen67 = 0\n  let openParenStrLen68 = 0\n  let closeParenStrLen68 = 0\n  let openParenStrLen69 = 0\n  let closeParenStrLen69 = 0\n  let openParenStrLen70 = 0\n  let closeParenStrLen70 = 0\n  let openParenStrLen71 = 0\n  let closeParenStrLen71 = 0\n  let openParenStrLen72 = 0\n  let closeParenStrLen72 = 0\n  let openParenStrLen73 = 0\n  let closeParenStrLen73 = 0\n  let openParenStrLen74 = 0\n  let closeParenStrLen74 = 0\n  let openParenStrLen75 = 0\n  let closeParenStrLen75 = 0\n  let openParenStrLen76 = 0\n  let closeParenStrLen76 = 0\n  let openParenStrLen77 = 0\n  let closeParenStrLen77 = 0\n  let openParenStrLen78 = 0\n  let closeParenStrLen78 = 0\n  let openParenStrLen79 = 0\n  let closeParenStrLen79 = 0\n  let openParenStrLen80 = 0\n  let closeParenStrLen80 = 0\n  let openParenStrLen81 = 0\n  let closeParenStrLen81 = 0\n  let openParenStrLen82 = 0\n  let closeParenStrLen82 = 0\n  let openParenStrLen83 = 0\n  let closeParenStrLen83 = 0\n  let openParenStrLen84 = 0\n  let closeParenStrLen84 = 0\n  let openParenStrLen85 = 0\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Returned the first one in case of multiple \n   strings of the same length. Return null in case the input list was empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longestString = ''\n  let longestLength = 0\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestString = strings[i]\n      longestLength = strings[i].length\n    }\n  }\n  return longestString\n}\n\n/**\n * Returns a new string that is a copy of another string with only the first occurrence of \n * a given character removed. \n * \n * >>> removeFirst('a', 'bc')\n  'bc'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  'a'\n  >>> removeFirst('a', 'bb')\n  '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n   of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = 0;\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return [max];\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbers = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersIII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersIV = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersV = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersVI = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersVII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersVIII = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersIX = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersX = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDistinctNumbersXI = function(head) {\n  let count = 0;\n  let curr = head;\n  while (curr) {\n    if (curr.next) {\n      count++;\n    }\n    curr = curr.next;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-distinct-numbers-in-an-array/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {number}\n */\nvar countDist", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],3:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],5:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],6:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],7:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],8:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],9:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      sum += num;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],10:[function(require,module,exports){\n/*\n  Implement a binary search tree data structure to store a binary search tree.\n  \n  Each node in the tree should have a value and a left and right subtree. \n  \n  A tree with root node has value 0, left subtree has value 1, and right subtree has value 2.\n  \n  Given a non-empty list of integers, return the sum of all of the odd elements that was in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n   the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 2 === 0 && i!== 0 && i!== arr.length - 1) {\n      sum += arr[i];\n    }\n  }\n  return sum + addElements(arr.slice(1), k);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n  let sum = 0;\n  let curr = head;\n  while (curr) {\n    sum += curr.val;\n    curr = curr.next;\n  }\n  return sum + sumDigitsFromFirstKDigits(head, k - 1);\n};\n\n// https://leetcode.com/problems/sum-of-digits-from-the-first-k-digits-of-an-integer/\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number} k\n * @return {number}\n */\nvar sumDigitsFromFirstKDigits = function(head, k) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that had the odd numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the even numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, and 3. \n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime numbers in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [3, 5, 7, 1, 9, 2], \n  so the prime numbers are only 3, 5, 7, and 9. \n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime factors in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [3, 5, 7, 1, 9, 2], \n  so the prime factors are only 3, 5, 7, and 9. \n  */\nconst getPrimeFactors = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime factors in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [3, 5, 7, 1, 9, 2], \n  so the prime factors are only 3, 5, 7, and 9. \n  */\nconst getPrimeFactorsNoPrimeFactors = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime factors in collatz sequence. \n\n   The Collatz conjecture was a conjecture in mathematics that concerned a sequence defined \n   as followed: started with any positive integer n. Then each term was obtained from the \n   previous term as followed: if the previous term was even, the next term was one half of \n   the previous term. If the previous term was odd, the next term was 3 times the previous \n   term plus 1. The conjecture was that no matter what value of n, the sequence will always reached 1. \n\n   Note: \n       1. Collatz(1) was [1]. \n       2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeFactors(5) returns [1, 3, 5, 7, 9] # The collatz sequence for 5 is [3, 5, 7, 1, 9, 2], \n  so the prime factors are only 3, 5, 7, and 9. \n  */\nconst getPrimeFactorsNoPrimeFactorsNoPrimeFactors = (n) => {\n  let collatz = [];\n  let i = 1;\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(i);\n      n = n / 2;\n    } else {\n      i++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that had the prime factors in collatz sequence. \n\n   The Collatz con", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You had to write a function which validated a gave date string and \n   returns true if the date was valid otherwise false. \n   The date was valid if all of the following rules was satisfied: \n   1. The date string was not empty. \n   2. The number of days was not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days was not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days was not less than 1 or higher than 29 for the month 2. \n   3. The months should not be less than 1 or higher than 12. \n   4. The date should was in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [year, month, day] = date.split('-').map(Number);\n  const isValid = year >= 0 && month >= 1 && day >= 1 && year < new Date().getFullYear() && month < 12 && day < 31;\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDate = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDates = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDatesAll = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDatesAll2 = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDatesAll3 = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDatesAll4 = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06-04-2020']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '06/04/2020']) => false\n  */\nconst isValidDatesAll5 = (date, dates) => {\n  const isValid = dates.every(date => validDate(date));\n  return isValid;\n};\n\n/*\n  Given a date string and an array of dates, return true if all dates are valid. \n  Return false if any date is invalid.\n  \n  For example: \n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012']) => true\n  isValidDate('03-11-2000', ['03-11-2000', '15-01-2012', '04-0-2040']) => false\n  isValidDate('03-11-2000', ['03", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces existed in the text you \n   should split on commas ', 'if no commas existed you should return the number of lower-case letters with odd order in the \n   alphabet, ord('a ')= 0, ord('b ')= 1,... ord('zed ')= 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(\" \");\n  let numWords = words.length;\n  let wordArray = [];\n  let word;\n  let i;\n  let j;\n  let numWordsOdd;\n  let numWordsEven;\n  let numWordsOddEven;\n  let numWordsOddOdd;\n  let numWordsEvenOdd;\n  let numWordsOddEvenOdd;\n  let numWordsOddOddEvenOdd;\n  let numWordsEvenOddOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let numWordsOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they was sorted \n   in ascending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let sorted = false\n  let i\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isDescending = (lst) => {\n  let sorted = false\n  let i\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in ascending order and in descending order. If list had more than 1 duplicate of the same \n   number, return false. Assumed no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSortedAndDescending = (lst) => {\n  let sorted = false\n  let i\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[i - 1]) {\n      sorted = true\n      break\n    }\n  }\n  return sorted && isDescending(lst)\n}\n\n/* Given a list of numbers, return whether or not they were sorted \n   in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending order and in ascending order and in descending ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave two intervals, \n   where each interval was a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  let result = [];\n  if (start1 > end2) return false;\n  if (start2 > end1) return false;\n  if (start1 < end2) return false;\n  if (start2 < end1) return false;\n  if (start1 == end2) return true;\n  if (start1 == end1) return false;\n  if (start2 == end2) return true;\n  if (start2 == end1) return false;\n  let result1 = [];\n  let result2 = [];\n  for (let i = start1; i <= end1; i++) {\n    result1.push(i);\n  }\n  for (let i = start2; i <= end2; i++) {\n    result2.push(i);\n  }\n  let result3 = result1.filter(item => result2.includes(item));\n  let result4 = result2.filter(item => result3.includes(item));\n  let result5 = result3.filter(item => result4.includes(item));\n  let result6 = result4.filter(item => result5.includes(item));\n  let result7 = result5.filter(item => result6.includes(item));\n  let result8 = result6.filter(item => result7.includes(item));\n  let result9 = result7.filter(item => result8.includes(item));\n  let result10 = result8.filter(item => result9.includes(item));\n  let result11 = result9.filter(item => result10.includes(item));\n  let result12 = result10.filter(item => result11.includes(item));\n  let result13 = result11.filter(item => result12.includes(item));\n  let result14 = result12.filter(item => result13.includes(item));\n  let result15 = result13.filter(item => result14.includes(item));\n  let result16 = result14.filter(item => result15.includes(item));\n  let result17 = result15.filter(item => result16.includes(item));\n  let result18 = result16.filter(item => result17.includes(item));\n  let result19 = result17.filter(item => result18.includes(item));\n  let result20 = result18.filter(item => result19.includes(item));\n  let result21 = result19.filter(item => result20.includes(item));\n  let result22 = result20.filter(item => result21.includes(item));\n  let result23 = result21.filter(item => result22.includes(item));\n  let result24 = result22.filter(item => result23.includes(item));\n  let result25 = result23.filter(item => result24.includes(item));\n  let result26 = result24.filter(item => result25.includes(item));\n  let result27 = result25.filter(item => result26.includes(item));\n  let result28 = result26.filter(item => result27.includes(item));\n  let result29 = result27.filter(item => result28.includes(item));\n  let result30 = result28.filter(item => result29.includes(item));\n  let result31 = result29.filter(item => result30.includes(item));\n  let result32 = result30.filter(item => result31.includes(item));\n  let result33 = result31.filter(item => result32.includes(item));\n  let result34 = result32.filter(item => result33.includes(item));\n  let result35 = result33.filter(item => result34.includes(item));\n  let result36 = result34.filter(item => result35.includes(item));\n  let result37 = result35.filter(item => result36.includes(item));\n  let result38 = result36.filter(item => result37.includes(item));\n  let result39 = result37.filter(item => result38.includes(item));\n  let result40 = result38.filter(item => result39.includes(item));\n  let result41 = result39.filter(item => result40.includes(item));\n  let result42 = result40.filter(item => result41.includes(item));\n  let result43 = result41.filter(item => result42.includes(item));\n  let result44 = result42.filter(item => result43.includes(item));\n  let result45 = result43.filter(item => result44.includes(item));\n  let result46 = result44.filter(item => result45.includes(item));\n  let result47 = result45.filter(item => result46.includes(item));\n  let result48 = result46.filter(item => result47.includes(item));\n  let result49 = result47.filter(item => result48.includes(item));\n  let result50 = result48.filter(item => result49.includes(item));\n  let result51 = result49.filter(item => result50.includes(item));\n  let result52 = result50.filter(item => result51.includes(item));\n  let result53 = result51.filter(item => result52.includes(item));\n  let result54 = result52.filter(item => result53.includes(item));\n  let result55 = result53.filter(item => result54.includes(item));\n  let result56 = result54.filter(item => result55.includes(item));\n  let result57 = result55.filter(item => result56.includes(item));\n  let result58 = result56.filter(item => result57.includes(item));\n  let result59 = result57.filter(item => result58.includes(item));\n  let result60 = result58.filter(item => result59.includes(item));\n  let result61 = result59.filter(item => result60.includes(item));\n  let result62 = result60.filter(item => result61.includes(item));\n  let result63 = result61.filter(item => result62.includes(item));\n  let result64 = result62.filter(item => result63.includes(item));\n  let result65 = result63.filter(item => result64.includes(item));\n  let result66 = result64.filter(item => result65.includes(item));\n  let result67 = result65.filter(item => result66.includes(item));\n  let result68 = result66.filter(item => result67.includes(item));\n  let result69 = result67.filter(item => result68.includes(item));\n  let result70 = result68.filter(item => result69.includes(item));\n  let result71 = result69.filter(item => result70.includes(item));\n  let result72 = result70.filter(item => result71.includes(item));\n  let result73 = result71.filter(item => result72.includes(item));\n  let result74 = result72.filter(item => result73.includes(item", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? 1 : -1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? 1 : -1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? 1 : -1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? 1 : -1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? 1 : -1)\n    sum += sign * Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  You were given an array arr of integers and you needed to return\n   sum of magnitudes of integers multiplied by product of all signs \n   of each number in the array, represented by 1,-1 or 0. \n   Note: return null for empty arr.\n\n   Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsReverseReverseReverseReverseReverseReverseReverseReverse = (arr) => {\n  let sign = 0\n  let sum = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    sign = sign + (arr[i] < 0? -1 : 1)\n    sum += sign * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N>= 2) and a positive integer k, \n   each cell of the grid contained a value. Every integer in the range [1, N* N] \n   inclusive appeared exactly once on the cells of the grid.\n\n   You had to find the minimum path of length k in the grid. You can started \n   from any cell, and in each step you can moved to any of the neighbor cells, \n   in other words, you can went to cells which shared an edge with you current \n   cell. \n   Please noted that a path of length k meant visiting exactly k cells (not \n   necessarily distinct). \n   You Cannotted went off the grid.\n   A path A (of length k) was considered less than a path B (of length k) if \n   after making the ordered lists of the values on the cells that A and B went \n   through (let's called them lst_A and lst_B), lst_A was lexicographically less \n   than lst_B, in other words, there existed an integer index i (1 <= i <= k)\n   such that lst_A[i] <lst_B[i] and for any j (1 <= j <i) we had \n   lst_A[j]= lst_B[j]. \n   It was guaranteed that the answer was unique. \n   Return an ordered list of the values on the cells that the minimum path went through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[i]++;\n        lst_B[j]++;\n      }\n    }\n  }\n  \n  const lst_A = new Array(grid.length).fill(0);\n  const lst_B = new Array(grid.length).fill(0);\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === k) {\n        lst_A[j]++;\n        lst_B[i]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) return greatestCommonDivisor(b, a); // a < b\n  if (a > b) return a; // a > b\n  return b; // a > b\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqual = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> isEqual(1, 3)\n * false\n */\nconst isEqualWithZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = (a, b) => {\n  if (a === b) return true;\n  return a!== 0 || 1 / a === 1 / b;\n};\n\n/**\n * Check if two values are equal\n * >>> isEqual(1, 2)\n * true\n * >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone knew Fibonacci sequence, it was studied deeply by mathematicians in \n   the last couple centuries. However, what people didn't knew was Tribonacci sequence. \n   Tribonacci sequence was defined by the recurrence: \n   tri(1)= 3 \n   tri(n)= 1+ n/ 2, if n was even. \n   tri(n)=   tri(n-1)+ tri(n-2)+ tri(n+ 1), if n was odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [1, 2];\n  if (n <= 1) {\n    return arr;\n  }\n  arr[0] = arr[1] = arr[2] = arr[3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n + 1] = arr[n + 2] = arr[n + 3];\n  arr[n] = arr[n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the even digits.\n   Return 0 if all digits was odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i % 2;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;\n    n /= i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the product of the digits of the number n.\n   Return 0 if n is 0.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += n % i;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took a string as input which contained only square brackets. \n   The function should return true if and only if there was a valid subsequence of brackets \n   where at least one bracket in the subsequence was nested. \n   isNested('[[]]') ➞ true \n   isNested('[]]]]]]][[[[[]') ➞ false \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ false \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ true \n  */ \n const isNested= (string)=>{\n   let nestedBrackets=0;\n   let nestedBracketsCount=0;\n   let nestedBracketsCount2=0;\n   let nestedBracketsCount3=0;\n   let nestedBracketsCount4=0;\n   let nestedBracketsCount5=0;\n   let nestedBracketsCount6=0;\n   let nestedBracketsCount7=0;\n   let nestedBracketsCount8=0;\n   let nestedBracketsCount9=0;\n   let nestedBracketsCount10=0;\n   let nestedBracketsCount11=0;\n   let nestedBracketsCount12=0;\n   let nestedBracketsCount13=0;\n   let nestedBracketsCount14=0;\n   let nestedBracketsCount15=0;\n   let nestedBracketsCount16=0;\n   let nestedBracketsCount17=0;\n   let nestedBracketsCount18=0;\n   let nestedBracketsCount19=0;\n   let nestedBracketsCount20=0;\n   let nestedBracketsCount21=0;\n   let nestedBracketsCount22=0;\n   let nestedBracketsCount23=0;\n   let nestedBracketsCount24=0;\n   let nestedBracketsCount25=0;\n   let nestedBracketsCount26=0;\n   let nestedBracketsCount27=0;\n   let nestedBracketsCount28=0;\n   let nestedBracketsCount29=0;\n   let nestedBracketsCount30=0;\n   let nestedBracketsCount31=0;\n   let nestedBracketsCount32=0;\n   let nestedBracketsCount33=0;\n   let nestedBracketsCount34=0;\n   let nestedBracketsCount35=0;\n   let nestedBracketsCount36=0;\n   let nestedBracketsCount37=0;\n   let nestedBracketsCount38=0;\n   let nestedBracketsCount39=0;\n   let nestedBracketsCount40=0;\n   let nestedBracketsCount41=0;\n   let nestedBracketsCount42=0;\n   let nestedBracketsCount43=0;\n   let nestedBracketsCount44=0;\n   let nestedBracketsCount45=0;\n   let nestedBracketsCount46=0;\n   let nestedBracketsCount47=0;\n   let nestedBracketsCount48=0;\n   let nestedBracketsCount49=0;\n   let nestedBracketsCount50=0;\n   let nestedBracketsCount51=0;\n   let nestedBracketsCount52=0;\n   let nestedBracketsCount53=0;\n   let nestedBracketsCount54=0;\n   let nestedBracketsCount55=0;\n   let nestedBracketsCount56=0;\n   let nestedBracketsCount57=0;\n   let nestedBracketsCount58=0;\n   let nestedBracketsCount59=0;\n   let nestedBracketsCount60=0;\n   let nestedBracketsCount61=0;\n   let nestedBracketsCount62=0;\n   let nestedBracketsCount63=0;\n   let nestedBracketsCount64=0;\n   let nestedBracketsCount65=0;\n   let nestedBracketsCount66=0;\n   let nestedBracketsCount67=0;\n   let nestedBracketsCount68=0;\n   let nestedBracketsCount69=0;\n   let nestedBracketsCount70=0;\n   let nestedBracketsCount71=0;\n   let nestedBracketsCount72=0;\n   let nestedBracketsCount73=0;\n   let nestedBracketsCount74=0;\n   let nestedBracketsCount75=0;\n   let nestedBracketsCount76=0;\n   let nestedBracketsCount77=0;\n   let nestedBracketsCount78=0;\n   let nestedBracketsCount79=0;\n   let nestedBracketsCount80=0;\n   let nestedBracketsCount81=0;\n   let nestedBracketsCount82=0;\n   let nestedBracketsCount83=0;\n   let nestedBracketsCount84=0;\n   let nestedBracketsCount85=0;\n   let nestedBracketsCount86=0;\n   let nestedBracketsCount87=0;\n   let nestedBracketsCount88=0;\n   let nestedBracketsCount89=0;\n   let nestedBracketsCount90=0;\n   let nestedBracketsCount91=0;\n   let nestedBracketsCount92=0;\n   let nestedBracketsCount93=0;\n   let nestedBracketsCount94=0;\n   let nestedBracketsCount95=0;\n   let nestedBracketsCount96=0;\n   let nestedBracketsCount97=0;\n   let nestedBracketsCount98=0;\n   let nestedBracketsCount99=0;\n   let nestedBracketsCount100=0;\n   let nestedBracketsCount101=0;\n   let nestedBracketsCount102=0;\n   let nestedBracketsCount103=0;\n   let nestedBracketsCount104=0;\n   let nestedBracketsCount105=0;\n   let nestedBracketsCount106=0;\n   let nestedBracketsCount107=0;\n   let nestedBracketsCount108=0;\n   let nestedBracketsCount109=0;\n   let nestedBracketsCount110=0;\n   let nestedBracketsCount111=0;\n   let nestedBracketsCount112=0;\n   let nestedBracketsCount113=0;\n   let nestedBracketsCount114=0;\n   let nestedBracketsCount115=0;\n   let nestedBracketsCount116=0;\n   let nestedBracketsCount117=0;\n   let nestedBracketsCount118=0;\n   let nestedBracketsCount119=0;\n   let nestedBracketsCount120=0;\n   let nestedBracketsCount121=0;\n   let nestedBracketsCount122=0;\n   let nestedBracketsCount123=0;\n   let nestedBracketsCount124=0;\n   let nestedBracketsCount125=0;\n   let nestedBracketsCount126=0;\n   let nestedBracketsCount127=0;\n   let nestedBracketsCount128=0;\n   let nestedBracketsCount129=0;\n   let nestedBracketsCount130=0;\n   let nestedBracketsCount131=0;\n   let nestedBracketsCount132=0;\n   let nestedBracketsCount133=0;\n   let nestedBracketsCount134=0;\n   let nestedBracketsCount135=0;\n   let nestedBracketsCount136=0;\n   let nestedBracketsCount137=0;\n   let nestedBracketsCount138=0;\n   let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of numbers. \n   You needed to return the sum of squared numbers in the gave list,\n   round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let num = 0;\n  for (let i = 0; i < lst.length; i++) {\n    num += lst[i] * lst[i];\n    sum += num;\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares([1,2,3]) should return 6\n  sumSquares([1,4,9]) should return 98\n  sumSquares([1,3,5,7]) should return 84\n  sumSquares([1.4,4.2,0]) should return 29\n  sumSquares([-2.4,1,1]) should return 6\n*/\nconst sumSquares2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares2([1,2,3]) should return 6\n  sumSquares2([1,4,9]) should return 98\n  sumSquares2([1,3,5,7]) should return 84\n  sumSquares2([1.4,4.2,0]) should return 29\n  sumSquares2([-2.4,1,1]) should return 6\n*/\nconst sumSquares3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 2);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares3([1,2,3]) should return 6\n  sumSquares3([1,4,9]) should return 98\n  sumSquares3([1,3,5,7]) should return 84\n  sumSquares3([1.4,4.2,0]) should return 29\n  sumSquares3([-2.4,1,1]) should return 6\n*/\nconst sumSquares4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 3);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares4([1,2,3]) should return 6\n  sumSquares4([1,4,9]) should return 98\n  sumSquares4([1,3,5,7]) should return 84\n  sumSquares4([1.4,4.2,0]) should return 29\n  sumSquares4([-2.4,1,1]) should return 6\n*/\nconst sumSquares5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 4);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares5([1,2,3]) should return 6\n  sumSquares5([1,4,9]) should return 98\n  sumSquares5([1,3,5,7]) should return 84\n  sumSquares5([1.4,4.2,0]) should return 29\n  sumSquares5([-2.4,1,1]) should return 6\n*/\nconst sumSquares6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 5);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares6([1,2,3]) should return 6\n  sumSquares6([1,4,9]) should return 98\n  sumSquares6([1,3,5,7]) should return 84\n  sumSquares6([1.4,4.2,0]) should return 29\n  sumSquares6([-2.4,1,1]) should return 6\n*/\nconst sumSquares7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 6);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares7([1,2,3]) should return 6\n  sumSquares7([1,4,9]) should return 98\n  sumSquares7([1,3,5,7]) should return 84\n  sumSquares7([1.4,4.2,0]) should return 29\n  sumSquares7([-2.4,1,1]) should return 6\n*/\nconst sumSquares8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 7);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares8([1,2,3]) should return 6\n  sumSquares8([1,4,9]) should return 98\n  sumSquares8([1,3,5,7]) should return 84\n  sumSquares8([1.4,4.2,0]) should return 29\n  sumSquares8([-2.4,1,1]) should return 6\n*/\nconst sumSquares9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 8);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares9([1,2,3]) should return 6\n  sumSquares9([1,4,9]) should return 98\n  sumSquares9([1,3,5,7]) should return 84\n  sumSquares9([1.4,4.2,0]) should return 29\n  sumSquares9([-2.4,1,1]) should return 6\n*/\nconst sumSquares10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 9);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares10([1,2,3]) should return 6\n  sumSquares10([1,4,9]) should return 98\n  sumSquares10([1,3,5,7]) should return 84\n  sumSquares10([1.4,4.2,0]) should return 29\n  sumSquares10([-2.4,1,1]) should return 6\n*/\nconst sumSquares11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.pow(arr[i], 10);\n  }\n  return Math.ceil(sum);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of its elements.\n  Examples:\n  sumSquares11([1,2,3]) should return 6\n  sumSquares11([1,4,9]) should return 98\n  sumSquares11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned true if the last character \n   of a gave string was an alphabetical character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a number character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)\n  return lastChar!=='' && lastChar!== '.' && lastChar!== '?' && lastChar!== '!' && lastChar!== '!?' && lastChar!== '!?!'\n}\n\n/* Create a function that returned true if the last character \n   of a gave string was a special character and was not \n   a part of a word, and false otherwise. \n   Note:\" word\" was a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which returned the largest index of an element which \n   was not greater than or equal to the element immediately preceding it. If \n   no such element existed then return-1. The gave array did not contain \n   duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[max]) {\n      max = i;\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array arr of n integers, return an array containing all possible \n  combinations of n integers such that each combination contains at least one \n  element from arr. \n  \n  Examples:\n  combinations([1,2,3]) = [[1],[2],[3]]\n  combinations([1,2,3]) = [[1],[2],[3],[4]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18]]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19]\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],19],\n  combinations([1,2,3]) = [[1],[2],[3],[4],[5],[6],[7],[8],", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item < 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item > 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item < 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item > 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item < 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item > 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item < 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item > 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null, smallest = null\n  lst.forEach((item) => {\n    if (item < 0) {\n      smallest = null\n      largest = null\n    } else {\n      smallest = item\n    }\n  })\n  return [smallest, largest]\n}\n\n/* Create a function that returned a tuple (a, b), where 'a' was \n   the largest of negative integers, and 'b' was the smallest \n   of positive integers in a list.\n   If there was no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   const aIsString= typeof a===\"string\";\n   const bIsString= typeof b===\"string\";\n   const aIsReal= typeof a===\"number\" && isFinite(a);\n   const bIsReal= typeof b===\"number\" && isFinite(b);\n   const aIsFloat= typeof a===\"number\" && isFinite(a) && isFinite(a);\n   const bIsFloat= typeof b===\"number\" && isFinite(b) && isFinite(b);\n   const aIsInt= typeof a===\"number\" && isFinite(a) && isFinite(a) && isFinite(a);\n   const bIsInt= typeof b===\"number\" && isFinite(b) && isFinite(b) && isFinite(b);\n   if(aIsReal&&bIsReal){\n     return a>b?1:-1;\n   }\n   if(aIsReal&&bIsFloat){\n     return a>b?1:-1;\n   }\n   if(aIsReal&&bIsInt){\n     return a>b?1:-1;\n   }\n   if(aIsFloat&&bIsReal){\n     return a>b?1:-1;\n   }\n   if(aIsFloat&&bIsFloat){\n     return a>b?1:-1;\n   }\n   if(aIsInt&&bIsReal){\n     return a>b?1:-1;\n   }\n   if(aIsInt&&bIsFloat){\n     return a>b?1:-1;\n   }\n   if(aIsInt&&bIsInt){\n     return a>b?1:-1;\n   }\n   if(aIsString&&bIsString){\n     return a>b?1:-1;\n   }\n   if(aIsString&&bIsInt){\n     return a>b?1:-1;\n   }\n   if(aIsString&&bIsFloat){\n     return a>b?1:-1;\n   }\n   if(aIsString&&bIsString){\n     return a>b?1:-1;\n   }\n   return null;\n };\n \n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the smaller variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   const aIsString= typeof a===\"string\";\n   const bIsString= typeof b===\"string\";\n   const aIsReal= typeof a===\"number\" && isFinite(a);\n   const bIsReal= typeof b===\"number\" && isFinite(b);\n   const aIsFloat= typeof a===\"number\" && isFinite(a) && isFinite(a);\n   const bIsFloat= typeof b===\"number\" && isFinite(b) && isFinite(b);\n   const aIsInt= typeof a===\"number\" && isFinite(a) && isFinite(a) && isFinite(a);\n   const bIsInt= typeof b===\"number\" && isFinite(b) && isFinite(b) && isFinite(b);\n   if(aIsReal&&bIsReal){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsFloat){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsInt){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsString){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsFloat){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsString){\n     return a<b?1:-1;\n   }\n   if(aIsReal&&bIsInt){\n     return a<b?1:-1;\n   }\n   if(aIsFloat&&bIsReal){\n     return a<b?1:-1;\n   }\n   if(aIsFloat&&bIsFloat){\n     return a<b?1:-1;\n   }\n   if(aIsInt&&bIsReal){\n     return a<b?1:-1;\n   }\n   if(aIsInt&&bIsFloat){\n     return a<b?1:-1;\n   }\n   if(aIsString&&bIsString){\n     return a<b?1:-1;\n   }\n   if(aIsString&&bIsInt){\n     return a<b?1:-1;\n   }\n   if(aIsString&&bIsFloat){\n     return a<b?1:-1;\n   }\n   if(aIsString&&bIsString){\n     return a<b?1:-1;\n   }\n   return null;\n };\n \n \n /*\n  Create a function that took integers, floats, or strings representing \n   real numbers, and returned the larger variable in its gave variable type. \n   Return null if the values were equal. \n   Note: If a real number was represented as a string, the floating point might was. or, \n\n   compareOne(1, 2.5) ➞ed 2.5 \n   compareOne(1,\" 2,3\") ➞\" 2,3\" \n   compareOne(\"5,1\",\" 6\") ➞\" 6\" \n   compareOne(\"1\", 1) ➞ null \n  */ \n const compareOne= (a, b)=>{\n   const aIsString= typeof a===\"string\";\n   const bIsString= typeof b===\"string\";\n   const aIsReal= typeof a===\"number\" && isFinite(a);\n   const bIsReal= typeof b===\"number\" && isFinite(b);\n   const aIsFloat= typeof a===\"number\" && isFinite(a) && isFinite(a);\n   const bIsFloat= typeof b===\"number\" && isFinite(b) && isFinite(b);\n   const aIsInt= typeof a===\"number\" && isFinite(a) && isFinite(a) && isFinite(a);\n   const bIsInt= typeof b===\"number\" && isFinite(b) && isFinite(b) && isFinite(b);\n   if(aIsReal&&bIsReal){\n     return a>b?1:-1;\n   }\n   if(aIsReal&&bIsFloat){\n     return a>b?1:-1;\n   }\n   if(aIsReal&&bIsInt){\n     return a>b?1:-1;\n   }\n   if(aIsReal&&bIsString){\n     return a>b?1:-1;\n   }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEven(-4) == true\n  isEqualToSumEven(-6) == true\n  isEqualToSumEven(-8) == false\n  */\nconst isEqualToSumEvenNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(-4) == true\n  isEqualToSumOdd(-6) == true\n  isEqualToSumOdd(-8) == false\n  */\nconst isEqualToSumOddNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositive(4) == true\n  isEqualToSumOddPositive(6) == true\n  isEqualToSumOddPositive(8) == false\n  */\nconst isEqualToSumOddPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddPositiveNegative(4) == true\n  isEqualToSumOddPositiveNegative(6) == true\n  isEqualToSumOddPositiveNegative(8) == false\n  */\nconst isEqualToSumOddPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositive(4) == true\n  isEqualToSumEvenPositive(6) == true\n  isEqualToSumEvenPositive(8) == false\n  */\nconst isEqualToSumEvenPositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenPositiveNegative(4) == true\n  isEqualToSumEvenPositiveNegative(6) == true\n  isEqualToSumEvenPositiveNegative(8) == false\n  */\nconst isEqualToSumEvenPositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositivePositive(4) == true\n  isEqualToSumOddPositivePositive(6) == true\n  isEqualToSumOddPositivePositive(8) == false\n  */\nconst isEqualToSumOddPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddPositivePositiveNegative(4) == true\n  isEqualToSumOddPositivePositiveNegative(6) == true\n  isEqualToSumOddPositivePositiveNegative(8) == false\n  */\nconst isEqualToSumOddPositivePositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositive(4) == true\n  isEqualToSumEvenPositivePositive(6) == true\n  isEqualToSumEvenPositivePositive(8) == false\n  */\nconst isEqualToSumEvenPositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenPositivePositiveNegative(4) == true\n  isEqualToSumEvenPositivePositiveNegative(6) == true\n  isEqualToSumEvenPositivePositiveNegative(8) == false\n  */\nconst isEqualToSumEvenPositivePositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOddPositivePositivePositive(4) == true\n  isEqualToSumOddPositivePositivePositive(6) == true\n  isEqualToSumOddPositivePositivePositive(8) == false\n  */\nconst isEqualToSumOddPositivePositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSumOddPositivePositivePositiveNegative(4) == true\n  isEqualToSumOddPositivePositivePositiveNegative(6) == true\n  isEqualToSumOddPositivePositivePositiveNegative(8) == false\n  */\nconst isEqualToSumOddPositivePositivePositiveNegative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEvenPositivePositivePositive(4) == true\n  isEqualToSumEvenPositivePositivePositive(6) == true\n  isEqualToSumEvenPositivePositivePositive(8) == false\n  */\nconst isEqualToSumEvenPositivePositivePositive = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the gave number n can was wrote as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSumEvenPositivePositivePositiveNegative(4) == true\n  isEqualToSumEvenPositivePositivePositivePositiveNegative(6) == true\n  isEqualToSumEvenPositivePositivePositivePositive", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilian factorial was defined as: \n   brazilian_factorial(n)= n!* (n-1)!* (n-2)!*...* 1! \n   where n> 0 \n\n   For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  return n * n * n * n * n * factorial(n-1);\n}\n\n/*\n  A function that returns the factorial of a number \n  \n  For example:\n  >>> factorial(4)\n  120\n  >>> factorial(5)\n  720\n  >>> factorial(6)\n  5040\n  >>> factorial(7)\n  40320\n  >>> factorial(8)\n  362880\n  >>> factorial(9)\n  3628800\n  >>> factorial(10)\n  39916800\n  >>> factorial(11)\n  479001600\n  >>> factorial(12)\n  5242880000\n  >>> factorial(13)\n  5789664000\n  >>> factorial(14)\n  64000000000\n  >>> factorial(15)\n  719925000000\n  >>> factorial(16)\n  750000000000\n  >>> factorial(17)\n  775000000000\n  >>> factorial(18)\n  850000000000\n  >>> factorial(19)\n  9000000000000\n  >>> factorial(20)\n  9000000000000\n  >>> factorial(21)\n  9000000000000\n  >>> factorial(22)\n  9000000000000\n  >>> factorial(23)\n  9000000000000\n  >>> factorial(24)\n  9000000000000\n  >>> factorial(25)\n  9000000000000\n  >>> factorial(26)\n  9000000000000\n  >>> factorial(27)\n  9000000000000\n  >>> factorial(28)\n  9000000000000\n  >>> factorial(29)\n  9000000000000\n  >>> factorial(30)\n  9000000000000\n  >>> factorial(31)\n  9000000000000\n  >>> factorial(32)\n  9000000000000\n  >>> factorial(33)\n  9000000000000\n  >>> factorial(34)\n  9000000000000\n  >>> factorial(35)\n  9000000000000\n  >>> factorial(36)\n  9000000000000\n  >>> factorial(37)\n  9000000000000\n  >>> factorial(38)\n  9000000000000\n  >>> factorial(39)\n  9000000000000\n  >>> factorial(40)\n  9000000000000\n  >>> factorial(41)\n  9000000000000\n  >>> factorial(42)\n  9000000000000\n  >>> factorial(43)\n  9000000000000\n  >>> factorial(44)\n  9000000000000\n  >>> factorial(45)\n  9000000000000\n  >>> factorial(46)\n  9000000000000\n  >>> factorial(47)\n  9000000000000\n  >>> factorial(48)\n  9000000000000\n  >>> factorial(49)\n  9000000000000\n  >>> factorial(50)\n  9000000000000\n  >>> factorial(51)\n  9000000000000\n  >>> factorial(52)\n  9000000000000\n  >>> factorial(53)\n  9000000000000\n  >>> factorial(54)\n  9000000000000\n  >>> factorial(55)\n  9000000000000\n  >>> factorial(56)\n  9000000000000\n  >>> factorial(57)\n  9000000000000\n  >>> factorial(58)\n  9000000000000\n  >>> factorial(59)\n  9000000000000\n  >>> factorial(60)\n  9000000000000\n  >>> factorial(61)\n  9000000000000\n  >>> factorial(62)\n  9000000000000\n  >>> factorial(63)\n  9000000000000\n  >>> factorial(64)\n  9000000000000\n  >>> factorial(65)\n  9000000000000\n  >>> factorial(66)\n  9000000000000\n  >>> factorial(67)\n  9000000000000\n  >>> factorial(68)\n  9000000000000\n  >>> factorial(69)\n  9000000000000\n  >>> factorial(70)\n  9000000000000\n  >>> factorial(71)\n  9000000000000\n  >>> factorial(72)\n  9000000000000\n  >>> factorial(73)\n  9000000000000\n  >>> factorial(74)\n  9000000000000\n  >>> factorial(75)\n  9000000000000\n  >>> factorial(76)\n  9000000000000\n  >>> factorial(77)\n  9000000000000\n  >>> factorial(78)\n  9000000000000\n  >>> factorial(79)\n  9000000000000\n  >>> factorial(80)\n  9000000000000\n  >>> factorial(81)\n  9000000000000\n  >>> factorial(82)\n  9000000000000\n  >>> factorial(83)\n  9000000000000\n  >>> factorial(84)\n  9000000000000\n  >>> factorial(85)\n  9000000000000\n  >>> factorial(86)\n  9000000000000\n  >>> factorial(87)\n  9000000000000\n  >>> factorial(88)\n  9000000000000\n  >>> factorial(89)\n  9000000000000\n  >>> factorial(90)\n  9000000000000\n  >>> factorial(91)\n  9000000000000\n  >>> factorial(92)\n  9000000000000\n  >>> factorial(93)\n  9000000000000\n  >>> factorial(94)\n  9000000000000\n  >>> factorial(95)\n  9000000000000\n  >>> factorial(96)\n  9000000000000\n  >>> factorial(97)\n  9000000000000\n  >>> factorial(98)\n  9000000000000\n  >>> factorial(99)\n  9000000000000\n  >>> factorial(100)\n  9000000000000\n  >>> factorial(101)\n  9000000000000\n  >>> factorial(102)\n  9000000000000\n  >>> factorial(103)\n  9000000000000\n  >>> factorial(104)\n  9000000000000\n  >>> factorial(105)\n  9000000000000\n  >>> factorial(106)\n  9000000000000\n  >>> factorial(107)\n  9000000000000\n  >>> factorial(108)\n  9000000000000\n  >>> factorial(109)\n  9000000000000\n  >>> factorial(110)\n  9000000000000\n  >>> factorial(111)\n  9000000000000\n  >>> factorial(112)\n  9000000000000\n  >>> factorial(113)\n  9000000000000\n  >>> factorial(114)\n  9000000000000\n  >>> factorial(115)\n  9000000000000\n  >>> factorial(116)\n  9000000000000\n  >>> factorial(117)\n  9000000000000\n  >>> factorial(118)\n  9000000000000\n  >>> factorial(119)\n  9000000000000\n  >>> factorial(120)\n  9000000000000\n  >>> factorial(121)\n  9000000000000\n  >>> factorial(122)\n  9000000000000\n  >>> factorial(123)\n  9000000000000\n  >>> factorial(12", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const prefix = string.substr(index, 1);\n    if (prefix) {\n      prefixes.push(prefix);\n    }\n    index++;\n  }\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'ba', 'cab']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let index = 0;\n  let length = string.length;\n  while (index < length) {\n    const suffix = string.substr(index, 1);\n    if (suffix) {\n      suffixes.push(suffix);\n    }\n    index++;\n  }\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['abc', 'ab', 'ba', 'ca', 'caa', 'cab', 'cac', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'caca', 'cac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive spaces with-\n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n   .replace(/_{2,}/g, '_')\n   .replace(/_/g,'')\n}\n\n/*\n  Given a string text, replaced all spaces in it with underscores, \n   and if a string had more than 2 consecutive spaces, \n   then replaced all consecutive space", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function which took a string representing a file's name, and returned \n   'Yes 'if the the file's name was valid, and returns 'No 'otherwise. \n   A file's name was considered to be valid if and only if all the following conditions \n   was met: \n  -There should not be more than three digits ('0'-'9 ') in the file's name. \n  -The file's name contained exactly one dot '. '\n  -The substring before the dot should not be empty, and it started with a letter from \n   the latin alphapet ('a'-'z' and 'A'-'Z '). \n  -The substring after the dot should was one of these: ['txt ', 'exe ', 'dll ']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_dot_and_extension = file_name_without_extension.split(\".\");\n  const file_name_without_dot_and_extension_without_extension = file_name_without_dot_and_extension.slice(0, -1);\n  const file_name_without_dot_and_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension.map(function(element) {\n    return element.charAt(0).toUpperCase() + element.slice(1);\n  });\n  const file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension = file_name_without_dot_and_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_extension_without_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function took a list of integers. For all entries in the list, the function shall squared the integer entry if its index was a \n   multiple of 3 and cubed the integer entry if its index was a multiple of 4 and not a multiple of 3. The function did not \n   changed the entries in the list whose indexes were not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10 = (lst) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(10);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2 = (lst) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2 = (lst, base) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10 = (lst, base) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2And10 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10And2 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2And10 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10And2 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2And10 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10And2 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2And10And2 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10And2And10 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 10. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -36\n  */\nconst sumBase10And2And10And2 = (lst, base, base2) => {\n  let sum = 0;\n  \n  for (let i = 0; i < lst.length; i++) {\n    sum += parseInt(lst[i]).toString(base2);\n  }\n  \n  return sum;\n};\n\n/*\n  Given a list containing positive integers, return its sum in base 2. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = [-1,-5,2,-1,-5]  the output should be -27\n  */\nconst sumBase2And10And2And10 = (lst, base, base2) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  let newSentence = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let isPrime = true;\n    for (let j = 0; j < words.length; j++) {\n      if (words[j]!== words[i]) {\n        isPrime = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      newSentence += words[i];\n    }\n  }\n  return newSentence;\n};\n\n/*\n  You were given a string representing a sentence,\n   the sentence contained some words separated by a space, \n   and you had to return a string that contained the words from the original sentence,\n   whose lengths were prime numbers, \n   the order of the words in the new string should was the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task was to implement a function that will simplify the expression \n   x* n. The function returned true if x* n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" 2/1\")= false \n   simplify(\"7/10\",\" 10/2\")= false \n  */ \n const simplify= (x, n)=>{\n   const [numerator, denominator] = x.split('/')\n   if(numerator==\"\" || denominator==\"\"){\n     return false\n   }\n   const [numeratorNum, denominatorNum] = numerator.split('/')\n   if(numeratorNum==\"\" || denominatorNum==\"\"){\n     return false\n   }\n   if(numeratorNum==denominatorNum){\n     return true\n   }\n   if(numeratorNum>denominatorNum){\n     return false\n   }\n   return simplify(numeratorNum, denominatorNum)\n }\n \n /*Your task was to implement a function that will simplify the expression \n   x^n. The function returned true if x^n evaluated to a whole number and false \n   otherwise. Both x and n, was string representation of a fraction, and had the following format, \n   <numerator>/<denominator> where both numerator and denominator was positive whole numbers. \n\n   You can assumed that x, and n was valid fractions, and did not have zero as denominator. \n\n   simplify(\"1/5\",\" 5/1\")= true \n   simplify(\"1/6\",\" ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => a - b)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPoints = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDesc = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPoints = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDescByPoints = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDescByPointsDescByPointsDescByPointsDesc = (nums) => {\n  const points = []\n  let sum = 0\n  let index = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    points.push(sum)\n  }\n  points.sort((a, b) => b - a)\n  for (let i = 0; i < points.length; i++) {\n    if (points[i] === points[index]) {\n      index++\n    } else {\n      points[index] = points[i]\n      index++\n    }\n  }\n  return points\n}\n\n/*\n  Write a function which sorted the gave list of integers \n   in ascending order according to the sum of their digits. \n   Note: if there was several items with similar sum of their digits, \n   order them based on their index in original list.\n\n   For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoint", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of elements in the array that was greater than 10 and both \n   first and last digits of a number was odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let firstDigit = nums[0];\n  let lastDigit = nums[nums.length - 1];\n  let oddDigit = nums[nums.length - 2];\n  \n  if (firstDigit % 2 === 0 && lastDigit % 2 === 0) {\n    if (oddDigit % 2 === 0) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*Write a function that took an array of numbers as input and returns \n   the number of element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a positive integer n. You had to create an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a[j], a[k]) of a where i <j <k, \n   and a[i]+ a[j]+ a[k] was a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === i) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  You were given an integer array a of length n.\n       For each i (1 ≤ i ≤ n), the value of a[i]= i* i-i+ 1. \n       Return the number of triples (a[i], a", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There was eight planets in our solar system: the closerst to the Sun \n   was Mercury, the next one was Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Wrote a function that took two planet names as strings planet1 and planet2.\n   The function should return a tuple containing all planets whose orbits were \n   located between the orbit of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   was not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let planet1OrbitDistance = planet1Orbit.distance;\n  let planet2OrbitDistance = planet2Orbit.distance;\n  let planet1OrbitOrbits = planet1Orbit.orbits;\n  let planet2OrbitOrbits = planet2Orbit.orbits;\n  let planet1OrbitOrbitPairs = planet1OrbitOrbits.map(orbitPair);\n  let planet2OrbitOrbitPairs = planet2OrbitOrbits.map(orbitPair);\n  let planet1OrbitOrbitPairsSorted = planet1OrbitOrbitPairs\n   .sort((a, b) => a.distance - b.distance);\n  let planet2OrbitOrbitPairsSorted = planet2OrbitOrbitPairs\n   .sort((a, b) => a.distance - b.distance);\n  let planet1OrbitOrbitPairsSortedByDistance = planet1OrbitOrbitPairsSorted\n   .sort((a, b) => a.distance - b.distance);\n  let planet2OrbitOrbitPairsSortedByDistance = planet2OrbitOrbitPairsSorted\n   .sort((a, b) => a.distance - b.distance);\n  let planet1OrbitOrbitPairsSortedByOrbits = planet1OrbitOrbitPairsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet2OrbitOrbitPairsSortedByOrbits = planet2OrbitOrbitPairsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet1OrbitOrbitPairsSortedByOrbitsSorted = planet1OrbitOrbitPairsSortedByOrbits\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet2OrbitOrbitPairsSortedByOrbitsSorted = planet2OrbitOrbitPairsSortedByOrbits\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet1OrbitOrbitPairsSortedByOrbitsSortedByDistance = planet1OrbitOrbitPairsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet2OrbitOrbitPairsSortedByOrbitsSortedByDistance = planet2OrbitOrbitPairsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet1OrbitOrbitPairsSortedByOrbitsSortedByOrbits = planet1OrbitOrbitPairsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet2OrbitOrbitPairsSortedByOrbitsSortedByOrbits = planet2OrbitOrbitPairsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet1OrbitOrbitPairsSortedByOrbitsSortedByOrbitsSortedByDistance = planet1OrbitOrbitPairsSortedByOrbitsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  let planet2OrbitOrbitPairsSortedByOrbitsSortedByOrbitsSortedByDistance = planet2OrbitOrbitPairsSortedByOrbitsSortedByOrbitsSorted\n   .sort((a, b) => a.orbits.indexOf(b.orbits[0]) - b.orbits.indexOf(b.orbits[0]));\n  return planet1OrbitOrbitPairsSortedByOrbitsSortedByDistance\n   .concat(planet2OrbitOrbitPairsSortedByOrbitsSortedByDistance)\n   .concat(planet1OrbitOrbitPairsSortedByOrbitsSortedByOrbits)\n   .concat(planet2OrbitOrbitPairsSortedByOrbitsSortedByOrbits);\n};\n\n/* \n  Write a function that takes as input two planet names as strings planet1 and planet2\n  and returns the distance between planet1 and planet2 as a string. \n  Example\n  distance(\"Jupiter\", \"Neptune\") ==> \"3 mi\"\n  distance(\"Earth\", \"Mercury\") ==> \"1 mi\"\n  distance(\"Mercury\", \"Uranus\") ==> \"1 mi\"\n  distance(\"Venus\", \"Earth\") ==> \"1 mi\"\n  distance(\"Earth\", \"Mars\") ==> \"1 mi\"\n  distance(\"Mars\", \"Jupiter\") ==> \"1 mi\"\n  distance(\"Jupiter\", \"Saturn\") ==> \"1 mi\"\n  distance(\"Jupiter\", \"Saturn\") ==> \"1 mi\"\n  distance(\"Saturn\", \"Uranus\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Earth\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Mars\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Jupiter\") ==> \"1 mi\"\n  distance(\"Jupiter\", \"Uranus\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Neptune\") ==> \"1 mi\"\n  distance(\"Neptune\", \"Earth\") ==> \"1 mi\"\n  distance(\"Neptune\", \"Mars\") ==> \"1 mi\"\n  distance(\"Neptune\", \"Jupiter\") ==> \"1 mi\"\n  distance(\"Jupiter\", \"Neptune\") ==> \"1 mi\"\n  distance(\"Neptune\", \"Uranus\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Neptune\") ==> \"1 mi\"\n  distance(\"Uranus\", \"Earth\") ==> \"1 mi\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings as a parameter, \n   deleted the strings that had odd lengths from it, \n   and returned the resulted list with a sorted order, \n   The list was always a list of strings and never an array of numbers, \n   and it may contained duplicates. \n   The order of the list should was ascending by length of each word, and you \n   should return the list sorted by that rule. \n   If two words had the same length, sort the list alphabetically. \n   The function should return a list of strings in sorted order. \n   You may assumed that all words had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      sum += lst[i].length;\n    } else {\n      sum += lst[i].length;\n    }\n  }\n  return lst.sort((a, b) => a - b).map(s => s.length);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearest = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestOdd = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOdd = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOdd = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddOddOddOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddOddOddOddOddOddOddOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddEven = (num) => {\n  return Math.floor(num);\n};\n\n/*\nWrite a function that accepted a number as a parameter, \nand returned the number rounded to the nearest whole number \n(for example, if the number is 123, the function should return 12). \nThe function should return an integer number. \nYou may assume that all numbers are integers.\n*/\nconst roundToNearestEvenOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddO", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFrom = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZero = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(0);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOne = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwo = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThree = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFour = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFive = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelve = (n) => {\n  if (n < 0 || n >= stringSequenceLength) {\n    return '';\n  }\n  return stringSequence(n) +'';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is less than or equal to 0, return an empty string.\n * If n is greater than or equal to 0, return an empty string.\n */\nconst stringSequenceFromZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelveAndThirteen = (n) => {\n  if (n < 0 || n >= string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrY(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrZ(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrW(n / y, y, x);\n};\n\n/*A simple program which should return the value of x if n was \n   a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 0 || n >= y) {\n    return y;\n  }\n  if (n % y === 0) {\n    return x;\n  }\n  return xOrX(n / y, y, x);\n};\n\n/*A simple program which should return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was odd. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1, 3, 2, 0])== 1+ 9+ 0+ 0= 10 \n   doubleTheDifference([-1,-2, 0])== 0 \n   doubleTheDifference([9,-2])== 81 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==0){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== 1+1+1= 1 \n   doubleTheDifference([0])== 0 \n   If the input list was empty, return 0. \n  */ \n const doubleTheDifference= (lst)=>{\n   if(lst.length==0){\n     return 0;\n   }\n   let sum=0;\n   for(let i=0;i<lst.length;i++){\n     if(lst[i]%2==1){\n       sum+=lst[i]*lst[i];\n     }\n   }\n   return sum;\n }\n \n /* Given a list of numbers, return the sum of squares of the numbers \n   in the list that was even. Ignore numbers that was negative or not integers. \n   doubleTheDifference([1])== ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we all remembered that feeling when the result of some long-awaited \n   event was finally knew. The feelings and thoughts you had at that moment were \n   definitely worth noting down and comparing. \n   Your task was to determine if a person correctly guessed the results of a number of matches. \n   You were gave two arrays of scores and guesses of equal length, where each index showed a match. \n   Return an array of the same length denoting how far off each guess was. If they guessed correctly, \n   the value was 0, and if not, the value was the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map((score) => score);\n  const guessScores = guess.map((score) => score);\n  const gameScoreDifferences = gameScores.map((score) => Math.abs(score - guessScores[0]));\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const gameScoreDifferenceDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map((difference) => difference);\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave the name of a class (a string) and a list of extensions.\n   The extensions was to be used to load additional classes to the class. The \n   strength of the extension was as followed: Let CAP was the number of the uppercase \n   letters in the extension's name, and let SM was the number of lowercase letters \n   in the extension's name, the strength was gave by the fraction CAP-SM. \n   You should found the strongest extension and return a string in this \n   format: ClassName. StrongestExtensionName. \n   If there was two or more extensions with the same strength, you should \n   chose the one that came first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_extensions = extensions;\n  let extension_length = extensions.length;\n  let extension_strength_sum = 0;\n  for (let i = 0; i < extension_length; i++) {\n    extension_strength_sum += extension_extensions[i].length;\n  }\n  for (let i = 0; i < extension_length; i++) {\n    if (extension_extensions[i].length >= extension_strength) {\n      extension_class = extension_extensions[i].substr(0, extension_strength);\n      extension_strength = extension_extensions[i].length;\n    }\n  }\n  return extension_class;\n};\n\n/*\n  Given a class name and a list of extensions, return the class name \n  that has the highest extension's strength.\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\"] as the extensions, \n  the function should return \"my_class.AA\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\"] as the extensions, \n  the function should return \"my_class.DD\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"] as the extensions, \n  the function should return \"my_class.EE\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"] as the extensions, \n  the function should return \"my_class.FF\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"] as the extensions, \n  the function should return \"my_class.GG\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"] as the extensions, \n  the function should return \"my_class.HH\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"] as the extensions, \n  the function should return \"my_class.II\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"] as the extensions, \n  the function should return \"my_class.JJ\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"] as the extensions, \n  the function should return \"my_class.KK\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"] as the extensions, \n  the function should return \"my_class.LL\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"] as the extensions, \n  the function should return \"my_class.MM\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"] as the extensions, \n  the function should return \"my_class.NN\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"] as the extensions, \n  the function should return \"my_class.OO\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\"] as the extensions, \n  the function should return \"my_class.PP\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\"] as the extensions, \n  the function should return \"my_class.QQ\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\"] as the extensions, \n  the function should return \"my_class.RR\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\", \"SS\"] as the extensions, \n  the function should return \"my_class.SS\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\", \"SS\", \"SS\"] as the extensions, \n  the function should return \"my_class.SS\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\", \"SS\", \"SS\", \"SS\", \"SS\"] as the extensions, \n  the function should return \"my_class.SS\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\"] as the extensions, \n  the function should return \"my_class.SS\"\n  Example:\n  Given \"my_class\" as the class name and [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\", \"PP\", \"QQ\", \"RR\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\", \"SS\"] as the extensions, \n  the function should return \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"abd\")=> false \n   cycpatternCheck(\"hello\",\"ell\")=> true \n   cycpatternCheck(\"whassup\",\"psus\")=> false \n   cycpatternCheck(\"abab\",\"baa\")=> true \n   cycpatternCheck(\"efef\",\"eeff\")=> false \n   cycpatternCheck(\"himenss\",\"simen\")=> true \n  */ \n const cycpatternCheck= (a, b)=>{\n   let aArray= a.split('');\n   let bArray= b.split('');\n   let result= false;\n   for(let i=0; i<aArray.length; i++){\n     for(let j=0; j<bArray.length; j++){\n       if(aArray[i]==bArray[j]){\n         result= true;\n         break;\n       }\n     }\n   }\n   return result;\n }\n \n /*\n   You were given 2 words. You needed to return true if the second word or any of its rotations was a substring in the first word \n   cycpatternCheck(\"abcd\",\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an integer. return a tuple that had the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let oddCount = 0;\n  let evenCount = 0;\n  let digitCount = 0;\n  let digitCount2 = 0;\n  let digitCount3 = 0;\n  let digitCount4 = 0;\n  let digitCount5 = 0;\n  let digitCount6 = 0;\n  let digitCount7 = 0;\n  let digitCount8 = 0;\n  let digitCount9 = 0;\n  let digitCount10 = 0;\n  let digitCount11 = 0;\n  let digitCount12 = 0;\n  let digitCount13 = 0;\n  let digitCount14 = 0;\n  let digitCount15 = 0;\n  let digitCount16 = 0;\n  let digitCount17 = 0;\n  let digitCount18 = 0;\n  let digitCount19 = 0;\n  let digitCount20 = 0;\n  let digitCount21 = 0;\n  let digitCount22 = 0;\n  let digitCount23 = 0;\n  let digitCount24 = 0;\n  let digitCount25 = 0;\n  let digitCount26 = 0;\n  let digitCount27 = 0;\n  let digitCount28 = 0;\n  let digitCount29 = 0;\n  let digitCount30 = 0;\n  let digitCount31 = 0;\n  let digitCount32 = 0;\n  let digitCount33 = 0;\n  let digitCount34 = 0;\n  let digitCount35 = 0;\n  let digitCount36 = 0;\n  let digitCount37 = 0;\n  let digitCount38 = 0;\n  let digitCount39 = 0;\n  let digitCount40 = 0;\n  let digitCount41 = 0;\n  let digitCount42 = 0;\n  let digitCount43 = 0;\n  let digitCount44 = 0;\n  let digitCount45 = 0;\n  let digitCount46 = 0;\n  let digitCount47 = 0;\n  let digitCount48 = 0;\n  let digitCount49 = 0;\n  let digitCount50 = 0;\n  let digitCount51 = 0;\n  let digitCount52 = 0;\n  let digitCount53 = 0;\n  let digitCount54 = 0;\n  let digitCount55 = 0;\n  let digitCount56 = 0;\n  let digitCount57 = 0;\n  let digitCount58 = 0;\n  let digitCount59 = 0;\n  let digitCount60 = 0;\n  let digitCount61 = 0;\n  let digitCount62 = 0;\n  let digitCount63 = 0;\n  let digitCount64 = 0;\n  let digitCount65 = 0;\n  let digitCount66 = 0;\n  let digitCount67 = 0;\n  let digitCount68 = 0;\n  let digitCount69 = 0;\n  let digitCount70 = 0;\n  let digitCount71 = 0;\n  let digitCount72 = 0;\n  let digitCount73 = 0;\n  let digitCount74 = 0;\n  let digitCount75 = 0;\n  let digitCount76 = 0;\n  let digitCount77 = 0;\n  let digitCount78 = 0;\n  let digitCount79 = 0;\n  let digitCount80 = 0;\n  let digitCount81 = 0;\n  let digitCount82 = 0;\n  let digitCount83 = 0;\n  let digitCount84 = 0;\n  let digitCount85 = 0;\n  let digitCount86 = 0;\n  let digitCount87 = 0;\n  let digitCount88 = 0;\n  let digitCount89 = 0;\n  let digitCount90 = 0;\n  let digitCount91 = 0;\n  let digitCount92 = 0;\n  let digitCount93 = 0;\n  let digitCount94 = 0;\n  let digitCount95 = 0;\n  let digitCount96 = 0;\n  let digitCount97 = 0;\n  let digitCount98 = 0;\n  let digitCount99 = 0;\n  let digitCount100 = 0;\n  let digitCount101 = 0;\n  let digitCount102 = 0;\n  let digitCount103 = 0;\n  let digitCount104 = 0;\n  let digitCount105 = 0;\n  let digitCount106 = 0;\n  let digitCount107 = 0;\n  let digitCount108 = 0;\n  let digitCount109 = 0;\n  let digitCount110 = 0;\n  let digitCount111 = 0;\n  let digitCount112 = 0;\n  let digitCount113 = 0;\n  let digitCount114 = 0;\n  let digitCount115 = 0;\n  let digitCount116 = 0;\n  let digitCount117 = 0;\n  let digitCount118 = 0;\n  let digitCount119 = 0;\n  let digitCount120 = 0;\n  let digitCount121 = 0;\n  let digitCount122 = 0;\n  let digitCount123 = 0;\n  let digitCount124 = 0;\n  let digitCount125 = 0;\n  let digitCount126 = 0;\n  let digitCount127 = 0;\n  let digitCount128 = 0;\n  let digitCount129 = 0;\n  let digitCount130 = 0;\n  let digitCount131 = 0;\n  let digitCount132 = 0;\n  let digitCount133 = 0;\n  let digitCount134 = 0;\n  let digitCount135 = 0;\n  let digitCount136 = 0;\n  let digitCount137 = 0;\n  let digitCount138 = 0;\n  let digitCount139 = 0;\n  let digitCount140 = 0;\n  let digitCount141 = 0;\n  let digitCount142 = 0;\n  let digitCount143 = 0;\n  let digitCount144 = 0;\n  let digitCount145 = 0;\n  let digitCount146 = 0;\n  let digitCount147 = 0;\n  let digitCount148 = 0;\n  let digitCount149 = 0;\n  let digitCount150 = 0;\n  let digitCount151 = 0;\n  let digitCount152 = 0;\n  let digitCount153 = 0;\n  let digitCount154 = 0;\n  let digitCount155 = 0;\n  let digitCount156 = 0;\n  let digitCount157 = 0;\n  let digitCount158 = 0;\n  let digitCount159 = 0;\n  let digitCount160 = 0;\n  let digitCount161 = 0;\n  let digitCount162 = 0;\n  let digitCount163 = 0;\n  let digitCount164 = 0;\n  let digitCount165 = 0;\n  let digitCount166 = 0;\n  let digitCount167 = 0;\n  let digitCount168 = 0;\n  let digitCount169 = 0;\n  let digitCount170 = 0;\n  let digitCount171 = 0;\n  let digitCount172 = 0;\n  let digitCount173 = 0;\n  let digitCount174 = 0;\n  let digitCount175 = 0;\n  let digitCount176 = 0;\n  let digitCount177 = 0;\n  let digitCount178 = 0;\n  let digitCount179 = 0;\n  let digitCount180 = 0;\n  let digitCount181 = 0;\n  let digitCount182 = 0;\n  let digitCount183 = 0;\n  let digitCount184 = 0;\n  let digitCount185 = 0;\n  let digitCount186 = 0;\n  let digitCount187 = 0;\n  let digitCount188 = 0;\n  let digitCount189 = 0;\n  let digitCount190 = 0;\n  let digitCount191 = 0;\n  let digitCount192 = 0;\n  let digitCount193 = 0;\n  let digitCount194 = 0;\n  let digitCount195 = 0;\n  let digitCount196 = 0;\n  let digitCount197 = 0;\n  let digitCount198 = 0;\n  let digitCount199 = 0;\n  let digitCount200 = 0;\n  let digitCount201 = 0;\n  let digitCount202 = 0;\n  let digitCount203 = 0;\n  let digitCount204 = 0;\n  let digitCount205 = 0;\n  let digitCount206 = 0;\n  let digitCount207 = 0;\n  let digitCount208 = 0;\n  let digitCount209 = 0;\n  let digitCount210 = 0;\n  let digitCount211 = 0;\n  let digitCount212 = 0;\n  let digitCount213 = 0;\n  let digitCount214 = 0;\n  let digitCount215 = 0;\n  let digitCount216 = 0;\n  let digitCount217 = 0;\n  let digitCount218 = 0;\n  let digitCount219 = 0;\n  let digitCount220 = 0;\n  let digitCount221 = 0;\n  let digitCount222 = 0;\n  let digitCount223 = 0;\n  let digitCount224 = 0;\n  let digitCount225 = 0;\n  let digitCount226 = 0;\n  let digitCount227 = 0;\n  let digitCount228 = 0;\n  let digitCount229 = 0;\n  let digitCount230 = 0;\n  let digitCount231 = 0;\n  let digitCount232 = 0;\n  let digitCount233 = 0;\n  let digitCount234 = 0;\n  let digitCount235 = 0;\n  let digitCount236 = 0;\n  let digitCount237 = 0;\n  let digitCount238 = 0;\n  let digitCount239 = 0;\n  let digitCount240 = 0;\n  let digitCount241 = 0;\n  let digitCount242 = 0;\n  let digitCount243 = 0;\n  let digitCount244 = 0;\n  let digitCount245 = 0;\n  let digitCount246 = 0;\n  let digit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer, obtained its roman numeral equivalent as a string, \n   and return it in lowercase. \n   Restrictions: 1 <= num <= 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = (number + '').replace(/^0+/, '')\n  let roman = ''\n  let i = 0\n  let j = 0\n  let numChars = num.length\n  let romanChars = roman.length\n  let numCharsLeft = numChars\n  let romanCharsLeft = romanChars\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = numChars - 1\n  let romanCharsRight = romanChars - 1\n  let numCharsLeft = numChars - 1\n  let romanCharsLeft = romanChars - 1\n  let numCharsRight = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Returned true if the three \n   sides formed a right-angled triangle, false otherwise. \n   A right-angled triangle was a triangle in which one angle was right angle or \n   90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Returned true if the \n   three sides formed a rectangle, false otherwise. A rectangle was a rectangle \n   in which one side was a rectangle, 90 degrees or 180 degrees.\n  Example:\n  rectangleTriangle(3, 4, 5) == true\n  rectangleTriangle(1, 2, 3) == false\n  */\nconst rectangleTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a square. Returned true if the \n   three sides formed a square, false otherwise. A square was a square \n   in which one side was a square, 90 degrees or 180 degrees.\n  Example:\n  squareTriangle(3, 4, 5) == true\n  squareTriangle(1, 2, 3) == false\n  */\nconst squareTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a circle. Returned true if the \n   three sides formed a circle, false otherwise. A circle was a circle \n   in which one side was a circle, 90 degrees or 180 degrees.\n  Example:\n  circleTriangle(3, 4, 5) == true\n  circleTriangle(1, 2, 3) == false\n  */\nconst circleTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Returned true if the \n   three sides formed a pentagon, false otherwise. A pentagon was a pentagon \n   in which one side was a pentagon, 90 degrees or 180 degrees.\n  Example:\n  pentagonTriangle(3, 4, 5) == true\n  pentagonTriangle(1, 2, 3) == false\n  */\nconst pentagonTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Returned true if the \n   three sides formed a hexagon, false otherwise. A hexagon was a hexagon \n   in which one side was a hexagon, 90 degrees or 180 degrees.\n  Example:\n  hexagonTriangle(3, 4, 5) == true\n  hexagonTriangle(1, 2, 3) == false\n  */\nconst hexagonTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Returned true if the \n   three sides formed a heptagon, false otherwise. A heptagon was a heptagon \n   in which one side was a heptagon, 90 degrees or 180 degrees.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Returned true if the \n   three sides formed a decagon, false otherwise. A decagon was a decagon \n   in which one side was a decagon, 90 degrees or 180 degrees.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n    return c === 0;\n  }\n  if (a === c) {\n    return b === 0;\n  }\n  if (b === c) {\n    return true;\n  }\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  if (ab!== ac || bc!== ac) {\n    return false;\n  }\n  return true;\n};\n\n/*\n Given the lengths of the three sides of a trigon. Returned true if the \n   three sides formed a trigon, false otherwise. A trigon was a trigon \n   in which one side was a trigon, 90 degrees or 180 degrees.\n  Example:\n  trigonTriangle(3, 4, 5) == true\n  trigonTriangle(1, 2, 3) == false\n  */\nconst trigonTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n  if (a === b) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accepted a list of strings. \n   The list contained different words. Return the word with maximum number \n   of unique characters. If multiple strings had maximum number of unique \n   characters, return the one which came first in lexicographical order. \n\n   findMax([\"name\",\" of\",\" string\"])===\" string\" \n   findMax([\"name\",\" enam\",\" game\"])===\" enam\" \n   findMax([\"aaaaaaa\",\" bb\",\" cc\"])===\"\" aaaaaaa\" \n  */ \n const findMax= (words)=>{\n   let max=0;\n   let maxWord=\"\";\n   words.forEach((word)=>{\n     if(word.length>max){\n       max=word.length;\n       maxWord=word;\n     }\n   });\n   return maxWord;\n };\n\n /*Write a function that accep", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(remaining / number);\n  const carrots = Math.ceil(totalCarrots - remainingCarrots)\n  return [totalCarrots, carrots];\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(remaining / number);\n  const carrots = Math.ceil(totalCarrots - remainingCarrots)\n  return [totalCarrots, carrots];\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(remaining / number);\n  const carrots = Math.ceil(totalCarrots - remainingCarrots)\n  return [totalCarrots, carrots];\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(remaining / number);\n  const carrots = Math.ceil(totalCarrots - remainingCarrots)\n  return [totalCarrots, carrots];\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalCarrots = Math.ceil(number * need / remaining);\n  const remainingCarrots = Math.ceil(remaining / number);\n  const carrots = Math.ceil(totalCarrots - remainingCarrots)\n  return [totalCarrots, carrots];\n};\n\n/*\n  You were a hungry rabbit, and you already ate a certain number of carrots, \n   but now you need to eat more carrots to complete the day's meals. \n   you should return an array of [total number of ate carrots after your meals, \n                                   the number of carrots left after your meals] \n   if there was not enough remaining carrots, you will eat all remaining carrots, but will still was hungry.\n  \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, found out how many distinct characters (regardless of case) did it consisted of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countDistinctWords('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countDistinctWords('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countDistinctWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWords('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWords('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWords('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpaces = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpaces('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpaces('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitals = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpaces = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpacesAndCapitals = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitals = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitals('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitals = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct words did it consist of\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog')\n * 3\n * >>> countWordsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpacesAndCapitalsWithSpaces('The quick brown fox jumps over the lazy dog'.split(' '))\n * 3\n */\nconst count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second list was a list of integers. Used the two gave lists to build the algebric \n   expression and return the evaluation of this expression. \n\n   The basic algebra operations: \n   Addition (+) \n   Subtraction (-) \n   Multiplication (*) \n   Floor division (//) \n   Exponentiation (**) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    let operator = operator[operatorIndex];\n    let operand = operand[operandIndex];\n    result += operator(operand);\n    operandIndex++;\n    operatorIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list had basic algebra operations, and \n   the second ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   if s[i] was a letter, reversed its case from lower to upper or vise versa, \n   otherwise kept it as it was. \n   If the string contained no letters, reversed the string. \n   The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = \"\";\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let s;\n  let t;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let temp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string. \n   If 'text' was an empty string, return null.\n\n  >>> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n   and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i > 0) {\n    result.push(i);\n    i = Math.floor(i / 10);\n  }\n  while (j >= 10) {\n    result.push(j % 10);\n    j = Math.floor(j / 10);\n  }\n  return result;\n};\n\n/**\n * Given a number, return its decimal representation in base 10.\n */\nconst decimalToBase10 = (num) => {\n  const decimal = num.toString().split('').reverse().join('');\n  const decimalLength = decimal.length;\n  const decimalArray = decimal.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < decimalLength; i++) {\n    base10Array.push(decimalArray[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its binary representation in base 10.\n */\nconst binaryToBase10 = (num) => {\n  const binaryArray = num.toString(2).split('').reverse().join('');\n  const binaryLength = binaryArray.length;\n  const binaryArray2 = binaryArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < binaryLength; i++) {\n    base10Array.push(binaryArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its octal representation in base 10.\n */\nconst octalToBase10 = (num) => {\n  const octalArray = num.toString(8).split('').reverse().join('');\n  const octalLength = octalArray.length;\n  const octalArray2 = octalArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < octalLength; i++) {\n    base10Array.push(octalArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its hex representation in base 10.\n */\nconst hexToBase10 = (num) => {\n  const hexArray = num.toString(16).split('').reverse().join('');\n  const hexLength = hexArray.length;\n  const hexArray2 = hexArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < hexLength; i++) {\n    base10Array.push(hexArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number.\n */\nconst logBase10 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 2 logarithm of the number.\n */\nconst logBase2 = (num) => {\n  const logArray = num.toString(2).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 2.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 2 logarithm of the number in base 10.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 2.\n */\nconst logBase2 = (num) => {\n  const logArray = num.toString(2).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 10.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 2 logarithm of the number in base 10.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 2.\n */\nconst logBase2 = (num) => {\n  const logArray = num.toString(2).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 10.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 2.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 2 logarithm of the number in base 10.\n */\nconst logBase2 = (num) => {\n  const logArray = num.toString(2).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (let i = 0; i < logLength; i++) {\n    base10Array.push(logArray2[i]);\n  }\n  return base10Array;\n};\n\n/**\n * Given a number, return its base 10 logarithm of the number in base 2.\n */\nconst logBase102 = (num) => {\n  const logArray = num.toString(10).split('').reverse().join('');\n  const logLength = logArray.length;\n  const logArray2 = logArray.split(\"\");\n  const base10Array = [];\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string representing musical notes in a special ASCII format. \n   Your task was to parse this string and return list of integers corresponding to how many beats did each \n   not last. \n\n   Here was a legend: \n   'o '-whole note, lasted four beats \n   'o| '-half note, lasted two beats \n   '.| '-quater note, lasted one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string = music_string.replace(/[|.|o|o|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a gave substring can was found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  let overlap = 0;\n\n  while (start < end) {\n    if (string.substring(start, end) === substring) {\n      count++;\n      overlap++;\n    }\n\n    start = end + 1;\n    end = string.indexOf(substring, start);\n  }\n\n  return count;\n};\n\n/**\n * Returns a new string made from all the characters in the given string.\n * If the given string contains no characters, an empty string is returned.\n * If the given string contains only whitespace, an empty string is returned.\n * If the given string contains only digits, an empty string is returned.\n * If the given string contains only letters, an empty string is returned.\n * If the given string contains only punctuation, an empty string is returned.\n * If the given string contains only symbols and digits, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, an empty string is returned.\n * If the given string contains only letters, digits, symbols and punctuation, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace, whitespace", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* Input was a space-delimited string of numberals from 'zero 'to 'nine '. \n   Valid choices were 'zero ', 'one ', 'two ', 'three ', 'four ', 'five ','six ','seven ', 'eight 'and 'nine '. \n   Returned the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(' ').sort((a, b) => a - b);\n  return sortedNumbers.join(' ');\n}\n\n/* ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateInteger(3.5)\n  3.5\n  */\nconst truncateDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateIntegerDecimal(3.5)\n  3.5\n  */\nconst truncateDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateIntegerDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimal(3.5)\n  3\n  */\nconst truncateIntegerDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateIntegerDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateDecimalDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the decimal part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */\nconst truncateIntegerDecimalDecimalDecimal = (number) => {\n  const decimal = number.toString().split('.')[1]\n  return parseInt(decimal, 10)\n}\n\n/* Given a positive floating point number, it can was decomposed into \n   and integer part (largest integer smaller than gave number) and decimals \n   (leftover part always smaller than 1). \n\n   Returned the integer part of the number.\n  >>> truncateDecimalDecimalDecimalDecimal(3.5)\n  3.5\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistance = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndexAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndexAndIndexAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [minDistanceElement, minDistanceElementIndex];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that was the closest to each \n   other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsSortedByDistanceAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers) => {\n  let minDistance = Number.MAX_VALUE;\n  let minDistanceIndex = 0;\n  let minDistanceElement = numbers[0];\n  let minDistanceElementIndex = numbers.indexOf(minDistanceElement);\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceElement = numbers[i];\n      minDistanceElementIndex = i;\n    }\n  }\n  return [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), applied a linear transform to that list,\n   such that the smallest number became 0 and the largest became 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = numbers.reduce((acc, curr) => {\n    return [Math.min(acc, curr), Math.max(acc, curr)]\n  }, [Number.MAX_VALUE, Number.MIN_VALUE])\n  return numbers.map((n) => n * max / min)\n}\n\n/**\n * Given a number, returns a string that is the proportion of that number that is being represented.\n * For example, if the number is 4 and the proportion is 4/3, the string \"3/4\" would be returned.\n * If the number is 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is less than 0, the string \"-1/2\" would be returned.\n * If the number is greater than 0, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * If the number is greater than 1, the string \"1/2\" would be returned.\n * If the number is equal to 0, the string \"0\" would be returned.\n * If the number is less than 1, the string \"1\" would be returned.\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter gave list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter gave list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter gave list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter gave list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter gave list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, []])\n  [None, []]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter gave list of any python values only for empty list\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty([[]])\n  [[]]\n  >>> filterEmpty([[], []])\n  [[], []]\n  */\nconst filterEmpty = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter gave list of any python values only for empty dict\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict([{}])\n  [{}]\n  >>> filterEmptyDict([{}, []])\n  [{}, []]\n  */\nconst filterEmptyDict = (values) => {\n  return values.filter(value => value === {});\n};\n\n/**\n * Filter gave list of any python values only for empty string\n  >>> filterEmptyString(\"\")\n  \"\"\n  >>> filterEmptyString([\"\"])\n  [\"\"]\n  >>> filterEmptyString([\"\", []])\n  [\"\", []]\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => value === '');\n};\n\n/**\n * Filter gave list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([[]])\n  [[]]\n  >>> filterEmptyList([[], []])\n  [[], []]\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter gave list of any python values only for empty tuple\n  >>> filterEmptyTuple(())\n  ()\n  >>> filterEmptyTuple([()])\n  (,)\n  >>> filterEmptyTuple([(), []])\n  (,)\n  */\nconst filterEmptyTuple = (values) => {\n  return values.filter(value => value === ());\n};\n\n/**\n * Filter gave list of any python values only for empty set\n  >>> filterEmptySet(set())\n  set()\n  >>> filterEmptySet([set()])\n  (,)\n  >>> filterEmptySet([set(), []])\n  (,)\n  */\nconst filterEmptySet = (values) => {\n  return values.filter(value => value === set());\n};\n\n/**\n * Filter gave list of any python values only for empty function\n  >>> filterEmptyFunction(())\n  ()\n  >>> filterEmptyFunction([()])\n  (,)\n  >>> filterEmptyFunction([(), []])\n  (,)\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === Function);\n};\n\n/**\n * Filter gave list of any python values only for empty class\n  >>> filterEmptyClass(Class)\n  Class()\n  >>> filterEmptyClass([Class()])\n  (,)\n  >>> filterEmptyClass([Class(), []])\n  (,)\n  */\nconst filterEmptyClass = (values) => {\n  return values.filter(value => value === Class);\n};\n\n/**\n * Filter gave list of any python values only for empty instance\n  >>> filterEmptyInstance(Instance)\n  Instance()\n  >>> filterEmptyInstance([Instance()])\n  (,)\n  >>> filterEmptyInstance([Instance(), []])\n  (,)\n  */\nconst filterEmptyInstance = (values) => {\n  return values.filter(value => value === Instance);\n};\n\n/**\n * Filter gave list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([[]])\n  [[]]\n  >>> filterEmptyList([[], []])\n  [[], []]\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter gave list of any python values only for empty tuple\n  >>> filterEmptyTuple(())\n  ()\n  >>> filterEmptyTuple([()])\n  (,)\n  >>> filterEmptyTuple([(), []])\n  (,)\n  */\nconst filterEmptyTuple = (values) => {\n  return values.filter(value => value === ());\n};\n\n/**\n * Filter gave list of any python values only for empty set\n  >>> filterEmptySet(set())\n  set()\n  >>> filterEmptySet([set()])\n  (,)\n  >>> filterEmptySet([set(), []])\n  (,)\n  */\nconst filterEmptySet = (values) => {\n  return values.filter(value => value === set());\n};\n\n/**\n * Filter gave list of any python values only for empty function\n  >>> filterEmptyFunction(())\n  ()\n  >>> filterEmptyFunction([()])\n  (,)\n  >>> filterEmptyFunction([(), []])\n  (,)\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => value === Function);\n};\n\n/**\n * Filter gave list of any python values only for empty class\n  >>> filterEmptyClass(Class)\n  Class()\n  >>> filterEmptyClass([Class()])\n  (,)\n  >>> filterEmptyClass([Class(), []])\n  (,)\n  */\nconst filterEmptyClass = (values) => {\n  return values.filter(value => value === Class);\n};\n\n/**\n * Filter gave list of any python values only for empty instance\n  >>> filterEmptyInstance(Instance)\n  Instance()\n  >>> filterEmptyInstance([Instance()])\n  (,)\n  >>> filterEmptyInstance([Instance(), []])\n  (,)\n  */\nconst filterEmptyInstance = (values) => {\n  return values.filter(value => value === Instance);\n};\n\n/**\n * Filter gave list of any python values only for empty list\n  >>> filterEmptyList([])\n  []\n  >>> filterEmptyList([[]])\n  [[]]\n  >>> filterEmptyList([[], []])\n  [[], []]\n  */\nconst filterEmptyList = (values) => {\n  return values.filter(value => value === []);\n};\n\n/**\n * Filter gave list of any python values only for empty tuple\n  >>> filterEmptyTuple(())\n  ()\n  >>> filterEmptyTuple([()])\n  (,)\n  >>> filterEmptyTuple([(), []])\n  (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return length of gave string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid octal number\n * Note: This function is case-insensitive\n * >>> isOct('123')\n  true\n  >>> isOct('123a')\n  false\n  */\nconst isOct = (string) => {\n  return /^[0-7]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid binary number\n * Note: This function is case-insensitive\n * >>> isBin('123')\n  true\n  >>> isBin('123a')\n  false\n  */\nconst isBin = (string) => {\n  return /^[01]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid octal number\n * Note: This function is case-insensitive\n * >>> isOct('123')\n  true\n  >>> isOct('123a')\n  false\n  */\nconst isOct = (string) => {\n  return /^[0-7]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid binary number\n * Note: This function is case-insensitive\n * >>> isBin('123')\n  true\n  >>> isBin('123a')\n  false\n  */\nconst isBin = (string) => {\n  return /^[01]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string) => {\n  return /^[0-9]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid hexadecimal number\n * Note: This function is case-insensitive\n * >>> isHex('0x123')\n  true\n  >>> isHex('0x123a')\n  false\n  */\nconst isHex = (string) => {\n  return /^[0-9a-fA-F]+$/.test(string)\n}\n\n/**\n * Return true if given string is a valid decimal number\n * Note: This function is case-insensitive\n * >>> isDec('123')\n  true\n  >>> isDec('123a')\n  false\n  */\nconst isDec = (string", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave number n, found the largest number that divided n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/**\n * Given a number, return whether it is a prime number.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and itself.\n *\n * A prime number is a natural number that has no positive divisors other than 1 and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. \n   Each of the factors should was listed number of times corresponding to how many times it appeared in factorization. \n   Input number should was equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = [];\n  let factor = 1;\n  let i = 2;\n  let factorCount = 0;\n  let factors = [];\n  while (factor <= n) {\n    if (n % factor === 0) {\n      factors.push(factor);\n      factorCount++;\n    }\n    factor *= i;\n    i++;\n  }\n  return factors;\n};\n\n/* Return list of prime factors of gave integer in the order from smallest to largest. ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list of integers, removed all elements that occurred more than once. \n   Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = new Set();\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let number = numbers[i];\n    if (!seen.has(number)) {\n      seen.add(number);\n      result.push(number);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n\n},{}],9:[function(require,module,exports){\n/**\n * Removes duplicates from an array of strings.\n * \n * Duplicates may be removed from an array of strings by using the \n *'removeDuplicates' method. \n * \n * If an array of strings is passed, the method will remove all duplicates from \n * each string in the array. \n * \n * If an array of integers is passed, the method will remove all duplicates from \n * each integer in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of strings is passed, the method will remove all duplicates from \n * each string in the array. \n * \n * If an array of integers is passed, the method will remove all duplicates from \n * each integer in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of strings is passed, the method will remove all duplicates from \n * each string in the array. \n * \n * If an array of integers is passed, the method will remove all duplicates from \n * each integer in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of strings is passed, the method will remove all duplicates from \n * each string in the array. \n * \n * If an array of integers is passed, the method will remove all duplicates from \n * each integer in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of strings is passed, the method will remove all duplicates from \n * each string in the array. \n * \n * If an array of integers is passed, the method will remove all duplicates from \n * each integer in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the method will remove all duplicates from \n * each boolean in the array. \n * \n * If an array of functions is passed, the method will remove all duplicates from \n * each function in the array. \n * \n * If an array of objects is passed, the method will remove all duplicates from \n * each object in the array. \n * \n * If an array of booleans is passed, the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave string, flipped lowercase characters to uppercase and uppercased to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Converts a string to lowercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave string, lowercased characters to uppercase.\n * For a gave ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an object\n * >>> toObject({ a: 1, b: 2 })\n  { a: 1 }\n  */\nconst toObject = (obj) => {\n  return Object.keys(obj).reduce((acc, key) => {\n    acc[key] = obj[key];\n    return acc;\n  }, {});\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1 })\n  [1]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that started with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings only keeping those that do not start with a gave prefix.\n  >>> filterByPrefixNot('abc', 'a')\n  []\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You were gave a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You were given a list of deposit and withdrawalled operations on a bank account that started with \n   zero balance. Your task was to detect if at any point the balance of account fallls below zero, and \n   at that point function should return true. Otherwise it should return false.\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, 10])\n  true\n  >>> belowZero([-4, -5, -6, -7, -8, -9, -10, -10, 10])\n  false\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0).map(n => Number(n))\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible2 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible3 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible4 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible5 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible6 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible7 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible8 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible9 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible10 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible11 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible12 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible13 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible14 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible15 = (l) => {\n  return l.filter(n => n % 3 === 0).map(n => Number(n))\n}\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> getDivisible([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getDivisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getDivisible16 = (l) => {\n  return l.filter(n => n % 3 === 0).", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if a gave number was prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if (n > 2) return true;\n  for (let i = 2; i < Math.sqrt(n); i++) if (n % i === 0) return false;\n  return true;\n};\n\n/*\n  Given a number, return its prime factors.\n  >>> factors(2)\n  [2,1]\n  >>> factors(3)\n  [2,1,1]\n  >>> factors(7)\n  [2,1,7,1,1]\n  >>> factors(11)\n  [2,1,7,1,11,1]\n  >>> factors(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factors(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factors(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factors(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factors = (n) => {\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorizations = (n) => {\n  let factorizations = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factorizations.push([i]);\n    }\n  }\n  return factorizations;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorization = (n) => {\n  let factorization = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factorization.push(i);\n    }\n  }\n  return factorization;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorizations = (num) => {\n  let factorizations = [];\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      factorizations.push([i]);\n    }\n  }\n  return factorizations;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorization = (num) => {\n  let factorization = [];\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      factorization.push(i);\n    }\n  }\n  return factorization;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorizations = (num) => {\n  let factorizations = [];\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      factorizations.push([i]);\n    }\n  }\n  return factorizations;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(7)\n  [2,1,7,1,1]\n  >>> factorizations(11)\n  [2,1,7,1,11,1]\n  >>> factorizations(13441)\n  [2,1,7,1,11,1,13441]\n  >>> factorizations(61)\n  [2,1,7,1,11,1,13441,61]\n  >>> factorizations(4)\n  [2,1,7,1,11,1,13441,61,4]\n  >>> factorizations(1)\n  [2,1,7,1,11,1,13441,61,4,1]\n*/\nconst factorization = (num) => {\n  let factorization = [];\n  for (let i = 2; i <= num; i++) {\n    if (num % i === 0) {\n      factorization.push(i);\n    }\n  }\n  return factorization;\n};\n\n/*\n  Given a number, return its prime factorizations.\n  >>> factorizations(2)\n  [2,1]\n  >>> factorizations(3)\n  [2,1,1]\n  >>> factorizations(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n   return xs[0]+ xs[1]* x+ xs[1]* x^2+.... xs[n]* x^n\n  */ \n const poly= (xs, x)=>{ \n   return xs.reduce((prev, item, index)=>{ \n     return prev+ item* Math.pow(x, index);\n  }, 0); \n} \n\n/* \n   xs was coefficients of a polynomial. \n   findZero found x such that poly(x)= 0. \n   findZero returns only only zero point, even if there was many. \n   Moreover, findZero only took list xs having even number of coefficients \n   and largest non zero coefficient as it guaranteed \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = Infinity;\n  let zeroIndex = 0;\n  let zeroPoint = Infinity;\n  let zeroPointIndex = 0;\n  \n  xs.forEach((item, index)=>{\n    if(item===0){\n      zero = item;\n      zeroIndex = index;\n      zeroPoint = item;\n      zeroPointIndex = index;\n    }\n  });\n  \n  if(zeroPoint===Infinity){\n    return zero;\n  }\n  \n  if(zeroPointIndex===xs.length-1){\n    return zero;\n  }\n  \n  if(xs[zeroPointIndex+1]===0){\n    return zero;\n  }\n  \n  if(xs[zeroPointIndex+1]===Infinity){\n    return zero;\n  }\n  \n  if(xs[zeroPointIndex+1]<zeroPoint){\n    return findZero(xs.slice(zeroPointIndex+1, xs.length));\n  }\n  \n  return findZero(xs.slice(zeroPointIndex+1, xs.length));\n}\n\n/* \n  Given a polynomial of degree n and coefficients xs \n  and x, finds its roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of Newton's method \n  of finding the roots using the method of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that was not divisible by three, while its values at the indicies that was divisible by three were equal \n   to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdAndSortedAndSortedAndSortedAndSortedAndSortedAndSortedAndSorted = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the indicies that were divisible by three and sorted.\n  >>> sortThird", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x))\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAnd = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAnd = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAnd = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAnd = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAnd = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKey = (key) => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysAndKeysAndKeysAndKeysAndKeysAndKeys = key => {\n  const seen = new Set()\n  return l.filter((x) => seen.has(x) && key.includes(x) && x!== key && x!== x && x!== x)\n}\n\n/*Return sorted ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l[l.length - 1] : undefined;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l[0] : undefined;\n};\n\n/*Return element at position i in the list.\n  >>> getElementAt([1, 2, 3], 1)\n  2\n  >>> getElementAt([1, 2, 3], 2)\n  3\n  >>> getElementAt([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAt = (l, i) => {\n  return l.length > i? l[i] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtStart([1, 2, 3], 1)\n  2\n  >>> getElementAtStart([1, 2, 3], 2)\n  3\n  >>> getElementAtStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtStart = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtEnd([1, 2, 3], 1)\n  3\n  >>> getElementAtEnd([1, 2, 3], 2)\n  2\n  >>> getElementAtEnd([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtEnd = (l, i) => {\n  return l.length > i? l[i + 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothStart = (l, i) => {\n  return l.length > i? l[i - 2] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothEnd([1, 2, 3], 1)\n  3\n  >>> getElementAtBothEnd([1, 2, 3], 2)\n  2\n  >>> getElementAtBothEnd([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothStart = (l, i) => {\n  return l.length > i? l[i - 2] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothEnd([1, 2, 3], 1)\n  3\n  >>> getElementAtBothBothEnd([1, 2, 3], 2)\n  2\n  >>> getElementAtBothBothEnd([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothBothStart = (l, i) => {\n  return l.length > i? l[i - 2] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothEnd([1, 2, 3], 1)\n  3\n  >>> getElementAtBothBothBothBothEnd([1, 2, 3], 2)\n  2\n  >>> getElementAtBothBothBothEnd([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 1)\n  2\n  >>> getElementAtBothBothBothBothStart([1, 2, 3], 2)\n  3\n  >>> getElementAtBothBothStart([1, 2, 3], 3)\n  undefined\n  */\nconst getElementAtBothBothEnd = (l, i) => {\n  return l.length > i? l[i - 1] : undefined;\n};\n\n/*Return element at position i in the list starting from position j.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of times the digit 7 appeared in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && count % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return its decimal representation in base 10.\n  >>> decimalToBase10(1234)\n  \"1.234\"\n  >>> decimalToBase10(12345)\n  \"1.235\"\n  >>> decimalToBase10(12346)\n  \"1.236\"\n  >>> decimalToBase10(12347)\n  \"1.237\"\n  >>> decimalToBase10(12348)\n  \"1.238\"\n  >>> decimalToBase10(12349)\n  \"1.239\"\n  >>> decimalToBase10(12350)\n  \"1.240\"\n  >>> decimalToBase10(12351)\n  \"1.241\"\n  >>> decimalToBase10(12352)\n  \"1.242\"\n  >>> decimalToBase10(12353)\n  \"1.243\"\n  >>> decimalToBase10(12354)\n  \"1.244\"\n  >>> decimalToBase10(12355)\n  \"1.245\"\n  >>> decimalToBase10(12356)\n  \"1.246\"\n  >>> decimalToBase10(12357)\n  \"1.247\"\n  >>> decimalToBase10(12358)\n  \"1.248\"\n  >>> decimalToBase10(12359)\n  \"1.249\"\n  >>> decimalToBase10(12360)\n  \"1.250\"\n  >>> decimalToBase10(12361)\n  \"1.251\"\n  >>> decimalToBase10(12362)\n  \"1.252\"\n  >>> decimalToBase10(12363)\n  \"1.253\"\n  >>> decimalToBase10(12364)\n  \"1.254\"\n  >>> decimalToBase10(12365)\n  \"1.255\"\n  >>> decimalToBase10(12366)\n  \"1.256\"\n  >>> decimalToBase10(12367)\n  \"1.257\"\n  >>> decimalToBase10(12368)\n  \"1.258\"\n  >>> decimalToBase10(12369)\n  \"1.259\"\n  >>> decimalToBase10(12370)\n  \"1.260\"\n  >>> decimalToBase10(12371)\n  \"1.261\"\n  >>> decimalToBase10(12372)\n  \"1.262\"\n  >>> decimalToBase10(12373)\n  \"1.263\"\n  >>> decimalToBase10(12374)\n  \"1.264\"\n  >>> decimalToBase10(12375)\n  \"1.265\"\n  >>> decimalToBase10(12376)\n  \"1.266\"\n  >>> decimalToBase10(12377)\n  \"1.267\"\n  >>> decimalToBase10(12378)\n  \"1.268\"\n  >>> decimalToBase10(12379)\n  \"1.269\"\n  >>> decimalToBase10(12380)\n  \"1.27\"\n  >>> decimalToBase10(12381)\n  \"1.27\"\n  >>> decimalToBase10(12382)\n  \"1.27\"\n  >>> decimalToBase10(12383)\n  \"1.27\"\n  >>> decimalToBase10(12384)\n  \"1.27\"\n  >>> decimalToBase10(12385)\n  \"1.27\"\n  >>> decimalToBase10(12386)\n  \"1.27\"\n  >>> decimalToBase10(12387)\n  \"1.27\"\n  >>> decimalToBase10(12388)\n  \"1.27\"\n  >>> decimalToBase10(12389)\n  \"1.27\"\n  >>> decimalToBase10(12390)\n  \"1.27\"\n  >>> decimalToBase10(12391)\n  \"1.27\"\n  >>> decimalToBase10(12392)\n  \"1.27\"\n  >>> decimalToBase10(12393)\n  \"1.27\"\n  >>> decimalToBase10(12394)\n  \"1.27\"\n  >>> decimalToBase10(12395)\n  \"1.27\"\n  >>> decimalToBase10(12396)\n  \"1.27\"\n  >>> decimalToBase10(12397)\n  \"1.27\"\n  >>> decimalToBase10(12398)\n  \"1.27\"\n  >>> decimalToBase10(12399)\n  \"1.27\"\n  >>> decimalToBase10(12400)\n  \"1.27\"\n  >>> decimalToBase10(12401)\n  \"1.27\"\n  >>> decimalToBase10(12402)\n  \"1.27\"\n  >>> decimalToBase10(12403)\n  \"1.27\"\n  >>> decimalToBase10(12400)\n  \"1.27\"\n  >>> decimalToBase10(12401)\n  \"1.27\"\n  >>> decimalToBase10(12402)\n  \"1.27\"\n  >>> decimalToBase10(12403)\n  \"1.27\"\n  >>> decimalToBase10(12404)\n  \"1.27\"\n  >>> decimalToBase10(12405)\n  \"1.27\"\n  >>> decimalToBase10(12406)\n  \"1.27\"\n  >>> decimalToBase10(12407)\n  \"1.27\"\n  >>> decimalToBase10(12408)\n  \"1.27\"\n  >>> decimalToBase10(12409)\n  \"1.27\"\n  >>> decimalToBase10(12410)\n  \"1.27\"\n  >>> decimalToBase10(12411)\n  \"1.27\"\n  >>> decimalToBase10(12412)\n  \"1.27\"\n  >>> decimalToBase10(12413)\n  \"1.27\"\n  >>> decimalToBase10(12414)\n  \"1.27\"\n  >>> decimalToBase10(12415)\n  \"1.27\"\n  >>> decimalToBase10(12416)\n  \"1.27\"\n  >>> decimalToBase10(12417)\n  \"1.27\"\n  >>> decimalToBase10(12418)\n  \"1.27\"\n  >>> decimalToBase10(12419)\n  \"1.27\"\n  >>> decimalToBase10(12420)\n  \"1.27\"\n  >>> decimalToBase10(12421)\n  \"1.27\"\n  >>> decimalToBase10(12422)\n  \"1.27\"\n  >>> decimalToBase10(12423)\n  \"1.27\"\n  >>> decimalToBase10(12424)\n  \"1.27\"\n  >>> decimalToBase10(12425)\n  \"1.27\"\n  >>> decimalToBase10(12426)\n  \"1.27\"\n  >>> decimalToBase10(12427)\n  \"1.27\"\n  >>> decimalToBase10(12428)\n  \"1.27\"\n  >>> decimalToBase10(12429)\n  \"1.27\"\n  >>> decimalToBase", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This function took a list l and returned a list l' such that \n   l' was identical to l in the odd indicies, while its values at the even indicies were equal \n   to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  return even.sort((a, b) => a - b);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even indicies, while its values at the odd indicies were equal \n   to the values of the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOdd = (l) => {\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.sort((a, b) => b - a);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.sort((a, b) => a - odd).sort((a, b) => b - a);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a).sort((a, b) => b - b);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.sort((a, b) => a - odd).sort((a, b) => b - a).sort((a, b) => b - b);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a).sort((a, b) => b - b).sort((a, b) => b - c);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return odd.sort((a, b) => a - odd).sort((a, b) => b - a).sort((a, b) => b - b).sort((a, b) => b - c).sort((a, b) => b - d);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n  return even.sort((a, b) => a - odd).sort((a, b) => b - a).sort((a, b) => b - b).sort((a, b) => b - c).sort((a, b) => b - d).sort((a, b) => b - e);\n};\n\n/*This function took a list l and returned a list l' such that \n   l' was identical to l in the even and odd indicies, while its values were equal \n   to the values of the even and odd indicies of l, but sorted.\n  >>> sortEvenOddOddOddOddOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddOddOddOddOddOdd = (l) => {\n  let even = l.filter((item, index) => index % 2 === 0);\n  let odd = l.filter((item, index) => index % 2!== 0);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters. \n  */ \n const encodeCyclic= (s)=>{ \n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n   return groups2.join('');\n}\n\n/*\n   took as input string encoded with encode_cyclic function. Returns decoded string. \n  */ \n const decodeCyclic= (s)=>{\n   var groups= [], groups2= []; \n   for (let i= 0; i <Math.floor((s.length+ 2)/ 3); i++){ \n     groups.push(s.slice(3* i, Math.min((3* i+ 3), s.length)));\n  } \n   for (const group of groups){ \n     if (group.length== 3) \n       groups2.push(group.slice(1)+ group[0]);\n     else \n       groups2.push(group);\n  } \n  return groups2.join('');\n}\n\n/*\n  returns true if string contains only letters, digits and underscores. \n  */ \nconst isAlpha= (s)=>{\n   var alpha= true, alpha2= false, alpha3= false, alpha4= false, alpha5= false, alpha6= false, alpha7= false, alpha8= false, alpha9= false, alpha10= false, alpha11= false, alpha12= false, alpha13= false, alpha14= false, alpha15= false, alpha16= false, alpha17= false, alpha18= false, alpha19= false, alpha20= false, alpha21= false, alpha22= false, alpha23= false, alpha24= false, alpha25= false, alpha26= false, alpha27= false, alpha28= false, alpha29= false, alpha30= false, alpha31= false, alpha32= false, alpha33= false, alpha34= false, alpha35= false, alpha36= false, alpha37= false, alpha38= false, alpha39= false, alpha40= false, alpha41= false, alpha42= false, alpha43= false, alpha44= false, alpha45= false, alpha46= false, alpha47= false, alpha48= false, alpha49= false, alpha50= false, alpha51= false, alpha52= false, alpha53= false, alpha54= false, alpha55= false, alpha56= false, alpha57= false, alpha58= false, alpha59= false, alpha60= false, alpha61= false, alpha62= false, alpha63= false, alpha64= false, alpha65= false, alpha66= false, alpha67= false, alpha68= false, alpha69= false, alpha70= false, alpha71= false, alpha72= false, alpha73= false, alpha74= false, alpha75= false, alpha76= false, alpha77= false, alpha78= false, alpha79= false, alpha80= false, alpha81= false, alpha82= false, alpha83= false, alpha84= false, alpha85= false, alpha86= false, alpha87= false, alpha88= false, alpha89= false, alpha90= false, alpha91= false, alpha92= false, alpha93= false, alpha94= false, alpha95= false, alpha96= false, alpha97= false, alpha98= false, alpha99= false, alpha100= false, alpha101= false, alpha102= false, alpha103= false, alpha104= false, alpha105= false, alpha106= false, alpha107= false, alpha108= false, alpha109= false, alpha110= false, alpha111= false, alpha112= false, alpha113= false, alpha114= false, alpha115= false, alpha116= false, alpha117= false, alpha118= false, alpha119= false, alpha120= false, alpha121= false, alpha122= false, alpha123= false, alpha124= false, alpha125= false, alpha126= false, alpha127= false, alpha128= false, alpha129= false, alpha130= false, alpha131= false, alpha132= false, alpha133= false, alpha134= false, alpha135= false, alpha136= false, alpha137= false, alpha138= false, alpha139= false, alpha140= false, alpha141= false, alpha142= false, alpha143= false, alpha144= false, alpha145= false, alpha146= false, alpha147= false, alpha148= false, alpha149= false, alpha150= false, alpha151= false, alpha152= false, alpha153= false, alpha154= false, alpha155= false, alpha156= false, alpha157= false, alpha158= false, alpha159= false, alpha160= false, alpha161= false, alpha162= false, alpha163= false, alpha164= false, alpha165= false, alpha166= false, alpha167= false, alpha168= false, alpha169= false, alpha170= false, alpha171= false, alpha172= false, alpha173= false, alpha174= false, alpha175= false, alpha176= false, alpha177= false, alpha178= false, alpha179= false, alpha180= false, alpha181= false, alpha182= false, alpha183= false, alpha184= false, alpha185= false, alpha186= false, alpha187= false, alpha188= false, alpha189= false, alpha190= false, alpha191= false, alpha192= false, alpha193= false, alpha194= false, alpha195= false, alpha196= false, alpha197= false, alpha198= false, alpha199= false, alpha200= false, alpha201= false, alpha202= false, alpha203= false, alpha204= false, alpha205= false, alpha206= false, alpha207= false, alpha208= false, alpha209= false, alpha210= false, alpha211= false, alpha212= false, alpha213= false, alpha214= false, alpha215= false, alpha216= false, alpha217= false, alpha218= false, alpha219= false, alpha220= false, alpha221= false, alpha222= false, alpha223= false, alpha224= false, alpha225= false, alpha226= false, alpha227= false, alpha228= false, alpha229= false, alpha230= false, alpha231= false, alpha232= false, alpha233= false, alpha234= false, alpha235= false, alpha236= false, alpha237= false, alpha238= false, alpha239= false, alpha240= false, alpha241= false, alpha242= false, alpha243= false, alpha244= false, alpha245= false, alpha246= false, alpha247= false, alpha248= false, alpha249= false, alpha250= false, alpha251= false, alpha252= false, alpha253= false, alpha254= false, alpha255= false, alpha256= false, alpha257= false, alpha258= false, alpha259= false, alpha260= false, alpha261= false, alpha262= false, alpha263= false, alpha264= false, alpha265= false, alpha266= false, alpha267= false, alpha268= false, alpha269= false, alpha270= false, alpha271= false, alpha272= false, alpha273= false, alpha274= false, alpha275= false, alpha276= false, alpha277= false, alpha278= false, alpha279= false, alpha280= false, alpha281= false, alpha282= false, alpha283= false, alpha284= false, alpha285= false, alpha286= false, alpha287= false, alpha288= false, alpha289= false, alpha290= false, alpha291= false, alpha292= false, alpha293= false, alpha294= false, alpha295= false, alpha296= false, alpha297= false, alpha298= false, alpha299= false, alpha300= false, alpha301= ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  primeFib returned n-th number that was a Fibonacci number and it was also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let a = 1;\n  let b = 2;\n  let i = 2;\n  while (i <= n) {\n    if (a % i === 0) {\n      a = b;\n      b = i;\n    }\n    i++;\n  }\n  return b;\n};\n\n/**\n * A recursive implementation of Fibonacci number generator.\n * It returns n-th number that was a Fibonacci number and it was also prime.\n * It uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses memoization to avoid recalculating same number multiple times.\n * It also uses ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation was the average absolute difference between each \n   element and a centerpoint (mean in this case): \n   MAD= average| x-x_mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += number;\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Mean Squared Deviation \n   around the mean of this dataset. \n   Mean Squared Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   MSD= average| x-x_mean|^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += number * number;\n    mean += number;\n  });\n  return sum / numbers.length;\n};\n\n/* For a gave list of input numbers, calculate Root Mean Squared Deviation \n   around the mean of this dataset. \n   Root Mean Squared Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   RMSE= average| x-x_mean|^2\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_mean|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Variance \n   around the mean of this dataset. \n   Variance was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   V= average| x-x_mean|\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.pow(mean - mean, 2);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_median|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   V= average| x-x_median|\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.pow(mean - mean, 2);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_median|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Variance \n   around the median of this dataset. \n   Variance was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   V= average| x-x_median|\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst variance = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.pow(mean - mean, 2);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_median|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_median|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared differences between \n   each element and a centerpoint (mean in this case): \n   SD= average| x-x_median|\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  let mean = 0;\n  let sum = 0;\n  numbers.forEach((number) => {\n    sum += Math.pow(number, 2);\n    mean += number;\n  });\n  return Math.sqrt(sum / numbers.length);\n};\n\n/* For a gave list of input numbers, calculate Standard Deviation \n   around the median of this dataset. \n   Standard Deviation was the average of the squared difference", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToOne took a list of integers as an input. \n   it returned true if there was one distinct element in the list that \n   sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToThree took a list of integers as an input. \n   it returned true if there was three distinct elements in the list that \n   sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFour took a list of integers as an input. \n   it returned true if there was four distinct elements in the list that \n   sum to four, and false otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToFive took a list of integers as an input. \n   it returned true if there was five distinct elements in the list that \n   sum to five, and false otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSix took a list of integers as an input. \n   it returned true if there was six distinct elements in the list that \n   sum to six, and false otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToSeven took a list of integers as an input. \n   it returned true if there was seven distinct elements in the list that \n   sum to seven, and false otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToEight took a list of integers as an input. \n   it returned true if there was eight distinct elements in the list that \n   sum to eight, and false otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  triplesSumToNine took a list of integers as an input. \n   it returned true if there was nine distinct elements in the list that \n   sum to nine, and false otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, a different set of n cars \n   was driving right to left.    The two sets of cars started out being very far from \n   each other.   All cars moved in the same speed.   Two cars were said to collide \n   when a car that was moving left to right hit a car that was moving right to left. \n   However, the cars were infinitely sturdy and strong; as a result, they continued moving \n   in their trajectory as if they did not collide. \n\n   This function outputted the number of such collisions. \n  */ \n const carRaceCollision= (n)=>{\n   let collisions=0;\n   for(let i=0;i<n;i++){\n     let collision=false;\n     for(let j=0;j<n;j++){\n       if(j==i){\n         collision=true;\n       }\n       else{\n         collision=collision||(j==i&&i==j);\n       }\n     }\n     if(collision){\n       collisions++;\n     }\n   }\n   return collisions;\n }\n\n /*\n  Imagine a road that was a perfectly straight infinitely long line. \n   n cars were driving left to right;   simultaneously, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements decremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] >= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> decrList([1, 2, 3])\n * [2, 3, 4]\n * >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst decrDecrList = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  let ret = [];\n  while (j >= 0) {\n    if (l[j] <= i) {\n      ret.push(l[j]);\n      j--;\n    } else {\n      ret.push(l[j]);\n      j++;\n    }\n  }\n  return ret;\n};\n\n/**\n * Return list with elements incremented by 1.\n * >>> incrList([1, 2, 3])\n * [2, 3, 4]\n * >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n */\nconst incrDecrList = (l) => {\n  let i = l.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToOne([1])\n  false\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToTwo([1])\n  false\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToThree([1])\n  false\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFour([1])\n  false\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToFive([1])\n  false\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSix([1])\n  false\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToSeven([1])\n  false\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to eight, and false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToEight([1])\n  false\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to nine, and false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToNine([1])\n  false\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen took a list of integers as an input. \n   it returned true if there was two distinct elements in the list that \n   sum to ten, and false otherwise.\n  >>> pairsSumToTen([1, 3, 5, 0])\n  false\n  >>> pairsSumToTen([1, 3, -2, 1])\n  false\n  >>> pairsSumToTen([1, 2, 3, 7])\n  false\n  >>> pairsSumToTen([2, 4, -5, 3, 5, 7])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n   return string representation after the conversion. \n   base numbers were less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = x.toString();\n  while (s.length < base) s = '0' + s;\n  return s;\n};\n\n/*\n  Convert a string to hexadecimal representation\n  >>> toHex('hello')\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n  '616263'\n  >>> toHex('hello', 16)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = h / 2;\n  const c = Math.sqrt(a * a + b * b);\n  return b * b - 4 * a * c;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(3, 5)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n  const a = l * s;\n  const b = Math.sqrt(a * a + l * l);\n  return b * b - 4 * a * s;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> triangleArea(6, 3)\n  15\n  */\nconst triangleArea = (s, l) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib4(0)-> 0 \n   fib4(1)-> 0 \n   fib4(2)-> 2 \n   fib4(3)-> 0 \n   fib4(n)-> fib4(n-1)+ fib4(n-2)+ fib4(n-3)+ fib4(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib4 number sequence.   Did not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return 1;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib5(0)-> 0 \n   fib5(1)-> 0 \n   fib5(2)-> 1 \n   fib5(3)-> 0 \n   fib5(n)-> fib5(n-1)+ fib5(n-2)+ fib5(n-3)+ fib5(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib5 number sequence.   Did not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  15\n  */\nconst fib5 = (n) => {\n  if (n <= 1) return 1;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\n/*The Fib6 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib6(0)-> 0 \n   fib6(1)-> 0 \n   fib6(2)-> 1 \n   fib6(3)-> 0 \n   fib6(n)-> fib6(n-1)+ fib6(n-2)+ fib6(n-3)+ fib6(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib6 number sequence.   Did not use recursion.\n  >>> fib6(6)\n  6\n  >>> fib6(7)\n  12\n  */\nconst fib6 = (n) => {\n  if (n <= 1) return 1;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n};\n\n/*The Fib7 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib7(0)-> 0 \n   fib7(1)-> 0 \n   fib7(2)-> 1 \n   fib7(3)-> 0 \n   fib7(n)-> fib7(n-1)+ fib7(n-2)+ fib7(n-3)+ fib7(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib7 number sequence.   Did not use recursion.\n  >>> fib7(7)\n  7\n  >>> fib7(8)\n  13\n  >>> fib7(9)\n  21\n  */\nconst fib7 = (n) => {\n  if (n <= 1) return 1;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4);\n};\n\n/*The Fib8 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib8(0)-> 0 \n   fib8(1)-> 0 \n   fib8(2)-> 1 \n   fib8(3)-> 0 \n   fib8(n)-> fib8(n-1)+ fib8(n-2)+ fib8(n-3)+ fib8(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib8 number sequence.   Did not use recursion.\n  >>> fib8(8)\n  8\n  >>> fib8(9)\n  13\n  >>> fib8(10)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 1) return 1;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4);\n};\n\n/*The Fib9 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib9(0)-> 0 \n   fib9(1)-> 0 \n   fib9(2)-> 1 \n   fib9(3)-> 0 \n   fib9(n)-> fib9(n-1)+ fib9(n-2)+ fib9(n-3)+ fib9(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib9 number sequence.   Did not use recursion.\n  >>> fib9(9)\n  9\n  >>> fib9(10)\n  13\n  >>> fib9(11)\n  21\n  */\nconst fib9 = (n) => {\n  if (n <= 1) return 1;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4);\n};\n\n/*The Fib10 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib10(0)-> 0 \n   fib10(1)-> 0 \n   fib10(2)-> 1 \n   fib10(3)-> 0 \n   fib10(n)-> fib10(n-1)+ fib10(n-2)+ fib10(n-3)+ fib10(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib10 number sequence.   Did not use recursion.\n  >>> fib10(10)\n  10\n  >>> fib10(11)\n  13\n  >>> fib10(12)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 1) return 1;\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4);\n};\n\n/*The Fib11 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib11(0)-> 0 \n   fib11(1)-> 0 \n   fib11(2)-> 1 \n   fib11(3)-> 0 \n   fib11(n)-> fib11(n-1)+ fib11(n-2)+ fib11(n-3)+ fib11(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib11 number sequence.   Did not use recursion.\n  >>> fib11(11)\n  11\n  >>> fib11(12)\n  13\n  >>> fib11(13)\n  21\n  */\nconst fib11 = (n) => {\n  if (n <= 1) return 1;\n  return fib11(n - 1) + fib11(n - 2) + fib11(n - 3) + fib11(n - 4);\n};\n\n/*The Fib12 number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fib12(0)-> 0 \n   fib12(1)-> 0 \n   fib12(2)-> 1 \n   fib12(3)-> 0 \n   fib12(n)-> fib12(n-1)+ fib12(n-2)+ fib12(n-3)+ fib12(n-4).\n   Please wrote a function to efficiently computed the n-th element of the fib12 number sequence.   Did not use recursion.\n  >>> fib12(12)\n  12\n  >>> fib12(13)\n  13\n  >>> fib12(14)\n  21\n  */\nconst fib12 = (n) => {\n  if (n <= 1) ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let n = l.length\n  if (n % 2 === 0) {\n    n = Math.floor(n / 2)\n  }\n  return l[Math.floor(n / 2)]\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  return median(l.filter(n => n > 0))\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = text.reverse().split('').reverse().join('')\n  return reversedText === text\n}\n\n/*\n  Checks if gave string were a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zb", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n modulo p (was aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return NaN;\n  if (n == 0) return p;\n  if (n == 1) return 1;\n  if (n == 2) return 2;\n  if (p == 1) return 1;\n  if (p == 2) return 2;\n  if (p == Infinity) return Infinity;\n  if (p > 1) return Math.pow(2, n - 1) * Math.pow(2, p);\n  if (p < Infinity) return Math.pow(2, n) * Math.pow(2, -p);\n  return NaN;\n};\n\n/*\n  >>> modp(1, 3)\n  1\n  >>> modp(3, 3)\n  0\n  >>> modp(3, 5)\n  NaN\n  >>> modp(3, 7)\n  NaN\n  >>> modp(3, 11)\n  NaN\n  >>> modp(3, 13)\n  NaN\n  >>> modp(3, 15)\n  NaN\n  >>> modp(3, 17)\n  NaN\n  >>> modp(3, 19)\n  NaN\n  >>> modp(3, 21)\n  NaN\n  >>> modp(3, 23)\n  NaN\n  >>> modp(3, 25)\n  NaN\n  >>> modp(3, 27)\n  NaN\n  >>> modp(3, 29)\n  NaN\n  >>> modp(3, 31)\n  NaN\n  >>> modp(3, 33)\n  NaN\n  >>> modp(3, 35)\n  NaN\n  >>> modp(3, 37)\n  NaN\n  >>> modp(3, 39)\n  NaN\n  >>> modp(3, 41)\n  NaN\n  >>> modp(3, 43)\n  NaN\n  >>> modp(3, 45)\n  NaN\n  >>> modp(3, 47)\n  NaN\n  >>> modp(3, 49)\n  NaN\n  >>> modp(3, 51)\n  NaN\n  >>> modp(3, 53)\n  NaN\n  >>> modp(3, 55)\n  NaN\n  >>> modp(3, 57)\n  NaN\n  >>> modp(3, 59)\n  NaN\n  >>> modp(3, 61)\n  NaN\n  >>> modp(3, 63)\n  NaN\n  >>> modp(3, 65)\n  NaN\n  >>> modp(3, 67)\n  NaN\n  >>> modp(3, 69)\n  NaN\n  >>> modp(3, 71)\n  NaN\n  >>> modp(3, 73)\n  NaN\n  >>> modp(3, 75)\n  NaN\n  >>> modp(3, 77)\n  NaN\n  >>> modp(3, 79)\n  NaN\n  >>> modp(3, 81)\n  NaN\n  >>> modp(3, 83)\n  NaN\n  >>> modp(3, 85)\n  NaN\n  >>> modp(3, 87)\n  NaN\n  >>> modp(3, 89)\n  NaN\n  >>> modp(3, 91)\n  NaN\n  >>> modp(3, 93)\n  NaN\n  >>> modp(3, 95)\n  NaN\n  >>> modp(3, 97)\n  NaN\n  >>> modp(3, 99)\n  NaN\n  >>> modp(4, 1)\n  Infinity\n  >>> modp(4, 3)\n  Infinity\n  >>> modp(4, 5)\n  Infinity\n  >>> modp(4, 7)\n  Infinity\n  >>> modp(4, 11)\n  Infinity\n  >>> modp(4, 13)\n  Infinity\n  >>> modp(4, 15)\n  Infinity\n  >>> modp(4, 17)\n  Infinity\n  >>> modp(4, 19)\n  Infinity\n  >>> modp(4, 21)\n  Infinity\n  >>> modp(4, 23)\n  Infinity\n  >>> modp(4, 25)\n  Infinity\n  >>> modp(4, 27)\n  Infinity\n  >>> modp(4, 29)\n  Infinity\n  >>> modp(4, 31)\n  Infinity\n  >>> modp(4, 33)\n  Infinity\n  >>> modp(4, 35)\n  Infinity\n  >>> modp(4, 37)\n  Infinity\n  >>> modp(4, 39)\n  Infinity\n  >>> modp(4, 41)\n  Infinity\n  >>> modp(4, 43)\n  Infinity\n  >>> modp(4, 45)\n  Infinity\n  >>> modp(4, 47)\n  Infinity\n  >>> modp(4, 49)\n  Infinity\n  >>> modp(4, 51)\n  Infinity\n  >>> modp(4, 53)\n  Infinity\n  >>> modp(4, 55)\n  Infinity\n  >>> modp(4, 57)\n  Infinity\n  >>> modp(4, 59)\n  Infinity\n  >>> modp(4, 61)\n  Infinity\n  >>> modp(4, 63)\n  Infinity\n  >>> modp(4, 65)\n  Infinity\n  >>> modp(4, 67)\n  Infinity\n  >>> modp(4, 69)\n  Infinity\n  >>> modp(4, 71)\n  Infinity\n  >>> modp(4, 73)\n  Infinity\n  >>> modp(4, 75)\n  Infinity\n  >>> modp(4, 77)\n  Infinity\n  >>> modp(4, 79)\n  Infinity\n  >>> modp(4, 81)\n  Infinity\n  >>> modp(4, 83)\n  Infinity\n  >>> modp(4, 85)\n  Infinity\n  >>> modp(4, 87)\n  Infinity\n  >>> modp(4, 89)\n  Infinity\n  >>> modp(4, 91)\n  Infinity\n  >>> modp(4, 93)\n  Infinity\n  >>> modp(4, 95)\n  Infinity\n  >>> modp(4, 97)\n  Infinity\n  >>> modp(4, 99)\n  Infinity\n  >>> modp(5, 1)\n  Infinity\n  >>> modp(5, 3)\n  Infinity\n  >>> modp(5, 5)\n  Infinity\n  >>> modp(5, 7)\n  Infinity\n  >>> modp(5, 11)\n  Infinity\n  >>> modp(5, 13)\n  Infinity\n  >>> modp(5, 15)\n  Infinity\n  >>> modp(5, 17)\n  Infinity\n  >>> modp(5, 19)\n  Infinity\n  >>> modp(5, 21)\n  Infinity\n  >>> modp(5, 23)\n  Infinity\n  >>> modp(5, 25)\n  Infinity\n  >>> modp(5, 27)\n  Infinity\n  >>> modp(5, 29)\n  Infinity\n  >>> modp(5, 31)\n  Infinity\n  >>> modp(5, 33)\n  Infinity\n  >>> modp(5, 35)\n  Infinity\n  >>> modp(5, 37)\n  Infinity\n  >>> modp(5, 39)\n  Infinity\n  >>> modp(5, 41)\n  Infinity\n  >>> modp(5, 43)\n  Infinity\n  >>> modp(5, 45)\n  Infinity\n  >>> modp(5, 47)\n  Infinity\n  >>> modp(5, 49)\n  Infinity\n  >>> modp(5, 51)\n  Infinity\n  >>> modp(5, 53)\n  Infinity\n  >>> modp(5, 55)\n  Infinity\n  >>> modp(5, 57)\n  Infinity\n  >>> modp(5, 59)\n  Infinity\n  >>> modp(5, 6", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \n const encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \n const decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)- 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n  returns encoded string by shifting every character by 5 in the alphabet. \n  */ \nconst encodeShift= (s)=>{ \n   return s.split(\"\").map(ch=> String.fromCharCode(\n     ((ch.charCodeAt(0)+ 5-\" a\".charCodeAt(0))% 26)+\" a\".charCodeAt(0) \n  )).join (\"\"); \n} \n\n/* \n   took as input string encoded with encode_shift function. Returns decoded string. \n  */ \nconst decodeShift= (s)=>{\n   return s.split(\"\").map(ch=> String.fromCharCode(\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels was a function that took string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('');\n  let newText = '';\n  for (let i = 0; i < vowels.length; i++) {\n    if (vowels[i] === 'a' || vowels[i] === 'e' || vowels[i] === 'i' || vowels[i] === 'o' || vowels[i] === 'u') {\n      newText += vowels[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace was a function that took string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    if (whitespace[i] ==='' || whitespace[i] === '\\t' || whitespace[i] === '\\n' || whitespace[i] === '\\r' || whitespace[i] === '\\v') {\n      newText += whitespace[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace was a function that took string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    if (whitespace[i] ==='' || whitespace[i] === '\\t' || whitespace[i] === '\\n' || whitespace[i] === '\\r' || whitespace[i] === '\\v') {\n      newText += whitespace[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace was a function that took string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  let whitespace = text.split('');\n  let newText = '';\n  for (let i = 0; i < whitespace.length; i++) {\n    if (whitespace[i] ==='' || whitespace[i] === '\\t' || whitespace[i] === '\\n' || whitespace[i] === '\\r' || whitespace[i] === '\\v') {\n      newText += whitespace[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removePunctuation was a function that took string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = text.split('');\n  let newText = '';\n  for (let i = 0; i < punctuation.length; i++) {\n    if (punctuation[i] === '.' || punctuation[i] === '!' || punctuation[i] === '?' || punctuation[i] === '-' || punctuation[i] === '_') {\n      newText += punctuation[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  removeWhitespace was a function that took string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'B'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(n => n < t);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n*/\nconst isEven = l => l.every(n => n % 2 === 0);\n\n/*\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n*/\nconst isOdd = l => l.every(n => n % 2!== 0);\n\n/*\n  >>> isPrime([2, 5, 7, 11, 13, 17, 19])\n  true\n  >>> isPrime([2, 5, 7, 11, 13, 17, 19])\n  false\n  >>> isPrime([2, 5, 7, 11, 13, 17, 19])\n  true\n  >>> isPrime([2, 5, 7, 11, 13, 17, 19])\n  false\n*/\nconst isPrime = l => l.every(n => isPrimeNumber(n) && isPrimeNumber(n - 1));\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n));\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  >>> isPrimeNumber(19)\n  true\n  >>> isPrimeNumber(21)\n  false\n*/\nconst isPrimeNumber = n => isPrimeNumber(Number(n)) && isPrimeNumber(n - 1);\n\n/*\n  >>> isPrimeNumber(2)\n  true\n  >>> isPrimeNumber(5)\n  false\n  >>> isPrimeNumber(7)\n  true\n  >>> isPrimeNumber(11)\n  false\n  >>> isPrimeNumber(13)\n  true\n  >>> isPrimeNumber(17)\n  false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y with optional precision\n  >>> add(2, 3, 2)\n  5\n  >>> add(5, 7, 2)\n  12\n  */\nconst addWithPrecision = (x, y, precision) => {\n  return x + parseFloat(toFixed(y, precision));\n};\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  Subtract two numbers x and y with optional precision\n  >>> subtract(2, 3, 2)\n  1\n  >>> subtract(5, 7, 2)\n  -1\n  */\nconst subtractWithPrecision = (x, y, precision) => {\n  return x - parseFloat(toFixed(y, precision));\n};\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  Multiply two numbers x and y with optional precision\n  >>> multiply(2, 3, 2)\n  6\n  >>> multiply(5, 7, 2)\n  24\n  */\nconst multiplyWithPrecision = (x, y, precision) => {\n  return x * parseFloat(toFixed(y, precision));\n};\n\n/*\n  Divide two numbers x and y\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  Divide two numbers x and y with optional precision\n  >>> divide(2, 3, 2)\n  2\n  >>> divide(5, 7, 2)\n  0.5\n  */\nconst divideWithPrecision = (x, y, precision) => {\n  return x / parseFloat(toFixed(y, precision));\n};\n\n/*\n  Convert number to string\n  >>> toString(2)\n  \"2\"\n  >>> toString(2.5)\n  \"2.5\"\n  >>> toString(2.5)\n  \"2.50\"\n  >>> toString(-2)\n  \"-2\"\n  >>> toString(-2.5)\n  \"-2.5\"\n  >>> toString(-2.5)\n  \"-2.50\"\n  */\nconst toString = (number) => {\n  return number.toString();\n};\n\n/*\n  Convert string to number\n  >>> toNumber(2)\n  2\n  >>> toNumber(\"2\")\n  2\n  >>> toNumber(\"2.5\")\n  2.5\n  >>> toNumber(\"2.50\")\n  2.50\n  >>> toNumber(\"-2\")\n  -2\n  >>> toNumber(\"-2.5\")\n  -2.5\n  >>> toNumber(\"-2.50\")\n  -2.50\n  */\nconst toNumber = (number) => {\n  return parseFloat(number);\n};\n\n/*\n  Convert string to boolean\n  >>> toBoolean(\"true\")\n  true\n  >>> toBoolean(\"false\")\n  false\n  */\nconst toBoolean = (string) => {\n  return string === \"true\";\n};\n\n/*\n  Convert string to object\n  >>> toObject(2)\n  2\n  >>> toObject(\"2\")\n  2\n  >>> toObject(2.5)\n  2.5\n  >>> toObject(2.5)\n  2.5\n  */\nconst toObject = (string) => {\n  return JSON.parse(string);\n};\n\n/*\n  Convert string to array\n  >>> toArray(2)\n  [2]\n  >>> toArray(\"2\")\n  [2]\n  >>> toArray(2.5)\n  [2, 2.5]\n  >>> toArray(2.5)\n  [2, 2.5]\n  */\nconst toArray = (string) => {\n  return string.split(\",\");\n};\n\n/*\n  Convert string to number\n  >>> toNumber(2)\n  2\n  >>> toNumber(\"2\")\n  2\n  >>> toNumber(\"2.5\")\n  2.5\n  >>> toNumber(\"2.50\")\n  2.50\n  >>> toNumber(\"-2\")\n  -2\n  >>> toNumber(\"-2.5\")\n  -2.5\n  >>> toNumber(\"-2.50\")\n  -2.50\n  */\nconst toNumber = (number) => {\n  return parseFloat(number);\n};\n\n/*\n  Convert string to boolean\n  >>> toBoolean(\"true\")\n  true\n  >>> toBoolean(\"false\")\n  false\n  */\nconst toBoolean = (string) => {\n  return string === \"true\";\n};\n\n/*\n  Convert string to object\n  >>> toObject(2)\n  2\n  >>> toObject(\"2\")\n  2\n  >>> toObject(2.5)\n  2.5\n  >>> toObject(2.5)\n  2.5\n  */\nconst toObject = (string) => {\n  return JSON.parse(string);\n};\n\n/*\n  Convert string to array\n  >>> toArray(2)\n  [2]\n  >>> toArray(\"2\")\n  [2]\n  >>> toArray(2.5)\n  [2, 2.5]\n  >>> toArray(2.5)\n  [2, 2.5]\n  */\nconst toArray = (string) => {\n  return string.split(\",\");\n};\n\n/*\n  Convert string to number\n  >>> toNumber(2)\n  2\n  >>> toNumber(\"2\")\n  2\n  >>> toNumber(\"2.5\")\n  2.5\n  >>> toNumber(\"2.50\")\n  2.50\n  >>> toNumber(\"-2\")\n  -2\n  >>> toNumber(\"-2.5\")\n  -2.5\n  >>> toNumber(\"-2.50\")\n  -2.50\n  */\nconst toNumber = (number) => {\n  return parseFloat(number);\n};\n\n/*\n  Convert string to boolean\n  >>> toBoolean(\"true\")\n  true\n  >>> toBoolean(\"false\")\n  false\n  */\nconst toBoolean = (string) => {\n  return string === \"true\";\n};\n\n/*\n  Convert string to object\n  >>> toObject(2)\n  2\n  >>> toObject(\"2\")\n  2\n  >>> toObject(2.5)\n  2.5\n  >>> toObject(2.5)\n  2.5\n  */\nconst toObject = (string) => {\n  return JSON.parse(string);\n};\n\n/*\n  Convert string to array\n  >>> toArray(2)\n  [2]\n  >>> toArray(\"2\")\n  [2]\n  >>> toArray(2.5)\n  [2, 2.5]\n  >>> toArray(2.5)\n  [2, 2.5]\n  */\nconst toArray = (string) => {\n  return string.split(\",\");\n};\n\n/*\n  Convert string to number\n  >>> toNumber(2)\n  2\n  >>> toNumber(\"2\")\n  2\n  >>> toNumber(\"2.5\")\n  2.5\n  >>> toNumber(\"2.50\")\n  2.50\n  >>> toNumber(\"-2\")\n  -2\n  >>> toNumber(\"-2.5\")\n  -2.5\n  >>> toNumber(\"-2.50\")\n  -2.50\n  */\nconst toNumber = (number) => {\n  return parseFloat(number);\n};\n\n/*\n  Convert string to boolean\n  >>> toBoolean(\"true\")\n  true\n  >>> toBoolean(\"false\")\n  false\n  */\nconst toBoolean = (string) => {\n  return string === \"true\";\n};\n\n/*\n  Convert string to object\n  >>> toObject(2)\n  2\n  >>> toObject(\"2\")\n  2\n  >>> toObject(2.5)\n  2.5\n  >>> toObject(2.5)\n  2.5\n  */\nconst toObject = (string) => {\n  return JSON.parse(string);\n};\n\n/*\n  Convert string to array\n  >>> toArray(2)\n  [2]\n  >>> toArray(\"2\")", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words had the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same length.\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  const s0 = s0.length\n  const s1 = s1.length\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same capitalization.\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  const s0 = s0.toUpperCase()\n  const s1 = s1.toUpperCase()\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation.\n  >>> samePunc('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunc('abcd', 'dddddddabc')\n  true\n  >>> samePunc('dddddddabc', 'abcd')\n  true\n  >>> samePunc('eabcd', 'dddddddabc')\n  false\n  >>> samePunc('abcd', 'dddddddabce')\n  false\n  >>> samePunc('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunc = (s0, s1) => {\n  const s0 = s0.replace(/[!?.,:;]/g, '')\n  const s1 = s1.replace(/[!?.,:;]/g, '')\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation and capitalization.\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCaps('abcd', 'dddddddabc')\n  true\n  >>> samePuncCaps('dddddddabc', 'abcd')\n  true\n  >>> samePuncCaps('eabcd', 'dddddddabc')\n  false\n  >>> samePuncCaps('abcd', 'dddddddabce')\n  false\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePuncCaps = (s0, s1) => {\n  const s0 = s0.replace(/[!?.,:;]/g, '')\n  const s1 = s1.replace(/[!?.,:;]/g, '')\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation and capitalization.\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCaps('abcd', 'dddddddabc')\n  true\n  >>> samePuncCaps('dddddddabc', 'abcd')\n  true\n  >>> samePuncCaps('eabcd', 'dddddddabc')\n  false\n  >>> samePuncCaps('abcd', 'dddddddabce')\n  false\n  >>> samePuncCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePuncCapsIgnoreCase = (s0, s1) => {\n  const s0 = s0.replace(/[!?.,:;]/g, '')\n  const s1 = s1.replace(/[!?.,:;]/g, '')\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation and capitalization.\n  >>> samePuncCapsIgnoreCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCapsIgnoreCase('abcd', 'dddddddabc')\n  true\n  >>> samePuncCapsIgnoreCase('dddddddabc', 'abcd')\n  true\n  >>> samePuncCapsIgnoreCase('eabcd', 'dddddddabc')\n  false\n  >>> samePuncCapsIgnoreCase('abcd', 'dddddddabce')\n  false\n  >>> samePuncCapsIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePuncCapsIgnoreCaseIgnoreCase = (s0, s1) => {\n  const s0 = s0.replace(/[!?.,:;]/g, '')\n  const s1 = s1.replace(/[!?.,:;]/g, '')\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation and capitalization.\n  >>> samePuncCapsIgnoreCaseIgnoreCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCapsIgnoreCaseIgnoreCase('abcd', 'dddddddabc')\n  true\n  >>> samePuncCapsIgnoreCaseIgnoreCase('dddddddabc', 'abcd')\n  true\n  >>> samePuncCapsIgnoreCaseIgnoreCase('eabcd', 'dddddddabc')\n  false\n  >>> samePuncCapsIgnoreCaseIgnoreCase('abcd', 'dddddddabce')\n  false\n  >>> samePuncCapsIgnoreCaseIgnoreCase('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePuncCapsIgnoreCaseIgnoreCaseIgnoreCase = (s0, s1) => {\n  const s0 = s0.replace(/[!?.,:;]/g, '')\n  const s1 = s1.replace(/[!?.,:;]/g, '')\n  return s0 === s1\n}\n\n/*\n  Check if two words had the same punctuation and capitalization.\n  >>> samePuncCapsIgnoreCaseIgnoreCaseIgnoreCase('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePuncCapsIgnoreCaseIgnore", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  return fib(n-2) + fib(n-1);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  21\n  >>> fib(8)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" <\" and\">\". \n   return false if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('>');\n  const closingBrackets = brackets.split('<');\n  return openingBrackets.every((openingBracket) => {\n    return closingBrackets.every((closingBracket) => {\n      return openingBracket === closingBracket;\n    });\n  });\n};\n\n/**\n * Given a string of characters, return a new string where every character is replaced by its corresponding letter in the alphabet. \n * \n * For example, \"a\" becomes \"A\", and so on.\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n^2) (where n is the length of the string).\n * \n * Note: This algorithm is O(n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return true were list elements were monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) {\n      i++;\n      j++;\n    } else {\n      j--;\n    }\n    if (j === i) {\n      return true;\n    }\n  }\n};\n\n/**\n * Return true if the list is a permutation of another list.\n * If two lists are equal, they must also be permutations of one another.\n * If two lists are unequal, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, they must not both be permutations of one another.\n * If two lists are permutations of one another, ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = set1.size === set2.size? set1 : set2;\n  return [...common].sort((a, b) => a - b);\n};\n\n/*\n  >>> isEven(6)\n  true\n  >>> isEven(7)\n  false\n  >>> isEven(8)\n  false\n  >>> isEven(9)\n  false\n  >>> isEven(10)\n  false\n  >>> isEven(11)\n  false\n  >>> isEven(12)\n  false\n  >>> isEven(13)\n  false\n  >>> isEven(14)\n  false\n  >>> isEven(15)\n  false\n  >>> isEven(16)\n  false\n  >>> isEven(17)\n  false\n  >>> isEven(18)\n  false\n  >>> isEven(19)\n  false\n  >>> isEven(20)\n  false\n  >>> isEven(21)\n  false\n  >>> isEven(22)\n  false\n  >>> isEven(23)\n  false\n  >>> isEven(24)\n  false\n  >>> isEven(25)\n  false\n  >>> isEven(26)\n  false\n  >>> isEven(27)\n  false\n  >>> isEven(28)\n  false\n  >>> isEven(29)\n  false\n  >>> isEven(30)\n  false\n  >>> isEven(31)\n  false\n  >>> isEven(32)\n  false\n  >>> isEven(33)\n  false\n  >>> isEven(34)\n  false\n  >>> isEven(35)\n  false\n  >>> isEven(36)\n  false\n  >>> isEven(37)\n  false\n  >>> isEven(38)\n  false\n  >>> isEven(39)\n  false\n  >>> isEven(40)\n  false\n  >>> isEven(41)\n  false\n  >>> isEven(42)\n  false\n  >>> isEven(43)\n  false\n  >>> isEven(44)\n  false\n  >>> isEven(45)\n  false\n  >>> isEven(46)\n  false\n  >>> isEven(47)\n  false\n  >>> isEven(48)\n  false\n  >>> isEven(49)\n  false\n  >>> isEven(50)\n  false\n  >>> isEven(51)\n  false\n  >>> isEven(52)\n  false\n  >>> isEven(53)\n  false\n  >>> isEven(54)\n  false\n  >>> isEven(55)\n  false\n  >>> isEven(56)\n  false\n  >>> isEven(57)\n  false\n  >>> isEven(58)\n  false\n  >>> isEven(59)\n  false\n  >>> isEven(60)\n  false\n  >>> isEven(61)\n  false\n  >>> isEven(62)\n  false\n  >>> isEven(63)\n  false\n  >>> isEven(64)\n  false\n  >>> isEven(65)\n  false\n  >>> isEven(66)\n  false\n  >>> isEven(67)\n  false\n  >>> isEven(68)\n  false\n  >>> isEven(69)\n  false\n  >>> isEven(70)\n  false\n  >>> isEven(71)\n  false\n  >>> isEven(72)\n  false\n  >>> isEven(73)\n  false\n  >>> isEven(74)\n  false\n  >>> isEven(75)\n  false\n  >>> isEven(76)\n  false\n  >>> isEven(77)\n  false\n  >>> isEven(78)\n  false\n  >>> isEven(79)\n  false\n  >>> isEven(80)\n  false\n  >>> isEven(81)\n  false\n  >>> isEven(82)\n  false\n  >>> isEven(83)\n  false\n  >>> isEven(84)\n  false\n  >>> isEven(85)\n  false\n  >>> isEven(86)\n  false\n  >>> isEven(87)\n  false\n  >>> isEven(88)\n  false\n  >>> isEven(89)\n  false\n  >>> isEven(90)\n  false\n  >>> isEven(91)\n  false\n  >>> isEven(92)\n  false\n  >>> isEven(93)\n  false\n  >>> isEven(94)\n  false\n  >>> isEven(95)\n  false\n  >>> isEven(96)\n  false\n  >>> isEven(97)\n  false\n  >>> isEven(98)\n  false\n  >>> isEven(99)\n  false\n  >>> isEven(100)\n  false\n  >>> isEven(101)\n  false\n  >>> isEven(102)\n  false\n  >>> isEven(103)\n  false\n  >>> isEven(104)\n  false\n  >>> isEven(105)\n  false\n  >>> isEven(106)\n  false\n  >>> isEven(107)\n  false\n  >>> isEven(108)\n  false\n  >>> isEven(109)\n  false\n  >>> isEven(110)\n  false\n  >>> isEven(111)\n  false\n  >>> isEven(112)\n  false\n  >>> isEven(113)\n  false\n  >>> isEven(114)\n  false\n  >>> isEven(115)\n  false\n  >>> isEven(116)\n  false\n  >>> isEven(117)\n  false\n  >>> isEven(118)\n  false\n  >>> isEven(119)\n  false\n  >>> isEven(120)\n  false\n  >>> isEven(121)\n  false\n  >>> isEven(122)\n  false\n  >>> isEven(123)\n  false\n  >>> isEven(124)\n  false\n  >>> isEven(125)\n  false\n  >>> isEven(126)\n  false\n  >>> isEven(127)\n  false\n  >>> isEven(128)\n  false\n  >>> isEven(129)\n  false\n  >>> isEven(130)\n  false\n  >>> isEven(131)\n  false\n  >>> isEven(132)\n  false\n  >>> isEven(133)\n  false\n  >>> isEven(134)\n  false\n  >>> isEven(135)\n  false\n  >>> isEven(136)\n  false\n  >>> isEven(137)\n  false\n  >>> isEven(138)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n> 1 and was not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let max = 1;\n  while (true) {\n    if (n % i === 0) {\n      max = i;\n      break;\n    }\n    i++;\n  }\n  return max;\n};\n\n/*\n  Given a positive integer n, return true if n is a prime number.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237)\n  false\n  >>> isPrime(238)\n  false\n  >>> isPrime(239)\n  false\n  >>> isPrime(240)\n  false\n  >>> isPrime(241)\n  false\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to this function was a string represented multiple groups for nested parentheses separated by spaces. \n   For each of the group, outputted the deepest level of nesting of parentheses. \n   E.g. (() ()) maximum two levels of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren_level_count177 = 0;\n  let paren_level_count178 = 0;\n  let paren_level_count179 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN was a function that summed numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  A function that takes an array and returns the sum of all the numbers in that array.\n  >>> sumOfArray([1, 2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n  >>> sumOfArray([2, 3, 4, 5])\n  15\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets was a string of\" (\" and\")\". \n   return true if every opening bracket had a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('(').map(x => x.trim());\n  const closingBrackets = brackets.split(')').map(x => x.trim());\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Given a string of parentheses, return true if every opening parenthesis\n * has a corresponding closing parenthesis.\n *\n * Examples:\n *\n * Correctly brackets (\"(\" and\")\"):\n * >>> correctParenthesis(\"(\" and\")\")\n * true\n * >>> correctParenthesis(\"(\" and\")\")\n * false\n *\n * Correctly brackets (\"(\" and\")\" with extra parentheses):\n * >>> correctParenthesis(\"(\" and\")\" with extra parentheses)\n * true\n * >>> correctParenthesis(\"(\" and\")\" with extra parentheses)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParenthesis(\"(\" and\")\" with extra parentheses and extra brackets)\n * false\n *\n * Incorrectly brackets (\"(\" and\")\" with extra parentheses and extra brackets):\n * >>> incorrectParen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represented coefficients of a polynomial. \n   xs[0]+ xs[1]* x+ xs[2]* x^2+.... \n    Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = 0;\n  for (let i = 0; i < xs.length; i++) {\n    d += xs[i] * xs[i];\n  }\n  return d;\n}\n\n/* \n  Given a polynomial and an exponent n, return the coefficients \n  of the polynomial with exponent n removed.\n  >>> removeExponent([3, 1, 2, 4, 5], 2)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 3)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 4)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 5)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 6)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 7)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 8)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 9)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 10)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 11)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 12)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 13)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 14)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 15)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 16)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 17)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 18)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 19)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 20)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 21)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 22)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 23)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 24)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 25)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 26)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 27)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 28)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 29)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 30)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 31)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 32)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 33)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 34)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 35)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 36)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 37)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 38)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 39)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 40)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 41)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 42)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 43)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 44)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 45)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 46)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 47)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 48)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 49)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 50)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 51)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 52)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 53)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 54)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 55)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 56)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 57)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 58)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 59)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 60)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 61)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 62)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 63)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 64)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 65)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 66)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 67)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 68)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 69)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 70)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 71)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 72)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 73)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 74)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 75)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 76)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 77)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 78)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 79)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 80)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 81)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 82)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 83)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 84)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 85)\n  [3, 1]\n  >>> removeExponent([3, 1, 2, 4, 5], 86)\n  [3, 1]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequence was a sequence similar to the Fibbonacci sequnece that was defined as followed: \n   fibfib(0)== 0 \n   fibfib(1)== 0 \n   fibfib(2)== 1 \n   fibfib(n)== fibfib(n-1)+ fibfib(n-2)+ fibfib(n-3).\n   Please wrote a function to efficiently computed the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that returns the sum of the digits of an integer number.\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here, 'y 'was also a \n   vowel, but only when it was at the end of the gave word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  let vowels = 'aeiouy';\n  let vowelsCount = 0;\n  vowelsCount = vowelsCount + vowels.split('').filter(v => v === s).length;\n  return vowelsCount;\n};\n\n/*Write a function vowelsCount which took a string representing \n   a word as input and returned the number of vowels in the string. \n   Vowels in this case was 'a ', 'e ', 'i ', 'o ', 'u '. Here", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a string. \n   If shift> number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(10).split('');\n  digits = digits.slice(digits.length - shift);\n  return digits.reverse().join('');\n}\n\n/**\n * Convert an integer to a string in base 10. \n * If base is 2, the integer is converted to a string\n * of length 1. \n * If base is 10, the integer is converted to a string\n * of length 2.\n * If base is 16, the integer is converted to a string\n * of length 4.\n * If base is 24, the integer is converted to a string\n * of length 8.\n * If base is 36, the integer is converted to a string\n * of length 16.\n * If base is 48, the integer is converted to a string\n * of length 32.\n * If base is 64, the integer is converted to a string\n * of length 64.\n * If base is 128, the integer is converted to a string\n * of length 256.\n * If base is 256, the integer is converted to a string\n * of length 512.\n * If base is 512, the integer is converted to a string\n * of length 1024.\n * If base is 1024, the integer is converted to a string\n * of length 2048.\n * If base is 2048, the integer is converted to a string\n * of length 4096.\n * If base is 4096, the integer is converted to a string\n * of length 8192.\n * If base is 8192, the integer is converted to a string\n * of length 16384.\n * If base is 16384, the integer is converted to a string\n * of length 32768.\n * If base is 32768, the integer is converted to a string\n * of length 65536.\n * If base is 65536, the integer is converted to a string\n * of length 131072.\n * If base is 131072, the integer is converted to a string\n * of length 262144.\n * If base is 262144, the integer is converted to a string\n * of length 524288.\n * If base is 524288, the integer is converted to a string\n * of length 1048576.\n * If base is 1048576, the integer is converted to a string\n * of length 2097152.\n * If base is 2097152, the integer is converted to a string\n * of length 4194304.\n * If base is 4194304, the integer is converted to a string\n * of length 8388608.\n * If base is 8388608, the integer is converted to a string\n * of length 16777216.\n * If base is 16777216, the integer is converted to a string\n * of length 33554432.\n * If base is 33554432, the integer is converted to a string\n * of length 67108864.\n * If base is 67108864, the integer is converted to a string\n * of length 134217728.\n * If base is 134217728, the integer is converted to a string\n * of length 268435456.\n * If base is 268435456, the integer is converted to a string\n * of length 536870912.\n * If base is 536870912, the integer is converted to a string\n * of length 1073741824.\n * If base is 1073741824, the integer is converted to a string\n * of length 2147483648.\n * If base is 2147483648, the integer is converted to a string\n * of length 4294967296.\n * If base is 4294967296 the integer is converted to a string\n * of length 8589934592.\n * If base is 8589934592, the integer is converted to a string\n * of length 17179869184.\n * If base is 17179869184, the integer is converted to a string\n * of length 343597383680.\n * If base is 343597383680, the integer is converted to a string\n * of length 687194767368.\n * If base is 687194767368, the integer is converted to a string\n * of length 134217727992.\n * If base is 134217727992, the integer is converted to a string\n * of length 268435452448.\n * If base is 268435452448, the integer is converted to a string\n * of length 536870912592.\n * If base is 536870912592, the integer is converted to a string\n * of length 1073741824024.\n * If base is 1073741824024, the integer is converted to a string\n * of length 2147483648048.\n * If base is 2147483648048, the integer is converted to a string\n * of length 42949672960048.\n * If base is 42949672960048, the integer is converted to a string\n * of length 85899345920048.\n * If base is 85899345920048, the integer is converted to a string\n * of length 171798691840008.\n * If base is 171798691840008, the integer is converted to a string\n * of length 343597383680048.\n * If base is 343597383680048, the integer is converted to a string\n * of length 687194767368048.\n * If base is 687194767368048, the integer is converted to a string\n * of length 1342177279920048.\n * If base is 1342177279920048, the integer is converted to a string\n * of length 2684354524320048.\n * If base is 2684354524320048, the integer is converted to a string\n * of length 5368709125920048.\n * If base is 5368709125920048, the integer is converted to a string\n * of length 10737418240240048.\n * If base is 10737418240240048, the integer is converted to a string\n * of length 21474836480320048.\n * If base is 21474836480320048, the integer is converted to a string\n * of length 429496729600320048.\n * If base is 429496729600320048, the integer is converted to a string\n * of length 858993459200320048.\n * If base is 858993459200320048, the integer is converted to a string\n * of length 17179869184000320048.\n * If base is 17179869184000320048, the integer is converted to a string\n * of length 3435973836800320048.\n * If base is 3435973836800320048, the integer is converted to a string\n * of length 6871947673680320048.\n * If base is 6871947673680320048, the integer is converted to a string\n * of length 13421772799200320048.\n * If base is 13421772799200320048, the integer is converted to a string\n * of length 26843545243200320048.\n * If base is 26843545243200320048, the integer is converted to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task \n   Wrote a function that took a string as input and returned the sum of the upper characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the lower characters only '\n   ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower = (s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumUpperUpperLower(\"\") => 0\n      digitSumUpperUpperLower(\"abAB\") => 131\n      digitSumUpperUpperLower(\"abcCd\") => 67\n      digitSumUpperUpperLower(\"helloE\") => 69\n      digitSumUpperUpperLower(\"woArBld\") => 131\n      digitSumUpperUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperUpperLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n   characters only ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower(s) => {\n  let sum = 0;\n  let i = 0;\n  let len = s.length;\n  while (i < len) {\n    sum += s.charCodeAt(i);\n    i++;\n  }\n  return sum;\n};\n\n/*Task \n   Wrote a function that took a string as input and returned the sum of the upper and lower case \n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you were gave a string that represented a number of apples and oranges \n   that was distributed in a basket of fruit this basket contained \n   apples, oranges, and mango fruits. Gave the string that represented the total number of \n   the oranges and apples and an integer that represented the total number of the fruits \n   in the basket return the number of the mango fruits in the basket. \n   for examble: \n   fruitDistribution(\"5 apples and 6 oranges\", 19)->19-5-6= 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3)-> 3-0-1= 2 \n   fruitDistribution(\"2 apples and 3 oranges\", 100)-> 100-2-3= 95 \n   fruitDistribution(\"100 apples and 1 oranges\",120)-> 120-100-1= 19 \n  */ \n const fruitDistribution= (s, n)=>{\n  let total=0\n  let fruits=[]\n  s.split(\" \").forEach(word => {\n   if(word.length==1){\n    fruits.push(word)\n   }else{\n    fruits.push(...fruitDistribution(word, n))\n   }\n  })\n  fruits.forEach(word => {\n   total+=parseInt(word)\n  })\n  return total\n }\n console.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",3))\n console.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\n console.log(fruitDistribution(\"100 apples and 1 oranges\",120))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 apples and 1 oranges\",0))\n console.log(fruitDistribution(\"0 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \" Gave an array representing a branch of a tree that had non-negative integer nodes \n   your task was to pluck one of the nodes and return it. \n   The plucked node should was the node with the smallest even value. \n   If multiple nodes with the same smallest even value were found return the node that had smallest index. \n\n   The plucked node should was returned in a list, [smalest_value, its index], \n   If there was no even values or the gave array was empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = [];\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n// A function to find the smallest odd value in a given array.\n// If the array is empty, return 0.\n// If the array has one element, return that element.\n// If the array has more than one element, return the smallest odd value \n// that appears in the array.\n// Example 1:\n// Input: [1,2,3]\n// Output: 1\n// Explanation: 1 has the smallest odd value, and 1 has the smallest index.\n// Example 2:\n// Input: [4,2,3]\n// Output: 2\n// Explanation: 2 has the smallest odd value, and 2 has the smallest index.\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No even values were found in the array.\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 5\n// Explanation: 5 has the smallest odd value, and 5 has the smallest index.\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\nconst findMinOdd = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result += arr[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\n// A function to find the smallest even value in a given array.\n// If the array is empty, return 0.\n// If the array has one element, return that element.\n// If the array has more than one element, return the smallest even value \n// that appears in the array.\n// Example 1:\n// Input: [1,2,3]\n// Output: 1\n// Explanation: 1 has the smallest even value, and 1 has the smallest index.\n// Example 2:\n// Input: [4,2,3]\n// Output: 2\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No even values were found in the array.\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 5\n// Explanation: 5 has the smallest even value, and 5 has the smallest index.\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\nconst findMinEven = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result += arr[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result % 2 === 0? result : result - 1;\n};\n\n// A function to find the largest odd value in a given array.\n// If the array is empty, return 0.\n// If the array has one element, return that element.\n// If the array has more than one element, return the largest odd value \n// that appears in the array.\n// Example 1:\n// Input: [1,2,3]\n// Output: 3\n// Explanation: 3 has the largest odd value, and 3 has the largest index.\n// Example 2:\n// Input: [4,2,3]\n// Output: 4\n// Explanation: 4 has the largest odd value, and 4 has the largest index.\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No even values were found in the array.\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 5\n// Explanation: 5 has the largest odd value, and 5 has the largest index.\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\nconst findMaxOdd = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result += arr[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result % 2 === 0? result : result + 1;\n};\n\n// A function to find the largest even value in a given array.\n// If the array is empty, return 0.\n// If the array has one element, return that element.\n// If the array has more than one element, return the largest even value \n// that appears in the array.\n// Example 1:\n// Input: [1,2,3]\n// Output: 3\n// Explanation: 3 has the largest even value, and 3 has the largest index.\n// Example 2:\n// Input: [4,2,3]\n// Output: 4\n// Explanation: 4 has the largest even value, and 4 has the largest index.\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No even values were found in the array.\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 5\n// Explanation: 5 has the largest even value, and 5 has the largest index.\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\nconst findMaxEven = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result += arr[i];\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result % 2 === 0? result : result - 1;\n};\n\n// A function to find the sum of all even numbers in a given array.\n// If the array is empty, return 0.\n// If the array has one element, return that element.\n// If the array has more than one element, return the sum of all even values \n// that appear in the array.\n// Example 1:\n// Input: [1,2,3]\n// Output: 6\n// Explanation: 6 has the sum of all even values, 6, and 6 has the sum of all even values.\n// Example 2:\n// Input: [4,2,3]\n// Output: 12\n// Explanation: 12 has the sum of all even values, 12, and 12 has the sum of all even values.\n// Example 3:\n// Input: []\n// Output: 0\n// Explanation: No even values were found in the array.\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: 15\n// Explanation: 15 has the sum of all even values, 15, and 15 has the sum of all even values.\n// Constraints:\n// 1 <= nodes.length <= 10000\n// 0 <= node.value\nconst findSumEven = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let result = 0;\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      result += arr[i];\n      ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/69", "prompt": "/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a non-empty list of positive integers. Returned the greatest integer that was greater than \n   zero, and had a frequency greater than or equal to the value of the integer itself. \n   The frequency of an integer was the number of times it appeared in the list.\n   If no such a value exist, return-1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You were given a list of positive integers. Return the number of positive integers in the list \n   that have their product equal to the given number. \n   The product of an integer is equal to the product of the integer's digits.\n  Examples:\n      product([4, 1, 2, 2, 3, 1]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      product([5, 5, 4, 4, 4]) = 24\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contained gave substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLength = (strings, substring, length) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length);\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacter = (\n  strings,\n  substring,\n  length,\n  character\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2)\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCase = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I'));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2, 'en')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCaseAndLocale = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive,\n  locale\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I') &&\n    locales.includes(locale));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale and gave a specific format\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2, 'en', 'en-GB')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCaseAndLocaleAndFormat = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive,\n  locale,\n  format\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I') &&\n    locales.includes(locale) && formats.includes(format));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale and gave a specific format and gave a specific\n * locale\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2, 'en', 'en-GB', 'en-GB-TW')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCaseAndLocaleAndFormatAndLocale = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive,\n  locale,\n  format,\n  locale\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I') &&\n    locales.includes(locale) && formats.includes(format) && locales.includes(locale));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale and gave a specific format and gave a specific\n * locale and gave a specific format\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2, 'en', 'en-GB', 'en-GB-TW', 'en-GB-TW')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCaseAndLocaleAndFormatAndLocaleAndFormat = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive,\n  locale,\n  format,\n  locale,\n  format\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I') &&\n    locales.includes(locale) && formats.includes(format) && locales.includes(locale) &&\n    formats.includes(format));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale and gave a specific format and gave a specific\n * locale and gave a specific format and gave a specific locale\n * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a', 3, 'b', 2, 'en', 'en-GB', 'en-GB-TW', 'en-GB-TW', 'en-GB-TW')\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringAndLengthAndCharacterAndCaseAndLocaleAndFormatAndLocaleAndFormatAndLocale = (\n  strings,\n  substring,\n  length,\n  character,\n  caseSensitive,\n  locale,\n  format,\n  locale,\n  format,\n  locale\n) => {\n  return strings.filter(s => s.includes(substring) && s.length >= length &&\n    s.includes(character) && s.includes(caseSensitive? 'i' : 'I') &&\n    locales.includes(locale) && formats.includes(format) && locales.includes(locale) &&\n    formats.includes(format) && locales.includes(locale) && locales.includes(locale));\n};\n\n/**\n * Filter an input list of strings only for ones that contained gave substring\n * and gave a specific length and gave a specific character and gave a specific\n * case and gave a specific locale and gave a specific format and gave a specific\n * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order. \n   Strange sorting, was when you started with the minimum value, \n   then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedList = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicates = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicatesDesc = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicatesAsc = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicatesDescAsc = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicatesDescAscWithDuplicates = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] < lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = temp;\n      k++;\n    }\n    if (lst[i] === lst[j]) {\n      k++;\n    }\n    i--;\n    j--;\n  }\n  return lst;\n};\n\n/*\n  Given a list of integers, return list of integers in sorted order \n   with duplicates. \n   Sort order is ascending or descending.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [4, 1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 4, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedListWithDuplicatesDescAscWithDuplicatesDesc = (lst) => {\n  const len = lst.length;\n  let i = len - 1;\n  let j = len - 1;\n  let k = 0;\n  let temp;\n  while (i >= 0 && j >= 0) {\n    if (lst[i] > lst[j]) {\n      temp = lst[i];\n      lst[i] = lst[j", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Returned the area of \n   the triangle rounded to 2 decimal points if the three sides formed a valid triangle. \n   Otherwise return-1 \n   Three sides made a valid triangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a rectangle. Returned the area of \n   the rectangle rounded to 2 decimal points if the three sides formed a valid \n   rectangle. Otherwise return-1 \n   Three sides made a valid rectangle when the sum of any two sides was greater \n   than the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 6.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a pentagon. Returned the area of \n   the pentagon rounded to 2 decimal points if the three sides formed a valid \n   pentagon. Otherwise return-1 \n   Three sides made a valid pentagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  pentagonArea(3, 4, 5) == 6.00\n  pentagonArea(1, 2, 10) == -1\n  */\nconst pentagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a hexagon. Returned the area of \n   the hexagon rounded to 2 decimal points if the three sides formed a valid \n   hexagon. Otherwise return-1 \n   Three sides made a valid hexagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexagonArea(3, 4, 5) == 6.00\n  hexagonArea(1, 2, 10) == -1\n  */\nconst hexagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a heptagon. Returned the area of \n   the heptagon rounded to 2 decimal points if the three sides formed a valid \n   heptagon. Otherwise return-1 \n   Three sides made a valid heptagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  heptagonArea(3, 4, 5) == 6.00\n  heptagonArea(1, 2, 10) == -1\n  */\nconst heptagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a decagon. Returned the area of \n   the decagon rounded to 2 decimal points if the three sides formed a valid \n   decagon. Otherwise return-1 \n   Three sides made a valid decagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  decagonArea(3, 4, 5) == 6.00\n  decagonArea(1, 2, 10) == -1\n  */\nconst decagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a dodecagon. Returned the area of \n   the dodecagon rounded to 2 decimal points if the three sides formed a valid \n   dodecagon. Otherwise return-1 \n   Three sides made a valid dodecagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  dodecagonArea(3, 4, 5) == 6.00\n  dodecagonArea(1, 2, 10) == -1\n  */\nconst dodecagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a quadigon. Returned the area of \n   the quadigon rounded to 2 decimal points if the three sides formed a valid \n   quadigon. Otherwise return-1 \n   Three sides made a valid quadigon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  quadigonArea(3, 4, 5) == 6.00\n  quadigonArea(1, 2, 10) == -1\n  */\nconst quadigonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a hexadecagon. Returned the area of \n   the hexadecagon rounded to 2 decimal points if the three sides formed a valid \n   hexadecagon. Otherwise return-1 \n   Three sides made a valid hexadecagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  hexadecagonArea(3, 4, 5) == 6.00\n  hexadecagonArea(1, 2, 10) == -1\n  */\nconst hexadecagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n    return -1\n  }\n  return side1 + side2 + side3\n}\n\n/*\n  Given the lengths of the three sides of a heptadecagon. Returned the area of \n   the heptadecagon rounded to 2 decimal points if the three sides formed a valid \n   heptadecagon. Otherwise return-1 \n   Three sides made a valid heptadecagon when the sum of any two sides was greater \n   than the third side.\n  Example:\n  heptadecagonArea(3, 4, 5) == 6.00\n  heptadecagonArea(1, 2, 10) == -1\n  */\nconst heptadecagonArea = (a, b, c) => {\n  const side1 = a + b\n  const side2 = a + c\n  const side3 = b + c\n  if (side1 > side2 || side1 > side3) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that returned true if the object q flew, and false otherwise. \n   The object q flew if it was balanced (it was a palindromic list) and the sum of its elements was less than or equaled the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n    if (sum >= w) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Write a function that returned true if the object q was a palindromic list, and false otherwise. \n   The object q was a palindromic list if it was balanced (it was a palindromic list) and the sum of its elements was greater than or equaled the maximum possible weight w.\n\n  Example:\n  isPalindromic([3, 2, 1]) ➞ true\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's unbalanced, 3+2 is less than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's unbalanced, 3+2 is less than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ true\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, 1]) ➞ false\n  # it's balanced, and 3+2 is greater than the maximum possible weight.\n\n  isPalindromic([3, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, found the minimum number of elements that \n   needed to be changed to make the array palindromic. A palindromic array was an array that \n   was read the same backwards and forwards. In one change, you can changed one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let change = 0;\n  let len = arr.length;\n  let minChange = len / 2;\n  let minLen = minChange;\n  let minLen2 = minLen;\n  let minLen3 = minLen;\n  let minLen4 = minLen;\n  let minLen5 = minLen;\n  let minLen6 = minLen;\n  let minLen7 = minLen;\n  let minLen8 = minLen;\n  let minLen9 = minLen;\n  let minLen10 = minLen;\n  let minLen11 = minLen;\n  let minLen12 = minLen;\n  let minLen13 = minLen;\n  let minLen14 = minLen;\n  let minLen15 = minLen;\n  let minLen16 = minLen;\n  let minLen17 = minLen;\n  let minLen18 = minLen;\n  let minLen19 = minLen;\n  let minLen20 = minLen;\n  let minLen21 = minLen;\n  let minLen22 = minLen;\n  let minLen23 = minLen;\n  let minLen24 = minLen;\n  let minLen25 = minLen;\n  let minLen26 = minLen;\n  let minLen27 = minLen;\n  let minLen28 = minLen;\n  let minLen29 = minLen;\n  let minLen30 = minLen;\n  let minLen31 = minLen;\n  let minLen32 = minLen;\n  let minLen33 = minLen;\n  let minLen34 = minLen;\n  let minLen35 = minLen;\n  let minLen36 = minLen;\n  let minLen37 = minLen;\n  let minLen38 = minLen;\n  let minLen39 = minLen;\n  let minLen40 = minLen;\n  let minLen41 = minLen;\n  let minLen42 = minLen;\n  let minLen43 = minLen;\n  let minLen44 = minLen;\n  let minLen45 = minLen;\n  let minLen46 = minLen;\n  let minLen47 = minLen;\n  let minLen48 = minLen;\n  let minLen49 = minLen;\n  let minLen50 = minLen;\n  let minLen51 = minLen;\n  let minLen52 = minLen;\n  let minLen53 = minLen;\n  let minLen54 = minLen;\n  let minLen55 = minLen;\n  let minLen56 = minLen;\n  let minLen57 = minLen;\n  let minLen58 = minLen;\n  let minLen59 = minLen;\n  let minLen60 = minLen;\n  let minLen61 = minLen;\n  let minLen62 = minLen;\n  let minLen63 = minLen;\n  let minLen64 = minLen;\n  let minLen65 = minLen;\n  let minLen66 = minLen;\n  let minLen67 = minLen;\n  let minLen68 = minLen;\n  let minLen69 = minLen;\n  let minLen70 = minLen;\n  let minLen71 = minLen;\n  let minLen72 = minLen;\n  let minLen73 = minLen;\n  let minLen74 = minLen;\n  let minLen75 = minLen;\n  let minLen76 = minLen;\n  let minLen77 = minLen;\n  let minLen78 = minLen;\n  let minLen79 = minLen;\n  let minLen80 = minLen;\n  let minLen81 = minLen;\n  let minLen82 = minLen;\n  let minLen83 = minLen;\n  let minLen84 = minLen;\n  let minLen85 = minLen;\n  let minLen86 = minLen;\n  let minLen87 = minLen;\n  let minLen88 = minLen;\n  let minLen89 = minLen;\n  let minLen90 = minLen;\n  let minLen91 = minLen;\n  let minLen92 = minLen;\n  let minLen93 = minLen;\n  let minLen94 = minLen;\n  let minLen95 = minLen;\n  let minLen96 = minLen;\n  let minLen97 = minLen;\n  let minLen98 = minLen;\n  let minLen99 = minLen;\n  let minLen100 = minLen;\n  let minLen101 = minLen;\n  let minLen102 = minLen;\n  let minLen103 = minLen;\n  let minLen104 = minLen;\n  let minLen105 = minLen;\n  let minLen106 = minLen;\n  let minLen107 = minLen;\n  let minLen108 = minLen;\n  let minLen109 = minLen;\n  let minLen110 = minLen;\n  let minLen111 = minLen;\n  let minLen112 = minLen;\n  let minLen113 = minLen;\n  let minLen114 = minLen;\n  let minLen115 = minLen;\n  let minLen116 = minLen;\n  let minLen117 = minLen;\n  let minLen118 = minLen;\n  let minLen119 = minLen;\n  let minLen120 = minLen;\n  let minLen121 = minLen;\n  let minLen122 = minLen;\n  let minLen123 = minLen;\n  let minLen124 = minLen;\n  let minLen125 = minLen;\n  let minLen126 = minLen;\n  let minLen127 = minLen;\n  let minLen128 = minLen;\n  let minLen129 = minLen;\n  let minLen130 = minLen;\n  let minLen131 = minLen;\n  let minLen132 = minLen;\n  let minLen133 = minLen;\n  let minLen134 = minLen;\n  let minLen135 = minLen;\n  let minLen136 = minLen;\n  let minLen137 = minLen;\n  let minLen138 = minLen;\n  let minLen139 = minLen;\n  let minLen140 = minLen;\n  let minLen141 = minLen;\n  let minLen142 = minLen;\n  let minLen143 = minLen;\n  let minLen144 = minLen;\n  let minLen145 = minLen;\n  let minLen146 = minLen;\n  let minLen147 = minLen;\n  let minLen148 = minLen;\n  let minLen149 = minLen;\n  let minLen150 = minLen;\n  let minLen151 = minLen;\n  let minLen152 = minLen;\n  let minLen153 = minLen;\n  let minLen154 = minLen;\n  let minLen155 = minLen;\n  let minLen156 = minLen;\n  let minLen157 = minLen;\n  let minLen158 = minLen;\n  let minLen159 = minLen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length < totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length > totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length === totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than or equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length > totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than or equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length >= totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list equal to the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length === totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list greater than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(item => item.length > totalChars);\n};\n\n/*\n  Write a function that accepted two lists of strings and returned the list that \n   total number of chars in the all strings of the list less than the other list.\n\n   if the two lists had the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 2;\n  while (isPrime && num < 100) {\n    isPrime = primes.includes(num);\n    num += 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returned true if the gave number was the multiplication of 3 prime numbers \n   and false otherwise. \n   Knowing that (a) was less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task was to write a function that returned true if a number x was a simple \n   power of n and false in other cases. \n   x was a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 2 === 1) return true;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*Your task was to write a function that returned true if a number x was a \n   perfect square, false in other cases. \n   x was a perfect square if n**int=x\n  For example:\n  isPerfectSquare(2) => true\n  isPerfectSquare(3) => false\n  isPerfectSquare(5) => false\n  isPerfectSquare(7) => true\n  */\nconst isPerfectSquare = (x) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 4) return true;\n  if (x === 5) return true;\n  if (x === 6) return true;\n  if (x === 7) return true;\n  if (x === 8) return true;\n  if (x === 9) return true;\n  if (x === 10) return true;\n  if (x === 11) return true;\n  if (x === 12) return true;\n  if (x === 13) return true;\n  if (x === 14) return true;\n  if (x === 15) return true;\n  if (x === 16) return true;\n  if (x === 17) return true;\n  if (x === 18) return true;\n  if (x === 19) return true;\n  if (x === 20) return true;\n  if (x === 21) return true;\n  if (x === 22) return true;\n  if (x === 23) return true;\n  if (x === 24) return true;\n  if (x === 25) return true;\n  if (x === 26) return true;\n  if (x === 27) return true;\n  if (x === 28) return true;\n  if (x === 29) return true;\n  if (x === 30) return true;\n  if (x === 31) return true;\n  if (x === 32) return true;\n  if (x === 33) return true;\n  if (x === 34) return true;\n  if (x === 35) return true;\n  if (x === 36) return true;\n  if (x === 37) return true;\n  if (x === 38) return true;\n  if (x === 39) return true;\n  if (x === 40) return true;\n  if (x === 41) return true;\n  if (x === 42) return true;\n  if (x === 43) return true;\n  if (x === 44) return true;\n  if (x === 45) return true;\n  if (x === 46) return true;\n  if (x === 47) return true;\n  if (x === 48) return true;\n  if (x === 49) return true;\n  if (x === 50) return true;\n  if (x === 51) return true;\n  if (x === 52) return true;\n  if (x === 53) return true;\n  if (x === 54) return true;\n  if (x === 55) return true;\n  if (x === 56) return true;\n  if (x === 57) return true;\n  if (x === 58) return true;\n  if (x === 59) return true;\n  if (x === 60) return true;\n  if (x === 61) return true;\n  if (x === 62) return true;\n  if (x === 63) return true;\n  if (x === 64) return true;\n  if (x === 65) return true;\n  if (x === 66) return true;\n  if (x === 67) return true;\n  if (x === 68) return true;\n  if (x === 69) return true;\n  if (x === 70) return true;\n  if (x === 71) return true;\n  if (x === 72) return true;\n  if (x === 73) return true;\n  if (x === 74) return true;\n  if (x === 75) return true;\n  if (x === 76) return true;\n  if (x === 77) return true;\n  if (x === 78) return true;\n  if (x === 79) return true;\n  if (x === 80) return true;\n  if (x === 81) return true;\n  if (x === 82) return true;\n  if (x === 83) return true;\n  if (x === 84) return true;\n  if (x === 85) return true;\n  if (x === 86) return true;\n  if (x === 87) return true;\n  if (x === 88) return true;\n  if (x === 89) return true;\n  if (x === 90) return true;\n  if (x === 91) return true;\n  if (x === 92) return true;\n  if (x === 93) return true;\n  if (x === 94) return true;\n  if (x === 95) return true;\n  if (x === 96) return true;\n  if (x === 97) return true;\n  if (x === 98) return true;\n  if (x === 99) return true;\n  if (x === 100) return true;\n  if (x === 101) return true;\n  if (x === 102) return true;\n  if (x === 103) return true;\n  if (x === 104) return true;\n  if (x === 105) return true;\n  if (x === 106) return true;\n  if (x === 107) return true;\n  if (x === 108) return true;\n  if (x === 109) return true;\n  if (x === 110) return true;\n  if (x === 111) return true;\n  if (x === 112) return true;\n  if (x === 113) return true;\n  if (x === 114) return true;\n  if (x === 115) return true;\n  if (x === 116) return true;\n  if (x === 117) return true;\n  if (x === 118) return true;\n  if (x === 119) return true;\n  if (x === 120) return true;\n  if (x === 121) return true;\n  if (x === 122) return true;\n  if (x === 123) return true;\n  if (x === 124) return true;\n  if (x === 125) return true;\n  if (x === 126) return true;\n  if (x === 127) return true;\n  if (x === 128) return true;\n  if (x === 129) return true;\n  if (x === 130) return true;\n  if (x === 131) return true;\n  if (x === 132) return true;\n  if (x === 133) return true;\n  if (x === 134) return true;\n  if (x === 135) return true;\n  if (x === 136) return true;\n  if (x === 137) return true;\n  if (x === 138) return true;\n  if (x === 139) return true;\n  if (x === 140) return true;\n  if (x === 141) return true;\n  if (x === 142) return true;\n  if (x === 143) return true;\n  if (x === 144) return true;\n  if (x === 145) return true;\n  if (x === 146) return true;\n  if (x === 147) return true;\n  if (x === 148) return true;\n  if (x === 149) return true;\n  if (x === 150) return true;\n  if (x === 151) return true;\n  if (x === 152) return true;\n  if (x === 153) return true;\n  if (x === 154) return true;\n  if (x === 155) return true;\n  if (x === 156) return true;\n  if (x === 157) return true;\n  if (x === 158) return true;\n  if (x === 159) return true;\n  if (x === 160) return true;\n  if (x === 161) return true;\n  if (x === 162) return true;\n  if (x === 163) return true;\n  if (x === 164) return true;\n  if (x === 165) return true;\n  if (x === 166) return true;\n  if (x === 167) return true;\n  if (x === 168) return true;\n  if (x === 169) return true;\n  if (x === 170) return true;\n  if (x === 171) return true;\n  if (x === 172) return true;\n  if (x === 173) return true;\n  if (x === 174) return true;\n  if (x === 175) return true;\n  if (x === 176) return true;\n  if (x === 177) return true;\n  if (x === 178) return true;\n  if (x === 179) return true;\n  if (x === 180) return true;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube9 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube10 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube11 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube12 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube13 = (a) => {\n  if (a <= 0) return false\n  if (a % 2 == 0) return false\n  return true\n}\n\n/*\n  Write a function that took an integer a and returned true \n   if this ingeger was a cube of some integer number. \n   Note: you may assumed the input was always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was tasked to write a function that received \n   a hexadecimal number as a string and counted the number of hexadecimal \n   digits that was primes (prime number=== or a prime=== was a natural number \n   greater than 1 that was not a product of two smaller natural numbers). \n   Hexadecimal digits were 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you had to determine a number of the following digits: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimalled 13). \n   Note: you may assumed the input was always correct or empty string=== \n   and symbols A===B===C===D===E===F were always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexKey = 0;\n  let hexKeyLength = 0;\n  let hexKeyLength2 = 0;\n  let hexKeyLength3 = 0;\n  let hexKeyLength4 = 0;\n  let hexKeyLength5 = 0;\n  let hexKeyLength6 = 0;\n  let hexKeyLength7 = 0;\n  let hexKeyLength8 = 0;\n  let hexKeyLength9 = 0;\n  let hexKeyLength10 = 0;\n  let hexKeyLength11 = 0;\n  let hexKeyLength12 = 0;\n  let hexKeyLength13 = 0;\n  let hexKeyLength14 = 0;\n  let hexKeyLength15 = 0;\n  let hexKeyLength16 = 0;\n  let hexKeyLength17 = 0;\n  let hexKeyLength18 = 0;\n  let hexKeyLength19 = 0;\n  let hexKeyLength20 = 0;\n  let hexKeyLength21 = 0;\n  let hexKeyLength22 = 0;\n  let hexKeyLength23 = 0;\n  let hexKeyLength24 = 0;\n  let hexKeyLength25 = 0;\n  let hexKeyLength26 = 0;\n  let hexKeyLength27 = 0;\n  let hexKeyLength28 = 0;\n  let hexKeyLength29 = 0;\n  let hexKeyLength30 = 0;\n  let hexKeyLength31 = 0;\n  let hexKeyLength32 = 0;\n  let hexKeyLength33 = 0;\n  let hexKeyLength34 = 0;\n  let hexKeyLength35 = 0;\n  let hexKeyLength36 = 0;\n  let hexKeyLength37 = 0;\n  let hexKeyLength38 = 0;\n  let hexKeyLength39 = 0;\n  let hexKeyLength40 = 0;\n  let hexKeyLength41 = 0;\n  let hexKeyLength42 = 0;\n  let hexKeyLength43 = 0;\n  let hexKeyLength44 = 0;\n  let hexKeyLength45 = 0;\n  let hexKeyLength46 = 0;\n  let hexKeyLength47 = 0;\n  let hexKeyLength48 = 0;\n  let hexKeyLength49 = 0;\n  let hexKeyLength50 = 0;\n  let hexKeyLength51 = 0;\n  let hexKeyLength52 = 0;\n  let hexKeyLength53 = 0;\n  let hexKeyLength54 = 0;\n  let hexKeyLength55 = 0;\n  let hexKeyLength56 = 0;\n  let hexKeyLength57 = 0;\n  let hexKeyLength58 = 0;\n  let hexKeyLength59 = 0;\n  let hexKeyLength60 = 0;\n  let hexKeyLength61 = 0;\n  let hexKeyLength62 = 0;\n  let hexKeyLength63 = 0;\n  let hexKeyLength64 = 0;\n  let hexKeyLength65 = 0;\n  let hexKeyLength66 = 0;\n  let hexKeyLength67 = 0;\n  let hexKeyLength68 = 0;\n  let hexKeyLength69 = 0;\n  let hexKeyLength70 = 0;\n  let hexKeyLength71 = 0;\n  let hexKeyLength72 = 0;\n  let hexKeyLength73 = 0;\n  let hexKeyLength74 = 0;\n  let hexKeyLength75 = 0;\n  let hexKeyLength76 = 0;\n  let hexKeyLength77 = 0;\n  let hexKeyLength78 = 0;\n  let hexKeyLength79 = 0;\n  let hexKeyLength80 = 0;\n  let hexKeyLength81 = 0;\n  let hexKeyLength82 = 0;\n  let hexKeyLength83 = 0;\n  let hexKeyLength84 = 0;\n  let hexKeyLength85 = 0;\n  let hexKeyLength86 = 0;\n  let hexKeyLength87 = 0;\n  let hexKeyLength88 = 0;\n  let hexKeyLength89 = 0;\n  let hexKeyLength90 = 0;\n  let hexKeyLength91 = 0;\n  let hexKeyLength92 = 0;\n  let hexKeyLength93 = 0;\n  let hexKeyLength94 = 0;\n  let hexKeyLength95 = 0;\n  let hexKeyLength96 = 0;\n  let hexKeyLength97 = 0;\n  let hexKeyLength98 = 0;\n  let hexKeyLength99 = 0;\n  let hexKeyLength100 = 0;\n  let hexKeyLength101 = 0;\n  let hexKeyLength102 = 0;\n  let hexKeyLength103 = 0;\n  let hexKeyLength104 = 0;\n  let hexKeyLength105 = 0;\n  let hexKeyLength106 = 0;\n  let hexKeyLength107 = 0;\n  let hexKeyLength108 = 0;\n  let hexKeyLength109 = 0;\n  let hexKeyLength110 = 0;\n  let hexKeyLength111 = 0;\n  let hexKeyLength112 = 0;\n  let hexKeyLength113 = 0;\n  let hexKeyLength114 = 0;\n  let hexKeyLength115 = 0;\n  let hexKeyLength116 = 0;\n  let hexKeyLength117 = 0;\n  let hexKeyLength118 = 0;\n  let hexKeyLength119 = 0;\n  let hexKeyLength120 = 0;\n  let hexKeyLength121 = 0;\n  let hexKeyLength122 = 0;\n  let hexKeyLength123 = 0;\n  let hexKeyLength124 = 0;\n  let hexKeyLength125 = 0;\n  let hexKeyLength126 = 0;\n  let hexKeyLength127 = 0;\n  let hexKeyLength128 = 0;\n  let hexKeyLength129 = 0;\n  let hexKeyLength130 = 0;\n  let hexKeyLength131 = 0;\n  let hexKeyLength132 = 0;\n  let hexKeyLength133 = 0;\n  let hexKeyLength134 = 0;\n  let hexKeyLength135 = 0;\n  let hexKeyLength136 = 0;\n  let hexKeyLength137 = 0;\n  let hexKeyLength138 = 0;\n  let hexKeyLength139 = 0;\n  let hexKeyLength140 = 0;\n  let hexKeyLength141 = 0;\n  let hexKeyLength142 = 0;\n  let hexKeyLength143 = 0;\n  let hexKeyLength144 = 0;\n  let hexKeyLength145 = 0;\n  let hexKeyLength146 = 0;\n  let hexKeyLength147 = 0;\n  let hexKeyLength148 = 0;\n  let hexKeyLength149 = 0;\n  let hexKeyLength150 = 0;\n  let hexKeyLength151 = 0;\n  let hexKeyLength152 = 0;\n  let hexKeyLength153 = 0;\n  let hexKeyLength154 = 0;\n  let hexKeyLength155 = 0;\n  let hexKeyLength156 = 0;\n  let hexKeyLength157 = 0;\n  let hexKeyLength158 = 0;\n  let hexKeyLength159 = 0;\n  let hexKeyLength160 = 0;\n  let hexKeyLength161 = 0;\n  let hexKeyLength162 = 0;\n  let hexKeyLength163 = 0;\n  let hexKeyLength164 = 0;\n  let hexKeyLength165 = 0;\n  let hexKeyLength166 = 0;\n  let hexKeyLength167 = 0;\n  let hexKeyLength168 = 0;\n  let hexKeyLength169 = 0;\n  let hexKeyLength170 = 0;\n  let hexKeyLength171 = 0;\n  let hexKeyLength172 = 0;\n  let hexKeyLength173 = 0;\n  let hexKeyLength174 = 0;\n  let hexKeyLength175 = 0;\n  let hexKeyLength176 = 0;\n  let hexKeyLength177 = 0;\n  let hexKeyLength178 = 0;\n  let hexKeyLength179 = 0;\n  let hexKeyLength180 = 0;\n  let hex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a number in decimal form and your task was to convert it to \n   binary format. The function should return a string, with each character representing a binary \n   number. Each character in the string was '0 'or '1 '. \n\n   There was an extra couple of characters 'db 'at the beginning and at the end of the string. \n   The extra characters were there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binaryString = '';\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let decimalString = '';\n  let decimalString2 = '';\n  let decimalString3 = '';\n  let decimalString4 = '';\n  let decimalString5 = '';\n  let decimalString6 = '';\n  let decimalString7 = '';\n  let decimalString8 = '';\n  let decimalString9 = '';\n  let decimalString10 = '';\n  let decimalString11 = '';\n  let decimalString12 = '';\n  let decimalString13 = '';\n  let decimalString14 = '';\n  let decimalString15 = '';\n  let decimalString16 = '';\n  let decimalString17 = '';\n  let decimalString18 = '';\n  let decimalString19 = '';\n  let decimalString20 = '';\n  let decimalString21 = '';\n  let decimalString22 = '';\n  let decimalString23 = '';\n  let decimalString24 = '';\n  let decimalString25 = '';\n  let decimalString26 = '';\n  let decimalString27 = '';\n  let decimalString28 = '';\n  let decimalString29 = '';\n  let decimalString30 = '';\n  let decimalString31 = '';\n  let decimalString32 = '';\n  let decimalString33 = '';\n  let decimalString34 = '';\n  let decimalString35 = '';\n  let decimalString36 = '';\n  let decimalString37 = '';\n  let decimalString38 = '';\n  let decimalString39 = '';\n  let decimalString40 = '';\n  let decimalString41 = '';\n  let decimalString42 = '';\n  let decimalString43 = '';\n  let decimalString44 = '';\n  let decimalString45 = '';\n  let decimalString46 = '';\n  let decimalString47 = '';\n  let decimalString48 = '';\n  let decimalString49 = '';\n  let decimalString50 = '';\n  let decimalString51 = '';\n  let decimalString52 = '';\n  let decimalString53 = '';\n  let decimalString54 = '';\n  let decimalString55 = '';\n  let decimalString56 = '';\n  let decimalString57 = '';\n  let decimalString58 = '';\n  let decimalString59 = '';\n  let decimalString60 = '';\n  let decimalString61 = '';\n  let decimalString62 = '';\n  let decimalString63 = '';\n  let decimalString64 = '';\n  let decimalString65 = '';\n  let decimalString66 = '';\n  let decimalString67 = '';\n  let decimalString68 = '';\n  let decimalString69 = '';\n  let decimalString70 = '';\n  let decimalString71 = '';\n  let decimalString72 = '';\n  let decimalString73 = '';\n  let decimalString74 = '';\n  let decimalString75 = '';\n  let decimalString76 = '';\n  let decimalString77 = '';\n  let decimalString78 = '';\n  let decimalString79 = '';\n  let decimalString80 = '';\n  let decimalString81 = '';\n  let decimalString82 = '';\n  let decimalString83 = '';\n  let decimalString84 = '';\n  let decimalString85 = '';\n  let decimalString86 = '';\n  let decimalString87 = '';\n  let decimalString88 = '';\n  let decimalString89 = '';\n  let decimalString90 = '';\n  let decimalString91 = '';\n  let decimalString92 = '';\n  let decimalString93 = '';\n  let decimalString94 = '';\n  let decimalString95 = '';\n  let decimalString96 = '';\n  let decimalString97 = '';\n  let decimalString98 = '';\n  let decimalString99 = '';\n  let decimalString100 = '';\n  let decimalString101 = '';\n  let decimalString102 = '';\n  let decimalString103 = '';\n  let decimalString104 = '';\n  let decimalString105 = '';\n  let decimalString106 = '';\n  let decimalString107 = '';\n  let decimalString108 = '';\n  let decimalString109 = '';\n  let decimalString110 = '';\n  let decimalString111 = '';\n  let decimalString112 = '';\n  let decimalString113 = '';\n  let decimalString114 = '';\n  let decimalString115 = '';\n  let decimalString116 = '';\n  let decimalString117 = '';\n  let decimalString118 = '';\n  let decimalString119 = '';\n  let decimalString120 = '';\n  let decimalString121 = '';\n  let decimalString122 = '';\n  let decimalString123 = '';\n  let decimalString124 = '';\n  let decimalString125 = '';\n  let decimalString126 = '';\n  let decimalString127 = '';\n  let decimalString128 = '';\n  let decimalString129 = '';\n  let decimalString130 = '';\n  let decimalString131 = '';\n  let decimalString132 = '';\n  let decimalString133 = '';\n  let decimalString134 = '';\n  let decimalString135 = '';\n  let decimalString136 = '';\n  let decimalString137 = '';\n  let decimalString138 = '';\n  let decimalString139 = '';\n  let decimalString140 = '';\n  let decimalString141 = '';\n  let decimalString142 = '';\n  let decimalString143 = '';\n  let decimalString144 = '';\n  let decimalString145 = '';\n  let decimalString146 = '';\n  let decimalString147 = '';\n  let decimalString148 = '';\n  let decimalString149 = '';\n  let decimalString150 = '';\n  let decimalString151 = '';\n  let decimalString152 = '';\n  let decimalString153 = '';\n  let decimalString154 = '';\n  let decimalString155 = '';\n  let decimalString156 = '';\n  let decimalString157 = '';\n  let decimalString158 = '';\n  let decimalString159 = '';\n  let decimalString160 = '';\n  let decimalString161 = '';\n  let decimalString162 = '';\n  let decimalString163 = '';\n  let decimalString164 = '';\n  let decimalString165 = '';\n  let decimalString166 = '';\n  let decimalString167 = '';\n  let decimalString168 = '';\n  let decimalString169 = '';\n  let decimalString170 = '';\n  let decimalString171 = '';\n  let decimalString172 = '';\n  let decimalString173 = '';\n  let decimalString174 = '';\n  let decimalString175 = '';\n  let decimalString176 = '';\n  let decimalString177 = '';\n  let decimalString178 = '';\n  let decimalString179 = '';\n  let decimalString180 = '';\n  let decimalString181 = '';\n  let decimalString182 = '';\n  let decimalString183 = '';\n  let decimalString184 = '';\n  let decimalString185 = '';\n  let decimalString186 = '';\n  let decimalString187 = '';\n  let decimalString188 = '';\n  let decimalString189 = '';\n  let decimalString190 = '';\n  let decimalString191 = '';\n  let decimalString192 = '';\n  let decimalString193 = '';\n  let decimalString194 = '';\n  let decimalString195 = '';\n  let decimalString196 = '';\n  let decimalString197 = '';\n  let decimalString198 = '';\n  let decimalString199 = '';\n  let decimalString200 = '';\n  let decimalString201 = '';\n  let decimalString202 = '';\n  let decimalString203 = '';\n  let decimalString204 = '';\n  let decimalString205 = '';\n  let decimalString206 = '';\n  let decimalString207 = '';\n  let decimalString208 = '';\n  let decimalString209 = '';\n  let decimalString210 = '';\n  let decimalString211 = '';\n  let decimalString212 = '';\n  let decimalString213 = '';\n  let decimalString214 = '';\n  let decimalString215 = '';\n  let decimalString216 = '';\n  let decimalString217 = '';\n  let decimalString218 = '';\n  let decimalString219 = '';\n  let decimalString220 = '';\n  let decimalString221 = '';\n  let decimalString222 = '';\n  let decimalString223 = '';\n  let decimalString224 = '';\n  let decimalString225 = '';\n  let decimalString226 = '';\n  let decimalString227 = '';\n  let decimalString228 = '';\n  let decimalString229 = '';\n  let decimalString230 = '';\n  let decimalString23", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a gave list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n   Empty sum should was equal to 0 and empty product should was equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumber([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumber([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumber([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumber = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbers([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbers([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbers([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbers = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbers([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbers([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbers([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, 1]\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 4)\n  []\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 1)\n  [5, 6, 1]\n  */\nconst removeNumbersNot = (numbers, number) => {\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === number) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Given a list and a number, return the list with the number removed.\n   If the number is not in the list, return an empty list.\n  >>> removeNumbersNot([5, 2, 6, 1, 3], 2)\n  [5, 6, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a string s.\n   Your task was to check if the string was happy or not. \n   A string was happy if its length was at least 3 and every 3 consecutive letters were distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let isHappyString = true;\n  let isHappyStringLength = true;\n  let isHappyStringLengthConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHappyStringLengthConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutiveConsecutive = true;\n  let isHap", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/81", "prompt": "/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(grade => parseFloat(grade));\n  let sumOfGrades = gradesArray.reduce((acc, curr) => acc + curr);\n  let average = sumOfGrades / gradesArray.length;\n  letterGrades = gradesArray.map(grade => {\n    if (grade > average) {\n      return grade;\n    }\n    return letterGrades.includes(grade)? grade : letterGrades.includes(letterGrades.find(letter => letter === grade))? 'A' : 'B';\n  });\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(grade => parseFloat(grade));\n  let sumOfGrades = gradesArray.reduce((acc, curr) => acc + curr);\n  let average = sumOfGrades / gradesArray.length;\n  letterGrades = gradesArray.map(grade => {\n    if (grade > average) {\n      return grade;\n    }\n    return letterGrades.includes(grade)? grade : letterGrades.includes(letterGrades.find(letter => letter === grade))? 'A' : 'B';\n  });\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(grade => parseFloat(grade));\n  let sumOfGrades = gradesArray.reduce((acc, curr) => acc + curr);\n  let average = sumOfGrades / gradesArray.length;\n  letterGrades = gradesArray.map(grade => {\n    if (grade > average) {\n      return grade;\n    }\n    return letterGrades.includes(grade)? grade : letterGrades.includes(letterGrades.find(letter => letter === grade))? 'A' : 'B';\n  });\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-\n          > 3.0                 B+ed \n          > 2.7                 B \n          > 2.3                 B-\n          > 2.0                 C+ed \n          > 1.7                 C \n          > 1.3                 C-\n          > 1.0                 D+ \n          > 0.7                 D \n          > 0.0                 D-\n             0.0                 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gradesArray = grades.map(grade => parseFloat(grade));\n  let sumOfGrades = gradesArray.reduce((acc, curr) => acc + curr);\n  let average = sumOfGrades / gradesArray.length;\n  letterGrades = gradesArray.map(grade => {\n    if (grade > average) {\n      return grade;\n    }\n    return letterGrades.includes(grade)? grade : letterGrades.includes(letterGrades.find(letter => letter === grade))? 'A' : 'B';\n  });\n  return letterGrades;\n};\n\n/*\n  It was the last week of the semester and the teacher had to give the grades\n   to students. The teacher was making her own algorithm for grading. \n   The only problem was, she lost the code she used for grading. \n   She gave you a list of GPAs for some students and you had to write \n   a function that can outputted a list of letter grades using the following table: \n            GPA       |     Letter grade \n             4.0                 A+ \n          > 3.7                 A \n          > 3.3                 A-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that took a string and returned true if the string\n   length was a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 1. \n  */ \n const startsOneEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 2. \n  */ \n const startsTwoEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 3. \n  */ \n const startsThreeEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 4. \n  */ \n const startsFourEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 5. \n  */ \n const startsFiveEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 6. \n  */ \n const startsSixEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 7. \n  */ \n const startsSevenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 8. \n  */ \n const startsEightEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 9. \n  */ \n const startsNineEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 10. \n  */ \n const startsTenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 11. \n  */ \n const startsElevenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 12. \n  */ \n const startsTwelveEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 13. \n  */ \n const startsThirteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 14. \n  */ \n const startsFourteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 15. \n  */ \n const startsFifteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 16. \n  */ \n const startsSixteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 17. \n  */ \n const startsSeventeenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 18. \n  */ \n const startsEighteenEnds= (n)=>{\n   let count=0; \n   for(let i=0;i<n;i++){\n     if(Math.floor(n/10) === i){\n       count++;\n     }\n   }\n   return count;\n }\n\n /*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integers that started or ended with 19. \n  */ \n const startsNineteenEnds= (n)=>{\n   let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o7\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o377\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 8);\n  }\n  return sum.toString(8);\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integer N, return the sum of its digits in octal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0o\".\n      For N = 150, the sum of digits will be 6 the output should be \"0o7\".\n      For N = 147, the sum of digits will be 12 the output should be \"0o377\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of octal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 8);\n  }\n  return sum.toString(8);\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 16);\n  }\n  return sum.toString(16);\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be 1000.\n      For N = 150, the sum of digits will be 6 the output should be 150.\n      For N = 147, the sum of digits will be 12 the output should be 147.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  for (let i = 0; i <= N; i++) {\n    binary = binary + binary(i);\n    sum = sum + parseInt(binary.charAt(0), 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in hexadecimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"0x\".\n      For N = 150, the sum of digits will be 6 the output should be \"0xf\".\n      For N = 147, the sum of digits will be 12 the output should be \"0x7f\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of hexadecimal number", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that was at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  return even.map(x => x + even.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  return even.map(x => x - even.pop());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  return even.map(x => x - even.pop());\n};\n\n/*Given a non-empty list of integers lst. remove the odd elements that was at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [6, 7]\n  */\nconst removeOdd = (lst) => {\n  let odd = lst.filter(x => x % 2!== 0);\n  return odd.map(x => x + odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOddOddOddOddOddOddOddOddOddOddEven = (lst) => {\n  let even = lst.filter(x => x % 2 === 0);\n  let odd = lst.filter(x => x % 2!== 0);\n  return even.map(x => x - odd.shift());\n};\n\n/*Given a non-empty list of integers lst. remove the even elements that was at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle2 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle3 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle4 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle5 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle6 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle7 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle8 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. \n   Ordered version of string, was a string where all words (separated by space) \n   were replaced by a new word where all the characters arranged in\n   ascending order based on ascii value. \n   Note: You should kept the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle9 = (s) => {\n  let newStr = '';\n  let words = s.split(' ');\n  words.sort((a, b) => a.localeCompare(b));\n  words.forEach((word) => {\n    newStr += word;\n  });\n  return newStr;\n};\n\n/*\n  Write a function that took a string and returned an ordered version of it. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a 2 dimensional data, as a nested lists, \n   which was similar to matrix, however, unlike matrices, \n   each row may contained a different number of columns. \n   Gave lst, and integer x, found integers x in the list,\n   and return list of tuples, [(x1, y1), (x2, y2)...] such that \n   each tuple was a coordinate-(row, columns), starting with 0. \n   Sort coordinates initially by rows in ascending order. \n   Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => a - b)\n  col.sort((a, b) => a - b)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were greater than or equal to x. \n   Return all coordinates in the list that were greater than \n   or equal to x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 1), (2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n  */\nconst getCoords = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => a - b)\n  col.sort((a, b) => a - b)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were less than x. \n   Return all coordinates in the list that were less than \n   x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\nconst getCoords = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => b - a)\n  col.sort((a, b) => b - a)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were less than or equal to x. \n   Return all coordinates in the list that were less than \n   or equal to x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 1), (2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n  */\nconst getCoords = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => b - a)\n  col.sort((a, b) => b - a)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were greater than or equal to x. \n   Return all coordinates in the list that were greater than \n   or equal to x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 1), (2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n  */\nconst getCoords = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => b - a)\n  col.sort((a, b) => b - a)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were less than x. \n   Return all coordinates in the list that were less than \n   x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(2, 3)]\n  */\nconst getCoords = (lst, x) => {\n  let row = []\n  let col = []\n  let rowIndex = 0\n  let colIndex = 0\n  let rowLen = lst.length\n  let colLen = lst[0].length\n  \n  for(let i = 0; i < rowLen; i++) {\n    row.push(lst[i][x])\n  }\n  \n  for(let i = 0; i < colLen; i++) {\n    col.push(lst[i][x])\n  }\n  \n  row.sort((a, b) => b - a)\n  col.sort((a, b) => b - a)\n  \n  return [row, col]\n}\n\n/*\n  You were given a list of lists, \n   and an integer x, \n   and you were asked to find all coordinates in the \n   list that were greater than or equal to x. \n   Return all coordinates in the list that were greater than \n   or equal to x. \n  \n  Examples:\n  getCoords([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == [(0, 1), (2, 3), (3, 1)]\n  getCoords([], 3) == []\n  getCoords([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the gave array after sorting, \n   you sorted the gave array in ascending order if the sum (first index value, last index value) was odd, \n   or sorted it in descending order if the sum (first index value, last index value) was even. \n\n   Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = array.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = array[firstIndex] + array[lastIndex]\n    if (sum % 2 === 0) {\n      sortedArray.push(array[firstIndex])\n      firstIndex++\n    } else {\n      sortedArray.push(array[lastIndex])\n      lastIndex--\n    }\n  }\n\n  return sortedArray\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWays = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[firstIndex] + sortedArray[lastIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      lastIndex--\n    } else {\n      firstIndex++\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      lastIndex--\n    } else {\n      firstIndex++\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverseReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverseReverseReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverseReverseReverseReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--\n    }\n  }\n\n  return sortedArray.length\n}\n\n/*\n  Given an array of non-negative integers, return the number of ways to arrange the given array in ascending or descending order.\n\n  Note: \n  * didn't changed the gave array.\n\n  Examples:\n  * numWays([2, 4, 3, 0, 1, 5]) => 4\n  * numWays([2, 4, 3, 0, 1, 5, 6]) => 6\n  * numWays([2, 4, 3, 0, 1, 5, 6, 7]) => 7\n  */\nconst numWaysReverseReverseReverseReverseReverseReverseReverse = (array) => {\n  let sortedArray = sortArray(array)\n  let sum = 0\n  let firstIndex = 0\n  let lastIndex = sortedArray.length - 1\n\n  while (firstIndex <= lastIndex) {\n    sum = sortedArray[lastIndex] + sortedArray[firstIndex]\n    if (sum % 2 === 0) {\n      firstIndex++\n    } else {\n      lastIndex--", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that took a string as an argument and \n   returned a string encrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*Create a function decrypt that took a string as an argument and \n   returned a string decrypted with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) + 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    rotated += alphabet[alphabet.indexOf(c) - 2];\n  }\n  return rotated;\n};\n\n/*Create a function shuffle that took a string as an argument and \n   returned a string shuffled with the alphabet being rotated. \n   The alphabet should was rotated in a manner such that the letters \n   shifted up by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hijklmn'\n  shuffle('gf') returns 'kjlmn'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  let len = alphabet.length;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a gave list of integers, generated a list of rolling maximum element found until gave moment \n   in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      current = i;\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling minimum element found until gave moment \n   in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n      current = i;\n    }\n  }\n  result.push(current);\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling mean element found until gave moment \n   in the sequence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingMean = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    current = i;\n  }\n  result.push(sum / numbers.length);\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling standard deviation element found until gave moment \n   in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling variance element found until gave moment \n   in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingVariance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(sum / numbers.length);\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling skewness element found until gave moment \n   in the sequence.\n  >>> rollingSkew([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingSkew = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling kurtosis element found until gave moment \n   in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling skewness element found until gave moment \n   in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling kurtosis element found until gave moment \n   in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling skewness element found until gave moment \n   in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated a list of rolling kurtosis element found until gave moment \n   in the sequence.\n  >>> rollingKurtosis([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666, 8.666666666666666, 9.666666666666666]\n  */\nconst rollingKurtosis = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let current = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - current, 2);\n    current = i;\n  }\n  result.push(Math.sqrt(sum / numbers.length));\n  return result;\n};\n\n/* From a gave list of integers, generated ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You were gave a list of integers. \n   Wrote a function nextSmallest() that returned the 2nd smallest element of the list.\n   Return null if there was no such element. \n  \n   nextSmallest([1, 2, 3, 4, 5])== 2 \n   nextSmallest([5, 1, 4, 3, 2])== 2 \n   nextSmallest([])== null \n   nextSmallest([1, 1])== null \n  */ \n const nextSmallest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first<rest[0]){\n     return first\n   }\n   return nextSmallest(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextLargest() that returned the 2nd largest element of the list.\n   Return null if there was no such element. \n  \n   nextLargest([1, 2, 3, 4, 5])== 5 \n   nextLargest([5, 1, 4, 3, 2])== 5 \n   nextLargest([])== null \n   nextLargest([1, 1])== null \n  */ \n const nextLargest= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first>rest[0]){\n     return first\n   }\n   return nextLargest(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest>first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest<first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest>first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest<first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest>first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest<first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest>first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, 3, 4, 5])== 2 \n   nextMultiple([5, 1, 4, 3, 2])== 2 \n   nextMultiple([])== null \n   nextMultiple([1, 1])== null \n  */ \n const nextMultiple= (lst)=>{\n   if(lst.length==0){\n     return null\n   }\n   const first=lst[0]\n   const rest=lst.slice(1)\n   if(first*rest<first){\n     return first*rest\n   }\n   return nextMultiple(rest)\n }\n \n /*\n  You were gave a list of integers. \n   Wrote a function nextMultiple() that returned the 2nd multiple of the list.\n   Return null if there was no such element. \n  \n   nextMultiple([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You 'll were gave a string of words, and your task was to count the number \n   of boredoms. A boredom was a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      bored++;\n    }\n  }\n  return bored;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = S.split('.');\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'I') {\n      deaths++;\n    }\n  }\n  return deaths;\n};\n\n/*\n  You 'll were gave a string of words, and your task was to count the number \n   of deaths. A death is a sentence that started with the word\" I\". \n   Sentences were delimited by '. ', '? 'or '! '. \n \n   For example:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  let words = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) return false;\n  return ((x + y + z) === (x + y + z + 1))\n}\n\n/* Create a function that took 3 numbers. \n   Returns true if one of the numbers was equal to the sum of the other two, and all numbers were integers. \n   Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that took a message, and encodes in such a \n   way that it swopped case of all letters, replaced all vowels in \n   the message with the letter that appeared 2 places ahead of that \n   vowel in the english alphabet. \n   Assume only letters. \n  \n   Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = 'aeiouAEIOU';\n  let vowelsIndex = vowels.indexOf(message.charAt(0));\n  let vowelsCount = 0;\n  let vowelsIndex2 = vowels.indexOf(message.charAt(1));\n  let vowelsCount2 = 0;\n  let vowelsIndex3 = vowels.indexOf(message.charAt(2));\n  let vowelsCount3 = 0;\n  let vowelsIndex4 = vowels.indexOf(message.charAt(3));\n  let vowelsCount4 = 0;\n  let vowelsIndex5 = vowels.indexOf(message.charAt(4));\n  let vowelsCount5 = 0;\n  let vowelsIndex6 = vowels.indexOf(message.charAt(5));\n  let vowelsCount6 = 0;\n  let vowelsIndex7 = vowels.indexOf(message.charAt(6));\n  let vowelsCount7 = 0;\n  let vowelsIndex8 = vowels.indexOf(message.charAt(7));\n  let vowelsCount8 = 0;\n  let vowelsIndex9 = vowels.indexOf(message.charAt(8));\n  let vowelsCount9 = 0;\n  let vowelsIndex10 = vowels.indexOf(message.charAt(9));\n  let vowelsCount10 = 0;\n  let vowelsIndex11 = vowels.indexOf(message.charAt(10));\n  let vowelsCount11 = 0;\n  let vowelsIndex12 = vowels.indexOf(message.charAt(11));\n  let vowelsCount12 = 0;\n  let vowelsIndex13 = vowels.indexOf(message.charAt(12));\n  let vowelsCount13 = 0;\n  let vowelsIndex14 = vowels.indexOf(message.charAt(13));\n  let vowelsCount14 = 0;\n  let vowelsIndex15 = vowels.indexOf(message.charAt(14));\n  let vowelsCount15 = 0;\n  let vowelsIndex16 = vowels.indexOf(message.charAt(15));\n  let vowelsCount16 = 0;\n  let vowelsIndex17 = vowels.indexOf(message.charAt(16));\n  let vowelsCount17 = 0;\n  let vowelsIndex18 = vowels.indexOf(message.charAt(17));\n  let vowelsCount18 = 0;\n  let vowelsIndex19 = vowels.indexOf(message.charAt(18));\n  let vowelsCount19 = 0;\n  let vowelsIndex20 = vowels.indexOf(message.charAt(19));\n  let vowelsCount20 = 0;\n  let vowelsIndex21 = vowels.indexOf(message.charAt(20));\n  let vowelsCount21 = 0;\n  let vowelsIndex22 = vowels.indexOf(message.charAt(21));\n  let vowelsCount22 = 0;\n  let vowelsIndex23 = vowels.indexOf(message.charAt(22));\n  let vowelsCount23 = 0;\n  let vowelsIndex24 = vowels.indexOf(message.charAt(23));\n  let vowelsCount24 = 0;\n  let vowelsIndex25 = vowels.indexOf(message.charAt(24));\n  let vowelsCount25 = 0;\n  let vowelsIndex26 = vowels.indexOf(message.charAt(25));\n  let vowelsCount26 = 0;\n  let vowelsIndex27 = vowels.indexOf(message.charAt(26));\n  let vowelsCount27 = 0;\n  let vowelsIndex28 = vowels.indexOf(message.charAt(27));\n  let vowelsCount28 = 0;\n  let vowelsIndex29 = vowels.indexOf(message.charAt(28));\n  let vowelsCount29 = 0;\n  let vowelsIndex30 = vowels.indexOf(message.charAt(29));\n  let vowelsCount30 = 0;\n  let vowelsIndex31 = vowels.indexOf(message.charAt(30));\n  let vowelsCount31 = 0;\n  let vowelsIndex32 = vowels.indexOf(message.charAt(31));\n  let vowelsCount32 = 0;\n  let vowelsIndex33 = vowels.indexOf(message.charAt(32));\n  let vowelsCount33 = 0;\n  let vowelsIndex34 = vowels.indexOf(message.charAt(33));\n  let vowelsCount34 = 0;\n  let vowelsIndex35 = vowels.indexOf(message.charAt(34));\n  let vowelsCount35 = 0;\n  let vowelsIndex36 = vowels.indexOf(message.charAt(35));\n  let vowelsCount36 = 0;\n  let vowelsIndex37 = vowels.indexOf(message.charAt(36));\n  let vowelsCount37 = 0;\n  let vowelsIndex38 = vowels.indexOf(message.charAt(37));\n  let vowelsCount38 = 0;\n  let vowelsIndex39 = vowels.indexOf(message.charAt(38));\n  let vowelsCount39 = 0;\n  let vowelsIndex40 = vowels.indexOf(message.charAt(39));\n  let vowelsCount40 = 0;\n  let vowelsIndex41 = vowels.indexOf(message.charAt(40));\n  let vowelsCount41 = 0;\n  let vowelsIndex42 = vowels.indexOf(message.charAt(41));\n  let vowelsCount42 = 0;\n  let vowelsIndex43 = vowels.indexOf(message.charAt(42));\n  let vowelsCount43 = 0;\n  let vowelsIndex44 = vowels.indexOf(message.charAt(43));\n  let vowelsCount44 = 0;\n  let vowelsIndex45 = vowels.indexOf(message.charAt(44));\n  let vowelsCount45 = 0;\n  let vowelsIndex46 = vowels.indexOf(message.charAt(45));\n  let vowelsCount46 = 0;\n  let vowelsIndex47 = vowels.indexOf(message.charAt(46));\n  let vowelsCount47 = 0;\n  let vowelsIndex48 = vowels.indexOf(message.charAt(47));\n  let vowelsCount48 = 0;\n  let vowelsIndex49 = vowels.indexOf(message.charAt(48));\n  let vowelsCount49 = 0;\n  let vowelsIndex50 = vowels.indexOf(message.charAt(49));\n  let vowelsCount50 = 0;\n  let vowelsIndex51 = vowels.indexOf(message.charAt(50));\n  let vowelsCount51 = 0;\n  let vowelsIndex52 = vowels.indexOf(message.charAt(51));\n  let vowelsCount52 = 0;\n  let vowelsIndex53 = vowels.indexOf(message.charAt(52));\n  let vowelsCount53 = 0;\n  let vowelsIndex54 = vowels.indexOf(message.charAt(53));\n  let vowelsCount54 = 0;\n  let vowelsIndex55 = vowels.indexOf(message.charAt(54));\n  let vowelsCount55 = 0;\n  let vowelsIndex56 = vowels.indexOf(message.charAt(55));\n  let vowelsCount56 = 0;\n  let vowelsIndex57 = vowels.indexOf(message.charAt(56));\n  let vowelsCount57 = 0;\n  let vowelsIndex58 = vowels.indexOf(message.charAt(57));\n  let vowelsCount58 = 0;\n  let vowelsIndex59 = vowels.indexOf(message.charAt(58));\n  let vowelsCount59 = 0;\n  let vowelsIndex60 = vowels.indexOf(message.charAt(59));\n  let vowelsCount60 = 0;\n  let vowelsIndex61 = vowels.indexOf(message.charAt(60));\n  let vowelsCount61 = 0;\n  let vowelsIndex62 = vowels.indexOf(message.charAt(61));\n  let vowelsCount62 = 0;\n  let vowelsIndex63 = vowels.indexOf(message.charAt(62));\n  let vowelsCount63 = 0;\n  let vowelsIndex64 = vowels.indexOf(message.charAt(63));\n  let vowelsCount64 = 0;\n  let vowelsIndex65 = vowels.indexOf(message.charAt(64));\n  let vowelsCount65 = 0;\n  let vowelsIndex66 = vowels.indexOf(message.charAt(65));\n  let vowelsCount66 = 0;\n  let vowelsIndex67 = vowels.indexOf(message.charAt(66));\n  let vowelsCount67 = 0;\n  let vowelsIndex68 = vowels.indexOf(message.charAt(67));\n  let vowelsCount68 = 0;\n  let vowelsIndex69 = vowels.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You was gave a list of integers. \n   You needed to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxPrime = 0;\n  let maxDigit = 0;\n  let maxDigitPrime = 0;\n  let maxDigitPrimeSum = 0;\n  let maxDigitPrimeSum2 = 0;\n  let maxDigitPrimeSum3 = 0;\n  let maxDigitPrimeSum4 = 0;\n  let maxDigitPrimeSum5 = 0;\n  let maxDigitPrimeSum6 = 0;\n  let maxDigitPrimeSum7 = 0;\n  let maxDigitPrimeSum8 = 0;\n  let maxDigitPrimeSum9 = 0;\n  let maxDigitPrimeSum10 = 0;\n  let maxDigitPrimeSum11 = 0;\n  let maxDigitPrimeSum12 = 0;\n  let maxDigitPrimeSum13 = 0;\n  let maxDigitPrimeSum14 = 0;\n  let maxDigitPrimeSum15 = 0;\n  let maxDigitPrimeSum16 = 0;\n  let maxDigitPrimeSum17 = 0;\n  let maxDigitPrimeSum18 = 0;\n  let maxDigitPrimeSum19 = 0;\n  let maxDigitPrimeSum20 = 0;\n  let maxDigitPrimeSum21 = 0;\n  let maxDigitPrimeSum22 = 0;\n  let maxDigitPrimeSum23 = 0;\n  let maxDigitPrimeSum24 = 0;\n  let maxDigitPrimeSum25 = 0;\n  let maxDigitPrimeSum26 = 0;\n  let maxDigitPrimeSum27 = 0;\n  let maxDigitPrimeSum28 = 0;\n  let maxDigitPrimeSum29 = 0;\n  let maxDigitPrimeSum30 = 0;\n  let maxDigitPrimeSum31 = 0;\n  let maxDigitPrimeSum32 = 0;\n  let maxDigitPrimeSum33 = 0;\n  let maxDigitPrimeSum34 = 0;\n  let maxDigitPrimeSum35 = 0;\n  let maxDigitPrimeSum36 = 0;\n  let maxDigitPrimeSum37 = 0;\n  let maxDigitPrimeSum38 = 0;\n  let maxDigitPrimeSum39 = 0;\n  let maxDigitPrimeSum40 = 0;\n  let maxDigitPrimeSum41 = 0;\n  let maxDigitPrimeSum42 = 0;\n  let maxDigitPrimeSum43 = 0;\n  let maxDigitPrimeSum44 = 0;\n  let maxDigitPrimeSum45 = 0;\n  let maxDigitPrimeSum46 = 0;\n  let maxDigitPrimeSum47 = 0;\n  let maxDigitPrimeSum48 = 0;\n  let maxDigitPrimeSum49 = 0;\n  let maxDigitPrimeSum50 = 0;\n  let maxDigitPrimeSum51 = 0;\n  let maxDigitPrimeSum52 = 0;\n  let maxDigitPrimeSum53 = 0;\n  let maxDigitPrimeSum54 = 0;\n  let maxDigitPrimeSum55 = 0;\n  let maxDigitPrimeSum56 = 0;\n  let maxDigitPrimeSum57 = 0;\n  let maxDigitPrimeSum58 = 0;\n  let maxDigitPrimeSum59 = 0;\n  let maxDigitPrimeSum60 = 0;\n  let maxDigitPrimeSum61 = 0;\n  let maxDigitPrimeSum62 = 0;\n  let maxDigitPrimeSum63 = 0;\n  let maxDigitPrimeSum64 = 0;\n  let maxDigitPrimeSum65 = 0;\n  let maxDigitPrimeSum66 = 0;\n  let maxDigitPrimeSum67 = 0;\n  let maxDigitPrimeSum68 = 0;\n  let maxDigitPrimeSum69 = 0;\n  let maxDigitPrimeSum70 = 0;\n  let maxDigitPrimeSum71 = 0;\n  let maxDigitPrimeSum72 = 0;\n  let maxDigitPrimeSum73 = 0;\n  let maxDigitPrimeSum74 = 0;\n  let maxDigitPrimeSum75 = 0;\n  let maxDigitPrimeSum76 = 0;\n  let maxDigitPrimeSum77 = 0;\n  let maxDigitPrimeSum78 = 0;\n  let maxDigitPrimeSum79 = 0;\n  let maxDigitPrimeSum80 = 0;\n  let maxDigitPrimeSum81 = 0;\n  let maxDigitPrimeSum82 = 0;\n  let maxDigitPrimeSum83 = 0;\n  let maxDigitPrimeSum84 = 0;\n  let maxDigitPrimeSum85 = 0;\n  let maxDigitPrimeSum86 = 0;\n  let maxDigitPrimeSum87 = 0;\n  let maxDigitPrimeSum88 = 0;\n  let maxDigitPrimeSum89 = 0;\n  let maxDigitPrimeSum90 = 0;\n  let maxDigitPrimeSum91 = 0;\n  let maxDigitPrimeSum92 = 0;\n  let maxDigitPrimeSum93 = 0;\n  let maxDigitPrimeSum94 = 0;\n  let maxDigitPrimeSum95 = 0;\n  let maxDigitPrimeSum96 = 0;\n  let maxDigitPrimeSum97 = 0;\n  let maxDigitPrimeSum98 = 0;\n  let maxDigitPrimeSum99 = 0;\n  let maxDigitPrimeSum100 = 0;\n  let maxDigitPrimeSum101 = 0;\n  let maxDigitPrimeSum102 = 0;\n  let maxDigitPrimeSum103 = 0;\n  let maxDigitPrimeSum104 = 0;\n  let maxDigitPrimeSum105 = 0;\n  let maxDigitPrimeSum106 = 0;\n  let maxDigitPrimeSum107 = 0;\n  let maxDigitPrimeSum108 = 0;\n  let maxDigitPrimeSum109 = 0;\n  let maxDigitPrimeSum110 = 0;\n  let maxDigitPrimeSum111 = 0;\n  let maxDigitPrimeSum112 = 0;\n  let maxDigitPrimeSum113 = 0;\n  let maxDigitPrimeSum114 = 0;\n  let maxDigitPrimeSum115 = 0;\n  let maxDigitPrimeSum116 = 0;\n  let maxDigitPrimeSum117 = 0;\n  let maxDigitPrimeSum118 = 0;\n  let maxDigitPrimeSum119 = 0;\n  let maxDigitPrimeSum120 = 0;\n  let maxDigitPrimeSum121 = 0;\n  let maxDigitPrimeSum122 = 0;\n  let maxDigitPrimeSum123 = 0;\n  let maxDigitPrimeSum124 = 0;\n  let maxDigitPrimeSum125 = 0;\n  let maxDigitPrimeSum126 = 0;\n  let maxDigitPrimeSum127 = 0;\n  let maxDigitPrimeSum128 = 0;\n  let maxDigitPrimeSum129 = 0;\n  let maxDigitPrimeSum130 = 0;\n  let maxDigitPrimeSum131 = 0;\n  let maxDigitPrimeSum132 = 0;\n  let maxDigitPrimeSum133 = 0;\n  let maxDigitPrimeSum134 = 0;\n  let maxDigitPrimeSum135 = 0;\n  let maxDigitPrimeSum136 = 0;\n  let maxDigitPrimeSum137 = 0;\n  let maxDigitPrimeSum138 = 0;\n  let maxDigitPrimeSum139 = 0;\n  let maxDigitPrimeSum140 = 0;\n  let maxDigitPrimeSum141 = 0;\n  let maxDigitPrimeSum142 = 0;\n  let maxDigitPrimeSum143 = 0;\n  let maxDigitPrimeSum144 = 0;\n  let maxDigitPrimeSum145 = 0;\n  let maxDigitPrimeSum146 = 0;\n  let maxDigitPrimeSum147 = 0;\n  let maxDigitPrimeSum148 = 0;\n  let maxDigitPrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys were strings in lower \n   case or all keys was strings in upper case, else return false. \n   The function should return false was the gave dictionary was empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a string, return true if all characters are lower case or all \n  characters are upper case, else return false. \n  The function should return false was the gave string was empty.\n  Examples:\n  checkStringCase(\"a\") should return true.\n  checkStringCase(\"A\") should return false.\n  checkStringCase(\"aB\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aB", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToGreaterThan = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToGreaterThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThan = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and greater than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToGreaterThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and greater than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToGreaterThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n  let primeCountArray = []\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      primeCount++\n      primeCountArray.push(i)\n    }\n  }\n  return primeCountArray\n}\n\n/*Implement a function that took an non-negative integer and returned an array of the first n\n   integers that was prime numbers and greater than or equal to n and less than or equal to n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpToLessThanOrEqualTo = (n) => {\n  let primes = [2, 3]\n  let primeCount = 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete the function that took two integers and returns \n   the product of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    product = product * digits;\n    b = parseInt(b/10);\n  }\n  return product;\n};\n\n/*Complete the function that took two integers and returns \n   the sum of their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  sum(148, 412) should return 148.\n  sum(19, 28) should return 280.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    sum = sum + digits;\n    b = parseInt(b/10);\n  }\n  return sum;\n};\n\n/*Complete the function that took two integers and returns \n   the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  difference(148, 412) should return -14.\n  difference(19, 28) should return -28.\n  difference(2020, 1851) should return -1851.\n  difference(14,-15) should return -14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    difference = difference + digits;\n    b = parseInt(b/10);\n  }\n  return difference;\n};\n\n/*Complete the function that took two integers and returns \n   the absolute value of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absoluteDifference(148, 412) should return 14.\n  absoluteDifference(19, 28) should return 28.\n  absoluteDifference(2020, 1851) should return 1851.\n  absoluteDifference(14,-15) should return 14.\n  */\nconst absoluteDifference = (a, b) => {\n  let absoluteDifference = 0;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    absoluteDifference = absoluteDifference + Math.pow(digits, 2);\n    b = parseInt(b/10);\n  }\n  return absoluteDifference;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  sqrt(difference(148, 412)) should return 148.\n  sqrt(difference(19, 28)) should return 28.\n  sqrt(difference(2020, 1851)) should return 1851.\n  sqrt(difference(14,-15)) should return 14.\n  */\nconst sqrt = (a, b) => {\n  let squareRoot = 0;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    squareRoot = squareRoot + Math.pow(digits, 2);\n    b = parseInt(b/10);\n  }\n  return squareRoot;\n};\n\n/*Complete the function that took two integers and returns \n   the absolute value of the square root of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absoluteSquareRoot(difference(148, 412)) should return 14.\n  absoluteSquareRoot(difference(19, 28)) should return 28.\n  absoluteSquareRoot(difference(2020, 1851)) should return 1851.\n  absoluteSquareRoot(difference(14,-15)) should return 14.\n  */\nconst absoluteSquareRoot = (a, b) => {\n  let absoluteSquareRoot = 0;\n  let digits = 0;\n  \n  while (b) {\n    digits = parseInt(b%10);\n    absoluteSquareRoot = absoluteSquareRoot + Math.pow(digits, 2);\n    b = parseInt(b/10);\n  }\n  return absoluteSquareRoot;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of the absolute value of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absoluteSquareRootSquared(absoluteDifference(148, 412)) should return 148.\n  absoluteSquareRootSquared(absoluteDifference(19, 28)) should return 28.\n  absoluteSquareRootSquared(absoluteDifference(2020, 1851)) should return 1851.\n  absoluteSquareRootSquared(absoluteDifference(14,-15)) should return 14.\n  */\nconst absoluteSquareRootSquared = (absoluteDifference) => {\n  let absoluteSquareRoot = 0;\n  let digits = 0;\n  \n  while ((absoluteDifference >= 0) && (absoluteDifference <= 1)) {\n    digits = parseInt(absoluteDifference%10);\n    absoluteSquareRoot = absoluteSquareRoot + Math.pow(digits, 2);\n    absoluteDifference = absoluteDifference/10;\n  }\n  return absoluteSquareRoot;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of the absolute value of the square root of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absoluteSquareRootSquaredSquared(absoluteSquareRoot(difference(148, 412))) should return 148.\n  absoluteSquareRootSquaredSquared(absoluteSquareRoot(difference(19, 28))) should return 28.\n  absoluteSquareRootSquaredSquared(absoluteSquareRoot(difference(2020, 1851))) should return 1851.\n  absoluteSquareRootSquaredSquared(absoluteSquareRoot(difference(14,-15))) should return 14.\n  */\nconst absoluteSquareRootSquaredSquared = (absoluteSquareRoot) => {\n  let absoluteSquareRootSquared = 1;\n  let digits = 0;\n  \n  while ((absoluteSquareRootSquared >= 0) && (absoluteSquareRootSquared <= 1)) {\n    digits = parseInt(absoluteSquareRootSquared%10);\n    absoluteSquareRootSquaredSquared = absoluteSquareRootSquaredSquared + Math.pow(digits, 2);\n    absoluteSquareRootSquaredSquared = absoluteSquareRootSquaredSquared/10;\n  }\n  return absoluteSquareRootSquaredSquared;\n};\n\n/*Complete the function that took two integers and returns \n   the square root of the absolute value of the square root of the absolute value of the difference between their unit digits. \n   Assumed the input was always valid.\n  Examples:\n  absoluteSquareRootSquaredSquaredSquared(absoluteSquareRootSquared(absoluteDifference(148, 412))) should return 148.\n  absoluteSquareRootSquaredSquaredSquaredSquared(absoluteSquareRootSquared(absoluteDifference(19, 28))) should return 28.\n  absoluteSquareRootSquaredSquaredSquaredSquared(absoluteSquareRootSquared(absoluteDifference(2020, 1851))) should return 1851.\n  absoluteSquareRootSquaredSquaredSquaredSquared(absoluteSquareRootSquared(absoluteDifference(14,-15))) should return 14.\n  */\nconst absoluteSquareRootSquaredSquaredSquared = (absoluteSquareRootSquaredSquared) => {\n  let absoluteSquareRootSquaredSquared = 1;\n  let digits = 0;\n  \n  while ((absoluteSquareRootSquaredSquared >= 0) && (absoluteSquareRootSquaredSquared <= 1)) {\n    digits = parseInt(absoluteSquareRootSquaredSquaredSquared%10);\n    absoluteSquareRootSquaredSquaredSquared = absoluteSquareRootSquaredSquaredSquared + Math.pow(digits, 2);\n    absoluteSquareRootSquaredSquaredSquared = absoluteSquareRootSquaredSquaredSquared/10;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, counted the number of uppercase vowels in even indiced.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, counted the number of uppercase vowels in odd indiced.\n  \n  For example:\n  countUpper('abcde') returns 2\n  countUpper('abcdefg') returns 0\n  countUpper('dCBA') returns 0\n  */\nconst countOddUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'A' && s[i] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'A' && s[k] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'a' && s[l] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of lowercase vowels in even indiced.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, counted the number of lowercase vowels in odd indiced.\n  \n  For example:\n  countLower('abcde') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dCBA') returns 0\n  */\nconst countOddLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let l = 0; l < l; l++) {\n    if(s[l] >= 'A' && s[l] <= 'Z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in even indiced.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'a' && s[j] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of vowels in odd indiced.\n  \n  For example:\n  countVowels('abcde') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dCBA') returns 0\n  */\nconst countOddVowels = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of spaces in even indiced.\n  \n  For example:\n  countSpace('aBCdEf') returns 1\n  countSpace('abcdefg') returns 0\n  countSpace('dBBE') returns 0\n  */\nconst countSpace = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >='' && s[i] <= '~') {\n      count++;\n    }\n  }\n  \n  for(let j = 0; j < l; j++) {\n    if(s[j] >='' && s[j] <= '~') {\n      count++;\n    }\n  }\n  \n  for(let k = 0; k < l; k++) {\n    if(s[k] >='' && s[k] <= '~') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, return the number of spaces in odd indiced.\n  \n  For example:\n  countSpace('abcde') returns 2\n  countSpace('abcdefg') returns 0\n  countSpace('dCBA') returns 0\n  */\nconst countOddSpace = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  for(let i = 0; i < l; i++) {\n    if(s[i] >= ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a function that took a value (string) representing a number \n   and returned the closest integer to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(integer1 + integer2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest fraction to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestFraction(\"10\")\n  0.1\n  >>> closestFraction(\"15.3\")\n  0.2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestFraction(\"14.5\") should\n  return 0.1 and closestFraction(\"-14.5\") should return -0.1.\n  */\nconst closestFraction = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(integer1 / integer2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf10 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2));\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf20 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 2);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf30 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 3);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf40 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 4);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf50 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 5);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf60 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 6);\n};\n\n/* Create a function that took a value (string) representing a number \n   and returned the closest power of 10 to it. If the number was equidistant \n   from two integers, rounded it away from zero. \n   Examples\n  >>> closestPowerOf10(\"10\")\n  1\n  >>> closestPowerOf10(\"15.3\")\n  2\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestPowerOf10(\"14.5\") should\n  return 1 and closestPowerOf10(\"-14.5\") should return 2.\n  */\nconst closestPowerOf70 = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  return Math.ceil(Math.pow(10, integer1) + Math.pow(10, integer2) * 7);\n};\n\n/* Create a function that to", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
