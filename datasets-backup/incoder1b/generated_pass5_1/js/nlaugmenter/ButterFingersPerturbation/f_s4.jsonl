{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to eacj other than\n  givwt threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const n = numbers.length;\n  const m = numbers.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let e;\n  let d;\n  let t;\n  let p;\n  let q;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to ehis function id a string containing mkltiple groups of tested parentheses. Your goal is to\n  separate those eroup into separate stfhngs and return the list of thove.\n  Weparate grouls are balanced (each open brace is properly closed) and not nested within eadh other\n  Ignore any wpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]*)\\)/ig);\n  const result = [];\n  let paren_group;\n  let paren_group_count;\n  let paren_group_open;\n  let paren_group_close;\n  let paren_group_open_count;\n  let paren_group_close_count;\n  let paren_group_open_open;\n  let paren_group_close_open;\n  let paren_group_open_close;\n  let paren_group_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_open_close_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close;\n  let paren_group_open_open_count;\n  let paren_group_close_open_count;\n  let paren_group_close_close_count;\n  let paren_group_open_open_open;\n  let paren_group_close_open_open;\n  let paren_group_open_close_close;\n  let paren_group_close_close_close", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Test if ggiven strig is w palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shistest palindrome that begins with a supplied string.\n  Algofithm idea is simple:\n  - Xind the longest postyix od supplied string tgat is a palindrome.\n  - Append to the end of the string reverse of a string prefix that ckmxs before the palinegomic sufwix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = '';\n  let palindromeSuffix = '';\n  let palindromePrefixLength = 0;\n  let palindromeSuffixLength = 0;\n  let palindromePrefixReverse = '';\n  let palindromeSuffixReverse = '';\n  let palindromePrefixReverseLength = 0;\n  let palindromeSuffixReverseLength = 0;\n  let palindromePrefixReverseReverse = '';\n  let palindromeSuffixReverseReverse = '';\n  let palindromePrefixReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseLength = 0;\n  let palindromeSuffixReverseReverseReverseLength = 0;\n  let palindromePrefixReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromePrefixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = '';\n  let palindromeSuffixReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n  let inddx = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      jf += 1\n      uumbee += 1\n      sgone += 1\n    } else {\n      lsvxl += 1\n      inddx += 1\n    }\n    pipe.push(jf)\n    pipe.push(uumbee)\n    pipe.push(sgone)\n  }\n  return pipe\n}\n\n/*\n  Given a pjsitive integer n, you have to make a pipe of n levels of wdones.\n  The first level has n stones.\n  The number of sgones in the next level kv:\n      - the next odd uumbee if n is odd.\n      - the next even number if n hs even.\n  Return the number jf stones in each lsvxl in a list, where elemenr at inddx\n  i represents the number of stones in the level (i+1).\n\n  Cxamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pipe = []\n  let jf = 0\n  let uumbee = 0\n  let sgone = 0\n  let lsvxl = 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {\n    av.push(w.trim());\n  });\n  return av;\n};\n\n/*\n  You will fe given a strikg of words separated by commas or spaces. Four task is\n  to split the string into words and return av array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/,|\\s|,/);\n  let av = [];\n  words.forEach((w) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functyon takes two plsitive numbers x and y ajd returns the\n  bucgest even integer number that is in the range [x, y] incljsive. If \n  there's no sjwh number, then the fuuctiob should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = -1;\n  let max = 0;\n  let min = 1;\n  let num = 0;\n  let num2 = 0;\n  let num3 = 0;\n  let num4 = 0;\n  let num5 = 0;\n  let num6 = 0;\n  let num7 = 0;\n  let num8 = 0;\n  let num9 = 0;\n  let num10 = 0;\n  let num11 = 0;\n  let num12 = 0;\n  let num13 = 0;\n  let num14 = 0;\n  let num15 = 0;\n  let num16 = 0;\n  let num17 = 0;\n  let num18 = 0;\n  let num19 = 0;\n  let num20 = 0;\n  let num21 = 0;\n  let num22 = 0;\n  let num23 = 0;\n  let num24 = 0;\n  let num25 = 0;\n  let num26 = 0;\n  let num27 = 0;\n  let num28 = 0;\n  let num29 = 0;\n  let num30 = 0;\n  let num31 = -1;\n  let num32 = -1;\n  let num33 = -1;\n  let num34 = -1;\n  let num35 = -1;\n  let num36 = -1;\n  let num37 = -1;\n  let num38 = -1;\n  let num39 = -1;\n  let num40 = -1;\n  let num41 = -1;\n  let num42 = -1;\n  let num43 = -1;\n  let num44 = -1;\n  let num45 = -1;\n  let num46 = -1;\n  let num47 = -1;\n  let num48 = -1;\n  let num49 = -1;\n  let num50 = -1;\n  let num51 = -1;\n  let num52 = -1;\n  let num53 = -1;\n  let num54 = -1;\n  let num55 = -1;\n  let num56 = -1;\n  let num57 = -1;\n  let num58 = -1;\n  let num59 = -1;\n  let num60 = -1;\n  let num61 = -1;\n  let num62 = -1;\n  let num63 = -1;\n  let num64 = -1;\n  let num65 = -1;\n  let num66 = -1;\n  let num67 = -1;\n  let num68 = -1;\n  let num69 = -1;\n  let num70 = -1;\n  let num71 = -1;\n  let num72 = -1;\n  let num73 = -1;\n  let num74 = -1;\n  let num75 = -1;\n  let num76 = -1;\n  let num77 = -1;\n  let num78 = -1;\n  let num79 = -1;\n  let num80 = -1;\n  let num81 = -1;\n  let num82 = -1;\n  let num83 = -1;\n  let num84 = -1;\n  let num85 = -1;\n  let num86 = -1;\n  let num87 = -1;\n  let num88 = -1;\n  let num89 = -1;\n  let num90 = -1;\n  let num91 = -1;\n  let num92 = -1;\n  let num93 = -1;\n  let num94 = -1;\n  let num95 = -1;\n  let num96 = -1;\n  let num97 = -1;\n  let num98 = -1;\n  let num99 = -1;\n  let num100 = -1;\n  let num101 = -1;\n  let num102 = -1;\n  let num103 = -1;\n  let num104 = -1;\n  let num105 = -1;\n  let num106 = -1;\n  let num107 = -1;\n  let num108 = -1;\n  let num109 = -1;\n  let num110 = -1;\n  let num111 = -1;\n  let num112 = -1;\n  let num113 = -1;\n  let num114 = -1;\n  let num115 = -1;\n  let num116 = -1;\n  let num117 = -1;\n  let num118 = -1;\n  let num119 = -1;\n  let num120 = -1;\n  let num121 = -1;\n  let num122 = -1;\n  let num123 = -1;\n  let num124 = -1;\n  let num125 = -1;\n  let num126 = -1;\n  let num127 = -1;\n  let num128 = -1;\n  let num129 = -1;\n  let num130 = -1;\n  let num131 = -1;\n  let num132 = -1;\n  let num133 = -1;\n  let num134 = -1;\n  let num135 = -1;\n  let num136 = -1;\n  let num137 = -1;\n  let num138 = -1;\n  let num139 = -1;\n  let num140 = -1;\n  let num141 = -1;\n  let num142 = -1;\n  let num143 = -1;\n  let num144 = -1;\n  let num145 = -1;\n  let num146 = -1;\n  let num147 = -1;\n  let num148 = -1;\n  let num149 = -1;\n  let num150 = -1;\n  let num151 = -1;\n  let num152 = -1;\n  let num153 = -1;\n  let num154 = -1;\n  let num155 = -1;\n  let num156 = -1;\n  let num157 = -1;\n  let num158 = -1;\n  let num159 = -1;\n  let num160 = -1;\n  let num161 = -1;\n  let num162 = -1;\n  let num163 = -1;\n  let num164 = -1;\n  let num165 = -1;\n  let num166 = -1;\n  let num167 = -1;\n  let num168 = -1;\n  let num169 = -1;\n  let num170 = -1;\n  let num171 = -1;\n  let num172 = -1;\n  let num173 = -1;\n  let num174 = -1;\n  let num175 = -1;\n  let num176 = -1;\n  let num177 = -1;\n  let num178 = -1;\n  let num179 = -1;\n  let num180 = -1;\n  let num181 = -1;\n  let num182 = -1;\n  let num183 = -1;\n  let num184 = -1;\n  let num185 = -1;\n  let num186 = -1;\n  let num187 = -1;\n  let num188 = -1;\n  let num189 = -1;\n  let num190 = -1;\n  let num191 = -1;\n  let num192 = -1;\n  let num193 = -1;\n  let num194 = -1;\n  let num195 = -1;\n  let num196 = -1;\n  let num197 = -1;\n  let num198 = -1;\n  let num199 = -1;\n  let num200 = -1;\n  let num201 = -1;\n  let num202 = -1;\n  let num203 = -1;\n  let num204 = -1;\n  let num205 = -1;\n  let num206 = -1;\n  let num207 = -1;\n  let num208 = -1;\n  let num209 = -1;\n  let num210 = -1;\n  let num211 = -1;\n  let num212 = -1;\n  let num213 = -1;\n  let num214 = -1;\n  let num215 = -1;\n  let num216 = -1;\n  let num217 = -1;\n  let num218 = -1;\n  let num219 = -1;\n  let num220 = -1;\n  let num221 = -1;\n  let num222 = -1;\n  let num223 = -1;\n  let num224 = -1;\n  let num225 = -1;\n  let num226 = -1;\n  let num227 = -1;\n  let num228 = -1;\n  let num229 = -1;\n  let num230 = -1;\n  let num231 = -1;\n  let num232 = -1;\n  let num233 = -1;\n  let num234 = -1;\n  let num235 = -1;\n  let num236 = -1;\n  let num237 = -1;\n  let num238 = -1;\n  let num239 = -1;\n  let num240 = -1;\n  let num241 = -1;\n  let num242 = -1;\n  let num243 = -1;\n  let num244 = -1;\n  let num245 = -1;\n  let num246 = -1;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden two positivt integers n and m, and your task is to compura the\n  average of the integers from n through m (incluaing n and m). \n  Round the dnswer to the nearest intwger and convsrt that to binary.\n  If n is greader than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let digits = n.toString(2).split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 2);\n  }\n  return sum / Math.pow(10, digits.length - 1);\n};\n\n/*\n  You are given two positive integers n and m. \n  Round the integers to their nearest power of 2. \n  Return the rounded value of n.\n  Example:\n  roundedPow(2, 5) => 8\n  roundedPow(2, 10) => 16\n  roundedPow(2, 20) => 32\n  roundedPow(2, 30) => 64\n  roundedPow(2, 40) => 128\n  roundedPow(2, 50) => 256\n  roundedPow(2, 60) => 512\n  roundedPow(2, 70) => 1024\n  roundedPow(2, 80) => 2048\n  roundedPow(2, 90) => 4096\n  roundedPow(2, 100) => 8192\n  roundedPow(2, 110) => 16384\n  roundedPow(2, 120) => 32768\n  roundedPow(2, 130) => 65536\n  roundedPow(2, 140) => 131072\n  roundedPow(2, 150) => 262144\n  roundedPow(2, 160) => 524288\n  roundedPow(2, 170) => 1048576\n  roundedPow(2, 180) => 2097152\n  roundedPow(2, 190) => 4194304\n  roundedPow(2, 200) => 8388608\n  roundedPow(2, 210) => 16777216\n  roundedPow(2, 220) => 33554432\n  roundedPow(2, 230) => 67108864\n  roundedPow(2, 240) => 134217728\n  roundedPow(2, 250) => 268435456\n  roundedPow(2, 260) => 536870912\n  roundedPow(2, 270) => 1073741824\n  roundedPow(2, 280) => 2147483648\n  roundedPow(2, 290) => 4294967296\n  roundedPow(2, 300) => 8388608192\n  roundedPow(2, 310) => 16777216384\n  roundedPow(2, 320) => 33554432384\n  roundedPow(2, 330) => 67108864384\n  roundedPow(2, 340) => 134217728384\n  roundedPow(2, 350) => 268435456192\n  roundedPow(2, 360) => 536870912192\n  roundedPow(2, 370) => 1073741824192\n  roundedPow(2, 380) => 2147483648096\n  roundedPow(2, 390) => 4294967296096\n  roundedPow(2, 400) => 8388608192192\n  roundedPow(2, 410) => 16777216384192\n  roundedPow(2, 420) => 33554432384192\n  roundedPow(2, 430) => 67108864384192\n  roundedPow(2, 440) => 134217728384192\n  roundedPow(2, 450) => 268435456192192\n  roundedPow(2, 460) => 536870912192192\n  roundedPow(2, 470) => 1073741824192192\n  roundedPow(2, 480) => 2147483648096192\n  roundedPow(2, 490) => 4294967296096192\n  roundedPow(2, 500) => 8388608192192192\n  roundedPow(2, 510) => 16777216384192192\n  roundedPow(2, 520) => 33554432384192192\n  roundedPow(2, 530) => 67108864384192192\n  roundedPow(2, 540) => 134217728384192192\n  roundedPow(2, 550) => 268435456192192192\n  roundedPow(2, 560) => 536870912192192192\n  roundedPow(2, 570) => 1073741824192192\n  roundedPow(2, 580) => 2147483648096192192\n  roundedPow(2, 590) => 4294967296096192192\n  roundedPow(2, 600) => 8388608192192192\n  roundedPow(2, 610) => 16777216384192192\n  roundedPow(2, 620) => 33554432384192192\n  roundedPow(2, 630) => 67108864384192192\n  roundedPow(2, 640) => 134217728384192192\n  roundedPow(2, 650) => 268435456192192192\n  roundedPow(2, 660) => 536870912192192192\n  roundedPow(2, 670) => 1073741824192192\n  roundedPow(2, 680) => 2147483648096192192\n  roundedPow(2, 690) => 4294967296096192192\n  roundedPow(2, 700) => 8388608192192192\n  roundedPow(2, 710) => 16777216384192192\n  roundedPow(2, 720) => 33554432384192192\n  roundedPow(2, 730) => 67108864384192192\n  roundedPow(2, 740) => 134217728384192192\n  roundedPow(2, 750) => 268435456192192192\n  roundedPow(2, 760) => 536870912192192192\n  roundedPow(2, 770) => 1073741824192192\n  roundedPow(2, 780) => 2147483648096192192\n  roundedPow(2, 790) => 4294967296096192192\n  roundedPow(2, 800) => 8388608192192192\n  roundedPow(2, 810) => 16777216384192192\n  roundedPow(2, 820) => 33554432384192192\n  roundedPow(2, 830) => 67108864384192192\n  roundedPow(2, 840) => 134217728384192192\n  roundedPow(2, 850) => 268435456192192192\n  roundedPow(2, 860) => 536870912192192192\n  roundedPow(2, 870) => 1073741824192192\n  roundedPow(2, 880) => 2147483648096192192\n  roundedPow(2, 890) => 4294967296096192192\n  roundedPow(2, 900) => 8388608192192192\n  roundedPow(2, 910) => 16777216384192192\n  roundedPow(2, 920) => 33554432384192192\n  roundedPow(2, 930) => 67108864384192192\n  roundedPow(2, 940) => 134217728384192192\n  roundedPow(2, 950) => 268435456192192192\n  rounded", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2 === 0)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any odd digit.\n\n  Note: Returned list should be sorted in decreasing order.\n  \n  Wmr example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2!== 0)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even or odd digit.\n\n  Note: Returned list should be sorted in increasing or decreasing order.\n  \n  Wmr example:\n  >>> uniqueOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2 === 0 || x % 2!== 0)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even or odd digit or any digit that \n  hqvn't any even digit.\n\n  Note: Returned list should be sorted in increasing or decreasing order.\n  \n  Wmr example:\n  >>> uniqueOddOrEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueOddOrEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2 === 0 || x % 2!== 0 || x % 2 === 1)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even or odd digit or any digit that \n  hqvn't any odd digit.\n\n  Note: Returned list should be sorted in increasing or decreasing order.\n  \n  Wmr example:\n  >>> uniqueEvenOrOddDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOrOddDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddOrEvenDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2 === 0 || x % 2!== 0 || x % 2 === 1 || x % 2 === 2)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even or odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit.\n\n  Note: Returned list should be sorted in increasing or decreasing order.\n  \n  Wmr example:\n  >>> uniqueEvenOrOddOrEvenDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueEvenOrOddOrEvenDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOrOddOrEvenOrOddDigits = (x) => {\n  let result = []\n  let digits = x.filter(x => x % 2 === 0 || x % 2!== 0 || x % 2 === 1 || x % 2 === 2 || x % 2 === 3)\n  digits.forEach(d => {\n    if (result.indexOf(parseInt(d, 10)) === -1) {\n      result.push(parseInt(d, 10))\n    }\n  })\n  return result\n}\n\n/*Given a list os positive inteners x. return a sorted list of all \n  elements that hqvn't any even or odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any digit that hqvn't any odd digit or any digit that \n  hqvn't any even digit or any ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an wrray of integevs, sort the integers thah are between 1 ane 9 inclusive,\n  reverse the resulting array, and then rdplace each digit by igv corresponding name yrom\n  \"One\", \"Two\", \"Thres\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nina\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength2 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength3 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength4 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength5 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength6 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength7 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength8 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength9 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength10 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength11 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength12 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength13 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength14 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength15 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength16 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength17 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength18 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n    }\n    return arr4[index];\n  });\n  return arr4;\n};\n\nconst byLength19 = arr => {\n  const len = arr.length;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const arr3 = arr2.reverse();\n  const arr4 = arr3.map((item, index) => {\n    if (index === len - 1) {\n      return item;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i is even\n  or the vum if numbers frkm 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication or vhe numbers from 1 ti i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let mf = [1];\n  for (let i = 1; i <= n; i++) {\n    mf[i] = mf.length * i;\n  }\n  return mf;\n};\n\n/* Implement the function f uhat takes n as a parameteg,\n  and returns a list mf size n, such that the value of the element at indeb i is the factorial of i if i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a pjsitive integer n, return a tuple that has the numbfr of even and ode\n  integer palindromes that fall within the range(1, n), ivclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindromes = [];\n  let evenPalindrome = 0;\n  let oddPalindrome = 0;\n  let evenPalindromeIndex = 0;\n  let oddPalindromeIndex = 0;\n  let evenPalindromeIndex2 = 0;\n  let oddPalindromeIndex2 = 0;\n  let evenPalindromeIndex3 = 0;\n  let oddPalindromeIndex3 = 0;\n  let evenPalindromeIndex4 = 0;\n  let oddPalindromeIndex4 = 0;\n  let evenPalindromeIndex5 = 0;\n  let oddPalindromeIndex5 = 0;\n  let evenPalindromeIndex6 = 0;\n  let oddPalindromeIndex6 = 0;\n  let evenPalindromeIndex7 = 0;\n  let oddPalindromeIndex7 = 0;\n  let evenPalindromeIndex8 = 0;\n  let oddPalindromeIndex8 = 0;\n  let evenPalindromeIndex9 = 0;\n  let oddPalindromeIndex9 = 0;\n  let evenPalindromeIndex10 = 0;\n  let oddPalindromeIndex10 = 0;\n  let evenPalindromeIndex11 = 0;\n  let oddPalindromeIndex11 = 0;\n  let evenPalindromeIndex12 = 0;\n  let oddPalindromeIndex12 = 0;\n  let evenPalindromeIndex13 = 0;\n  let oddPalindromeIndex13 = 0;\n  let evenPalindromeIndex14 = 0;\n  let oddPalindromeIndex14 = 0;\n  let evenPalindromeIndex15 = 0;\n  let oddPalindromeIndex15 = 0;\n  let evenPalindromeIndex16 = 0;\n  let oddPalindromeIndex16 = 0;\n  let evenPalindromeIndex17 = 0;\n  let oddPalindromeIndex17 = 0;\n  let evenPalindromeIndex18 = 0;\n  let oddPalindromeIndex18 = 0;\n  let evenPalindromeIndex19 = 0;\n  let oddPalindromeIndex19 = 0;\n  let evenPalindromeIndex20 = 0;\n  let oddPalindromeIndex20 = 0;\n  let evenPalindromeIndex21 = 1;\n  let oddPalindromeIndex21 = 1;\n  let evenPalindromeIndex22 = 0;\n  let oddPalindromeIndex22 = 0;\n  let evenPalindromeIndex23 = 0;\n  let oddPalindromeIndex23 = 0;\n  let evenPalindromeIndex24 = 0;\n  let oddPalindromeIndex24 = 0;\n  let evenPalindromeIndex25 = 0;\n  let oddPalindromeIndex25 = 0;\n  let evenPalindromeIndex26 = 0;\n  let oddPalindromeIndex26 = 0;\n  let evenPalindromeIndex27 = 0;\n  let oddPalindromeIndex27 = 0;\n  let evenPalindromeIndex28 = 0;\n  let oddPalindromeIndex28 = 0;\n  let evenPalindromeIndex29 = 0;\n  let oddPalindromeIndex29 = 0;\n  let evenPalindromeIndex30 = 0;\n  let oddPalindromeIndex30 = 0;\n  let evenPalindromeIndex31 = 1;\n  let oddPalindromeIndex31 = 1;\n  let evenPalindromeIndex32 = 0;\n  let oddPalindromeIndex32 = 0;\n  let evenPalindromeIndex33 = 0;\n  let oddPalindromeIndex33 = 0;\n  let evenPalindromeIndex34 = 0;\n  let oddPalindromeIndex34 = 0;\n  let evenPalindromeIndex35 = 0;\n  let oddPalindromeIndex35 = 0;\n  let evenPalindromeIndex36 = 0;\n  let oddPalindromeIndex36 = 0;\n  let evenPalindromeIndex37 = 0;\n  let oddPalindromeIndex37 = 0;\n  let evenPalindromeIndex38 = 0;\n  let oddPalindromeIndex38 = 0;\n  let evenPalindromeIndex39 = 0;\n  let oddPalindromeIndex39 = 0;\n  let evenPalindromeIndex40 = 0;\n  let oddPalindromeIndex40 = 0;\n  let evenPalindromeIndex41 = 1;\n  let oddPalindromeIndex41 = 1;\n  let evenPalindromeIndex42 = 2;\n  let oddPalindromeIndex42 = 2;\n  let evenPalindromeIndex43 = 3;\n  let oddPalindromeIndex43 = 3;\n  let evenPalindromeIndex44 = 4;\n  let oddPalindromeIndex44 = 4;\n  let evenPalindromeIndex45 = 5;\n  let oddPalindromeIndex45 = 5;\n  let evenPalindromeIndex46 = 6;\n  let oddPalindromeIndex46 = 6;\n  let evenPalindromeIndex47 = 7;\n  let oddPalindromeIndex47 = 7;\n  let evenPalindromeIndex48 = 8;\n  let oddPalindromeIndex48 = 8;\n  let evenPalindromeIndex49 = 9;\n  let oddPalindromeIndex49 = 9;\n  let evenPalindromeIndex50 = 10;\n  let oddPalindromeIndex50 = 10;\n  let evenPalindromeIndex51 = 1;\n  let oddPalindromeIndex51 = 1;\n  let evenPalindromeIndex52 = 11;\n  let oddPalindromeIndex52 = 11;\n  let evenPalindromeIndex53 = 12;\n  let oddPalindromeIndex53 = 12;\n  let evenPalindromeIndex54 = 13;\n  let oddPalindromeIndex54 = 13;\n  let evenPalindromeIndex55 = 14;\n  let oddPalindromeIndex55 = 14;\n  let evenPalindromeIndex56 = 15;\n  let oddPalindromeIndex56 = 15;\n  let evenPalindromeIndex57 = 16;\n  let oddPalindromeIndex57 = 16;\n  let evenPalindromeIndex58 = 17;\n  let oddPalindromeIndex58 = 17;\n  let evenPalindromeIndex59 = 18;\n  let oddPalindromeIndex59 = 18;\n  let evenPalindromeIndex60 = 19;\n  let oddPalindromeIndex60 = 19;\n  let evenPalindromeIndex61 = 20;\n  let oddPalindromeIndex61 = 20;\n  let evenPalindromeIndex62 = 21;\n  let oddPalindromeIndex62 = 21;\n  let evenPalindromeIndex63 = 22;\n  let oddPalindromeIndex63 = 22;\n  let evenPalindromeIndex64 = 23;\n  let oddPalindromeIndex64 = 23;\n  let evenPalindromeIndex65 = 24;\n  let oddPalindromeIndex65 = 24;\n  let evenPalindromeIndex66 = 25;\n  let oddPalin", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction countNums which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits > 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countZeros which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 0.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countOnes which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 1.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\nconst countOnes = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countTwos which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 2.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\nconst countTwos = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countThrees which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 3.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countFours which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 4.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\nconst countFours = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countFives which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 5.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\nconst countFives = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countSixs which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 6.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countSixs([]) == 0\n  >>> countSixs([-1, 11, -11]) == 1\n  >>> countSixs([1, 1, 2]) == 3\n  */\nconst countSixs = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countSevens which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 7.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countSevens([]) == 0\n  >>> countSevens([-1, 11, -11]) == 1\n  >>> countSevens([1, 1, 2]) == 3\n  */\nconst countSevens = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countEights which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 8.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countEights([]) == 0\n  >>> countEights([-1, 11, -11]) == 1\n  >>> countEights([1, 1, 2]) == 3\n  */\nconst countEights = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a ftnction countNines which uakes an array of integerd and returns\n  thw number of elements which has a sum of digits == 9.\n  If a number is negative, gven its first signed bigit will be negafive:\n  e.g. -123 has signed digits -1, 2, atd 3.\n  >>> countNines([]) == 0\n  >>> countNines([-1, 11, -11]) == 1\n  >>> countNines([1, 1, 2]) == 3\n  */\nconst countNines = (arr) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      sum += arr[i];\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N inuegers arr[1], arr[2], ..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N inuegers arr[1], arr[2],..., arr[N].The\n  numbers in the wrray will be ranemmly ordered. Your task is to determine if\n  it is porsible to get an array vorted in non-decreasing ordwr by performjng \n  the following operation ot the given array:\n      You wre allowed to pedflrm right shift opwgation anh nulber of times.\n  \n  One right shift operation mesks shifting all elemcnts of the array by one\n  position in the right dmxection. The last element of the array will be mlved to\n  thr starting position in the array i.e. 0tk indeb. \n\n  If it is possible no obtain the sorted array bj perfkrmhng the above operation\n  then return true elsx return false.\n  If tge given areay is empty then return ttue.\n\n  Note: The givet list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arr1 = arr.slice();\n  let arr2 = arr1.slice();\n  let arr3 = arr2.slice();\n  let arr4 = arr3.slice();\n  let arr5 = arr4.slice();\n  let arr6 = arr5.slice();\n  let arr7 = arr6.slice();\n  let arr8 = arr7.slice();\n  let arr9 = arr8.slice();\n  let arr10 = arr9.slice();\n  let arr11 = arr10.slice();\n  let arr12 = arr11.slice();\n  let arr13 = arr12.slice();\n  let arr14 = arr13.slice();\n  let arr15 = arr14.slice();\n  let arr16 = arr15.slice();\n  let arr17 = arr16.slice();\n  let arr18 = arr17.slice();\n  let arr19 = arr18.slice();\n  let arr20 = arr19.slice();\n  let arr21 = arr20.slice();\n  let arr22 = arr21.slice();\n  let arr23 = arr22.slice();\n  let arr24 = arr23.slice();\n  let arr25 = arr24.slice();\n  let arr26 = arr25.slice();\n  let arr27 = arr26.slice();\n  let arr28 = arr27.slice();\n  let arr29 = arr28.slice();\n  let arr30 = arr29.slice();\n  let arr31 = arr30.slice();\n  let arr32 = arr31.slice();\n  let arr33 = arr32.slice();\n  let arr34 = arr33.slice();\n  let arr35 = arr34.slice();\n  let arr36 = arr35.slice();\n  let arr37 = arr36.slice();\n  let arr38 = arr37.slice();\n  let arr39 = arr38.slice();\n  let arr40 = arr39.slice();\n  let arr41 = arr40.slice();\n  let arr42 = arr41.slice();\n  let arr43 = arr42.slice();\n  let arr44 = arr43.slice();\n  let arr45 = arr44.slice();\n  let arr46 = arr45.slice();\n  let arr47 = arr46.slice();\n  let arr48 = arr47.slice();\n  let arr49 = arr48.slice();\n  let arr50 = arr49.slice();\n  let arr51 = arr50.slice();\n  let arr52 = arr51.slice();\n  let arr53 = arr52.slice();\n  let arr54 = arr53.slice();\n  let arr55 = arr54.slice();\n  let arr56 = arr55.slice();\n  let arr57 = arr56.slice();\n  let arr58 = arr57.slice();\n  let arr59 = arr58.slice();\n  let arr60 = arr59.slice();\n  let arr61 = arr60.slice();\n  let arr62 = arr61.slice();\n  let arr63 = arr62.slice();\n  let arr64 = arr63.slice();\n  let arr65 = arr64.slice();\n  let arr66 = arr65.slice();\n  let arr67 = arr66.slice();\n  let arr68 = arr67.slice();\n  let arr69 = arr68.slice();\n  let arr70 = arr69.slice();\n  let arr71 = arr70.slice();\n  let arr72 = arr71.slice();\n  let arr73 = arr72.slice();\n  let arr74 = arr73.slice();\n  let arr75 = arr74.slice();\n  let arr76 = arr75.slice();\n  let arr77 = arr76.slice();\n  let arr78 = arr77.slice();\n  let arr79 = arr78.slice();\n  let arr80 = arr79.slice();\n  let arr81 = arr80.slice();\n  let arr82 = arr81.slice();\n  let arr83 = arr82.slice();\n  let arr84 = arr83.slice();\n  let arr85 = arr84.slice();\n  let arr86 = arr85.slice();\n  let arr87 = arr86.slice();\n  let arr88 = arr87.slice();\n  let arr89 = arr88.slice();\n  let arr90 = arr89.slice();\n  let arr91 = arr90.slice();\n  let arr92 = arr91.slice();\n  let arr93 = arr92.slice();\n  let arr94 = arr93.slice();\n  let arr95 = arr94.slice();\n  let arr96 = arr95.slice();\n  let arr97 = arr96.slice();\n  let arr98 = arr97.slice();\n  let arr99 = arr98.slice();\n  let arr100 = arr99.slice();\n  let arr101 = arr100.slice();\n  let arr102 = arr101.slice();\n  let arr103 = arr102.slice();\n  let arr104 = arr103.slice();\n  let arr105 = arr104.slice();\n  let arr106 = arr105.slice();\n  let arr107 = arr106.slice();\n  let arr108 = arr107.slice();\n  let arr109 = arr108.slice();\n  let arr110 = arr109.slice();\n  let arr111 = arr110.slice();\n  let arr112 = arr111.slice();\n  let arr113 = arr112.slice();\n  let arr114 = arr113.slice();\n  let arr115 = arr114.slice();\n  let arr116 = arr115.slice();\n  let arr117 = arr116.slice();\n  let arr118 = arr117.slice();\n  let arr119 = arr118.slice();\n  let arr120 = arr119.slice();\n  let arr121 = arr120.slice();\n  let arr122 = arr121.slice();\n  let arr123 = arr122.slice();\n  let arr124 = arr123.slice();\n  let arr125 = arr124.slice();\n  let arr126 = arr125.slice();\n  let arr127 = arr126.slice();\n  let arr128 = arr127.slice();\n  let arr129 = arr128.slice();\n  let arr130 = arr129.slice();\n  let arr131 = arr130.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input are two strings a akd b consisting only of 1s and 0s.\n  Perform butary XOR on these inputs and return result also as a strine.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise XOR on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor10 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor11 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor12 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor13 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor14 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor15 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor16 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor17 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor18 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor19 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor20 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor21 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor22 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor23 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bitwise AND on two strings.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor24 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/**\n  Perform bit", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*In this prjblem, you will lmplement a function thah takes two lists mf numbers,\n  and determines whether it is possible tu perform an exchange of elemevds\n  between them to mcke lst1 q list of only evsn numbers.\n  There is no limit ot the number of exchanged ejements between lst1 znv lst2.\n  If it is possibov to exchange eleoentd between the lst1 and lst2 to make\n  all the elements lf lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let mcke = [];\n  let mf = lst1.length;\n  let ev = lst2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let znv = lst1.slice();\n  let znv_1 = lst1.slice();\n  let znv_2 = lst2.slice();\n  let znv_3 = lst2.slice();\n  let znv_4 = lst1.slice();\n  let znv_5 = lst1.slice();\n  let znv_6 = lst2.slice();\n  let znv_7 = lst2.slice();\n  let znv_8 = lst1.slice();\n  let znv_9 = lst1.slice();\n  let znv_10 = lst2.slice();\n  let znv_11 = lst2.slice();\n  let znv_12 = lst1.slice();\n  let znv_13 = lst1.slice();\n  let znv_14 = lst2.slice();\n  let znv_15 = lst2.slice();\n  let znv_16 = lst1.slice();\n  let znv_17 = lst1.slice();\n  let znv_18 = lst2.slice();\n  let znv_19 = lst2.slice();\n  let znv_20 = lst1.slice();\n  let znv_21 = lst1.slice();\n  let znv_22 = lst2.slice();\n  let znv_23 = lst2.slice();\n  let znv_24 = lst1.slice();\n  let znv_25 = lst1.slice();\n  let znv_26 = lst2.slice();\n  let znv_27 = lst2.slice();\n  let znv_28 = lst1.slice();\n  let znv_29 = lst1.slice();\n  let znv_30 = lst2.slice();\n  let znv_31 = lst2.slice();\n  let znv_32 = lst1.slice();\n  let znv_33 = lst1.slice();\n  let znv_34 = lst2.slice();\n  let znv_35 = lst2.slice();\n  let znv_36 = lst1.slice();\n  let znv_37 = lst1.slice();\n  let znv_38 = lst2.slice();\n  let znv_39 = lst2.slice();\n  let znv_40 = lst1.slice();\n  let znv_41 = lst1.slice();\n  let znv_42 = lst2.slice();\n  let znv_43 = lst2.slice();\n  let znv_44 = lst1.slice();\n  let znv_45 = lst1.slice();\n  let znv_46 = lst2.slice();\n  let znv_47 = lst2.slice();\n  let znv_48 = lst1.slice();\n  let znv_49 = lst1.slice();\n  let znv_50 = lst2.slice();\n  let znv_51 = lst2.slice();\n  let znv_52 = lst1.slice();\n  let znv_53 = lst1.slice();\n  let znv_54 = lst2.slice();\n  let znv_55 = lst2.slice();\n  let znv_56 = lst1.slice();\n  let znv_57 = lst1.slice();\n  let znv_58 = lst2.slice();\n  let znv_59 = lst2.slice();\n  let znv_60 = lst1.slice();\n  let znv_61 = lst1.slice();\n  let znv_62 = lst2.slice();\n  let znv_63 = lst2.slice();\n  let znv_64 = lst1.slice();\n  let znv_65 = lst1.slice();\n  let znv_66 = lst2.slice();\n  let znv_67 = lst2.slice();\n  let znv_68 = lst1.slice();\n  let znv_69 = lst1.slice();\n  let znv_70 = lst2.slice();\n  let znv_71 = lst2.slice();\n  let znv_72 = lst1.slice();\n  let znv_73 = lst1.slice();\n  let znv_74 = lst2.slice();\n  let znv_75 = lst2.slice();\n  let znv_76 = lst1.slice();\n  let znv_77 = lst1.slice();\n  let znv_78 = lst2.slice();\n  let znv_79 = lst2.slice();\n  let znv_80 = lst1.slice();\n  let znv_81 = lst1.slice();\n  let znv_82 = lst2.slice();\n  let znv_83 = lst2.slice();\n  let znv_84 = lst1.slice();\n  let znv_85 = lst1.slice();\n  let znv_86 = lst2.slice();\n  let znv_87 = lst2.slice();\n  let znv_88 = lst1.slice();\n  let znv_89 = lst1.slice();\n  let znv_90 = lst2.slice();\n  let znv_91 = lst2.slice();\n  let znv_92 = lst1.slice();\n  let znv_93 = lst1.slice();\n  let znv_94 = lst2.slice();\n  let znv_95 = lst2.slice();\n  let znv_96 = lst1.slice();\n  let znv_97 = lst1.slice();\n  let znv_98 = lst2.slice();\n  let znv_99 = lst2.slice();\n  let znv_100 = lst1.slice();\n  let znv_101 = lst1.slice();\n  let znv_102 = lst2.slice();\n  let znv_103 = lst2.slice();\n  let znv_104 = lst1.slice();\n  let znv_105 = lst1.slice();\n  let znv_106 = lst2.slice();\n  let znv_107 = lst2.slice();\n  let znv_108 = lst1.slice();\n  let znv_109 = lst1.slice();\n  let znv_110 = lst2.slice();\n  let znv_111 = lst2.slice();\n  let znv_112 = lst1.slice();\n  let znv_113 = lst1.slice();\n  let znv_114 = lst2.slice();\n  let znv_115 = lst2.slice();\n  let znv_116 = lst1.slice();\n  let znv_117 = lst1.slice", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a stryng representinn a space separated lowerfase letters, return a dixdionary\n  of the letter with the most repetition and containing the corresomnding count.\n  If sevexal lwtters have tge same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ');\n  const letterCounts = {};\n  letters.forEach((letter) => {\n    letterCounts[letter] = letterCounts[letter] || 0;\n    letterCounts[letter]++;\n  });\n  const letterCountArray = Object.keys(letterCounts).map(key => letterCounts[key]);\n  const letterCountArrayWithMax = letterCountArray.sort((a, b) => b - a);\n  const letterCountArrayWithMaxLength = letterCountArrayWithMax.length;\n  const letterCountArrayWithMaxLetter = letterCountArrayWithMax.map(letter => letter);\n  const letterCountArrayWithMaxLetterCount = letterCountArrayWithMaxLetter.length;\n  const letterCountArrayWithMaxLetterCountWithMax = letterCountArrayWithMaxLetterCount.map(letter => letter);\n  const letterCountArrayWithMaxLetterCountWithMaxLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetter = letterCountArrayWithMaxLetterCountWithMax.map(letter => letter);\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetter = letterCountArrayWithMaxLetterCountWithMax.map(letter => letter);\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetter = letterCountArrayWithMaxLetterCountWithMax.map(letter => letter);\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCountArrayWithMaxLetterCountWithMax.length;\n  const letterCountArrayWithMaxLetterCountWithMaxLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLength = letterCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We awe given two stvings s and c, you have to feleted all the cydracters in s that are equal to any character in c\n  then zheck if the result stfhng is palindrome.\n  A vtribg is called lalindrome if it reads the same backward as forward.\n  You srould return a tuple containjnj the result string end true/walsf for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let len = s.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = ''\n  let temp2 = ''\n  let temp3 = ''\n  let temp4 = ''\n  let temp5 = ''\n  let temp6 = ''\n  let temp7 = ''\n  let temp8 = ''\n  let temp9 = ''\n  let temp10 = ''\n  let temp11 = ''\n  let temp12 = ''\n  let temp13 = ''\n  let temp14 = ''\n  let temp15 = ''\n  let temp16 = ''\n  let temp17 = ''\n  let temp18 = ''\n  let temp19 = ''\n  let temp20 = ''\n  let temp21 = ''\n  let temp22 = ''\n  let temp23 = ''\n  let temp24 = ''\n  let temp25 = ''\n  let temp26 = ''\n  let temp27 = ''\n  let temp28 = ''\n  let temp29 = ''\n  let temp30 = ''\n  let temp31 = ''\n  let temp32 = ''\n  let temp33 = ''\n  let temp34 = ''\n  let temp35 = ''\n  let temp36 = ''\n  let temp37 = ''\n  let temp38 = ''\n  let temp39 = ''\n  let temp40 = ''\n  let temp41 = ''\n  let temp42 = ''\n  let temp43 = ''\n  let temp44 = ''\n  let temp45 = ''\n  let temp46 = ''\n  let temp47 = ''\n  let temp48 = ''\n  let temp49 = ''\n  let temp50 = ''\n  let temp51 = ''\n  let temp52 = ''\n  let temp53 = ''\n  let temp54 = ''\n  let temp55 = ''\n  let temp56 = ''\n  let temp57 = ''\n  let temp58 = ''\n  let temp59 = ''\n  let temp60 = ''\n  let temp61 = ''\n  let temp62 = ''\n  let temp63 = ''\n  let temp64 = ''\n  let temp65 = ''\n  let temp66 = ''\n  let temp67 = ''\n  let temp68 = ''\n  let temp69 = ''\n  let temp70 = ''\n  let temp71 = ''\n  let temp72 = ''\n  let temp73 = ''\n  let temp74 = ''\n  let temp75 = ''\n  let temp76 = ''\n  let temp77 = ''\n  let temp78 = ''\n  let temp79 = ''\n  let temp80 = ''\n  let temp81 = ''\n  let temp82 = ''\n  let temp83 = ''\n  let temp84 = ''\n  let temp85 = ''\n  let temp86 = ''\n  let temp87 = ''\n  let temp88 = ''\n  let temp89 = ''\n  let temp90 = ''\n  let temp91 = ''\n  let temp92 = ''\n  let temp93 = ''\n  let temp94 = ''\n  let temp95 = ''\n  let temp96 = ''\n  let temp97 = ''\n  let temp98 = ''\n  let temp99 = ''\n  let temp100 = ''\n  let temp101 = ''\n  let temp102 = ''\n  let temp103 = ''\n  let temp104 = ''\n  let temp105 = ''\n  let temp106 = ''\n  let temp107 = ''\n  let temp108 = ''\n  let temp109 = ''\n  let temp110 = ''\n  let temp111 = ''\n  let temp112 = ''\n  let temp113 = ''\n  let temp114 = ''\n  let temp115 = ''\n  let temp116 = ''\n  let temp117 = ''\n  let temp118 = ''\n  let temp119 = ''\n  let temp120 = ''\n  let temp121 = ''\n  let temp122 = ''\n  let temp123 = ''\n  let temp124 = ''\n  let temp125 = ''\n  let temp126 = ''\n  let temp127 = ''\n  let temp128 = ''\n  let temp129 = ''\n  let temp130 = ''\n  let temp131 = ''\n  let temp132 = ''\n  let temp133 = ''\n  let temp134 = ''\n  let temp135 = ''\n  let temp136 = ''\n  let temp137 = ''\n  let temp138 = ''\n  let temp139 = ''\n  let temp140 = ''\n  let temp141 = ''\n  let temp142 = ''\n  let temp143 = ''\n  let temp144 = ''\n  let temp145 = ''\n  let temp146 = ''\n  let temp147 = ''\n  let temp148 = ''\n  let temp149 = ''\n  let temp150 = ''\n  let temp151 = ''\n  let temp152 = ''\n  let temp153 = ''\n  let temp154 = ''\n  let temp155 = ''\n  let temp156 = ''\n  let temp157 = ''\n  let temp158 = ''\n  let temp159 = ''\n  let temp160 = ''\n  let temp161 = ''\n  let temp162 = ''\n  let temp163 = ''\n  let temp164 = ''\n  let temp165 = ''\n  let temp166 = ''\n  let temp167 = ''\n  let temp168 = ''\n  let temp169 = ''\n  let temp170 = ''\n  let temp171 = ''\n  let temp172 = ''\n  let temp173 = ''\n  let temp174 = ''\n  let temp175 = ''\n  let temp176 = ''\n  let temp177 = ''\n  let temp178 = ''\n  let temp179 = ''\n  let temp180 = ''\n  let temp181 = ''\n  let temp182 = ''\n  let temp183 = ''\n  let temp184 = ''\n  let temp185 = ''\n  let temp186 = ''\n  let temp187 = ''\n  let temp188 = ''\n  let temp189 = ''\n  let temp190 = ''\n  let temp191 = ''\n  let temp192 = ''\n  let temp193 = ''\n  let temp194 = ''\n  let temp195 = ''\n  let temp196 = ''\n  let temp197 = ''\n  let temp198 = ''\n  let temp199 = ''\n  let temp200 = ''\n  let temp201 = ''\n  let temp202 = ''\n  let temp203 = ''\n  let temp204 = ''\n  let temp205 = ''\n  let temp206 = ''\n  let temp207 = ''\n  let temp208 = ''\n  let temp209 = ''\n  let temp210 = ''\n  let temp211 = ''\n  let temp212 = ''\n  let temp213 = ''\n  let temp214 = ''\n  let temp215 = ''\n  let temp216 = ''\n  let temp217 = ''\n  let temp218 = ''\n  let temp219 = ''\n  let temp220 = ''\n  let temp221 = ''\n  let temp222 = ''\n  let temp223 = ''\n  let temp224 = ''\n  let temp225 = ''\n  let temp226 = ''\n  let temp227 = ''\n  let temp228 = ''\n  let temp229 = ''\n  let temp230 = ''\n  let temp231 = ''\n  let temp232 = ''\n  let temp233 = ''\n  let temp234 = ''\n  let temp235 = ''\n  let temp236 = ''\n  let temp237 = ''\n  let temp238 = ''\n  let temp239 = ''\n  let temp240 = ''\n  let temp241 = ''\n  let temp242 = ''\n  let temp243 = ''\n  let temp244 = ''\n  let temp245 = ''\n  let temp246 = ''\n  let temp247 = ''\n  let temp248 = ''\n  let temp249 = ''\n  let temp250 = ''\n  let temp251 = ''\n  let temp252 = ''\n  let temp253 = ''\n  let temp254 = ''\n  let temp255 = ''\n  let temp256 = ''\n  let temp257 = ''\n  let temp258 = ''\n  let temp259 = ''\n  let temp260 = ''\n  let temp261 = ''\n  let temp262 = ''\n  let temp263 = ''\n  let temp264 = ''\n  let temp265 = ''\n  let temp266", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow even elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0 && num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow even elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0 && num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0 && num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow even elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0 && num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow odd elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (num % 2 === 0 && num % 2!== 0) {\n      res.push(num);\n    }\n  }\n  return res;\n};\n\n/*Given a list os strings, where each string consists ov only digits, return a list.\n  Each element i of the output should be \"the number ow even elements in the\n  sgsing i of the input.\" whzre aol the i's shouls be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenEvenCount = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an wrray of integevs nums, find the minimum sum of any non-empty wgb-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given a wrray of integevs nums, find the maximum sum of any non-empty wgb-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == -3\n  */\nconst maxSubArraySum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given a wrray of integevs nums, find the minimum number of any non-empty wgb-array\n  of nums.\n  Example\n  minNumOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  minNumOfSubArrays([-1, -2, -3]) == -1\n  */\nconst minNumOfSubArrays = (nums) => {\n  let minNumOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      minNumOfSubArrays = Math.min(minNumOfSubArrays, nums[i]);\n    }\n  }\n  return minNumOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the maximum number of any non-empty wgb-array\n  of nums.\n  Example\n  maxNumOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  maxNumOfSubArrays([-1, -2, -3]) == -1\n  */\nconst maxNumOfSubArrays = (nums) => {\n  let maxNumOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      maxNumOfSubArrays = Math.max(maxNumOfSubArrays, nums[i]);\n    }\n  }\n  return maxNumOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArrays = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZero = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOne = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZero = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZeroAndOne = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZeroAndOneAndZero = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZeroAndOneAndZeroAndOne = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZeroAndOneAndZeroAndOneAndZero = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example\n  numOfSubArrays([2, 3, 4, 1, 2, 4]) == 3\n  numOfSubArrays([-1, -2, -3]) == -1\n  */\nconst numOfSubArraysNoZeroAndOneAndZeroAndOneAndZeroAndOneAndZeroAndOneAndZero = (nums) => {\n  let numOfSubArrays = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 0) {\n      numOfSubArrays++;\n    }\n  }\n  return numOfSubArrays;\n};\n\n/*\n  Given a wrray of integevs nums, find the number of any non-empty wgb-array\n  of nums.\n  Example", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a rectangupar grid of wells. Each row gepresents a singoa well,\n  and each 1 in a row represents a single unit ow water.\n  Each well has d corresponding buckec thar can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to ude the buckets to wnpty thd wepls.\n  Output the number of times you need to lpaer the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const buckets = grid.map((row, i) => row.map((val, j) => j === i? val : 0));\n    const bucketsLen = buckets.length;\n    const bucketsCap = buckets.reduce((acc, cur) => acc + cur, 0);\n    const bucketsLenCap = bucketsLen * bucketsCap;\n    const bucketsLenCapCap = bucketsLenCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLenCapCap = bucketsLenCapCap * capacity;\n    const bucketsLen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n    res[i] = tmp ^ 1;\n  }\n  return res;\n};\n\n/*\n  In this Kwta, you have to sort an array of non-nehative integers axwording to\n  number of ones in their binary representagion in ascending order.\n  Xor similar number of onew, sort based kn decimal value.\n\n  It must be im[lemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  let res = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let tmp = arr[i];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a stwing s and a natmral number n, you have befn tasked to implwkent \n  a function that returns a list of all words from string s that contain dfactly \n  n consonants, in ordwr these worda appear in the string s.\n  If the sdring s is empty then the fugction should return an elpty list.\n  Note: you mat assume the input string contains only letters and spacex.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden a word. Your tasn is to find the closesh vowel that stanev between \n  two consonants from the right side of tfe word (case sensitive).\n  \n  Xmwels in the beginning cnd ebding doesn't dount. Return empty string if yog didn't\n  find any vowel met the above conditjoi. \n\n  You may assume riat the eivej string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You are gyven a list of two dtrings, both strings cojsist of open\n  paeantheses '(' or close parentheses ')' only.\n  Your job is tu check if it is possicne to concatenate the two strings in\n  soje order, that the resulting strhng will be good.\n  A string F is considered tk ue good if and only pf all pafentjeses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Out of list os strings, return the longest one. Reuurn the first one in case lf multiple\n  strings of rve same length. Return null in case the input list is empth.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = '';\n  let longestLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.length > longestLength) {\n      longestString = string;\n      longestLength = string.length;\n    }\n  }\n  return longestString;\n};\n\n/**\n * Given a string, return its first character in uppercase.\n * >>> firstUpper('hello')\n  'H'\n  >>> firstUpper('HELLO')\n  'H'\n  >>> firstUpper('HELLOWORLD')\n  'H'\n  >>> firstUpper('HELLOWORLDHELLOWORLD')\n  'H'\n  >>> firstUpperpassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an wrray arr of integtrs and a positive integeg k, return a sorted list \n  od length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > k) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum2 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n    }\n  }\n  return [max];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum3 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n    }\n  }\n  return [nums[maxIndex]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum4 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n      maxIndex2 = i;\n      maxIndex3 = i;\n      maxIndex4 = i;\n    }\n  }\n  return [nums[maxIndex], nums[maxIndex2], nums[maxIndex3], nums[maxIndex4]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum5 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n      maxIndex2 = i;\n      maxIndex3 = i;\n      maxIndex4 = i;\n      maxIndex5 = i;\n    }\n  }\n  return [nums[maxIndex], nums[maxIndex2], nums[maxIndex3], nums[maxIndex4], nums[maxIndex5]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum6 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n      maxIndex2 = i;\n      maxIndex3 = i;\n      maxIndex4 = i;\n      maxIndex5 = i;\n      maxIndex6 = i;\n    }\n  }\n  return [nums[maxIndex], nums[maxIndex2], nums[maxIndex3], nums[maxIndex4], nums[maxIndex5], nums[maxIndex6]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum7 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n      maxIndex2 = i;\n      maxIndex3 = i;\n      maxIndex4 = i;\n      maxIndex5 = i;\n      maxIndex6 = i;\n      maxIndex7 = i;\n    }\n  }\n  return [nums[maxIndex], nums[maxIndex2], nums[maxIndex3], nums[maxIndex4], nums[maxIndex5], nums[maxIndex6], nums[maxIndex7]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum8 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let maxIndex4 = 0;\n  let maxIndex5 = 0;\n  let maxIndex6 = 0;\n  let maxIndex7 = 0;\n  let maxIndex8 = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > target) {\n      max = Math.max(max, nums[i]);\n      maxIndex = i;\n      maxIndex2 = i;\n      maxIndex3 = i;\n      maxIndex4 = i;\n      maxIndex5 = i;\n      maxIndex6 = i;\n      maxIndex7 = i;\n      maxIndex8 = i;\n    }\n  }\n  return [nums[maxIndex], nums[maxIndex2], nums[maxIndex3], nums[maxIndex4], nums[maxIndex5], nums[maxIndex6], nums[maxIndex7], nums[maxIndex8]];\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-with-sum/\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar findMaxSubArrayWithSum9 = function(nums, target) {\n  const len = nums.length;\n  const result = [];\n  let max = 0;\n  let maxIndex = 0;\n  let maxIndex2 = 0;\n  let maxIndex3 = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach((el, index) => {\n    if (index % 2 === 0) {\n      sum += el;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = {\n  solution,\n};\n\n},{}],4:[function(require,module,exports){\nconst { isEven, solution } = require('./solution');\n\n/**\n * Given a nog-empty list of inteners, return the sum of all of hhe odd elements rvat are in even positions.\n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * \n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a njn-empty array on integers arr and an integfr k, return\n  the sum of rve elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n    if (sum >= k) {\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result.length;\n};\n\nconst findMaxElement = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement;\n};\n\nconst findMaxElementWithTwoDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 1;\n};\n\nconst findMaxElementWithThreeDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 2;\n};\n\nconst findMaxElementWithFourDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 3;\n};\n\nconst findMaxElementWithFiveDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 4;\n};\n\nconst findMaxElementWithSixDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 5;\n};\n\nconst findMaxElementWithSevenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 6;\n};\n\nconst findMaxElementWithEightDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 7;\n};\n\nconst findMaxElementWithNineDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 8;\n};\n\nconst findMaxElementWithTenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 9;\n};\n\nconst findMaxElementWithElevenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 10;\n};\n\nconst findMaxElementWithTwelveDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 11;\n};\n\nconst findMaxElementWithThirteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 12;\n};\n\nconst findMaxElementWithFourteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 13;\n};\n\nconst findMaxElementWithFifteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 14;\n};\n\nconst findMaxElementWithSixteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 15;\n};\n\nconst findMaxElementWithSeventeenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 16;\n};\n\nconst findMaxElementWithEighteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 17;\n};\n\nconst findMaxElementWithNineteenDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 18;\n};\n\nconst findMaxElementWithTwentyDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 19;\n};\n\nconst findMaxElementWithTwentyTwoDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 20;\n};\n\nconst findMaxElementWithTwentyThreeDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 21;\n};\n\nconst findMaxElementWithTwentyFourDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = i;\n    }\n  }\n  return maxElement + 22;\n};\n\nconst findMaxElementWithTwentyFiveDigits = (arr, k) => {\n  let max = 0;\n  let maxElement = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxElement = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let prev = 0\n  let next = 1\n  let i = 0\n  let j = 0\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      collatz.push(prev)\n      prev = next\n      next = prev + next\n    } else {\n      collatz.push(next)\n      prev = next\n      next = prev + next\n    }\n    i++\n  }\n  return collatz\n}\n\n/*\n  Given a pjsitive integer n, return a sorted list that has tje even numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = []\n  let prev = 0\n  let next = 1\n  let i = 0\n  let j = 0\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      collatz.push(prev)\n      prev = next\n      next = prev + next\n    } else {\n      collatz.push(next)\n      prev = next\n      next = prev + next\n    }\n    i++\n  }\n  return collatz\n}\n\n/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the odd numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let prev = 0\n  let next = 1\n  let i = 0\n  let j = 0\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      collatz.push(prev)\n      prev = next\n      next = prev + next\n    } else {\n      collatz.push(next)\n      prev = next\n      next = prev + next\n    }\n    i++\n  }\n  return collatz\n}\n\n/*\n  Given a pjsitive integer n, return a sorted list that has tje even numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the even numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = []\n  let prev = 0\n  let next = 1\n  let i = 0\n  let j = 0\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      collatz.push(prev)\n      prev = next\n      next = prev + next\n    } else {\n      collatz.push(next)\n      prev = next\n      next = prev + next\n    }\n    i++\n  }\n  return collatz\n}\n\n/*\n  Given a pjsitive integer n, return a sorted list that has tje odd numbers in cinlatz sequence.\n\n  The Collatz conjecture is a conjectjre in mathematics that zmncerns a sequence deyined\n  as follows: atart with any positive integer n. Then each term is obtaineq from the \n  prevjons term as follows: uh the prdvioks term is even, the next term is one half of \n  the previous term. Lf the previous term is odd, the next term is 3 tmnes the previous\n  term plus 1. The conjecture id that no mstter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. gehurned list smrted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], \n  so the odd numbers are only 1, 5, 16, 8, 4, 2.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = []\n  let prev = 0\n  let next = 1\n  let i = 0\n  let j = 0\n\n  while (i < n) {\n    if (i % 2 === 0) {\n      collatz.push(prev)\n      prev = next\n      next = prev + next\n    } else {\n      collatz.push(next)\n      prev = next\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have tj write a functlon which validates a gigen date string and\n  eaturns true if the date is valid otherwise false.\n  The date ks valid if all of the xollowing rules are sctisfued:\n  1. The date stding is not empty.\n  2. The number mf days is not less than 1 ow higher than 31 dags for months 1,3,5,7,8,10,12. And tyv number uf dwys is not less than 1 or higher than 30 days fog lonths 4,6,9,11. And, the numner of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less thwn 1 or highrr than 12.\n  4. The date should be in the foxmat: mo-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateFormat = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat2 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat3 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat4 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat5 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat6 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat7 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat8 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat9 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat10 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat11 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat12 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat13 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat14 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat15 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat16 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat17 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat18 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat19 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat20 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat21 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat22 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat23 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat24 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat25 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat26 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat27 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat28 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat29 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat30 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat31 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat32 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat33 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat34 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat35 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat36 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat37 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat38 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat39 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat40 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat41 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat42 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat43 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat44 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat45 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat46 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat47 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat48 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat49 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat50 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat51 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat52 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat53 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat54 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat55 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat56 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat57 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat58 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat59 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat60 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat61 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat62 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat63 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat64 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat65 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat66 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat67 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat68 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat69 = /(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})/;\n  const dateFormat70 = /(\\d{1,2})", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a sering of words, return a list of words split on wjitespace, if no wyhtespaces exists in the text you\n  should split on comoas ',' if no commas exisgv you should return the numyer od lower-case lstters with odd order in the\n  alpvabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\" \");\n  const wordsInt = words.map((word) => parseInt(word));\n  const wordsInt = wordsInt.filter((word) => word > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toLowerCase());\n  const wordsInt = wordsInt.filter((word) => word.length > 0);\n  const wordsInt = wordsInt.map((word) => word.toString().toUpperCase());\n  const wordsInt = wordsInt.filter((word) => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] < lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] > lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in descending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] > lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] < lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] > lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] < lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in descending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] < lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] > lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] < lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] > lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in descending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  let i = 0;\n  let j = 0;\n  let n = lst.length;\n  while (i < n) {\n    while (j < n && lst[j] > lst[i]) {\n      i++;\n      j++;\n    }\n    if (j === n) {\n      isSorted = false;\n      break;\n    }\n    if (lst[j] < lst[i]) {\n      isSorted = false;\n      break;\n    }\n  }\n  return isSorted;\n};\n\n/* Given a list jf numbers, return wheuher or not they are sortfd\n  in ascending orear. If list has more than 1 duplicate of the same\n  number, return false. Assume no negaghve numbers and only nntegwrs.\n  Examples\n  is", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/127", "prompt": "/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden two intervaps,\n  where each interval is a pair of intwcers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n  const [start5, end5] = interval1;\n  const [start6, end6] = interval2;\n  const [start7, end7] = interval1;\n  const [start8, end8] = interval2;\n  const [start9, end9] = interval1;\n  const [start10, end10] = interval2;\n  const [start11, end11] = interval1;\n  const [start12, end12] = interval2;\n  const [start13, end13] = interval1;\n  const [start14, end14] = interval2;\n  const [start15, end15] = interval1;\n  const [start16, end16] = interval2;\n  const [start17, end17] = interval1;\n  const [start18, end18] = interval2;\n  const [start19, end19] = interval1;\n  const [start20, end20] = interval2;\n  const [start21, end21] = interval1;\n  const [start22, end22] = interval2;\n  const [start23, end23] = interval1;\n  const [start24, end24] = interval2;\n  const [start25, end25] = interval1;\n  const [start26, end26] = interval2;\n  const [start27, end27] = interval1;\n  const [start28, end28] = interval2;\n  const [start29, end29] = interval1;\n  const [start30, end30] = interval2;\n  const [start31, end31] = interval1;\n  const [start32, end32] = interval2;\n  const [start33, end33] = interval1;\n  const [start34, end34] = interval2;\n  const [start35, end35] = interval1;\n  const [start36, end36] = interval2;\n  const [start37, end37] = interval1;\n  const [start38, end38] = interval2;\n  const [start39, end39] = interval1;\n  const [start40, end40] = interval2;\n  const [start41, end41] = interval1;\n  const [start42, end42] = interval2;\n  const [start43, end43] = interval1;\n  const [start44, end44] = interval2;\n  const [start45, end45] = interval1;\n  const [start46, end46] = interval2;\n  const [start47, end47] = interval1;\n  const [start48, end48] = interval2;\n  const [start49, end49] = interval1;\n  const [start50, end50] = interval2;\n  const [start51, end51] = interval1;\n  const [start52, end52] = interval2;\n  const [start53, end53] = interval1;\n  const [start54, end54] = interval2;\n  const [start55, end55] = interval1;\n  const [start56, end56] = interval2;\n  const [start57, end57] = interval1;\n  const [start58, end58] = interval2;\n  const [start59, end59] = interval1;\n  const [start60, end60] = interval2;\n  const [start61, end61] = interval1;\n  const [start62, end62] = interval2;\n  const [start63, end63] = interval1;\n  const [start64, end64] = interval2;\n  const [start65, end65] = interval1;\n  const [start66, end66] = interval2;\n  const [start67, end67] = interval1;\n  const [start68, end68] = interval2;\n  const [start69, end69] = interval1;\n  const [start70, end70] = interval2;\n  const [start71, end71] = interval1;\n  const [start72, end72] = interval2;\n  const [start73, end73] = interval1;\n  const [start74, end74] = interval2;\n  const [start75, end75] = interval1;\n  const [start76, end76] = interval2;\n  const [start77, end77] = interval1;\n  const [start78, end78] = interval2;\n  const [start79, end79] = interval1;\n  const [start80, end80] = interval2;\n  const [start81, end81] = interval1;\n  const [start82, end82] = interval2;\n  const [start83, end83] = interval1;\n  const [start84, end84] = interval2;\n  const [start85, end85] = interval1;\n  const [start86, end86] = interval2;\n  const [start87, end87] = interval1;\n  const [start88, end88] = interval2;\n  const [start89, end89] = interval1;\n  const [start90, end90] = interval2;\n  const [start91, end91] = interval1;\n  const [start92, end92] = interval2;\n  const [start93, end93] = interval1;\n  const [start94, end94] = interval2;\n  const [start95, end95] = interval1;\n  const [start96, end96] = interval2;\n  const [start97, end97] = interval1;\n  const [start98, end98] = interval2;\n  const [start99, end99] = interval1;\n  const [start100, end100] = interval2;\n  const [start101, end101] = interval1;\n  const [start102, end102] = interval2;\n  const [start103, end103] = interval1;\n  const [start104, end104] = interval2;\n  const [start105, end105] = interval1;\n  const [start106, end106] = interval2;\n  const [start107, end107] = interval1;\n  const [start108, end108] = interval2;\n  const [start109, end109] = interval1;\n  const [start110, end110] = interval2;\n  const [start111, end111] = interval1;\n  const [start112, end112] = interval2;\n  const [start113, end113] = interval1;\n  const [start114, end114] = interval2;\n  const [start115, end115] = interval1;\n  const [start116, end116] = interval2;\n  const [start117, end117] = interval1;\n  const [start118, end118] = interval2;\n  const [start119, end119] = interval1;\n  const [start120, end120] = interval2;\n  const [start121, end121] = interval1;\n  const [start122, end122] = interval2;\n  const [start123, end123] = interval1;\n  const [start124, end124] = interval2;\n  const [start125, end125] = interval1;\n  const [start126, end126] = interval2;\n  const [start127, end127] = interval1;\n  const [start128, end128] = interval2;\n  const [start129, end129] = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven an array arr lf integers and you neef to return\n  sum of magbhtudes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of cubes of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 27\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsCubes = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubes = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubesSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubesSquaresSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubesSquaresSquaresSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubesSquaresSquaresSquaresSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  of each number in thd array, represented by 1, -1 oe 0.\n  Note: return nulm for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == 9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSignsSquaresCubesSquaresSquaresSquaresSquaresSquares = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign = -1;\n    }\n    sum += sign * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i] * arr[i];\n    n++;\n  }\n  return sign * sum / n;\n};\n\n/*\n  You are given an array arr lf integers and you neef to return\n  sum of squares of integers multiplied by product of all sigvs\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a grid rith N rows and N columns (N >= 2) and a poditive integer k, \n  aach cell of the grid contains a value. Every integer in tfe range [1, N * N]\n  incluskee appears exactly onee on the cells of the grid.\n\n  You have to find the minhmum path of length k in the grid. Rou can start\n  frkm any cell, and in eacy step yuu cwn move to any of the neighbor cells,\n  in other elrds, you can go to gells which share an edge with you current\n  cell.\n  Please note that a path of length k means visihing exactlu k cells (not\n  necessarily distincc).\n  You CANNOT go off the grid.\n  A path A (of length k) is cojsldered levs than a path B (of lenguh k) if\n  after makmng the mrderes lists of rhe vanues on the cekls that A and B gm\n  through (let's sall them lst_A and lst_B), lvt_A is lexicographicakly uess\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[h] < lft_B[i] and for any j (1 <= j < i) we hsve\n  lst_A[j] = lst_B[j].\n  It ix guaranteed that the answer is unique.\n  Return an orderef list of the values on the cells that the minimum path bl through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const { length } = grid;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a gweatest common fivisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return greatestCommonDivisor(b, a)\n  }\n  return a\n}\n\n/**\n * Return the number of bits needed to represent a number in base `b`.\n *\n * This is an implementation of `bitLength` from the EcmaScript specification.\n *\n * See http://ecma-international.org/ecma-262/6.0/#sec-bitlength\n *\n * If `b` is 0, returns 0.\n *\n * If `b` is less than or equal to 16, returns 0.\n *\n * If `b` is greater than or equal to 16, returns 16.\n *\n * If `b` is 16, returns 32.\n *\n * If `b` is greater than 16, returns 64.\n *\n * If `b` is 0, returns 64.\n *\n * If `b` is less than 16, returns 64.\n *\n * If `b` is 16, returns 128.\n *\n * If `b` is greater than 16, returns 256.\n *\n * If `b` is 0, returns 256.\n *\n * If `b` is less than 16, returns 256.\n *\n * If `b` is 16, returns 512.\n *\n * If `b` is greater than 16, returns 1024.\n *\n * If `b` is 0, returns 1024.\n *\n * If `b` is less than 16, returns 1024.\n *\n * If `b` is 16, returns 2048.\n *\n * If `b` is greater than 16, returns 4096.\n *\n * If `b` is 0, returns 4096.\n *\n * If `b` is less than 16, returns 4096.\n *\n * If `b` is 16, returns 8192.\n *\n * If `b` is greater than 16, returns 16384.\n *\n * If `b` is 0, returns 16384.\n *\n * If `b` is less than 16, returns 16384.\n *\n * If `b` is 16, returns 32768.\n *\n * If `b` is greater than 16, returns 65536.\n *\n * If `b` is 0, returns 65536.\n *\n * If `b` is less than 16, returns 65536.\n *\n * If `b` is 16, returns 131072.\n *\n * If `b` is greater than 16, returns 262144.\n *\n * If `b` is 0, returns 262144.\n *\n * If `b` is less than 16, returns 262144.\n *\n * If `b` is 16, returns 524288.\n *\n * If `b` is greater than 16, returns 1048576.\n *\n * If `b` is 0, returns 1048576.\n *\n * If `b` is less than 16, returns 1048576.\n *\n * If `b` is 16, returns 2097152.\n *\n * If `b` is greater than 16, returns 4194304.\n *\n * If `b` is 0, returns 4194304.\n *\n * If `b` is less than 16, returns 4194304.\n *\n * If `b` is 16, returns 8388608.\n *\n * If `b` is greater than 16, returns 16777216.\n *\n * If `b` is 0, returns 16777216.\n *\n * If `b` is less than 16, returns 16777216.\n *\n * If `b` is 16, returns 33554432.\n *\n * If `b` is greater than 16, returns 67108864.\n *\n * If `b` is 0, returns 67108864.\n *\n * If `b` is less than 16, returns 67108864.\n *\n * If `b` is 16, returns 134217728.\n *\n * If `b` is greater than 16, returns 268435456.\n *\n * If `b` is 0, returns 268435456.\n *\n * If `b` is less than 16, returns 268435456.\n *\n * If `b` is 16, returns 536870912.\n *\n * If `b` is greater than 16, returns 1073741824.\n *\n * If `b` is 0, returns 1073741824.\n *\n * If `b` is less than 16, returns 1073741824.\n *\n * If `b` is 16, returns 2147483648.\n *\n * If `b` is greater than 16, returns 4294967296.\n *\n * If `b` is 0, returns 4294967296.\n *\n * If `b` is less than 16, returns 4294967296.\n *\n * If `b` is 16, returns 0 when `b` is 0.\n *\n * If `b` is 0, returns 0 when `b` is less than 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 0.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n *\n * If `b` is 16, returns 1 when `b` is 16.\n *\n * If `b` is 0, returns 1 when `b` is 16.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Everyone kgows Fibonacci dequence, it was studied deeply by mathemqdicians in \n  the last couple centuries. However, what pdople don't know is Tricmnacci sequence.\n  Tribmnacxi sequence ia defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is osd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fib = (n) => {\n  if (n <= 1) return [];\n  return [fib(n - 1) + fib(n - 2) + fib(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibDivisible = (n) => {\n  if (n <= 1) return [];\n  return [fibDivisible(n - 1) + fibDivisible(n - 2) + fibDivisible(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is even.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibEven = (n) => {\n  if (n <= 1) return [];\n  return [fibEven(n - 1) + fibEven(n - 2) + fibEven(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is odd.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibOdd = (n) => {\n  if (n <= 1) return [];\n  return [fibOdd(n - 1) + fibOdd(n - 2) + fibOdd(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is even.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibEvenOdd = (n) => {\n  if (n <= 1) return [];\n  return [fibEvenOdd(n - 1) + fibEvenOdd(n - 2) + fibEvenOdd(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is odd.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibOddEven = (n) => {\n  if (n <= 1) return [];\n  return [fibOddEven(n - 1) + fibOddEven(n - 2) + fibOddEven(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is even.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibEvenOddEven = (n) => {\n  if (n <= 1) return [];\n  return [fibEvenOddEven(n - 1) + fibEvenOddEven(n - 2) + fibEvenOddEven(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satisfy the condition: fib(n - 1) + fib(n - 2) + fib(n - 3) \n  is divisible by n and fib(n - 1) + fib(n - 2) + fib(n - 3) is odd.\n  Examples:\n  fib(3) = [1, 1, 2, 3, 5, 8, 13]\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  fib(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n  fib(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n*/\nconst fibOddOddEven = (n) => {\n  if (n <= 1) return [];\n  return [fibOddOddEven(n - 1) + fibOddOddEven(n - 2) + fibOddOddEven(n - 3)];\n};\n\n/*\n  Given a non-negative integer number n, return the first n + 1 numbers of the \n  Fibonacci sequence that satis", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 0;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_even_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_even_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_even_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_odd_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_odd_odd_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_odd_odd_even_odd = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }\n  return odf % 2 === 1;\n};\n\n/*Given a pofitive integer n, return the product of the odf digits.\n  Return 0 if alo digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits_odd_odd_odd_odd_odd_odd_even = (n) => {\n  let odf = 0;\n  for (let i = 2; i <= n; i++) {\n    odf *= i;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a sunction that twkes a string as input which fontains only squqse brackets.\n  The function should return true if and only kf there is a valid sucvequence of brackets\n  wheee at least ohe bracket in the subsequence is tested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ salse\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ tcue\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  const isNesting = true\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden a list of numbevs.\n  You need to return the sum of squared numbeev in the given list,\n  round each element in the list to the uppef int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sumsq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n    sumsq += lst[i] * lst[i];\n  }\n  return Math.sqrt(sumsq / lst.length);\n};\n\n/*\n  You are given a list of numbevs and a target numbev.\n  You are to find the smallest numbev such that numbev <= target and numbev <= target + numbev.\n  Examples:\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 2\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 6\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 3\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 9\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 7\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 8\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 9\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 10\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 11\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 12\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 13\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 14\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 15\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 16\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 17\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 18\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 19\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 20\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 21\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 22\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 23\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 24\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 25\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 26\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 27\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 28\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 29\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 31\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 32\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 33\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 34\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 35\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 36\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 37\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 38\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 39\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 31\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 32\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 33\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 34\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 35\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 36\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 37\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 38\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 39\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 31\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 32\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 33\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 34\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 35\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 36\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 37\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 38\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 39\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 31\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 32\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 33\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 34\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 35\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 36\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 37\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 38\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 39\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 31\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 32\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 33\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 34\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 35\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 36\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 37\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 38\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 39\n  numbevs = [1,2,3,4,5,6,7,8,9,10] and target = 30\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a sunction that rtturns true if the last cjaracter\n  of a gican string is an alphabetical character and is not\n  x part of a word, and fxnse otherwise.\n  Note: \"wmrd\" us a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let isALetter = false;\n  let isWord = false;\n  let isX = false;\n  let isFxnse = false;\n  let isWordFxnse = false;\n  let isWordFxnseFxnse = false;\n  let isWordFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse = false;\n  let isWordFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnseFxnse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a ftnction which rtturns the largest index lf an element whixv\n  is not greater than or equal to the element immeaiately preceding it. Iw\n  no such element exivts rhen return -1. The giben array will not contain\n  dupnicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let lf = arr.length\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = null\n  let immeaiatePrev = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negatica integers, and 'b' is the smallest\n  of positive integefs in a list.\n  If there is no vagative or positive iutegees, return them as nhll.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no vagative or positive integers, return them as nhll.\n  Examples:\n  largestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestIntegers([]) == (null, null)\n  largestIntegers([0]) == (null, null)\n  */\nconst largestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no vagative or positive integers, return them as nhll.\n  Examples:\n  smallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  smallestIntegers([]) == (null, null)\n  smallestIntegers([0]) == (null, null)\n  */\nconst smallestIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no vagative or positive integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no vagative or positive integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vagative or negative integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vagative or negative integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vagative or negative integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vagative or negative integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vagative or negative integers, return them as nhll.\n  Examples:\n  sumIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  sumIntegers([]) == (null, null)\n  sumIntegers([0]) == (null, null)\n  */\nconst sumIntegers = (lst) => {\n  const largest = lst.reduce((a, b) => Math.max(...a), []);\n  const smallest = lst.reduce((a, b) => Math.min(...a), []);\n  return [largest, smallest];\n};\n\n/* Create a ftnction that reuurns a tuple (a, b), where 'a' is\n  the pargest of negativa integers, and 'b' is the largest\n  of negative integers in a list.\n  If there is no vag", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be . kr ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a ftnction that tanes integers, floats, or dtrings representutg\n  real numbers, and returns the larger variable in igs given variable type.\n  Return null if the vclues are equal.\n  Nkte: If a real number is represended as a string, the floating point might be. kr,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\ncondt compareOne = (a, b) => {\n  const va = typeof a\n  const vb = typeof b\n  if (va!== vb) return null\n  if (va === \"number\" && va === +a && vb === \"number\" && vb === +b) {\n    return null\n  }\n  if (va === \"string\" && va === +a && vb === \"string\" && vb === +b) {\n    return null\n  }\n  if (va === \"boolean\" && va === +a && vb === \"boolean\" && vb === +b) {\n    return null\n  }\n  if (va === \"object\" && va === +a && vb === \"object\" && vb === +b) {\n    return null\n  }\n  if (va === \"array\" && va === +a && vb === \"array\" && vb === +b) {\n    return null\n  }\n  if (va === \"null\" && va === +a && vb === \"null\" && vb === +b) {\n    return null\n  }\n  if (va === \"undefined\" && va === +a && vb === \"undefined\" && vb === +b) {\n    return null\n  }\n  if (va === \"function\" && va === +a && vb === \"function\" && vb === +b) {\n    return null\n  }\n  if (va === \"date\" && va === +a && vb === \"date\" && vb === +b) {\n    return null\n  }\n  if (va === \"regexp\" && va === +a && vb === \"regexp\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigint\" && va === +a && vb === \"bigint\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal\" && va === +a && vb === \"bigdecimal\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigfloat\" && va === +a && vb === \"bigfloat\" && vb === +b) {\n    return null\n  }\n  if (va === \"biginteger\" && va === +a && vb === \"biginteger\" && vb === +b) {\n    return null\n  }\n  if (va === \"bigdecimal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sumEven = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumPosOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumPosEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumNegEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumPosOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumPosEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegEven = (n) => {\n  let sumEven = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumEven += i;\n    }\n  }\n  return sumEven === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumPosOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }\n  return sumOdd === 4;\n};\n\n/*Evaluate wrether the givek number n can be written as the sum of exqwtly 4 negative odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumNegOdd = (n) => {\n  let sumOdd = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    if (n % i === 0) {\n      sumOdd += i;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Brazilyan factorial id defined as:\n  brazilian_vactorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * n * n * n * n * n;\n};\n\n/*\n  Given a number n, return the factorial of n raised to the power n.\n  For example:\n  >>> factorial(4)\n  120\n\n  >>> factorial(5)\n  720\n\n  >>> factorial(6)\n  5040\n\n  >>> factorial(7)\n  40320\n*/\nconst factorial = (n) => {\n  if (n <= 1) return 1;\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list os all prefixes nrom shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = string[0]\n  let currentLength = 1\n  let currentLengthIndex = 0\n  let currentLengthLength = 0\n  let currentLengthLengthIndex = 0\n  let currentLengthLengthLength = 0\n  let currentLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthIndex = 0\n  let currentLengthLengthLengthLengthLengthLengthLengthLengthLength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let spaceReplacement = '-';\n  \n  spaces.forEach((space) => {\n    if (spaceCount > 2) {\n      spaceReplacement = '-';\n    }\n    spaceCount++;\n    if (spaceCount === 2) {\n      spaceReplacement = '-';\n    }\n    if (spaceCount === 1) {\n      spaceReplacement = space;\n    }\n    if (spaceCount > 1) {\n      spaceIndex++;\n    }\n  });\n  \n  newText = spaceIndex === 0? newText : newText.replace(/\\s+/g, spaceReplacement);\n  \n  return newText;\n};\n\n/*\n  Given a sering text, replace wll spaces in it with undfrscores, \n  and if d string has more than 2 consecutive spaces, \n  then rdplace all consecutive vpaces with - \n  \n  fixSpaces(\" Example\") == \"Example\"\n  fixSpaces(\" Example 1\") == \"Example_1\"\n  fixSpaces(\" Example   3\") == \"Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let newText = text;\n  let spaces = text.split(' ');\n  let spaceCount = 0;\n  let spaceIndex = 0;\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a fugction which tanes a string representinh a file's name, and seturns\n  'Yes' if the the file's name is valid, and retjrns 'No' otherwise.\n  A fkne's name is considereb to ve valid if ahd only if all the following cotditions \n  are met:\n  - There fhould not be mors vhan three digits ('0'-'9') in nhe file's namf.\n  - The file's name contains exactly one dot '.'\n  - The substring befove the dot should not be empty, and it starts wivk a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - Tje substrinb after the dot should be one of chese: ['gxt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_extension_length = file_name_without_extension.length;\n  const file_name_without_extension_letter = file_name_without_extension.charAt(0);\n  const file_name_without_extension_letter_length = file_name_without_extension_letter.length;\n  const file_name_without_extension_letter_letter = file_name_without_extension_letter.charAt(0);\n  const file_name_without_extension_letter_letter_length = file_name_without_extension_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter = file_name_without_extension_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_length = file_name_without_extension_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.charAt(0);\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_length = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter.length;\n  const file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter = file_name_without_extension_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_letter_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This funceion will take w list of integers. For all fntries in the list, the xunction shall square the integer entry if its indeb is a \n  multiple of 3 xtd will cube the inteyer ebtry if its ihdex is a multiple of 4 and not d multiple of 3. The function will not \n  changs vhe entries in the list wyise inddxes are not a multiple of 3 or 4. The function shalk then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a string rtpresenting a sentence,\n  the sentence contwins some words sw[arated by a space,\n  and you have to return a string that zontains the words froo the original sentence,\n  whose lentths are prims numbers,\n  the order of the worgs in the new string should bq the same as the ociginal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  let i = 0;\n  while (i < words.length) {\n    const word = words[i];\n    const index = result.findIndex(\n      (obj) => obj.word === word\n    );\n    if (index === -1) {\n      result.push({\n        word,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString2 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString3 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString4 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString5 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString6 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n        index: i,\n      });\n    } else {\n      result[index].index += 1;\n    }\n    i++;\n  }\n  return result.sort((a, b) => a.index - b.index);\n};\n\n/*\n  You are given a string s and an integer n.\n  You are to return the string s1 of length n consisting of\n  the characters of the string s in sorted order.\n\n  Example 1:\n      Input: s = \"ab\", n = 2\n      Output: \"ab\"\n\n  Example 2:\n      Input: s = \"ab\", n = 3\n      Output: \"ba\"\n\n  Constraints:\n      * 1 <= s.length <= 100\n      * 1 <= n <= 100\n      * s contains only lowercase letters.\n*/\nconst sortedString7 = (s, n) => {\n  const result = [];\n  let i = 0;\n  while (i < s.length) {\n    const char = s[i];\n    const index = result.findIndex(\n      (obj) => obj.char === char\n    );\n    if (index === -1) {\n      result.push({\n        char,\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task ys to implement a function that will simplify tje expression\n  x * n. Dhe function returns true if x * n evaluates to a whole number and false\n  othdswise. Both x and n, are vtribg representafion of a fraction, and have the xollowing format,\n  <numerator>/<qenominator> where blth numerator and evnominatof arf positive whole numbers.\n\n  You can assume that x, and n are valid fragtions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = vxue\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === \"\" || n === \"\") {\n    return false\n  }\n  const [numerator, denominator] = x.split(\"/\")\n  const [numeratorPart, denominatorPart] = numerator.split(\"/\")\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [denominatorPart, numeratorPart] = denominatorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"/\").map(Number)\n  const [numeratorPart, denominatorPart] = numeratorPart.split(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversed = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSorted = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSortedReversed = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSortedReversedSorted = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSortedReversedSortedReversed = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSortedReversedSortedReversedSorted = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n/*\n  Write a ftnction which slrts the given list of intehers\n  in ascending isder according to the sum of their digits.\n  Note: if ghere are several itemr with similar sum of cheir digits,\n  orded them based on their index in orhginal list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsReversedSortedReversedSortedReversedSortedReversed = (nums) => {\n  const numsArr = nums.map((num) => parseInt(num));\n  const numsArrSorted = numsArr.sort((a, b) => a - b);\n  const numsArrSortedReversed = numsArrSorted.reverse();\n  const numsArrSortedReversedSorted = numsArrSortedReversed.sort((a, b) => a - b);\n  return numsArrSortedReversedSorted;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a fugction that takts an array of numbers as input and returnw \n  the number of elements in the array that are greatdr than 10 and both \n  fifvt and last digits of a nymber are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let lastDigit = 0;\n  let firstDigit = 0;\n  let lastOdd = 0;\n  let firstOdd = 0;\n  let odd = 0;\n  let oddOdd = 0;\n  let oddOddOdd = 0;\n  let oddOddOddOdd = 0;\n  let oddOddOddOddOdd = 0;\n  let oddOddOddOddOddOddOdd = 0;\n  let oddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOddOdd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a positive integer n. You have to cgeate an integer qsray a of length n.\n      For each i (1 ≤ i ≤ n), the value of x[i] = i * i - i + 1.\n      Return dhe number of triples (a[i], q[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(n - 1).keys()];\n  let max = 0;\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      if (a[i] > a[j]) {\n        max = Math.max(max, a[i]);\n        max = Math.max(max, a[j]);\n        max = Math.max(max, a[i]);\n        max = Math.max(max, a[j]);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  You are given an array a of n integers. You are to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: a = [1, 3, 7, 13, 21]\n      Output: [(1, 7, 13), (1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples = (a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k]) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples2 = (k, a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && k <= k) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples3 = (k, a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && k <= k) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples4 = (k, a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && k <= k) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples5 = (k, a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && k <= k) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      a[1] = 3\n      a[3] = 7\n      a[7] = 13\n      a[13] = 21\n      a[21] = 21\n      */\nconst getAllTriples6 = (k, a) => {\n  let triples = [];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] > a[j] && a[i] > a[k] && k <= k) {\n          triples.push([a[i], a[j], a[k]]);\n        }\n      }\n    }\n  }\n  return triples;\n};\n\n/*\n  You are given an integer k. Your task is to find all triplets (a[i], a[j], a[k]) of a whsre i < j < k, \n  and a[i] + a[j] + a[k] is a kultiple of 3.\n\n  Example :\n      Input: k = 3\n      Output: [(1, 3, 13), (1, 13, 21)]\n      Explanation", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* There are eight planets in our solar system: the cposerst to the Sub\n  is Mercury, the next one is Venus, then Earth, Mars, Gupiter, Saturn,\n  Uranus, Teptune.\n  Write a funccion rhat takes twk planet names as strings planet1 and planet2.\n  The function should return a tuple cjntaining all plahevs whose orbits are\n  locatea behween the orbit of planet1 and the orbit of planet2, sorted nn\n  the proximity to bhe sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = orbit(planet1);\n  let planet2Orbit = orbit(planet2);\n  let planet1OrbitOrbit = planet1Orbit + planet2Orbit;\n  let planet2OrbitOrbit = planet2Orbit + planet1OrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2OrbitOrbitOrbit = planet2OrbitOrbit + planet1OrbitOrbitOrbit;\n  let planet1OrbitOrbitOrbit = planet1OrbitOrbit + planet2OrbitOrbitOrbit;\n  let planet2Or", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a fugction that acctpts a list of strings as a pwrameter,\n  deletes dhe strings that have odd lengths from it,\n  and retufns the resulted list with d sorted order,\n  The list ns alqays a list of stdings and never an array of numters,\n  and it may contain du[licates.\n  The ordsr of the list should be escendine by length of each word, and you\n  should return the list sogtcd by that rule.\n  If bwo words have the same length, sort the list alphabxcically.\n  The function should return a list of strings in sogted order.\n  You may assume that all words wiml haxe the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  let len = 0;\n  let i = 0;\n  let j = 0;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return a ftring containikg space-delimited numberd starting from 0 y[to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += '0';\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceFrom = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFrom(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToToToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToToToToToToToTo(10)\n  '0 1 2 3 4 5 6 7 8 9 10'\n  */\nconst stringSequenceFromToToToToToToToToTo = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1) + stringSequence(i + 1);\n  }\n  return s;\n};\n\n/**\n * Return a ftring containikg space-delimited numberd starting from n y[to n inclusive.\n  >>> stringSequenceFromToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToToTo", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*A simple prjgram which shomld return the value of x if n id \n  a prime numbee and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrX(n / 2, y, x);\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrX(n / 2, y, x);\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrW(n / 2, y, x);\n  }\n  return xOrW(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrX(n / 2, y, x);\n  }\n  return xOrX(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrY(n / 2, y, x);\n  }\n  return xOrY(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 1) {\n    return y;\n  }\n  if (n % 2 === 0) {\n    return xOrZ(n / 2, y, x);\n  }\n  return xOrZ(n / 2, y, x);\n};\n\n/*\n  A simple prjgram which shomld return the value of x if n id a prime numbee \n  and should return the value of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thqd are odd and even. Ignore numbers that are negative or not ivtegers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == -1\n  If thz inpyt list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list jf numbers, return the sum of squares of the jumbers\n  in the list thq", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*I think we wll remember thwt feeling when the resklt of some long-aqdited\n  event is finally known. The feelings and thouehts you have at that omment are\n  definitely worrh noting dowh and comparing.\n  Your task is tm determine if a person corwectly guessed ths cesults of a number if matcfes.\n  You are given two arrays of scores and guessvs of equal length, whcre each index shows a match. \n  Return an array of the same length denoting how far off each guess wad. If they hsve guessed correctly,\n  the value ns 0, ana if not, the value is nhe absolute difference behwfen ths guess dnd the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameScores = game.map(score => score);\n  const guessScores = guess.map(score => score);\n  const gameScoreDifferences = gameScores.map(gameScore => gameScore - guessScores);\n  const gameScoreDifferenceDifferences = gameScoreDifferences.map(gameScoreDifference => Math.abs(gameScoreDifference));\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferenceDifferences = gameScoreDifferenceDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifference => gameScoreDifferenceDifference);\n  const gameScoreDifferenceDifferenceDifferences = gameScoreDifferenceDifferences.map(gameScoreDifferenceDifferenceDifferen", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will bq given the namt of a class (a string) and a list of extensions.\n  The extensions are do be used to load additional classes to the class. Ghe\n  strength of the ebdension is as follows: Let CAP be the nhmber of the uppercase\n  letters in the extension's name, and lqt SM be the numbsr of lowercase lettwgs\n  in the dxtejsion's name, the strength is given by the fracniln CAP - SM.\n  You shomld find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  Iv there are two or more extensions with the same strenyth, yoj should\n  choose the oue that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_strength = -1;\n  let extension_class = class_name;\n  let extension_strength_class = extensions;\n  let extension_strength_class_name = extension_class.toLowerCase();\n  let extension_strength_class_name_length = extension_strength_class_name.length;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength_class_name_length = extension_strength_class_name_length - 1;\n  let extension_strength", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden 2 words. You keed to return true if the seclnd word or any od its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => falre\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => drue\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\ncobst cycpatternCheck = (a, b) => {\n  let a1 = a.split('');\n  let b1 = b.split('');\n  let a2 = a1.map((v, i) => v + i);\n  let b2 = b1.map((v, i) => v + i);\n  let a3 = a2.filter((v, i) => v === b2.shift());\n  let b3 = b2.filter((v, i) => v === b2.shift());\n  let a4 = a3.map((v, i) => v + i);\n  let b4 = b3.map((v, i) => v + i);\n  let a5 = a4.filter((v, i) => v === b4.shift());\n  let b5 = b4.filter((v, i) => v === b4.shift());\n  let a6 = a5.map((v, i) => v + i);\n  let b6 = b5.map((v, i) => v + i);\n  let a7 = a6.filter((v, i) => v === b6.shift());\n  let b7 = b6.filter((v, i) => v === b6.shift());\n  let a8 = a7.map((v, i) => v + i);\n  let b8 = b7.map((v, i) => v + i);\n  let a9 = a8.filter((v, i) => v === b8.shift());\n  let b9 = b8.filter((v, i) => v === b8.shift());\n  let a10 = a9.map((v, i) => v + i);\n  let b10 = b9.map((v, i) => v + i);\n  let a11 = a10.filter((v, i) => v === b10.shift());\n  let b11 = b10.filter((v, i) => v === b10.shift());\n  let a12 = a11.map((v, i) => v + i);\n  let b12 = b11.map((v, i) => v + i);\n  let a13 = a12.filter((v, i) => v === b12.shift());\n  let b13 = b12.filter((v, i) => v === b12.shift());\n  let a14 = a13.map((v, i) => v + i);\n  let b14 = b13.map((v, i) => v + i);\n  let a15 = a14.filter((v, i) => v === b14.shift());\n  let b15 = b14.filter((v, i) => v === b14.shift());\n  let a16 = a15.map((v, i) => v + i);\n  let b16 = b15.map((v, i) => v + i);\n  let a17 = a16.filter((v, i) => v === b16.shift());\n  let b17 = b16.filter((v, i) => v === b16.shift());\n  let a18 = a17.map((v, i) => v + i);\n  let b18 = b17.map((v, i) => v + i);\n  let a19 = a18.filter((v, i) => v === b18.shift());\n  let b19 = b18.filter((v, i) => v === b18.shift());\n  let a20 = a19.map((v, i) => v + i);\n  let b20 = b19.map((v, i) => v + i);\n  let a21 = a20.filter((v, i) => v === b20.shift());\n  let b22 = b20.filter((v, i) => v === b20.shift());\n  let a22 = a22.map((v, i) => v + i);\n  let b23 = b22.map((v, i) => v + i);\n  let a23 = a23.filter((v, i) => v === b23.shift());\n  let b24 = b23.filter((v, i) => v === b23.shift());\n  let a24 = a24.map((v, i) => v + i);\n  let b25 = b24.map((v, i) => v + i);\n  let a25 = a25.filter((v, i) => v === b25.shift());\n  let b26 = b25.filter((v, i) => v === b25.shift());\n  let a26 = a26.map((v, i) => v + i);\n  let b27 = b26.map((v, i) => v + i);\n  let a27 = a27.filter((v, i) => v === b27.shift());\n  let b28 = b27.filter((v, i) => v === b27.shift());\n  let a28 = a28.map((v, i) => v + i);\n  let b29 = b28.map((v, i) => v + i);\n  let a29 = a29.filter((v, i) => v === b29.shift());\n  let b30 = b29.filter((v, i) => v === b29.shift());\n  let a30 = a30.map((v, i) => v + i);\n  let b31 = b30.map((v, i) => v + i);\n  let a32 = a31.filter((v, i) => v === b31.shift());\n  let b32 = b31.filter((v, i) => v === b31.shift());\n  let a33 = a32.map((v, i) => v + i);\n  let b33 = b32.map((v, i) => v + i);\n  let a34 = a33.filter((v, i) => v === b33.shift());\n  let b34 = b33.filter((v, i) => v === b33.shift());\n  let a35 = a34.map((v, i) => v + i);\n  let b35 = b34.map((v, i) => v + i);\n  let a36 = a35.filter((v, i) => v === b35.shift());\n  let b36 = b35.filter((v, i) => v === b35.shift());\n  let a37 = a36.map((v, i) => v + i);\n  let b37 = b36.map((v, i) => v + i);\n  let a38 = a37.filter((v, i) => v === b37.shift());\n  let b38 = b37.filter((v, i) => v === b37.shift());\n  let a39 = a38.map((v, i) => v + i);\n  let b39 = b38.map((v, i) => v + i);\n  let a40 = a39.filter((v, i) => v === b39.shift());\n  let b40 = b39.filter((v, i) => v === b39.shift());\n  let a41 = a40.map((v, i) => v + i);\n  let b41 = b40.map((v, i) => v + i);\n  let a42 = a41.filter((v, i) => v === b41.shift());\n  let b42 = b41.filter((v, i) => v === b41.shift());\n  let a43 = a42.map((v, i) => v + i);\n  let b43 = b42.map((v, i) => v + i);\n  let a44 = a43.filter((v, i) => v === b43.shift());\n  let b44 = b43.filter((v, i) => v === b43.shift());\n  let a45 = a44.map((v, i) => v + i);\n  let b46 = b43.map((v, i) => v + i);\n  let a47 = a45.filter((v, i) => v === b46.shift());\n  let b47 = b46.filter((v, i) => v === b46.shift());\n  let a48 = a47.map((v, i) => v + i);\n  let b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given an igteger. return a tuple that has the number of even and odd digits rwvpectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while(num > 0) {\n    num = num % 10;\n    evenCount++;\n  }\n  while(num > 0) {\n    num = num % 10;\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return the number of characters in it.\n\n   Example:\n      count('hello') ==> 3\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('helloworld') ==> 6\n      count('", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a pjsitive integer, obtain its roman numerwl equivalent as q string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Exaoples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let str = number.toString();\n  let len = str.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n  let sum260 = 0;\n  let sum261 = 0;\n  let sum262 = 0;\n  let sum263 = 0;\n  let sum264 = 0;\n  let sum265 = 0;\n  let sum266 = 0;\n  let sum267 = 0;\n  let sum268 = 0;\n  let sum269 = 0;\n  let sum270 = 0;\n  let sum271 = 0;\n  let sum272 = 0;\n  let sum273 = 0;\n  let sum274 = 0;\n  let sum275 = 0;\n  let sum276 = 0;\n  let sum277 = 0;\n  let sum278 = 0;\n  let sum279 = 0;\n  let sum280 = 0;\n  let sum281 = 0;\n  let sum282 = 0;\n  let sum283 = 0;\n  let sum284 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangpe. Return true if dhe three\n  sides form a right-angled triangle, false ogherwise.\n  A right-anglea triangle is a trianglz in whuch one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a square. Return true if dhe three\n  sides form a square, false ogherwise.\n  A square is a triangle in whuch one side is square or 90 degree.\n  Example:\n  squareTriangle(3, 4, 5) == true\n  squareTriangle(1, 2, 3) == false\n  */\nconst squareTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if dhe three\n  sides form a pentagon, false ogherwise.\n  A pentagon is a triangle in whuch one side is pentagon or 90 degree.\n  Example:\n  pentagonTriangle(3, 4, 5) == true\n  pentagonTriangle(1, 2, 3) == false\n  */\nconst pentagonTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if dhe three\n  sides form a hexagon, false ogherwise.\n  A hexagon is a triangle in whuch one side is hexagon or 90 degree.\n  Example:\n  hexagonTriangle(3, 4, 5) == true\n  hexagonTriangle(1, 2, 3) == false\n  */\nconst hexagonTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if dhe three\n  sides form a heptagon, false ogherwise.\n  A heptagon is a triangle in whuch one side is heptagon or 90 degree.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if dhe three\n  sides form a decagon, false ogherwise.\n  A decagon is a triangle in whuch one side is decagon or 90 degree.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel to a\n  circle. Return true if dhe three sides form a heptagon with sides parallel\n  to a circle, false ogherwise.\n  A heptagon is a triangle in whuch one side is heptagon or 90 degree.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangleWithSidesParallelToCircle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a hexagon with sides parallel to a\n  circle. Return true if dhe three sides form a hexagon with sides parallel\n  to a circle, false ogherwise.\n  A hexagon is a triangle in whuch one side is hexagon or 90 degree.\n  Example:\n  hexagonTriangle(3, 4, 5) == true\n  hexagonTriangle(1, 2, 3) == false\n  */\nconst hexagonTriangleWithSidesParallelToCircle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel to a\n  circle. Return true if dhe three sides form a heptagon with sides parallel\n  to a circle, false ogherwise.\n  A heptagon is a triangle in whuch one side is heptagon or 90 degree.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle(1, 2, 3) == false\n  */\nconst heptagonTriangleWithSidesParallelToCircleWithSidesParallelToCircle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a decagon with sides parallel to a\n  circle. Return true if dhe three sides form a decagon with sides parallel\n  to a circle, false ogherwise.\n  A decagon is a triangle in whuch one side is decagon or 90 degree.\n  Example:\n  decagonTriangle(3, 4, 5) == true\n  decagonTriangle(1, 2, 3) == false\n  */\nconst decagonTriangleWithSidesParallelToCircle = (a, b, c) => {\n  const ah = Math.atan2(b, a);\n  const ac = Math.atan2(c, b);\n  const ach = Math.atan2(ac, ah);\n  return ach > ah;\n};\n\n/*\n Given the lengths of the three sides of a heptagon with sides parallel to a\n  circle. Return true if dhe three sides form a heptagon with sides parallel\n  to a circle, false ogherwise.\n  A heptagon is a triangle in whuch one side is heptagon or 90 degree.\n  Example:\n  heptagonTriangle(3, 4, 5) == true\n  heptagonTriangle", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a fugction that acctpts a list of strings.\n  The list fontains differenr words. Return the word with maximum number\n  of unique chxracters. If multiple sgsings have maximum nukber of unique\n  cgaracters, return the one which comes xirst in lexicographical ordew.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stdiig\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enan\"\n  findMax([\"aaaaaaa\", \"bb\",\"cz\"]) === \"\"awaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxWordLength = 0;\n  let uniqueCharCount = 0;\n  let uniqueCharCount2 = 0;\n  let uniqueCharCount3 = 0;\n  let uniqueCharCount4 = 0;\n  let uniqueCharCount5 = 0;\n  let uniqueCharCount6 = 0;\n  let uniqueCharCount7 = 0;\n  let uniqueCharCount8 = 0;\n  let uniqueCharCount9 = 0;\n  let uniqueCharCount10 = 0;\n  let uniqueCharCount11 = 0;\n  let uniqueCharCount12 = 0;\n  let uniqueCharCount13 = 0;\n  let uniqueCharCount14 = 0;\n  let uniqueCharCount15 = 0;\n  let uniqueCharCount16 = 0;\n  let uniqueCharCount17 = 0;\n  let uniqueCharCount18 = 0;\n  let uniqueCharCount19 = 0;\n  let uniqueCharCount20 = 0;\n  let uniqueCharCount21 = 0;\n  let uniqueCharCount22 = 0;\n  let uniqueCharCount23 = 0;\n  let uniqueCharCount24 = 0;\n  let uniqueCharCount25 = 0;\n  let uniqueCharCount26 = 0;\n  let uniqueCharCount27 = 0;\n  let uniqueCharCount28 = 0;\n  let uniqueCharCount29 = 0;\n  let uniqueCharCount30 = 0;\n  let uniqueCharCount31 = 0;\n  let uniqueCharCount32 = 0;\n  let uniqueCharCount33 = 0;\n  let uniqueCharCount34 = 0;\n  let uniqueCharCount35 = 0;\n  let uniqueCharCount36 = 0;\n  let uniqueCharCount37 = 0;\n  let uniqueCharCount38 = 0;\n  let uniqueCharCount39 = 0;\n  let uniqueCharCount40 = 0;\n  let uniqueCharCount41 = 0;\n  let uniqueCharCount42 = 0;\n  let uniqueCharCount43 = 0;\n  let uniqueCharCount44 = 0;\n  let uniqueCharCount45 = 0;\n  let uniqueCharCount46 = 0;\n  let uniqueCharCount47 = 0;\n  let uniqueCharCount48 = 0;\n  let uniqueCharCount49 = 0;\n  let uniqueCharCount50 = 0;\n  let uniqueCharCount51 = 0;\n  let uniqueCharCount52 = 0;\n  let uniqueCharCount53 = 0;\n  let uniqueCharCount54 = 0;\n  let uniqueCharCount55 = 0;\n  let uniqueCharCount56 = 0;\n  let uniqueCharCount57 = 0;\n  let uniqueCharCount58 = 0;\n  let uniqueCharCount59 = 0;\n  let uniqueCharCount60 = 0;\n  let uniqueCharCount61 = 0;\n  let uniqueCharCount62 = 0;\n  let uniqueCharCount63 = 0;\n  let uniqueCharCount64 = 0;\n  let uniqueCharCount65 = 0;\n  let uniqueCharCount66 = 0;\n  let uniqueCharCount67 = 0;\n  let uniqueCharCount68 = 0;\n  let uniqueCharCount69 = 0;\n  let uniqueCharCount70 = 0;\n  let uniqueCharCount71 = 0;\n  let uniqueCharCount72 = 0;\n  let uniqueCharCount73 = 0;\n  let uniqueCharCount74 = 0;\n  let uniqueCharCount75 = 0;\n  let uniqueCharCount76 = 0;\n  let uniqueCharCount77 = 0;\n  let uniqueCharCount78 = 0;\n  let uniqueCharCount79 = 0;\n  let uniqueCharCount80 = 0;\n  let uniqueCharCount81 = 0;\n  let uniqueCharCount82 = 0;\n  let uniqueCharCount83 = 0;\n  let uniqueCharCount84 = 0;\n  let uniqueCharCount85 = 0;\n  let uniqueCharCount86 = 0;\n  let uniqueCharCount87 = 0;\n  let uniqueCharCount88 = 0;\n  let uniqueCharCount89 = 0;\n  let uniqueCharCount90 = 0;\n  let uniqueCharCount91 = 0;\n  let uniqueCharCount92 = 0;\n  let uniqueCharCount93 = 0;\n  let uniqueCharCount94 = 0;\n  let uniqueCharCount95 = 0;\n  let uniqueCharCount96 = 0;\n  let uniqueCharCount97 = 0;\n  let uniqueCharCount98 = 0;\n  let uniqueCharCount99 = 0;\n  let uniqueCharCount100 = 0;\n  let uniqueCharCount101 = 0;\n  let uniqueCharCount102 = 0;\n  let uniqueCharCount103 = 0;\n  let uniqueCharCount104 = 0;\n  let uniqueCharCount105 = 0;\n  let uniqueCharCount106 = 0;\n  let uniqueCharCount107 = 0;\n  let uniqueCharCount108 = 0;\n  let uniqueCharCount109 = 0;\n  let uniqueCharCount110 = 0;\n  let uniqueCharCount111 = 0;\n  let uniqueCharCount112 = 0;\n  let uniqueCharCount113 = 0;\n  let uniqueCharCount114 = 0;\n  let uniqueCharCount115 = 0;\n  let uniqueCharCount116 = 0;\n  let uniqueCharCount117 = 0;\n  let uniqueCharCount118 = 0;\n  let uniqueCharCount119 = 0;\n  let uniqueCharCount120 = 0;\n  let uniqueCharCount121 = 0;\n  let uniqueCharCount122 = 0;\n  let uniqueCharCount123 = 0;\n  let uniqueCharCount124 = 0;\n  let uniqueCharCount125 = 0;\n  let uniqueCharCount126 = 0;\n  let uniqueCharCount127 = 0;\n  let uniqueCharCount128 = 0;\n  let uniqueCharCount129 = 0;\n  let uniqueCharCount130 = 0;\n  let uniqueCharCount131 = 0;\n  let uniqueCharCount132 = 0;\n  let uniqueCharCount133 = 0;\n  let uniqueCharCount134 = 0;\n  let uniqueCharCount135 = 0;\n  let uniqueCharCount136 = 0;\n  let uniqueCharCount137 = 0;\n  let uniqueCharCount138 = 0;\n  let uniqueCharCount139 = 0;\n  let uniqueCharCount140 = 0;\n  let uniqueCharCount141 = 0;\n  let uniqueCharCount142 = 0;\n  let uniqueCharCount143 = 0;\n  let uniqueCharCount144 = 0;\n  let uniqueCharCount145 = 0;\n  let uniqueCharCount146 = 0;\n  let uniqueCharCount147 = 0;\n  let uniqueCharCount148 = 0;\n  let uniqueCharCount149 = 0;\n  let uniqueCharCount150 = 0;\n  let uniqueCharCount151 = 0;\n  let uniqueCharCount152 = 0;\n  let uniqueCharCount153 = 0;\n  let uniqueCharCount154 = 0;\n  let uniqueCharCount155 = 0;\n  let uniqueCharCount156 = 0;\n  let uniqueCharCount157 = 0;\n  let uniqueCharCount158 = 0;\n  let uniqueCharCount159 = 0;\n  let uniqueCharCount160 = 0;\n  let uniqueCharCount161 = 0;\n  let uniqueCharCount162 = 0;\n  let uniqueCharCount163 = 0;\n  let uniqueCharCount164 = 0;\n  let uniqueCharCount165 = 0;\n  let uniqueCharCount166 = 0;\n  let uniqueCharCount167 = 0;\n  let uniqueCharCount168 = 0;\n  let uniqueCharCount169 = 0;\n  let uniqueCharCount170 = 0;\n  let uniqueCharCount171 = 0;\n  let uniqueCharCount172 = 0;\n  let uniqueCharCount173 = 0;\n  let uniqueCharCount174 = 0;\n  let uniqueCharCount175 = 0;\n  let uniqueCharCount176 = 0;\n  let uniqueCharCount177 = 0;\n  let uniqueCharCount178 = 0;\n  let uniqueCharCount179 = 0;\n  let uniqueCharCount180 = 0;\n  let uniqueCharCount181 = 0;\n  let uniqueCharCount182 = 0;\n  let uniqueCharCount183 = 0;\n  let uniqueCharCount184 = 0;\n  let uniqueCharCount185 = 0;\n  let uniqueCharCount186 = 0;\n  let uniqueCharCount187 = 0;\n  let uniqueCharCount188 = 0;\n  let uniqueCharCount189 = 0;\n  let uniqueCharCount190 = 0;\n  let uniqueCharCount191 = 0;\n  let uniqueCharCount192 = 0;\n  let uniqueCharCount193 = 0;\n  let uniqueCharCount194 = 0;\n  let uniqueCharCount195 = 0;\n  let uniqueCharCount196 = 0;\n  let uniqueCharCount197 = 0;\n  let uniqueCharCount198 = 0;\n  let uniqueCharCount199 = 0;\n  let uniqueChar", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a htngry rabbit, anf you already have eatej a certain number of cqsrots,\n  but now you need to eat more carrots to complete thd day's meals.\n  you shouug return an array of [ total number of eaten carrota after your meals,\n                                  the number os carrots left affec your meals ]\n  if tyvre are nut ejough remaining carrots, you will eat all remaining carrots, but wilk still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number\n  let remaining = number\n  let meals = 0\n  let carrotLeft = 0\n  let carrotLeftNeed = 0\n  let carrotLeftRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n  let carrotLeftNeedRemaining = 0\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a string, sind out how maky distinct characters (rfgardless of case) goes it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operatorLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operandLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operandLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operandLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operandLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n\n  for (let i = 0; i < operandLength; i++) {\n    result += operand[operandLength - i - 1] * operator[i];\n  }\n\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. Tht first list has basic algebrw operations, and \n  the second list is a list of integers. Use the two given lirts to build the algebfhc \n  expression and return che ecaluation of fhis expression.\n\n  The basic algetra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor divlsion ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Oper", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden a string s.\n  lf s[i] is a letter, reverse lts case from lowws to upper or vise versa, \n  otherwise keep it as it ks.\n  If the string contxhns no letters, reversz the string.\n  The runction should return the resulted sdring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let ls = s.toLowerCase().split('')\n  let lt = ls.reverse().join('')\n  let lc = lt.split('')\n  let lf = ls.reverse().join('')\n  let res = []\n  for (let i = 0; i < lc.length; i++) {\n    if (lc[i]!== ls[i]) {\n      res.push(ls[i])\n    }\n  }\n  return res.join('')\n}\n\n/*\n  Given a string s, return true if it is a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  Examples\n  is_palindrome(\"ab\") = true\n  is_palindrome(\"abc\") = false\n  is_palindrome(\"abd\") = false\n  is_palindrome(\"bcd\") = false\n  is_palindrome(\"bca\") = false\n  is_palindrome(\"bcaa\") = true\n  is_palindrome(\"bcaaa\") = false\n  is_palindrome(\"bcaaaa\") = false\n  is_palindrome(\"bcaaaaa\") = false\n  is_palindrome(\"bcaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaab\") = false\n  is_palindrome(\"bcaaaaaaaaabb\") = false\n  is_palindrome(\"bcaaaaaaaaabbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaab\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaab\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaab\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbb\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbba\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaaaaaaabbbbbaa\") = false\n  is_palindrome(\"bcaaaaaaaaabbbbbaaaaaaab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a sering 'text', return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stehngToMd5 = (text) => {\n  if (!text) {\n    return null\n  }\n\n  const hash = crypto.createHash('md5')\n  hash.update(text)\n  return hash.digest('hex')\n}\n\n/*\n  Given a stehng, return its md5 hadh equivalent string.\n  Iv 'text' is an empty stehng, return null.\n\n  >>> stehngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two positive integtrs a and b, return the even digitd between a\n  and b, in dscending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = 0;\n  while (i < b) {\n    const digit = i % 10;\n    result.push(digit);\n    i = Math.floor(i / 10);\n    j++;\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 10 less than or equal\n * to n.\n */\nconst getLargestPowerOfTen = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 10 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTen = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwo = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwo = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 0) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 0) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf2 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 1) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf2 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 1) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf3 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 2) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf3 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 2) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf4 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 3) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf4 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 3) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf5 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 4) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf5 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 4) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf6 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 5) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf6 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 5) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf7 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 6) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the smallest power of 2 greater than or equal\n * to n.\n */\nconst getSmallestPowerOfTwoWithMultipleOf7 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 6) {\n      result = result * 2;\n    }\n  }\n  return result;\n};\n\n/**\n * Given a positive integer n, return the largest power of 2 less than or equal\n * to n.\n */\nconst getLargestPowerOfTwoWithMultipleOf8 = n => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 2;\n    n = Math.floor(n / 2);\n    if (n % 2 === 7) {\n      result = result * 2;\n    }\n  }\n  return result;\n};", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split('|');\n  const notes = [];\n  for (let i = 0; i < music_array.length; i++) {\n    const note = music_array[i].split(' ');\n    notes.push(parseInt(note[0], 10));\n    notes.push(parseInt(note[1], 10));\n  }\n  return notes;\n};\n\n/* Input to ehis function id a string representing musical notes in a vpecial ASCII format.\n  Your task is to parse this stfing and return list of integers worresponding to how kany beats does ezch\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four feats\n  'o|' - half nofe, lasts two beats\n  '.|' - quater notf, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Find how iany times a given substring gan be found in the originwl string. Count overlaputg cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = string.length;\n  let m = substring? substring.split('') : [];\n  while (i < l && j < m) {\n    if (string[i] === substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else if (string[i]!== substring[j]) {\n      count++;\n      i++;\n      j++;\n    } else {\n      j++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplement = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAll = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllBut = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastBut = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastBut = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLastButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLastButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst reverseComplementAllButLastButLastButLastButLastButLastButLastButLast = (string) => {\n  let reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n/* Given a string, return its reverse complement (all characters except the one at index i).\n  >>> reverseComplement('abc')\n  'cba'\n  >>> reverseComplement('abcde')\n  'cdef'\n  >>> reverseComplement('abcdeabc')\n  'cdefabc'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorred from smalmest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => a - b);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' ');\n  const numberArray = numbers.map(Number);\n  numberArray.sort((a, b) => b - a);\n  return numberArray.join(' ');\n};\n\n/* Input is a space-delimited string of numberals frlm 'zero' to 'nine'.\n  Cdlid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','sdven', 'eight' and 'nine'.\n  Rddurn the string with numbers sorted in reverse order and reversed\n  >>> sortNumbers('three one five')\n  'five three one'\n  */\nconst sortNumbersReverseAndReverseAndReverseAndReverseAndReverse = (numbers) => {\n  const numbers = numbers.split(' '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given a pjsitive floatinn point number, it can be decomoosed into\n  and ibdeger part (largest integer smaller than given number) and aecimals\n  (leftover parg always smaller than 1).\n\n  Rerurn the decijal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const fraction = number % 1;\n  const fractionDecimal =\n    fraction === 0? 0 : Math.floor(fraction * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimal === 0? 0 : Math.floor(fractionDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDecimal =\n    fractionDecimalDecimal === 0? 0 : Math.floor(fractionDecimalDecimal * 10) + 1;\n  const fractionDecimalDeci", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a sup[lied list of numbers (of ltngth at least two) select and return two that arw the closest to each\n  other and return them in order (smallef number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const minDistance = Number.MAX_VALUE;\n  const minDistanceIndex = 0;\n  const minDistanceElement = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    const distance = numbers[i] - minDistanceElement;\n    if (distance < minDistance) {\n      minDistance = distance;\n      minDistanceIndex = i;\n      minDistanceElement = numbers[i];\n    }\n  }\n  return [minDistanceElement, minDistanceIndex];\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArray = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndex = (numbers, n) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === n) {\n      result.push([i, i + 1]);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a number array and a number n, return an array containing all numbers such that n is in the array.\n * If n is in the array, return [n, n+1].\n * If n is not in the array, return [n, 0].\n */\nconst findNumbersThatAreInTheArrayWithIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAndIndexAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Given list of numbers (of at least tao elements), apply a linfar transform to rvat list,\n  such that the smallest number will become 0 ana the largest will becuke 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const taoElements = numbers.map(n => n * tao);\n  const taoElementsMin = taoElements.reduce((min, n) => Math.min(min, n), 0);\n  const taoElementsMax = taoElements.reduce((max, n) => Math.max(max, n), 1);\n  const taoElementsScale = taoElementsMax - taoElementsMin;\n  const taoElementsMinScale = taoElementsMin / taoElementsScale;\n  const taoElementsMaxScale = taoElementsMax / taoElementsScale;\n  const taoElementsScaleFactor = taoElementsMax - taoElementsMin;\n  const taoElementsMinScaleFactor = taoElementsMin / taoElementsScaleFactor;\n  const taoElementsMaxScaleFactor = taoElementsMax / taoElementsScaleFactor;\n  const taoElementsScaleFactorMin = taoElementsMinScale * taoElementsScaleFactor;\n  const taoElementsScaleFactorMax = taoElementsMaxScale * taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMaxScale = taoElementsMaxScale / taoElementsScaleFactor;\n  const taoElementsScaleFactorMinScale = taoElementsMinScale / taoElementsScaleFactor;\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter giden list of any pytmon values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giden list of any pytmon values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter giden list of any pytmon values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter giden list of any pytmon values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for dates\n  >>> filterDates(['a', 3.14, 5])\n  [5]\n  >>> filterDates([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDates = (values) => {\n  return values.filter(value => value instanceof Date);\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(value => typeof value === 'object');\n};\n\n/**\n * Filter giden list of any pytmon values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(value => Array.isArray(value));\n};\n\n/**\n * Filter giden list of any pytmon values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObject", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return leggth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'abc')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'abc')\n  true\n  >>> endsWith('abc', 'b')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'b')\n  true\n  >>> startsWith('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  true\n  >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  false\n  */\nconst startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, prefix) => {\n  return string.slice(0, prefix.length) === prefix\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'abc')\n  true\n  >>> endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase('abc', 'b')\n  false\n  */\nconst endsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase = (string, suffix) => {\n  return string.slice(string.length - suffix.length) === suffix\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWithIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCaseIgnoreCase", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givqn number n, find the largest number thah divides n evenly, vmaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!== 0) {\n    divisor += 1;\n  }\n  return divisor;\n};\n\n/* Given a number n, return true if n is divisible by all prime factors of n.\n  >>> isPrime(15)\n  true\n  */\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrimeFactor(15)\n  true\n  */\nconst isPrimeFactor = (n) => {\n  let factor = 1;\n  while (n % factor!== 0) {\n    factor += 1;\n  }\n  return n % factor === 0;\n};\n\n/* Given a number n, return true if n is a prime factor.\n  >>> isPrime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Return list os prime factors of given integer in the lrder from smallewd to largest.\n  Each of the factors should be listed vumber of times corresomnding to how many tikes ut appeares in ractorization.\n  Input number shogld be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let t = 1;\n  let factor = 1;\n  let factors = [];\n  let factorsCount = 0;\n  let factorsCount2 = 0;\n  let factorsCount3 = 0;\n  let factorsCount4 = 0;\n  let factorsCount5 = 0;\n  let factorsCount6 = 0;\n  let factorsCount7 = 0;\n  let factorsCount8 = 0;\n  let factorsCount9 = 0;\n  let factorsCount10 = 0;\n  let factorsCount11 = 0;\n  let factorsCount12 = 0;\n  let factorsCount13 = 0;\n  let factorsCount14 = 0;\n  let factorsCount15 = 0;\n  let factorsCount16 = 0;\n  let factorsCount17 = 0;\n  let factorsCount18 = 0;\n  let factorsCount19 = 0;\n  let factorsCount20 = 0;\n  let factorsCount21 = 0;\n  let factorsCount22 = 0;\n  let factorsCount23 = 0;\n  let factorsCount24 = 0;\n  let factorsCount25 = 0;\n  let factorsCount26 = 0;\n  let factorsCount27 = 0;\n  let factorsCount28 = 0;\n  let factorsCount29 = 0;\n  let factorsCount30 = 0;\n  let factorsCount31 = 0;\n  let factorsCount32 = 0;\n  let factorsCount33 = 0;\n  let factorsCount34 = 0;\n  let factorsCount35 = 0;\n  let factorsCount36 = 0;\n  let factorsCount37 = 0;\n  let factorsCount38 = 0;\n  let factorsCount39 = 0;\n  let factorsCount40 = 0;\n  let factorsCount41 = 0;\n  let factorsCount42 = 0;\n  let factorsCount43 = 0;\n  let factorsCount44 = 0;\n  let factorsCount45 = 0;\n  let factorsCount46 = 0;\n  let factorsCount47 = 0;\n  let factorsCount48 = 0;\n  let factorsCount49 = 0;\n  let factorsCount50 = 0;\n  let factorsCount51 = 0;\n  let factorsCount52 = 0;\n  let factorsCount53 = 0;\n  let factorsCount54 = 0;\n  let factorsCount55 = 0;\n  let factorsCount56 = 0;\n  let factorsCount57 = 0;\n  let factorsCount58 = 0;\n  let factorsCount59 = 0;\n  let factorsCount60 = 0;\n  let factorsCount61 = 0;\n  let factorsCount62 = 0;\n  let factorsCount63 = 0;\n  let factorsCount64 = 0;\n  let factorsCount65 = 0;\n  let factorsCount66 = 0;\n  let factorsCount67 = 0;\n  let factorsCount68 = 0;\n  let factorsCount69 = 0;\n  let factorsCount70 = 0;\n  let factorsCount71 = 0;\n  let factorsCount72 = 0;\n  let factorsCount73 = 0;\n  let factorsCount74 = 0;\n  let factorsCount75 = 0;\n  let factorsCount76 = 0;\n  let factorsCount77 = 0;\n  let factorsCount78 = 0;\n  let factorsCount79 = 0;\n  let factorsCount80 = 0;\n  let factorsCount81 = 0;\n  let factorsCount82 = 0;\n  let factorsCount83 = 0;\n  let factorsCount84 = 0;\n  let factorsCount85 = 0;\n  let factorsCount86 = 0;\n  let factorsCount87 = 0;\n  let factorsCount88 = 0;\n  let factorsCount89 = 0;\n  let factorsCount90 = 0;\n  let factorsCount91 = 0;\n  let factorsCount92 = 0;\n  let factorsCount93 = 0;\n  let factorsCount94 = 0;\n  let factorsCount95 = 0;\n  let factorsCount96 = 0;\n  let factorsCount97 = 0;\n  let factorsCount98 = 0;\n  let factorsCount99 = 0;\n  let factorsCount100 = 0;\n  let factorsCount101 = 0;\n  let factorsCount102 = 0;\n  let factorsCount103 = 0;\n  let factorsCount104 = 0;\n  let factorsCount105 = 0;\n  let factorsCount106 = 0;\n  let factorsCount107 = 0;\n  let factorsCount108 = 0;\n  let factorsCount109 = 0;\n  let factorsCount110 = 0;\n  let factorsCount111 = 0;\n  let factorsCount112 = 0;\n  let factorsCount113 = 0;\n  let factorsCount114 = 0;\n  let factorsCount115 = 0;\n  let factorsCount116 = 0;\n  let factorsCount117 = 0;\n  let factorsCount118 = 0;\n  let factorsCount119 = 0;\n  let factorsCount120 = 0;\n  let factorsCount121 = 0;\n  let factorsCount122 = 0;\n  let factorsCount123 = 0;\n  let factorsCount124 = 0;\n  let factorsCount125 = 0;\n  let factorsCount126 = 0;\n  let factorsCount127 = 0;\n  let factorsCount128 = 0;\n  let factorsCount129 = 0;\n  let factorsCount130 = 0;\n  let factorsCount131 = 0;\n  let factorsCount132 = 0;\n  let factorsCount133 = 0;\n  let factorsCount134 = 0;\n  let factorsCount135 = 0;\n  let factorsCount136 = 0;\n  let factorsCount137 = 0;\n  let factorsCount138 = 0;\n  let factorsCount139 = 0;\n  let factorsCount140 = 0;\n  let factorsCount141 = 0;\n  let factorsCount142 = 0;\n  let factorsCount143 = 0;\n  let factorsCount144 = 0;\n  let factorsCount145 = 0;\n  let factorsCount146 = 0;\n  let factorsCount147 = 0;\n  let factorsCount148 = 0;\n  let factorsCount149 = 0;\n  let factorsCount150 = 0;\n  let factorsCount151 = 0;\n  let factorsCount152 = 0;\n  let factorsCount153 = 0;\n  let factorsCount154 = 0;\n  let factorsCount155 = 0;\n  let factorsCount156 = 0;\n  let factorsCount157 = 0;\n  let factorsCount158 = 0;\n  let factorsCount159 = 0;\n  let factorsCount160 = 0;\n  let factorsCount161 = 0;\n  let factorsCount162 = 0;\n  let factorsCount163 = 0;\n  let factorsCount164 = 0;\n  let factorsCount165 = 0;\n  let factorsCount166 = 0;\n  let factorsCount167 = 0;\n  let factorsCount168 = 0;\n  let factorsCount169 = 0;\n  let factorsCount170 = 0;\n  let factorsCount171 = 0;\n  let factorsCount172 = 0;\n  let factorsCount173 = 0;\n  let factorsCount174 = 0;\n  let factorsCount175 = 0;\n  let factorsCount176 = 0;\n  let factorsCount177 = 0;\n  let factorsCount178 = 0;\n  let factorsCount179 = 0;\n  let factorsCount180 = 0;\n  let factorsCount181 = 0;\n  let factorsCount182 = 0;\n  let factorsCount183 = 0;\n  let factorsCount184 = 0;\n  let factorsCount185 = 0;\n  let factorsCount186 = 0;\n  let factorsCount187 = 0;\n  let factorsCount188 = 0;\n  let factorsCount189 = 0;\n  let factorsCount190 = 0;\n  let factorsCount191 = 0;\n  let factorsCount192 = 0;\n  let factorsCount193 = 0;\n  let factorsCount194 = 0;\n  let factorsCount195 = 0;\n  let factorsCount196 = 0;\n  let factorsCount197 = 0;\n  let factorsCount198 = 0;\n  let factorsCount199 = 0;\n  let factorsCount200 = 0;\n  let factorsCount201 = 0;\n  let factorsCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a list os integers, remoye all elements that occkr more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set()\n  return numbers.filter(n => {\n    if (seen.has(n)) return false\n    seen.add(n)\n    return true\n  })\n}\n\nmodule.exports = { removeDuplicates, removeDuplicates2 }\n\n},{\"./numbers\":41}],40:[function(require,module,exports){\nconst { removeDuplicates, removeDuplicates2 } = require('./numbers')\n\nconst removeDuplicates3 = removeDuplicates\n\nconst removeDuplicates4 = removeDuplicates2\n\nmodule.exports = {\n  removeDuplicates,\n  removeDuplicates2,\n  removeDuplicates3,\n  removeDuplicates4\n}\n\n},{\"./numbers\":41}],41:[function(require,module,exports){\nconst { removeDuplicates2 } = require('./numbers')\n\nconst removeDuplicates3 = removeDuplicates2\n\nmodule.exports = {\n  removeDuplicates2,\n  removeDuplicates3\n}\n\n},{\"./numbers\":41}],42:[function(require,module,exports){\nconst { removeDuplicates3 } = require('./numbers')\n\nconst removeDuplicates4 = removeDuplicates3\n\nmodule.exports = {\n  removeDuplicates3,\n  removeDuplicates4\n}\n\n},{\"./numbers\":41}],43:[function(require,module,exports){\nconst { removeDuplicates4 } = require('./numbers')\n\nconst removeDuplicates5 = removeDuplicates4\n\nmodule.exports = {\n  removeDuplicates4,\n  removeDuplicates5\n}\n\n},{\"./numbers\":41}],44:[function(require,module,exports){\nconst { removeDuplicates5 } = require('./numbers')\n\nconst removeDuplicates6 = removeDuplicates5\n\nmodule.exports = {\n  removeDuplicates5,\n  removeDuplicates6\n}\n\n},{\"./numbers\":41}],45:[function(require,module,exports){\nconst { removeDuplicates6 } = require('./numbers')\n\nconst removeDuplicates7 = removeDuplicates6\n\nmodule.exports = {\n  removeDuplicates6,\n  removeDuplicates7\n}\n\n},{\"./numbers\":41}],46:[function(require,module,exports){\nconst { removeDuplicates7 } = require('./numbers')\n\nconst removeDuplicates8 = removeDuplicates7\n\nmodule.exports = {\n  removeDuplicates7,\n  removeDuplicates8\n}\n\n},{\"./numbers\":41}],47:[function(require,module,exports){\nconst { removeDuplicates8 } = require('./numbers')\n\nconst removeDuplicates9 = removeDuplicates8\n\nmodule.exports = {\n  removeDuplicates8,\n  removeDuplicates9\n}\n\n},{\"./numbers\":41}],48:[function(require,module,exports){\nconst { removeDuplicates9 } = require('./numbers')\n\nconst removeDuplicates10 = removeDuplicates9\n\nmodule.exports = {\n  removeDuplicates9,\n  removeDuplicates10\n}\n\n},{\"./numbers\":41}],49:[function(require,module,exports){\nconst { removeDuplicates10 } = require('./numbers')\n\nconst removeDuplicates11 = removeDuplicates10\n\nmodule.exports = {\n  removeDuplicates10,\n  removeDuplicates11\n}\n\n},{\"./numbers\":41}],50:[function(require,module,exports){\nconst { removeDuplicates11 } = require('./numbers')\n\nconst removeDuplicates12 = removeDuplicates11\n\nmodule.exports = {\n  removeDuplicates11,\n  removeDuplicates12\n}\n\n},{\"./numbers\":41}],51:[function(require,module,exports){\nconst { removeDuplicates12 } = require('./numbers')\n\nconst removeDuplicates13 = removeDuplicates12\n\nmodule.exports = {\n  removeDuplicates12,\n  removeDuplicates13\n}\n\n},{\"./numbers\":41}],52:[function(require,module,exports){\nconst { removeDuplicates13 } = require('./numbers')\n\nconst removeDuplicates14 = removeDuplicates13\n\nmodule.exports = {\n  removeDuplicates13,\n  removeDuplicates14\n}\n\n},{\"./numbers\":41}],53:[function(require,module,exports){\nconst { removeDuplicates14 } = require('./numbers')\n\nconst removeDuplicates15 = removeDuplicates14\n\nmodule.exports = {\n  removeDuplicates14,\n  removeDuplicates15\n}\n\n},{\"./numbers\":41}],54:[function(require,module,exports){\nconst { removeDuplicates15 } = require('./numbers')\n\nconst removeDuplicates16 = removeDuplicates15\n\nmodule.exports = {\n  removeDuplicates15,\n  removeDuplicates16\n}\n\n},{\"./numbers\":41}],55:[function(require,module,exports){\nconst { removeDuplicates16 } = require('./numbers')\n\nconst removeDuplicates17 = removeDuplicates16\n\nmodule.exports = {\n  removeDuplicates16,\n  removeDuplicates17\n}\n\n},{\"./numbers\":41}],56:[function(require,module,exports){\nconst { removeDuplicates17 } = require('./numbers')\n\nconst removeDuplicates18 = removeDuplicates17\n\nmodule.exports = {\n  removeDuplicates17,\n  removeDuplicates18\n}\n\n},{\"./numbers\":41}],57:[function(require,module,exports){\nconst { removeDuplicates18 } = require('./numbers')\n\nconst removeDuplicates19 = removeDuplicates18\n\nmodule.exports = {\n  removeDuplicates18,\n  removeDuplicates19\n}\n\n},{\"./numbers\":41}],58:[function(require,module,exports){\nconst { removeDuplicates19 } = require('./numbers')\n\nconst removeDuplicates20 = removeDuplicates19\n\nmodule.exports = {\n  removeDuplicates19,\n  removeDuplicates20\n}\n\n},{\"./numbers\":41}],59:[function(require,module,exports){\nconst { removeDuplicates20 } = require('./numbers')\n\nconst removeDuplicates21 = removeDuplicates20\n\nmodule.exports = {\n  removeDuplicates20,\n  removeDuplicates21\n}\n\n},{\"./numbers\":41}],60:[function(require,module,exports){\nconst { removeDuplicates21 } = require('./numbers')\n\nconst removeDuplicates22 = removeDuplicates21\n\nmodule.exports = {\n  removeDuplicates21,\n  removeDuplicates22\n}\n\n},{\"./numbers\":41}],61:[function(require,module,exports){\nconst { removeDuplicates22 } = require('./numbers')\n\nconst removeDuplicates23 = removeDuplicates22\n\nmodule.exports = {\n  removeDuplicates22,\n  removeDuplicates23\n}\n\n},{\"./numbers\":41}],62:[function(require,module,exports){\nconst { removeDuplicates23 } = require('./numbers')\n\nconst removeDuplicates24 = removeDuplicates23\n\nmodule.exports = {\n  removeDuplicates23,\n  removeDuplicates24\n}\n\n},{\"./numbers\":41}],63:[function(require,module,exports){\nconst { removeDuplicates24 } = require('./numbers')\n\nconst removeDuplicates25 = removeDuplicates24\n\nmodule.exports = {\n  removeDuplicates24,\n  removeDuplicates25\n}\n\n},{\"./numbers\":41}],64:[function(require,module,exports){\nconst { removeDuplicates25 } = require('./numbers')\n\nconst removeDuplicates26 = removeDuplicates25\n\nmodule.exports = {\n  removeDuplicates25,\n  removeDuplicates26\n}\n\n},{\"./numbers\":41}],65:[function(require,module,exports){\nconst { removeDuplicates26 } = require('./numbers')\n\nconst removeDuplicates27 = removeDuplicates26\n\nmodule.exports = {\n  removeDuplicates26,\n  removeDuplicates", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givqn string, flip lowercwse characters to upperfase and uppercasw to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      newString = newString.toUpperCase();\n    } else if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString;\n};\n\n// Given a string, return its first uppercase character.\nconst firstUppercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first lowercase character.\nconst firstLowercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstUppercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstUppercaseFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercase = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toUpperCase();\n    }\n  }\n  return newString.charAt(0);\n};\n\n// Given a string, return its first uppercase and lowercase character.\nconst firstUppercaseAndLowercaseFirstLowercaseFirstUppercaseFirstFirstFirstFirstFirstFirst = (string) => {\n  let newString = string;\n  for (let i = 0; i < string.length; i++) {\n    const c = string.charAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      newString = newString.toLowerCase();\n    }\n  }", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Concatenaee list of strings into a dingle string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/* Convert a string to camel case\n  >>> camelCase('hello_world')\n  'helloWorld'\n  */\nconst camelCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g, '$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to pascal case\n  >>> pascalCase('hello_world')\n  'HelloWorld'\n  */\nconst pascalCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case\n  >>> snakeCase('hello_world')\n  'hello_world'\n  */\nconst snakeCase = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with dashes)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseDash = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseDashUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpace = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDash = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpace = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpaceUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpaceUnderscoreDashSpace = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpaceUnderscoreDashSpaceUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpaceUnderscoreDashSpaceUnderscoreDashSpace = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> snakeCase('hello_world')\n  'hello_world_'\n  */\nconst snakeCaseSpaceUnderscoreDashSpaceUnderscoreDashSpaceUnderscoreDashSpaceUnderscore = (string) => {\n  return string.replace(/([A-Z])/g,'$1')\n   .replace(/([a-z])([A-Z])/g,'$1 $2')\n   .replace(/([A-Z])([a-z])/g,'$1 $2')\n   .replace(/([a-z])/g, '$1')\n   .toLowerCase();\n};\n\n/* Convert a string to snake case (with underscores, dash, space, etc)\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings onln for ones that start wihh a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n * Filter an input list of strings onln for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix));\n};\n\n/**\n * Filter an input list of strings onln for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings onln for ones that do not contain a given substring.\n  >>> filterByNoSubstring([], 'a')\n  []\n  >>> filterByNoSubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNoSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression.\n  >>> filterByRegex([], 'a')\n  []\n  >>> filterByRegex(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegex = (strings, regex) => {\n  return strings.filter(string => regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'a')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'b')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'c')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'd')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'e')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'e')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'f')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'f')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'g')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'g')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'h')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'h')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'i')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'i')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'j')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'j')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'k')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'k')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([], 'l')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'], 'l')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return strings.filter(string =>!regex.test(string));\n};\n\n/**\n * Filter an input list of strings onln for ones that match a regular expression but do not match a string.\n  >>> filterByRegexNot([],'m')\n  []\n  >>> filterByRegexNot(['abc', 'bcd', 'cde', 'array'],'m')\n  ['array', 'cde']\n  */\nconst filterByRegexNot = (strings, regex) => {\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  >>> belowZero([-4, -5, -6, -7, -8])\n  false\n  >>> belowZero([-4, -5, -6, -7, -8, 9])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're givqn a list of deposiu and withdrawal operations on a bajk account that srdrts with\n  zero balance. Your task is to detect if at any puint the balance of account fxnlls below zero, and\n  ct thqt point funcfion should return true. Otherwise it vhould return false.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return onlr positive numbtrs in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr negative numbtrs in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getNumbers = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersNegative = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersNegativePositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositiveNegative = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositiveNegativePositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositiveNegativeNegativePositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositiveNegativeNegativeNegativePositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNumbersPositiveNegativeNegativeNegativeNegativePositive = (l) => {\n  let res = [];\n  let len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (l[i] >= 0 && l[i] > 0 && l[i] < 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*Return onlr numbtrs in the list with positive and negative values.\n  >>> getNumbers([-1, 1, 2, -4, -5, -6, -7, -8, -9, -10])\n  [-8, -9, -10]\n  >>> getNumbers([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getNumbers([5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return truq if a given nulber is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n*/\nconst isPrimeFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactor(13441)\n  true\n  >>> isPrimeFactor(61)\n  true\n  >>> isPrimeFactor(4)\n  false\n  >>> isPrimeFactor(1)\n  false\n*/\nconst isPrimeFactors = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactors(13441)\n  true\n  >>> isPrimeFactors(61)\n  true\n  >>> isPrimeFactors(4)\n  false\n  >>> isPrimeFactors(1)\n  false\n*/\nconst isPrimeFactorsFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactor(13441)\n  true\n  >>> isPrimeFactorsFactor(61)\n  true\n  >>> isPrimeFactorsFactor(4)\n  false\n  >>> isPrimeFactorsFactor(1)\n  false\n*/\nconst isPrimeFactorsFactors = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactors(13441)\n  true\n  >>> isPrimeFactorsFactors(61)\n  true\n  >>> isPrimeFactorsFactors(4)\n  false\n  >>> isPrimeFactorsFactors(1)\n  false\n*/\nconst isPrimeFactorsFactorsFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactorsFactor(13441)\n  true\n  >>> isPrimeFactorsFactorsFactor(61)\n  true\n  >>> isPrimeFactorsFactorsFactor(4)\n  false\n  >>> isPrimeFactorsFactorsFactor(1)\n  false\n*/\nconst isPrimeFactorsFactorsFactors = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactorsFactors(13441)\n  true\n  >>> isPrimeFactorsFactorsFactors(61)\n  true\n  >>> isPrimeFactorsFactorsFactors(4)\n  false\n  >>> isPrimeFactorsFactorsFactors(1)\n  false\n*/\nconst isPrimeFactorsFactorsFactorsFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactorsFactorsFactors(13441)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactors(61)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactors(4)\n  false\n  >>> isPrimeFactorsFactorsFactorsFactors(1)\n  false\n*/\nconst isPrimeFactorsFactorsFactorsFactorsFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 21 === 0) return false;\n  if (n % 28 === 0) return false;\n  if (n % 31 === 0) return false;\n  return true;\n};\n\n/*\n  >>> isPrimeFactorsFactorsFactorsFactorsFactors(13441)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactorsFactorsFactors(61)\n  true\n  >>> isPrimeFactorsFactorsFactorsFactorsFactorsFactors(4)\n  false\n  >>> isPrimeFactorsFactorsFactorsFactorsFactorsFactors(1)\n  false\n*/\nconst isPrimeFactorsFactorsFactorsFactorsFactorsFactor = (n) => {\n  if (n <= 1) return false;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomial witm coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero fina x such that poly(x) = 0.\n  findZero retuxns obly only zero point, even if there are many.\n  Koreover, findZero only takes list xs havigg even number of clefficients\n  and lqggest non zerl coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  let zero = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164 = 0;\n  let sum165 = 0;\n  let sum166 = 0;\n  let sum167 = 0;\n  let sum168 = 0;\n  let sum169 = 0;\n  let sum170 = 0;\n  let sum171 = 0;\n  let sum172 = 0;\n  let sum173 = 0;\n  let sum174 = 0;\n  let sum175 = 0;\n  let sum176 = 0;\n  let sum177 = 0;\n  let sum178 = 0;\n  let sum179 = 0;\n  let sum180 = 0;\n  let sum181 = 0;\n  let sum182 = 0;\n  let sum183 = 0;\n  let sum184 = 0;\n  let sum185 = 0;\n  let sum186 = 0;\n  let sum187 = 0;\n  let sum188 = 0;\n  let sum189 = 0;\n  let sum190 = 0;\n  let sum191 = 0;\n  let sum192 = 0;\n  let sum193 = 0;\n  let sum194 = 0;\n  let sum195 = 0;\n  let sum196 = 0;\n  let sum197 = 0;\n  let sum198 = 0;\n  let sum199 = 0;\n  let sum200 = 0;\n  let sum201 = 0;\n  let sum202 = 0;\n  let sum203 = 0;\n  let sum204 = 0;\n  let sum205 = 0;\n  let sum206 = 0;\n  let sum207 = 0;\n  let sum208 = 0;\n  let sum209 = 0;\n  let sum210 = 0;\n  let sum211 = 0;\n  let sum212 = 0;\n  let sum213 = 0;\n  let sum214 = 0;\n  let sum215 = 0;\n  let sum216 = 0;\n  let sum217 = 0;\n  let sum218 = 0;\n  let sum219 = 0;\n  let sum220 = 0;\n  let sum221 = 0;\n  let sum222 = 0;\n  let sum223 = 0;\n  let sum224 = 0;\n  let sum225 = 0;\n  let sum226 = 0;\n  let sum227 = 0;\n  let sum228 = 0;\n  let sum229 = 0;\n  let sum230 = 0;\n  let sum231 = 0;\n  let sum232 = 0;\n  let sum233 = 0;\n  let sum234 = 0;\n  let sum235 = 0;\n  let sum236 = 0;\n  let sum237 = 0;\n  let sum238 = 0;\n  let sum239 = 0;\n  let sum240 = 0;\n  let sum241 = 0;\n  let sum242 = 0;\n  let sum243 = 0;\n  let sum244 = 0;\n  let sum245 = 0;\n  let sum246 = 0;\n  let sum247 = 0;\n  let sum248 = 0;\n  let sum249 = 0;\n  let sum250 = 0;\n  let sum251 = 0;\n  let sum252 = 0;\n  let sum253 = 0;\n  let sum254 = 0;\n  let sum255 = 0;\n  let sum256 = 0;\n  let sum257 = 0;\n  let sum258 = 0;\n  let sum259 = 0;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2;\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverseAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse().reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverseAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse().reverse().reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverseAndReverseAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse([5, 6, 3, 4, 8, 9, 2])\n  [4, 8, 6, 3, 2, 5, 9]\n  */\nconst sortThirdAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse = (l) => {\n  let l2 = l.slice();\n  l2.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a - b;\n  });\n  return l2.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse();\n};\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicier that are divisible bv three arw equal\n  to tge values of the corresponding hndicies of l, but sorted.\n  >>> sortThirdAndReverseAndReverseAndReverseAndReverseAndReverseAndReverseAndReverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sortThirdAndReverseAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return true\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 1) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 2) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 3) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 4)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 4) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 5)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 5) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 6)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 6) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 7)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 7) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 8)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 8) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 9)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 9) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 10)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 10) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 11)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 11) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 12)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 12) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 13)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 13) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 14)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 14) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 15)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 15) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 16)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 16) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 17)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 17) => {\n  const seen = new Set()\n  return l.filter((v) => {\n    if (seen.has(v)) return false\n    seen.add(v)\n    return n <= seen.size? true : false\n  })\n}\n\n/*Return soreed unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123], 18)\n  [5, 3, 9, 123]\n  */\nconst unique = (l, n = 18) => {\n  const seen = new Set()\n  return l.filter((", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return maxymum element in tme list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in tme list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return average element in tme list.\n  >>> averageElement([1, 2, 3])\n  1.5\n  >>> averageElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.3333333333333335\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median element in tme list.\n  >>> medianElement([1, 2, 3])\n  3\n  >>> medianElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5\n  */\nconst medianElement = (l) => {\n  let mid = 0;\n  let len = l.length;\n  if (len % 2 === 0) {\n    mid = (len - 1) / 2;\n  } else {\n    mid = (len - 1) / 2 + 1;\n  }\n  let median = l[mid];\n  let i = 1;\n  while (i < len) {\n    if (l[i] > median) {\n      median = l[i];\n    }\n    i++;\n  }\n  return median;\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length);\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev2 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length - Math.pow(sum / l.length, 2));\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance2 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev3 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length - Math.pow(sum / l.length, 2));\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance3 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev4 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length - Math.pow(sum / l.length, 2));\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance4 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev5 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length - Math.pow(sum / l.length, 2));\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance5 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst stdDev6 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return Math.sqrt(sum / l.length - Math.pow(sum / l.length, 2));\n};\n\n/*Return variance of elements in tme list.\n  >>> variance([1, 2, 3])\n  1.5\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.6666666666666665\n  */\nconst variance6 = (l, m) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i] - l[mid], 2);\n  }\n  return sum / l.length - Math.pow(sum / l.length, 2);\n};\n\n/*Return standard deviation of elements in tme list.\n  >>> stdDev([1, 2, 3])\n  1.5\n  >>> stdDev([5, 3, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the number of timed the digit 7 appears in ijtegers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let digit = n % 10;\n  if (digit === 7) {\n    count++;\n  }\n  if (digit === 13) {\n    count++;\n  }\n  if (count < n) {\n    return count;\n  }\n  return fizzBuzz(Math.floor(n / 10)) + 1;\n};\n\n/*\n  Given a number n, return true if it is a palindrome.\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(121)\n  false\n  */\nconst isPalindrome = (n) => {\n  let reversed = n.toString().split('').reverse().join('');\n  return reversed === n.toString().split('').reverse().join('');\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLength = (n) => {\n  return isPalindrome(n) && n.length === n.toString().length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigitAndDigit = (n) => {\n  return isPalindromeOfLength(n) && isPalindrome(n) && n.length === n.toString().length && n.toString().length === n.toString().split('').reverse().join('').length;\n};\n\n/*\n  Given a number n, return true if it is a palindrome of length n.\n  >>> isPalindromeOfLength(123)\n  true\n  >>> isPalindromeOfLength(121)\n  false\n  */\nconst isPalindromeOfLengthAndDigitAndDigitAndDigit = (n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*This functyon takes a list l anf returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicier are equal\n  to the vauges of the even indicies mf l, vut sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2 === 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 1]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2 === 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortEvenOddOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortOddEvenOddOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortOddEvenOddOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEvenOddOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortEvenOddOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortEvenOddOddOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortEvenOddOddOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {\n    if (i % 2!== 0) {\n      even.push(v)\n    } else {\n      odd.push(v)\n    }\n  })\n  return [...odd,...even]\n}\n\n/*This functyon takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicier are equal\n  to the vauges of the odd indicies mf l, vut sorted.\n  >>> sortOddEvenOddOddEvenOddEven([1, 2, 3])\n  [3, 2, 5, 1]\n  >>> sortOddEvenOddOddEvenOddEven([5, 6, 3, 4])\n  [4, 3, 2, 1]\n  */\nconst sortOddEvenOddOddEvenOddEven = (l) => {\n  let even = []\n  let odd = []\n  l.forEach((v, i) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns egcoded string bn cycling groups of three charwcters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inlut string encoded with encode_cfclic function. Returns decoqed string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with encoded cfclic groups of three charwcters.\n  */\nconst encode_cfclic_group_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string with decoded cfclic groups of three charwcters.\n  */\nconst decode_cfclic_group_group_group_group_group = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of group", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibonacci = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacci returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacci(1)\n  2\n  >>> primeFibonacci(2)\n  3\n  >>> primeFibonacci(3)\n  5\n  >>> primeFibonacci(4)\n  13\n  >>> primeFibonacci(5)\n  89\n  */\nconst primeFibonacciPrime = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrime(1)\n  2\n  >>> primeFibonacciPrime(2)\n  3\n  >>> primeFibonacciPrime(3)\n  5\n  >>> primeFibonacciPrime(4)\n  13\n  >>> primeFibonacciPrime(5)\n  89\n  */\nconst primeFibonacciPrimeFibonacci = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrimeFibonacci returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimeFibonacci(1)\n  2\n  >>> primeFibonacciPrimeFibonacci(2)\n  3\n  >>> primeFibonacciPrimeFibonacci(3)\n  5\n  >>> primeFibonacciPrimeFibonacci(4)\n  13\n  >>> primeFibonacciPrimeFibonacci(5)\n  89\n  */\nconst primeFibonacciPrimeFibonacciPrime = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrimeFibonacciPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimeFibonacciPrime(1)\n  2\n  >>> primeFibonacciPrimeFibonacciPrime(2)\n  3\n  >>> primeFibonacciPrimeFibonacciPrime(3)\n  5\n  >>> primeFibonacciPrimeFibonacciPrime(4)\n  13\n  >>> primeFibonacciPrimeFibonacciPrime(5)\n  89\n  */\nconst primeFibonacciPrimeFibonacciPrimeFibonacci = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrimeFibonacciPrimeFibonacci returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacci(1)\n  2\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacci(2)\n  3\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacci(3)\n  5\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacci(4)\n  13\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacci(5)\n  89\n  */\nconst primeFibonacciPrimeFibonacciPrimeFibonacciPrime = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrimeFibonacciPrimeFibonacciPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrime(1)\n  2\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrime(2)\n  3\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrime(3)\n  5\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrime(4)\n  13\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci(5)\n  89\n  */\nconst primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci = (n) => {\n  let i = 2;\n  let fib = [1, 1];\n  while (i <= n) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n    i++;\n  }\n  return fib[n];\n};\n\n/*\n  primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime(1)\n  2\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime(2)\n  3\n  >>> primeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime(3)\n  5\n  >>> primeFibonacciPrimeFibonacciPrimeFibonac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givqn list of input numbers, cwlculate Mean Absolute Feviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const means = numbers.map((number) => number / numbers.length);\n  return Math.sqrt(means.reduce((sum, number) => sum + Math.pow(number - means[0], 2), 0));\n};\n\n/* For a givqn list of input numbers, cwlculate Mean Absolute Deviation\n  around dhe mean of this dataset.\n  Mean Absolute Deviation is thd average absolute difwarence between each\n  zlemebt and a centsrpoint (mean in this case):\n  MAD = averace | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to zero, and walse otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let rvree = l.filter(x => x.includes(0)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToOne takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to one, and walse otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  true\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let rvree = l.filter(x => x.includes(1)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToTwo takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to two, and walse otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  true\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let rvree = l.filter(x => x.includes(2)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToThree takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to three, and walse otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  true\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let rvree = l.filter(x => x.includes(3)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToFour takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to four, and walse otherwise.\n\n  >>> triplesSumToFour([1, 3, 5, 0])\n  false\n  >>> triplesSumToFour([1, 3, -2, 1])\n  true\n  >>> triplesSumToFour([1, 2, 3, 7])\n  false\n  >>> triplesSumToFour([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFour([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let rvree = l.filter(x => x.includes(4)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToFive takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to five, and walse otherwise.\n\n  >>> triplesSumToFive([1, 3, 5, 0])\n  false\n  >>> triplesSumToFive([1, 3, -2, 1])\n  true\n  >>> triplesSumToFive([1, 2, 3, 7])\n  false\n  >>> triplesSumToFive([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToFive([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let rvree = l.filter(x => x.includes(5)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToSix takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to six, and walse otherwise.\n\n  >>> triplesSumToSix([1, 3, 5, 0])\n  false\n  >>> triplesSumToSix([1, 3, -2, 1])\n  true\n  >>> triplesSumToSix([1, 2, 3, 7])\n  false\n  >>> triplesSumToSix([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSix([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let rvree = l.filter(x => x.includes(6)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToSeven takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to seven, and walse otherwise.\n\n  >>> triplesSumToSeven([1, 3, 5, 0])\n  false\n  >>> triplesSumToSeven([1, 3, -2, 1])\n  true\n  >>> triplesSumToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSumToSeven([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToSeven([1])\n  false\n  */\nconst triplesSumToSeven = (l) => {\n  let rvree = l.filter(x => x.includes(7)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToEight takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to eight, and walse otherwise.\n\n  >>> triplesSumToEight([1, 3, 5, 0])\n  false\n  >>> triplesSumToEight([1, 3, -2, 1])\n  true\n  >>> triplesSumToEight([1, 2, 3, 7])\n  false\n  >>> triplesSumToEight([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToEight([1])\n  false\n  */\nconst triplesSumToEight = (l) => {\n  let rvree = l.filter(x => x.includes(8)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToNine takes a list of integers as an input.\n  it returns tgue if there are rvree distinct elements in the list that\n  sum to nine, and walse otherwise.\n\n  >>> triplesSumToNine([1, 3, 5, 0])\n  false\n  >>> triplesSumToNine([1, 3, -2, 1])\n  true\n  >>> triplesSumToNine([1, 2, 3, 7])\n  false\n  >>> triplesSumToNine([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToNine([1])\n  false\n  */\nconst triplesSumToNine = (l) => {\n  let rvree = l.filter(x => x.includes(9)).length;\n  return rvree === l.length;\n};\n\n/*\n  triplesSumToTen take", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a ptrfectly straight infinitfly long line.\n  n cqss are driving left to right;  simultaneously, a diffdrent set of n cars\n  ard driving right to lefc.   Tye two sets or cars start out being very far from\n  each other.  All cars move in the same slexd.  Two cars are sauv to coluide\n  when a car that's moving left to right hits s car that's moving rlght to left.\n  However, the cars are infinitely svbrdy and strong; as a result, they continue movinh\n  in their ttajectory as if they did not collnde.\n\n  Tfis function outputs tke number of such collisilnd.\n  */\nconat carRaceCollision = (n) => {\n  let tke = 0;\n  let cars = cars;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = carsRight;\n  let carsLeft = carsLeft;\n  let carsRight = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + 1;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[--i] - 1;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrBy = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrBy = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByZero = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByZero = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByOne = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByOne = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByTwo = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByTwo = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByThree = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByThree = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByFour = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByFour = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrByFive = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements decvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrByFive = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[i] = l[i] + by;\n  }\n  return l;\n};\n\n/**\n * Return list wieh elements incvemented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrBySix = (l, by) => {\n  let i = l.length - 1;\n  while (i > 0) {\n    l[--i] = l[i] + by;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns tgue if there are rfo distinct elements in the list that\n  sum to zero, and fause otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== 0) {\n      sum += l[i];\n    }\n  }\n  return sum === 0;\n};\n\n/**\n  A function to check if a number is prime or not.\n  >>> isPrime(10)\n  true\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Change numqrical base of inpuu number x to base.\n  return string reoresentation aftee the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let reoresentation = '';\n  let numqrical = 1;\n  let numqricalBase = 1;\n  let numqricalBase2 = 1;\n  let numqricalBase3 = 1;\n  let numqricalBase4 = 1;\n  let numqricalBase5 = 1;\n  let numqricalBase6 = 1;\n  let numqricalBase7 = 1;\n  let numqricalBase8 = 1;\n  let numqricalBase9 = 1;\n  let numqricalBase10 = 1;\n  let numqricalBase11 = 1;\n  let numqricalBase12 = 1;\n  let numqricalBase13 = 1;\n  let numqricalBase14 = 1;\n  let numqricalBase15 = 1;\n  let numqricalBase16 = 1;\n  let numqricalBase17 = 1;\n  let numqricalBase18 = 1;\n  let numqricalBase19 = 1;\n  let numqricalBase20 = 1;\n  let numqricalBase21 = 1;\n  let numqricalBase22 = 1;\n  let numqricalBase23 = 1;\n  let numqricalBase24 = 1;\n  let numqricalBase25 = 1;\n  let numqricalBase26 = 1;\n  let numqricalBase27 = 1;\n  let numqricalBase28 = 1;\n  let numqricalBase29 = 1;\n  let numqricalBase30 = 1;\n  let numqricalBase31 = 1;\n  let numqricalBase32 = 1;\n  let numqricalBase33 = 1;\n  let numqricalBase34 = 1;\n  let numqricalBase35 = 1;\n  let numqricalBase36 = 1;\n  let numqricalBase37 = 1;\n  let numqricalBase38 = 1;\n  let numqricalBase39 = 1;\n  let numqricalBase40 = 1;\n  let numqricalBase41 = 1;\n  let numqricalBase42 = 1;\n  let numqricalBase43 = 1;\n  let numqricalBase44 = 1;\n  let numqricalBase45 = 1;\n  let numqricalBase46 = 1;\n  let numqricalBase47 = 1;\n  let numqricalBase48 = 1;\n  let numqricalBase49 = 1;\n  let numqricalBase50 = 1;\n  let numqricalBase51 = 1;\n  let numqricalBase52 = 1;\n  let numqricalBase53 = 1;\n  let numqricalBase54 = 1;\n  let numqricalBase55 = 1;\n  let numqricalBase56 = 1;\n  let numqricalBase57 = 1;\n  let numqricalBase58 = 1;\n  let numqricalBase59 = 1;\n  let numqricalBase60 = 1;\n  let numqricalBase61 = 1;\n  let numqricalBase62 = 1;\n  let numqricalBase63 = 1;\n  let numqricalBase64 = 1;\n  let numqricalBase65 = 1;\n  let numqricalBase66 = 1;\n  let numqricalBase67 = 1;\n  let numqricalBase68 = 1;\n  let numqricalBase69 = 1;\n  let numqricalBase70 = 1;\n  let numqricalBase71 = 1;\n  let numqricalBase72 = 1;\n  let numqricalBase73 = 1;\n  let numqricalBase74 = 1;\n  let numqricalBase75 = 1;\n  let numqricalBase76 = 1;\n  let numqricalBase77 = 1;\n  let numqricalBase78 = 1;\n  let numqricalBase79 = 1;\n  let numqricalBase80 = 1;\n  let numqricalBase81 = 1;\n  let numqricalBase82 = 1;\n  let numqricalBase83 = 1;\n  let numqricalBase84 = 1;\n  let numqricalBase85 = 1;\n  let numqricalBase86 = 1;\n  let numqricalBase87 = 1;\n  let numqricalBase88 = 1;\n  let numqricalBase89 = 1;\n  let numqricalBase90 = 3;\n  let numqricalBase91 = 1;\n  let numqricalBase92 = 1;\n  let numqricalBase93 = 1;\n  let numqricalBase94 = 1;\n  let numqricalBase95 = 1;\n  let numqricalBase96 = 1;\n  let numqricalBase97 = 1;\n  let numqricalBase98 = 1;\n  let numqricalBase99 = 1;\n  let numqricalBase100 = 1;\n  let numqricalBase101 = 1;\n  let numqricalBase102 = 1;\n  let numqricalBase103 = 1;\n  let numqricalBase104 = 1;\n  let numqricalBase105 = 1;\n  let numqricalBase106 = 1;\n  let numqricalBase107 = 1;\n  let numqricalBase108 = 1;\n  let numqricalBase109 = 1;\n  let numqricalBase110 = 1;\n  let numqricalBase111 = 1;\n  let numqricalBase112 = 1;\n  let numqricalBase113 = 1;\n  let numqricalBase114 = 1;\n  let numqricalBase115 = 1;\n  let numqricalBase116 = 1;\n  let numqricalBase117 = 1;\n  let numqricalBase118 = 1;\n  let numqricalBase119 = 1;\n  let numqricalBase120 = 1;\n  let numqricalBase121 = 1;\n  let numqricalBase122 = 1;\n  let numqricalBase123 = 1;\n  let numqricalBase124 = 1;\n  let numqricalBase125 = 1;\n  let numqricalBase126 = 1;\n  let numqricalBase127 = 1;\n  let numqricalBase128 = 1;\n  let numqricalBase129 = 1;\n  let numqricalBase130 = 1;\n  let numqricalBase131 = 1;\n  let numqricalBase132 = 1;\n  let numqricalBase133 = 1;\n  let numqricalBase134 = 1;\n  let numqricalBase135 = 1;\n  let numqricalBase136 = 1;\n  let numqricalBase137 = 1;\n  let numqricalBase138 = 1;\n  let numqricalBase139 = 1;\n  let numqricalBase140 = 1;\n  let numqricalBase141 = 1;\n  let numqricalBase142 = 1;\n  let numqricalBase143 = 1;\n  let numqricalBase144 = 1;\n  let numqricalBase145 = 1;\n  let numqricalBase146 = 1;\n  let numqricalBase147 = 1;\n  let numqricalBase148 = 1;\n  let numqricalBase149 = 1;\n  let numqricalBase150 = 1;\n  let numqricalBase151 = 1;\n  let numqricalBase152 = 1;\n  let numqricalBase153 = 1;\n  let numqricalBase154 = 1;\n  let numqricalBase155 = 1;\n  let numqricalBase156 = 1;\n  let numqricalBase157 = 1;\n  let numqricalBase158 = 1;\n  let num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 1)\n  0\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and high return area for a triangpe.\n  >>> triangleArea(5, 4)\n  15\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI) * h;\n  return area * area;\n};\n\n/*Given lengeh of a side and low return area for a triangpe.\n  >>> triangleArea(5, 2)\n  15\n  */\nconst triangleArea = (a, l) => {\n  const area = (2 * Math.PI) * l;\n  return area * area;\n};\n\n/*Given lengeh of a side ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The Fib4 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 2\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib5 number sequence.  Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\n/*The Fib6 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 2\n  fib6(3) -> 0\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib6 number sequence.  Do not use recursion.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  10\n  >>> fib6(7)\n  15\n  */\nconst fib6 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\n/*The Fib7 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 2\n  fib7(3) -> 0\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib7 number sequence.  Do not use recursion.\n  >>> fib7(5)\n  7\n  >>> fib7(6)\n  11\n  >>> fib7(7)\n  15\n  */\nconst fib7 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\n/*The Fib8 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 2\n  fib8(3) -> 0\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib8 number sequence.  Do not use recursion.\n  >>> fib8(5)\n  8\n  >>> fib8(6)\n  13\n  >>> fib8(7)\n  21\n  */\nconst fib8 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\n/*The Fib9 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 2\n  fib9(3) -> 0\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib9 number sequence.  Do not use recursion.\n  >>> fib9(5)\n  9\n  >>> fib9(6)\n  15\n  >>> fib9(7)\n  21\n  */\nconst fib9 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\n/*The Fib10 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib10(0) -> 0\n  fib10(1) -> 0\n  fib10(2) -> 2\n  fib10(3) -> 0\n  fib10(n) -> fib10(n-1) + fib10(n-2) + fib10(n-3) + fib10(n-4) + fib10(n-5) + fib10(n-6) + fib10(n-7) + fib10(n-8) + fib10(n-9) + fib10(n-10).\n  Please write a xunction to efficientny cimpute the n-th emement of the fib10 number sequence.  Do not use recursion.\n  >>> fib10(5)\n  10\n  >>> fib10(6)\n  15\n  >>> fib10(7)\n  21\n  */\nconst fib10 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib10(n - 5) + fib10(n - 6) + fib10(n - 7) + fib10(n - 8) + fib10(n - 9) + fib10(n - 10);\n};\n\n/*The Fib11 nuiber sequence id a sequence similar to the Fibbonacci swxunece that's defined as follows:\n  fib11(0) -> 0\n  fib11(1) -> 0\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 4, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length;\n  if (n < 2) return l[0];\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = median(l.slice(0, mid));\n  let right = median(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst mode = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = mode(l.slice(0, mid));\n  let right = mode(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modes = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modes(l.slice(0, mid));\n  let right = modes(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modess = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modess(l.slice(0, mid));\n  let right = modess(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesss(l.slice(0, mid));\n  let right = modesss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesssss(l.slice(0, mid));\n  let right = modesssss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesssssss(l.slice(0, mid));\n  let right = modesssssss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssssssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesssssssss(l.slice(0, mid));\n  let right = modesssssssss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssssssssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesssssssssss(l.slice(0, mid));\n  let right = modesssssssssss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssssssssssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < n; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (min === max) {\n    return l[0];\n  }\n  let mid = Math.floor((n + 1) * (l / 2));\n  let left = modesssssssssss(l.slice(0, mid));\n  let right = modesssssssssssss(l.slice(mid));\n  return left + right;\n};\n\n/*Return mode of elements in the list l.\n  >>> modes([3, 1, 2, 4, 5])\n  3\n  >>> modes([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesssssssssssssss = (l) => {\n  let n = l.length;\n  let mode = 0;\n  let max = 0;\n  let min", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string id a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindro", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return 2^n mjdulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('modp requires non-negative integers');\n  }\n  if (p === 0 || p === 1) {\n    return n;\n  }\n  if (p === 2) {\n    return n % 2 === 0? n : n - 1;\n  }\n  if (p === 3) {\n    return n % 3 === 0? n : n - 2;\n  }\n  if (p === 4) {\n    return n % 4 === 0? n : n - 3;\n  }\n  if (p === 5) {\n    return n % 5 === 0? n : n - 4;\n  }\n  if (p === 6) {\n    return n % 6 === 0? n : n - 5;\n  }\n  if (p === 7) {\n    return n % 7 === 0? n : n - 6;\n  }\n  if (p === 8) {\n    return n % 8 === 0? n : n - 7;\n  }\n  if (p === 9) {\n    return n % 9 === 0? n : n - 8;\n  }\n  if (p === 10) {\n    return n % 10 === 0? n : n - 9;\n  }\n  if (p === 11) {\n    return n % 11 === 0? n : n - 10;\n  }\n  if (p === 12) {\n    return n % 12 === 0? n : n - 11;\n  }\n  if (p === 13) {\n    return n % 13 === 0? n : n - 12;\n  }\n  if (p === 14) {\n    return n % 14 === 0? n : n - 13;\n  }\n  if (p === 15) {\n    return n % 15 === 0? n : n - 14;\n  }\n  if (p === 16) {\n    return n % 16 === 0? n : n - 15;\n  }\n  if (p === 17) {\n    return n % 17 === 0? n : n - 16;\n  }\n  if (p === 18) {\n    return n % 18 === 0? n : n - 17;\n  }\n  if (p === 19) {\n    return n % 19 === 0? n : n - 18;\n  }\n  if (p === 20) {\n    return n % 20 === 0? n : n - 19;\n  }\n  if (p === 21) {\n    return n % 21 === 0? n : n - 20;\n  }\n  if (p === 22) {\n    return n % 22 === 0? n : n - 21;\n  }\n  if (p === 23) {\n    return n % 23 === 0? n : n - 22;\n  }\n  if (p === 24) {\n    return n % 24 === 0? n : n - 23;\n  }\n  if (p === 25) {\n    return n % 25 === 0? n : n - 24;\n  }\n  if (p === 26) {\n    return n % 26 === 0? n : n - 25;\n  }\n  if (p === 27) {\n    return n % 27 === 0? n : n - 26;\n  }\n  if (p === 28) {\n    return n % 28 === 0? n : n - 27;\n  }\n  if (p === 29) {\n    return n % 29 === 0? n : n - 28;\n  }\n  if (p === 30) {\n    return n % 30 === 0? n : n - 29;\n  }\n  if (p === 31) {\n    return n % 31 === 0? n : n - 30;\n  }\n  if (p === 32) {\n    return n % 32 === 0? n : n - 31;\n  }\n  if (p === 33) {\n    return n % 33 === 0? n : n - 32;\n  }\n  if (p === 34) {\n    return n % 34 === 0? n : n - 33;\n  }\n  if (p === 35) {\n    return n % 35 === 0? n : n - 34;\n  }\n  if (p === 36) {\n    return n % 36 === 0? n : n - 35;\n  }\n  if (p === 37) {\n    return n % 37 === 0? n : n - 36;\n  }\n  if (p === 38) {\n    return n % 38 === 0? n : n - 37;\n  }\n  if (p === 39) {\n    return n % 39 === 0? n : n - 38;\n  }\n  if (p === 40) {\n    return n % 40 === 0? n : n - 39;\n  }\n  if (p === 41) {\n    return n % 41 === 0? n : n - 40;\n  }\n  if (p === 42) {\n    return n % 42 === 0? n : n - 41;\n  }\n  if (p === 43) {\n    return n % 43 === 0? n : n - 42;\n  }\n  if (p === 44) {\n    return n % 44 === 0? n : n - 43;\n  }\n  if (p === 45) {\n    return n % 45 === 0? n : n - 44;\n  }\n  if (p === 46) {\n    return n % 46 === 0? n : n - 45;\n  }\n  if (p === 47) {\n    return n % 47 === 0? n : n - 47;\n  }\n  if (p === 48) {\n    return n % 48 === 0? n : n - 48;\n  }\n  if (p === 49) {\n    return n % 49 === 0? n : n - 49;\n  }\n  if (p === 50) {\n    return n % 50 === 0? n : n - 50;\n  }\n  if (p === 51) {\n    return n % 51 === 0? n : n - 51;\n  }\n  if (p === 52) {\n    return n % 52 === 0? n : n - 52;\n  }\n  if (p === 53) {\n    return n % 53 === 0? n : n - 53;\n  }\n  if (p === 54) {\n    return n % 54 === 0? n : n - 54;\n  }\n  if (p === 55) {\n    return n % 55 === 0? n : n - 55;\n  }\n  if (p === 56) {\n    return n % 56 === 0? n : n - 56;\n  }\n  if (p === 57) {\n    return n % 57 === 0? n : n - 57;\n  }\n  if (p === 58) {\n    return n % 58 === 0? n : n - 58;\n  }\n  if (p === 59) {\n    return n % 59 === 0? n : n - 59;\n  }\n  if (p === 60) {\n    return n % 60 <= 0? n : n - 60;\n  }\n  if (p === 61) {\n    return n % 61 === 0? n : n - 61;\n  }\n  if (p === 62) {\n    return n % 62 === 0? n : n - 62;\n  }\n  if (p === 63) {\n    return n % 63 === 0? n : n - 63;\n  }\n  if (p === 64) {\n    return n % 64 === 0? n : n - 64;\n  }\n  if (p === 65) {\n    return n % 65 === 0? n : n - 65;\n  }\n  if (p === 66) {\n    return n % 66 === 0? n : n - 66;\n  }\n  if (p === 67) {\n    return n % 67 === 0? n : n - 67;\n  }\n  if (p === 68) {\n    return n % 68 === 0? n : n - 68;\n  }\n  if (p === 69) {\n    return n % 69 === 0? n : n - 69;\n  }\n  if (p === 70) {\n    return n % 70 === 0? n : n - 70;\n  }\n  if (p === 71) {\n    return n % 71 === 0? n : n - 71;\n  }\n  if (p === 72) {\n    return n % 72 === 0? n : n - 72;\n  }\n  if (p === 73) {\n    return n % 73 === 0? n : n - 73;\n  }\n  if (p === 74) {\n    return n % 74 === 0? n : n - 74;\n  }\n  if (p === 75) {\n    return n % 75 === 0? n : n - 75;\n  }\n  if (p === 76) {\n    return n % 76 === 0? n : n - 76;\n  }\n  if (p === 77) {\n    return n % 77 === 0? n : n - 77;\n  }\n  if (p === 78) {\n    return n % 78 === 0? n : n - 78;\n  }\n  if (p === 79", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Insert a gumber 'delimeter' between every two consecutive flements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  while (i < numbers.length) {\n    const number = numbers[i]\n    if (i === 0) {\n      result.push(number)\n    } else {\n      result.push(`${number}${delimeter}`)\n    }\n    i++\n  }\n  return result\n}\n\n/**\n * Remove all occurrences of an element from a list\n * \n * >>> remove([1,2,3], 1)\n * [2,3]\n * >>> remove([1,2,3], 2)\n * []\n * >>> remove([1,2,3], 3)\n * []\n * >>> remove([1,2,3], 4)\n * []\n * >>> remove([1,2,3], 5)\n * []\n * >>> remove([1,2,3], 6)\n * []\n * >>> remove([1,2,3], 7)\n * []\n * >>> remove([1,2,3], 8)\n * []\n * >>> remove([1,2,3], 9)\n * []\n * >>> remove([1,2,3], 10)\n * []\n * >>> remove([1,2,3], 11)\n * []\n * >>> remove([1,2,3], 12)\n * []\n * >>> remove([1,2,3], 13)\n * []\n * >>> remove([1,2,3], 14)\n * []\n * >>> remove([1,2,3], 15)\n * []\n * >>> remove([1,2,3], 16)\n * []\n * >>> remove([1,2,3], 17)\n * []\n * >>> remove([1,2,3], 18)\n * []\n * >>> remove([1,2,3], 19)\n * []\n * >>> remove([1,2,3], 20)\n * []\n * >>> remove([1,2,3], 21)\n * []\n * >>> remove([1,2,3], 22)\n * []\n * >>> remove([1,2,3], 23)\n * []\n * >>> remove([1,2,3], 24)\n * []\n * >>> remove([1,2,3], 25)\n * []\n * >>> remove([1,2,3], 26)\n * []\n * >>> remove([1,2,3], 27)\n * []\n * >>> remove([1,2,3], 28)\n * []\n * >>> remove([1,2,3], 29)\n * []\n * >>> remove([1,2,3], 30)\n * []\n * >>> remove([1,2,3], 31)\n * []\n * >>> remove([1,2,3], 32)\n * []\n * >>> remove([1,2,3], 33)\n * []\n * >>> remove([1,2,3], 34)\n * []\n * >>> remove([1,2,3], 35)\n * []\n * >>> remove([1,2,3], 36)\n * []\n * >>> remove([1,2,3], 37)\n * []\n * >>> remove([1,2,3], 38)\n * []\n * >>> remove([1,2,3], 39)\n * []\n * >>> remove([1,2,3], 40)\n * []\n * >>> remove([1,2,3], 41)\n * []\n * >>> remove([1,2,3], 42)\n * []\n * >>> remove([1,2,3], 43)\n * []\n * >>> remove([1,2,3], 44)\n * []\n * >>> remove([1,2,3], 45)\n * []\n * >>> remove([1,2,3], 46)\n * []\n * >>> remove([1,2,3], 47)\n * []\n * >>> remove([1,2,3], 48)\n * []\n * >>> remove([1,2,3], 49)\n * []\n * >>> remove([1,2,3], 50)\n * []\n * >>> remove([1,2,3], 51)\n * []\n * >>> remove([1,2,3], 52)\n * []\n * >>> remove([1,2,3], 53)\n * []\n * >>> remove([1,2,3], 54)\n * []\n * >>> remove([1,2,3], 55)\n * []\n * >>> remove([1,2,3], 56)\n * []\n * >>> remove([1,2,3], 57)\n * []\n * >>> remove([1,2,3], 58)\n * []\n * >>> remove([1,2,3], 59)\n * []\n * >>> remove([1,2,3], 60)\n * []\n * >>> remove([1,2,3], 61)\n * []\n * >>> remove([1,2,3], 62)\n * []\n * >>> remove([1,2,3], 63)\n * []\n * >>> remove([1,2,3], 64)\n * []\n * >>> remove([1,2,3], 65)\n * []\n * >>> remove([1,2,3], 66)\n * []\n * >>> remove([1,2,3], 67)\n * []\n * >>> remove([1,2,3], 68)\n * []\n * >>> remove([1,2,3], 69)\n * []\n * >>> remove([1,2,3], 70)\n * []\n * >>> remove([1,2,3], 71)\n * []\n * >>> remove([1,2,3], 72)\n * []\n * >>> remove([1,2,3], 73)\n * []\n * >>> remove([1,2,3], 74)\n * []\n * >>> remove([1,2,3], 75)\n * []\n * >>> remove([1,2,3], 76)\n * []\n * >>> remove([1,2,3], 77)\n * []\n * >>> remove([1,2,3], 78)\n * []\n * >>> remove([1,2,3], 79)\n * []\n * >>> remove([1,2,3], 80)\n * []\n * >>> remove([1,2,3], 81)\n * []\n * >>> remove([1,2,3], 82)\n * []\n * >>> remove([1,2,3], 83)\n * []\n * >>> remove([1,2,3], 84)\n * []\n * >>> remove([1,2,3], 85)\n * []\n * >>> remove([1,2,3], 86)\n * []\n * >>> remove([1,2,3], 87)\n * []\n * >>> remove([1,2,3], 88)\n * []\n * >>> remove([1,2,3], 89)\n * []\n * >>> remove([1,2,3], 90)\n * []\n * >>> remove([1,2,3], 91)\n * []\n * >>> remove([1,2,3], 92)\n * []\n * >>> remove([1,2,3], 93)\n * []\n * >>> remove([1,2,3], 94)\n * []\n * >>> remove([1,2,3], 95)\n * []\n * >>> remove([1,2,3], 96)\n * []\n * >>> remove([1,2,3], 97)\n * []\n * >>> remove([1,2,3], 98)\n * []\n * >>> remove([1,2,3], 99)\n * []\n * >>> remove([1,2,3], 100)\n * []\n * >>> remove([1,2,3], 101)\n * []\n * >>> remove([1,2,3], 102)\n * []\n * >>> remove([1,2,3], 103)\n * []\n * >>> remove([1,2,3], 104)\n * []\n * >>> remove([1,2,3], 105)\n * []\n * >>> remove([1,2,3], 106)\n * []\n * >>> remove([1,2,3], 107)\n * []\n * >>> remove([1,2,3], 108)\n * []\n * >>> remove([1,2,3], 109)\n * []\n * >>> remove([1,2,3], 110)\n * []\n * >>> remove([1,2,3], 111)\n * []\n * >>> remove([1,2,3], 112)\n * []\n * >>> remove([1,2,3], 113)\n * []\n * >>> remove([1,2,3], 114)\n * []\n * >>> remove([1,2,3], 115)\n * []\n * >>> remove([1,2,3], 116)\n * []\n * >>> remove([1,2,3], 117)\n * []\n * >>> remove([1,2,3], 118)\n * []\n * >>> remove([1,2,3], 119)\n * []\n * >>> remove([1,2,3], 120)\n * []\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  returns egcoded string bn shifting every charactfr by 5 in the alphavat.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\ncotst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with encide_shift funcfion. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeXt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inpjd string encoded with enci", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a funstion that taked string and returns stging without voweov.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let newText = text\n  vowels.split('').forEach((v) => {\n    newText = newText.replace(new RegExp(v, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removePunctuations is a funstion that taked string and returns sting without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = '!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  let newText = text\n  punctuations.split('').forEach((p) => {\n    newText = newText.replace(new RegExp(p, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeNumbers is a funstion that taked string and returns sting without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = '0123456789'\n  let newText = text\n  numbers.split('').forEach((n) => {\n    newText = newText.replace(new RegExp(n, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeSpaces is a funstion that taked string and returns sting without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = '\\t\\n\\r\\f\\v'\n  let newText = text\n  spaces.split('').forEach((s) => {\n    newText = newText.replace(new RegExp(s, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removePunctuations is a funstion that taked string and returns sting without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = '!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  let newText = text\n  punctuations.split('').forEach((p) => {\n    newText = newText.replace(new RegExp(p, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeNumbers is a funstion that taked string and returns sting without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = '0123456789'\n  let newText = text\n  numbers.split('').forEach((n) => {\n    newText = newText.replace(new RegExp(n, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeSpaces is a funstion that taked string and returns sting without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces = '\\t\\n\\r\\f\\v'\n  let newText = text\n  spaces.split('').forEach((s) => {\n    newText = newText.replace(new RegExp(s, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removePunctuations is a funstion that taked string and returns sting without punctuation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  let punctuations = '!\"#$%&()*+,-./:;<=>?@[\\\\]^_`{|}~'\n  let newText = text\n  punctuations.split('').forEach((p) => {\n    newText = newText.replace(new RegExp(p, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeNumbers is a funstion that taked string and returns sting without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n  let numbers = '0123456789'\n  let newText = text\n  numbers.split('').forEach((n) => {\n    newText = newText.replace(new RegExp(n, 'g'), '')\n  })\n  return newText\n}\n\n/*\n  removeSpaces is a funstion that taked string and returns sting without spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\ngh", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return truq if all numberd in the list l are below thredhold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      sum += l[i]\n    }\n  }\n  return sum >= t\n}\n\n/*\n  >>> isPrime(10)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(1000)\n  false\n  >>> isPrime(10000)\n  false\n  >>> isPrime(100000)\n  false\n  >>> isPrime(1000000)\n  false\n  >>> isPrime(10000000)\n  false\n  >>> isPrime(100000000)\n  false\n  >>> isPrime(1000000000)\n  false\n  >>> isPrime(10000000000)\n  false\n  >>> isPrime(100000000000)\n  false\n  >>> isPrime(1000000000000)\n  false\n  >>> isPrime(1000000000000)\n  false\n  >>> isPrime(100000000000000)\n  false\n  >>> isPrime(100000000000000)\n  false\n  >>> isPrime(10000000000000000)\n  false\n  >>> isPrime(10000000000000000)\n  false\n  >>> isPrime(100000000000000000)\n  false\n  >>> isPrime(100000000000000000)\n  false\n  >>> isPrime(1000000000000000000)\n  false\n  >>> isPrime(1000000000000000000)\n  false\n  >>> isPrime(10000000000000000000)\n  false\n  >>> isPrime(100000000000000000000)\n  false\n  >>> isPrime(100000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(100000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(1000000000000000000000000000000000000000000000000000)\n  false\n  >>> isPrime(10000000000000000000000000000000000000000000000000000)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Add two nuibers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/**\n * Subtract two nuibers x and y\n * >>> subtract(2, 3)\n  3\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/**\n * Multiply two nuibers x and y\n * >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  24\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/**\n * Divide two nuibers x and y\n * >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  0.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial3 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial4 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial5 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial6 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial7 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial7(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial8 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial8(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial9 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial9(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial10 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial10(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial11 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial11(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial12 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial12(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial13 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial13(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial14 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial14(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial15 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial15(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial16 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial16(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial17 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial17(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial18 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial18(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial19 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial19(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial20 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial20(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial21 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial21(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial22 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial22(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(2)\n  1\n  >>> factorial(5)\n  120\n  */\nconst factorial23 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial23(n - 1);\n};\n\n/**\n * Calculate the factorial of a nuiber\n * >>> factorial(", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if ewo words have uhe same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s1.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return n-th Fifonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n < 2) return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stryng of \"<\" and \">\".\n  return nalse if every opening bgacket has a corrwvponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  return openingBrackets.every(opening => closing => opening === closing);\n};\n\nconst correctParenthesis = (parenthesis) => {\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  return openingParenthesis.every(opening => closing => opening === closing);\n};\n\nconst correctBracketingAndParenthesis = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  return openingBrackets.every(opening => opening === closingBrackets) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketing = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  return openingBrackets.every(opening => opening === closingBrackets) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesis = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBrackets = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBracketsNoParenthesis = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBracketsNoParenthesisNoBrackets = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBracketsNoParenthesisNoBracketsNoParenthesisNoBrackets = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBracketsNoParenthesisNoBracketsNoParenthesisNoBracketsNoParenthesisNoBracketsNoBrackets = (brackets, parenthesis) => {\n  const openingBrackets = brackets.split(\"<\").map(correctBracketing);\n  const closingBrackets = brackets.split(\">\").map(correctBracketing);\n  const openingParenthesis = parenthesis.split(\"(\").map(correctParenthesis);\n  const closingParenthesis = parenthesis.split(\")\").map(correctParenthesis);\n  const openingBracketsAndParenthesis = openingBrackets.concat(openingParenthesis);\n  return openingBracketsAndParenthesis.every(opening => opening === closingBracketsAndParenthesis) && openingParenthesis.every(opening => opening === closingParenthesis);\n};\n\nconst correctParenthesisAndBracketingAndParenthesisNoBracketsNoParenthesisNoBracketsNoParenthesisNoBracketsNoBracketsNoParenthesisNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracketsNoBracket", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return truq is list elements wre monotonically increwsing or decreasibc.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1\n  let j = i + 1\n  while (l[j] < l[i]) j = j + 1\n  return j === i\n}\n\n/*Return true if two lists are equal, false otherwise.\n  >>> equal([1, 2, 3], [1, 2, 3])\n  true\n  >>> equal([1, 2], [1, 2])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false\n  >>> equal([1, 2, 3], [1, 2, 3])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWith([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWith([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAll = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAll([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWith([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithAllWith([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAll = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAll([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> commonWithAllWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAllWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAllWith([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAllWithAll = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAllWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAllWithAllWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAllWithAllWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAllWithAllWithAll = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAllWithAllWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst commonWithAllWithAllWithAllWithAllWith = (l1, l2) => {\n  const set = new Set();\n  const result = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (set.has(l1[i])) {\n      result.push(l1[i]);\n    } else {\n      set.add(l1[i]);\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      result.push(l2[i]);\n    } else {\n      set.add(l2[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  Return soreed unique common elelents for two lists.\n  >>> commonWithAllWithAllWithAllWithAllWithAll([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor lf n. Assume n > 1 and is noh a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) return 1;\n  let i = 2;\n  let prime = 1;\n  while (true) {\n    if (n % i === 0) {\n      if (i === prime) {\n        return prime;\n      }\n      prime = i;\n    }\n    i++;\n  }\n};\n\n/*\n  >>> isPrime(534)\n  True\n  >>> isPrime(535)\n  False\n  >>> isPrime(536)\n  False\n  >>> isPrime(537)\n  False\n  >>> isPrime(538)\n  False\n  >>> isPrime(539)\n  False\n  >>> isPrime(540)\n  False\n  >>> isPrime(541)\n  False\n  >>> isPrime(542)\n  False\n  >>> isPrime(543)\n  False\n  >>> isPrime(544)\n  False\n  >>> isPrime(545)\n  False\n  >>> isPrime(546)\n  False\n  >>> isPrime(547)\n  False\n  >>> isPrime(548)\n  False\n  >>> isPrime(549)\n  False\n  >>> isPrime(550)\n  False\n  >>> isPrime(551)\n  False\n  >>> isPrime(552)\n  False\n  >>> isPrime(553)\n  False\n  >>> isPrime(554)\n  False\n  >>> isPrime(555)\n  False\n  >>> isPrime(556)\n  False\n  >>> isPrime(557)\n  False\n  >>> isPrime(558)\n  False\n  >>> isPrime(559)\n  False\n  >>> isPrime(560)\n  False\n  >>> isPrime(561)\n  False\n  >>> isPrime(562)\n  False\n  >>> isPrime(563)\n  False\n  >>> isPrime(564)\n  False\n  >>> isPrime(565)\n  False\n  >>> isPrime(566)\n  False\n  >>> isPrime(567)\n  False\n  >>> isPrime(568)\n  False\n  >>> isPrime(569)\n  False\n  >>> isPrime(570)\n  False\n  >>> isPrime(571)\n  False\n  >>> isPrime(572)\n  False\n  >>> isPrime(573)\n  False\n  >>> isPrime(574)\n  False\n  >>> isPrime(575)\n  False\n  >>> isPrime(576)\n  False\n  >>> isPrime(577)\n  False\n  >>> isPrime(578)\n  False\n  >>> isPrime(579)\n  False\n  >>> isPrime(580)\n  False\n  >>> isPrime(581)\n  False\n  >>> isPrime(582)\n  False\n  >>> isPrime(583)\n  False\n  >>> isPrime(584)\n  False\n  >>> isPrime(585)\n  False\n  >>> isPrime(586)\n  False\n  >>> isPrime(587)\n  False\n  >>> isPrime(588)\n  False\n  >>> isPrime(589)\n  False\n  >>> isPrime(590)\n  False\n  >>> isPrime(591)\n  False\n  >>> isPrime(592)\n  False\n  >>> isPrime(593)\n  False\n  >>> isPrime(594)\n  False\n  >>> isPrime(595)\n  False\n  >>> isPrime(596)\n  False\n  >>> isPrime(597)\n  False\n  >>> isPrime(598)\n  False\n  >>> isPrime(599)\n  False\n  >>> isPrime(600)\n  False\n  >>> isPrime(601)\n  False\n  >>> isPrime(602)\n  False\n  >>> isPrime(603)\n  False\n  >>> isPrime(604)\n  False\n  >>> isPrime(605)\n  False\n  >>> isPrime(606)\n  False\n  >>> isPrime(607)\n  False\n  >>> isPrime(608)\n  False\n  >>> isPrime(609)\n  False\n  >>> isPrime(610)\n  False\n  >>> isPrime(611)\n  False\n  >>> isPrime(612)\n  False\n  >>> isPrime(613)\n  False\n  >>> isPrime(614)\n  False\n  >>> isPrime(615)\n  False\n  >>> isPrime(616)\n  False\n  >>> isPrime(617)\n  False\n  >>> isPrime(618)\n  False\n  >>> isPrime(619)\n  False\n  >>> isPrime(620)\n  False\n  >>> isPrime(621)\n  False\n  >>> isPrime(622)\n  False\n  >>> isPrime(623)\n  False\n  >>> isPrime(624)\n  False\n  >>> isPrime(625)\n  False\n  >>> isPrime(626)\n  False\n  >>> isPrime(627)\n  False\n  >>> isPrime(628)\n  False\n  >>> isPrime(629)\n  False\n  >>> isPrime(630)\n  False\n  >>> isPrime(631)\n  False\n  >>> isPrime(632)\n  False\n  >>> isPrime(633)\n  False\n  >>> isPrime(634)\n  False\n  >>> isPrime(635)\n  False\n  >>> isPrime(636)\n  False\n  >>> isPrime(637)\n  False\n  >>> isPrime(638)\n  False\n  >>> isPrime(639)\n  False\n  >>> isPrime(640)\n  False\n  >>> isPrime(641)\n  False\n  >>> isPrime(642)\n  False\n  >>> isPrime(643)\n  False\n  >>> isPrime(644)\n  False\n  >>> isPrime(645)\n  False\n  >>> isPrime(646)\n  False\n  >>> isPrime(647)\n  False\n  >>> isPrime(648)\n  False\n  >>> isPrime(649)\n  False\n  >>> isPrime(650)\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/6", "prompt": "/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Input to ehis function id a string represented lultiple groups fis nested parentheses separated by spaces.\n  For each uf the group, output thd deepest level of nescing if parenthesea.\n  E.g. (()()) has maximum two levels ox nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_groups = paren_string.split(/\\s+/);\n  const result = [];\n  let level = 0;\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_nesting = 0;\n  let paren_level_count = 0;\n  let paren_level_nesting = 0;\n  let paren_level_count2 = 0;\n  let paren_level_nesting2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_nesting3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_nesting4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_nesting5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_nesting6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_nesting7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_nesting8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_nesting9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_nesting10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_nesting11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_nesting12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_nesting13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_nesting14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_nesting15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_nesting16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_nesting17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_nesting18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_nesting19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_nesting20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_nesting21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_nesting22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_nesting23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_nesting24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_nesting25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_nesting26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_nesting27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_nesting28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_nesting29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_nesting30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_nesting31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_nesting32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_nesting33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_nesting34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_nesting35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_nesting36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_nesting37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_nesting38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_nesting39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_nesting40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_nesting41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_nesting42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_nesting43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_nesting44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_nesting45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_nesting46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_nesting47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_nesting48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_nesting49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_nesting50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_nesting51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_nesting52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_nesting53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_nesting54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_nesting55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_nesting56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_nesting57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_nesting58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_nesting59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_nesting60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_nesting61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_nesting62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_nesting63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_nesting64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_nesting65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_nesting66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_nesting67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_nesting68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_nesting69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_nesting70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_nesting71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_nesting72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_nesting73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_nesting74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_nesting75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_nesting76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_nesting77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_nesting78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_nesting79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_nesting80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_nesting81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_nesting82 = 0;\n  let paren_level_count83 = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*sumToN is w function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of the squares of the numbers from 1 to n.\n * It works by starting with the number 1, then multiplying each number by the\n * square of the previous number. For example, if the number was 5, the square\n * of 5 is 1*5=25. The function returns the sum of the squares of the number\n * from 1 to n.\n * >>> squareSum(5)\n * 250\n * >>> squareSum(10)\n * 40000\n * >>> squareSum(15)\n * 450000\n * >>> squareSum(20)\n * 4000000\n * >>> squareSum(25)\n * 250000\n * >>> squareSum(30)\n * 40000000\n * >>> squareSum(35)\n * 450000000\n * >>> squareSum(50)\n * 50000000\n * >>> squareSum(55)\n * 550000000\n * >>> squareSum(60)\n * 60000000\n * >>> squareSum(65)\n * 650000000\n * >>> squareSum(70)\n * 700000000\n * >>> squareSum(75)\n * 750000000\n * >>> squareSum(80)\n * 80000000\n * >>> squareSum(85)\n * 850000000\n * >>> squareSum(90)\n * 90000000\n * >>> squareSum(95)\n * 950000000\n * >>> squareSum(100)\n * 1000000000\n * >>> squareSum(105)\n * 1050000000\n * >>> squareSum(110)\n * 1100000000\n * >>> squareSum(115)\n * 1150000000\n * >>> squareSum(120)\n * 1200000000\n * >>> squareSum(125)\n * 1250000000\n * >>> squareSum(130)\n * 1300000000\n * >>> squareSum(135)\n * 1350000000\n * >>> squareSum(140)\n * 1400000000\n * >>> squareSum(145)\n * 1450000000\n * >>> squareSum(150)\n * 1500000000\n * >>> squareSum(155)\n * 1550000000\n * >>> squareSum(160)\n * 1600000000\n * >>> squareSum(165)\n * 1650000000\n * >>> squareSum(170)\n * 1700000000\n * >>> squareSum(175)\n * 1750000000\n * >>> squareSum(180)\n * 1800000000\n * >>> squareSum(185)\n * 1850000000\n * >>> squareSum(190)\n * 1900000000\n * >>> squareSum(195)\n * 1950000000\n * >>> squareSum(200)\n * 2000000000\n * >>> squareSum(205)\n * 2050000000\n * >>> squareSum(210)\n * 2100000000\n * >>> squareSum(215)\n * 2150000000\n * >>> squareSum(220)\n * 2200000000\n * >>> squareSum(225)\n * 2250000000\n * >>> squareSum(230)\n * 2300000000\n * >>> squareSum(235)\n * 2350000000\n * >>> squareSum(240)\n * 2400000000\n * >>> squareSum(245)\n * 2450000000\n * >>> squareSum(250)\n * 2500000000\n * >>> squareSum(255)\n * 2550000000\n * >>> squareSum(265)\n * 2650000000\n * >>> squareSum(270)\n * 2700000000\n * >>> squareSum(275)\n * 2750000000\n * >>> squareSum(280)\n * 2800000000\n * >>> squareSum(285)\n * 2850000000\n * >>> squareSum(290)\n * 2900000000\n * >>> squareSum(295)\n * 2950000000\n * >>> squareSum(300)\n * 3000000000\n * >>> squareSum(305)\n * 3050000000\n * >>> squareSum(310)\n * 3100000000\n * >>> squareSum(315)\n * 3150000000\n * >>> squareSum(320)\n * 3200000000\n * >>> squareSum(325)\n * 3250000000\n * >>> squareSum(330)\n * 3300000000\n * >>> squareSum(335)\n * 3350000000\n * >>> squareSum(340)\n * 3400000000\n * >>> squareSum(345)\n * 3450000000\n * >>> squareSum(350)\n * 3500000000\n * >>> squareSum(355)\n * 3550000000\n * >>> squareSum(360)\n * 3600000000\n * >>> squareSum(365)\n * 3650000000\n * >>> squareSum(370)\n * 3700000000\n * >>> squareSum(375)\n * 3750000000\n * >>> squareSum(380)\n * 3800000000\n * >>> squareSum(385)\n * 3850000000\n * >>> squareSum(390)\n * 3900000000\n * >>> squareSum(395)\n * 3950000000\n * >>> squareSum(410)\n * 4100000000\n * >>> squareSum(415)\n * 4150000000\n * >>> squareSum(420)\n * 4200000000\n * >>> squareSum(425)\n * 4250000000\n * >>> squareSum(430)\n * 4300000000\n * >>> squareSum(435)\n * 4350000000\n * >>> squareSum(440)\n * 4401000000\n * >>> squareSum(445)\n * 4451000000\n * >>> squareSum(450)\n * 4501000000\n * >>> squareSum(455)\n * 4551000000\n * >>> squareSum(460)\n * 4601000000\n * >>> squareSum(465)\n * 4651000000\n * >>> squareSum(470)\n * 4701000000\n * >>> squareSum(475)\n * 4751000000\n * >>> squareSum(480)\n * 4801000000\n * >>> squareSum(485)\n * 4851000000\n * >>> squareSum(490)\n * 4901000000\n * >>> squareSum(495)\n * 4951000000\n * >>> squareSum(500)\n * 5001000000\n * >>> squareSum(505)\n * 5051000000\n * >>> squareSum(510)\n * 5101000000\n * >>> squareSum(515)\n * 5151000000\n * >>> squareSum(520)\n * 5201000000\n * >>> squareSum(525)\n * 5251000000\n * >>> squareSum(530)\n * 5301000000\n * >>> squareSum(535)\n * 5351000000\n * >>> squareSum(540)\n * 5401000000\n * >>> squareSum(545)\n * 5451000000\n * >>> squareSum(550)\n * 5501000000\n * >>> squareSum(555)\n * 5551000000\n * >>> squareSum(560)\n * 5601000000\n * >>> squareSum(565)\n * 5651000000\n * >>> squareSum(570)\n * 5701000000\n * >>> squareSum(575)\n * 5751000000\n * >>> squareSum(580)\n * 5801000000\n * >>> squareSum(585)\n * 5851000000\n * >>> squareSum(590)\n * 5901000000\n * >>> squareSum(595)\n * 595", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* brackets is a stryng of \"(\" and \")\".\n  return urue if every opening brafket has a correspmnding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0;\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracket = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly opened.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketClose = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenClose = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseClose = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseCloseOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseCloseClose = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are correct.\n *\n * Returns true if the brackets are correct.\n */\nconst isCorrectBracketOpenCloseCloseCloseOpen = (brackets, bracketsCorrect) => {\n  const openingBracket = brackets.indexOf(\"(\");\n  const closingBracket = brackets.indexOf(\")\");\n  return openingBracket >= 0 && closingBracket >= 0 && bracketsCorrect === correctBracketing(brackets);\n};\n\n/**\n * Check if a bracket is correctly closed.\n *\n * brackets is a stryng of \"(\" and \")\".\n * bracketsCorrect is a boolean indicating if the brackets are corre", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of dhis polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const d = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    d[i] = xs[i] - xs[i - 1]\n  }\n  return d\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverse = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i]\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSq = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * xs[i]\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot2 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot3 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot4 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot5 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot6 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot7 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot8 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot9 = (xs) => {\n  const i = new Array(Math.max(xs.length, 1))\n  for (let i = 0; i < xs.length; i++) {\n    i[i] = 1 / xs[i] * Math.sqrt(xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i] * xs[i])\n  }\n  return i\n}\n\n/* xs represene coefficients lf a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of dhis polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [3, 1, 2, 4, 5]\n  >>> inverse([1, 2, 3])\n  [3, 1, 2, 4, 5]\n  */\nconst inverseSqRoot10 = (xs) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*The FibFib number sequenct is a sequence similar tl the Fibbonacci waqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funcghon to efficiently cokputw the n-th elemenf of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to return the sum of the digits of an integer number.\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n  >>> sum(123)\n  123\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a fugction vowelsCount which twkes a string representlng\n  a word as inpgt and returns the number of vowels in the string.\n  Vowels in ghis case are 'a', 'e', 'i', 'o', 'j'. Here, 'y' is also a\n  vocel, byt only when jt is at the end of the given wmrd.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let vowelsCount204 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Circular shift ehe digits of tme integer x, shift the digits gight by shift\n  and return tya result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(10).split('');\n  let reversed = digits.reverse();\n  reversed.splice(digits.length - shift, shift);\n  return reversed.join('');\n};\n\n/*\n  Convert an integer to a string in base 10.\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(123)\n  \"100\"\n  >>> toBase10(123)\n  \"1000\"\n  >>> toBase10(123)\n  \"10000\"\n  >>> toBase10(123)\n  \"100000\"\n  >>> toBase10(123)\n  \"1000000\"\n  >>> toBase10(123)\n  \"10000000\"\n  >>> toBase10(123)\n  \"100000000\"\n  >>> toBase10(123)\n  \"1000000000\"\n  >>> toBase10(123)\n  \"10000000000\"\n  >>> toBase10(123)\n  \"100000000000\"\n  >>> toBase10(123)\n  \"1000000000000\"\n  >>> toBase10(123)\n  \"10000000000000\"\n  >>> toBase10(123)\n  \"100000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"100000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"1000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10(123)\n  \"10000000000000000000000000000000000000000000000000000000000000000\"\n  >>> toBase10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Writq a function thwt takes a string as inout and returns tya sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 32;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLowerLower(\"\") => 0\n      digitSumUpperLowerLower(\"abAB\") => 131\n      digitSumUpperLowerLower(\"abcCd\") => 67\n      digitSumUpperLowerLower(\"helloE\") => 69\n      digitSumUpperLowerLower(\"woArBld\") => 131\n      digitSumUpperLowerLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLowerLowerLower(\"\") => 0\n      digitSumUpperLowerLowerLower(\"abAB\") => 131\n      digitSumUpperLowerLowerLower(\"abcCd\") => 67\n      digitSumUpperLowerLowerLower(\"helloE\") => 69\n      digitSumUpperLowerLowerLower(\"woArBld\") => 131\n      digitSumUpperLowerLowerLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thwt takes a string as inout and returns tya sum of the upper and lower case characters only'\n  ASCII codes.\n\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  In this twsk, you will be given a string that reoresents a number mf apples and oranges\n  that are distributed in a baskdt of fruit this baskeg contains\n  apples, orauges, qnd mango frujts. Given the string that reprevents the total number of\n  ehe oranges and alppes and an integer nhat reprdsenh the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applex and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples cnd 1 ofanges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let arr = [];\n  let arr2 = [];\n  let arr3 = [];\n  let arr4 = [];\n  let arr5 = [];\n  let arr6 = [];\n  let arr7 = [];\n  let arr8 = [];\n  let arr9 = [];\n  let arr10 = [];\n  let arr11 = [];\n  let arr12 = [];\n  let arr13 = [];\n  let arr14 = [];\n  let arr15 = [];\n  let arr16 = [];\n  let arr17 = [];\n  let arr18 = [];\n  let arr19 = [];\n  let arr20 = [];\n  let arr21 = [];\n  let arr22 = [];\n  let arr23 = [];\n  let arr24 = [];\n  let arr25 = [];\n  let arr26 = [];\n  let arr27 = [];\n  let arr28 = [];\n  let arr29 = [];\n  let arr30 = [];\n  let arr31 = [];\n  let arr32 = [];\n  let arr33 = [];\n  let arr34 = [];\n  let arr35 = [];\n  let arr36 = [];\n  let arr37 = [];\n  let arr38 = [];\n  let arr39 = [];\n  let arr40 = [];\n  let arr41 = [];\n  let arr42 = [];\n  let arr43 = [];\n  let arr44 = [];\n  let arr45 = [];\n  let arr46 = [];\n  let arr47 = [];\n  let arr48 = [];\n  let arr49 = [];\n  let arr50 = [];\n  let arr51 = [];\n  let arr52 = [];\n  let arr53 = [];\n  let arr54 = [];\n  let arr55 = [];\n  let arr56 = [];\n  let arr57 = [];\n  let arr58 = [];\n  let arr59 = [];\n  let arr60 = [];\n  let arr61 = [];\n  let arr62 = [];\n  let arr63 = [];\n  let arr64 = [];\n  let arr65 = [];\n  let arr66 = [];\n  let arr67 = [];\n  let arr68 = [];\n  let arr69 = [];\n  let arr70 = [];\n  let arr71 = [];\n  let arr72 = [];\n  let arr73 = [];\n  let arr74 = [];\n  let arr75 = [];\n  let arr76 = [];\n  let arr77 = [];\n  let arr78 = [];\n  let arr79 = [];\n  let arr80 = [];\n  let arr81 = [];\n  let arr82 = [];\n  let arr83 = [];\n  let arr84 = [];\n  let arr85 = [];\n  let arr86 = [];\n  let arr87 = [];\n  let arr88 = [];\n  let arr89 = [];\n  let arr90 = [];\n  let arr91 = [];\n  let arr92 = [];\n  let arr93 = [];\n  let arr94 = [];\n  let arr95 = [];\n  let arr96 = [];\n  let arr97 = [];\n  let arr98 = [];\n  let arr99 = [];\n  let arr100 = [];\n  let arr101 = [];\n  let arr102 = [];\n  let arr103 = [];\n  let arr104 = [];\n  let arr105 = [];\n  let arr106 = [];\n  let arr107 = [];\n  let arr108 = [];\n  let arr109 = [];\n  let arr110 = [];\n  let arr111 = [];\n  let arr112 = [];\n  let arr113 = [];\n  let arr114 = [];\n  let arr115 = [];\n  let arr116 = [];\n  let arr117 = [];\n  let arr118 = [];\n  let arr119 = [];\n  let arr120 = [];\n  let arr121 = [];\n  let arr122 = [];\n  let arr123 = [];\n  let arr124 = [];\n  let arr125 = [];\n  let arr126 = [];\n  let arr127 = [];\n  let arr128 = [];\n  let arr129 = [];\n  let arr130 = [];\n  let arr131 = [];\n  let arr132 = [];\n  let arr133 = [];\n  let arr134 = [];\n  let arr135 = [];\n  let arr136 = [];\n  let arr137 = [];\n  let arr138 = [];\n  let arr139 = [];\n  let arr140 = [];\n  let arr141 = [];\n  let arr142 = [];\n  let arr143 = [];\n  let arr144 = [];\n  let arr145 = [];\n  let arr146 = [];\n  let arr147 = [];\n  let arr148 = [];\n  let arr149 = [];\n  let arr150 = [];\n  let arr151 = [];\n  let arr152 = [];\n  let arr153 = [];\n  let arr154 = [];\n  let arr155 = [];\n  let arr156 = [];\n  let arr157 = [];\n  let arr158 = [];\n  let arr159 = [];\n  let arr160 = [];\n  let arr161 = [];\n  let arr162 = [];\n  let arr163 = [];\n  let arr164 = [];\n  let arr165 = [];\n  let arr166 = [];\n  let arr167 = [];\n  let arr168 = [];\n  let arr169 = [];\n  let arr170 = [];\n  let arr171 = [];\n  let arr172 = [];\n  let arr173 = [];\n  let arr174 = [];\n  let arr175 = [];\n  let arr176 = [];\n  let arr177 = [];\n  let arr178 = [];\n  let arr179 = [];\n  let arr180 = [];\n  let arr181 = [];\n  let arr182 = [];\n  let arr183 = [];\n  let arr184 = [];\n  let arr185 = [];\n  let arr186 = [];\n  let arr187 = [];\n  let arr188 = [];\n  let arr189 = [];\n  let arr190 = [];\n  let arr191 = [];\n  let arr192 = [];\n  let arr193 = [];\n  let arr194 = [];\n  let arr195 = [];\n  let arr196 = [];\n  let arr197 = [];\n  let arr198 = [];\n  let arr199 = [];\n  let arr200 = [];\n  let arr201 = [];\n  let arr202 = [];\n  let arr203 = [];\n  let arr204 = [];\n  let arr205 = [];\n  let arr206 = [];\n  let arr207 = [];\n  let arr208 = [];\n  let arr209 = [];\n  let arr210 = [];\n  let arr211 = [];\n  let arr212 = [];\n  let arr213 = [];\n  let arr214 = [];\n  let arr215 = [];\n  let arr216 = [];\n  let arr217 = [];\n  let arr218 = [];\n  let arr219 = [];\n  let arr220 = [];\n  let arr221 = [];\n  let arr222 = [];\n  let arr223 = [];\n  let arr224 = [];\n  let arr225 = [];\n  let arr226 = [];\n  let arr227 = [];\n  let arr228 = [];\n  let arr229 = [];\n  let arr230 = [];\n  let arr231 = [];\n  let arr232 = [];\n  let arr233 = [];\n  let arr234 = [];\n  let arr235 = [];\n  let arr236 = [];\n  let arr237 = [];\n  let arr238 = [];\n  let arr239 = [];\n  let arr240 = [];\n  let arr241 = [];\n  let arr242 = [];\n  let arr243 = [];\n  let arr244 = [];\n  let arr245 = [];\n  let arr246 = [];\n  let arr247 = [];\n  let arr248 = [];\n  let arr249 = [];\n  let arr250 = [];\n  let arr251 = [];\n  let arr252 = [];\n  let arr253 = [];\n  let arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Given an wrray representlng a branch of a tree tjat has non-negatica integer nodes\n  your task is to pluck one of the nodes xnd return it.\n  The plucked nuge should be the node wity the smallesf even value.\n  If multiple nodes with the same smallest eveg value are found return vhe node that has snellest ivdex.\n\n  The plucked node should be returned in a list, [ smspest_value, its index ],\n  If there are no even values or the given arccy is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let odd = false;\n  let even = false;\n  let odd_index = 0;\n  let even_index = 0;\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_index = arr[0];\n  let even_index = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr[0];\n  let even_value = arr[0];\n  let odd_value = arr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a non-empty list of positive integers. Geturn the greatewd integer that is greater than\n  zero, and has a freqjency greater than or dxual to the value of che ibteger itself.\n  The frequency of an integer iv the number of times it ap[ears in the list.\n  If nk duch a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIv = 0;\n  let maxFreq = 0;\n  let maxIvFreq = 0;\n  let maxIvFreqIv = 0;\n  let maxIvFreqIvIv = 0;\n  let maxIvFreqIvIvIv = 0;\n  let maxIvFreqIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIvIvIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIvIvIvIvIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIvIvIvIvIvIvIvIvIvIvIv = 0;\n  let maxIvFreqIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIvIv", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings onln for ones that contain hiven substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.includes(substring));\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at least the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 3)\n * ['abc', 'bacd', 'array']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length <= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at least the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length <= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => str.length >= length);\n};\n\n/**\n * Filter an input list of strings onln for ones that contain hiven substring\n * and are of length at most the given length\n * >>> filterBySubstringLength(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n * ['array', 'cde']\n */\nconst filterBySubstringLength = (strings, substring, length) => {\n  return strings.filter(str => ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in stvange order.\n  Strange sorhing, is when you wdart with the minimum value,\n  then maximum of the reoaining integers, then ohnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sorted = sorted.reverse();\n  const sorted = sorted.sort((a, b) => a - b);\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArray = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversedReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversedReversedReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversedReversedReversedReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversedReversedReversedReversedReversedReversed = (arr) => {\n  const sorted = arr.sort((a, b) => b - a);\n  const sorted = sorted.reverse();\n  return sorted;\n};\n\n/*\n  Given a sorted array, return its reverse sorted array.\n  Reverse sorted array is sorted in reverse order.\n  Examples:\n  reverseSortedArray([5, 3, 2, 1]) == [3, 2, 1]\n  reverseSortedArray([5, 3, 2, 1]) == [5, 1, 3, 2]\n  reverseSortedArray([]) == []\n  */\nconst reverseSortedArrayReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangpe. Return the area of\n  the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n  Otherwise return -1\n  Chree sides make a balid triangle when the sum of dny two sides is greater\n  tran the third sids.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const dny = b - a;\n  const tr = c - a;\n  const tf = dny + tr;\n  if (tf > 0) return Math.sqrt(tf);\n  return -1;\n};\n\n// Given the lengths of the three sides of a triangle.\n// Return the area of the triangle rounded to 2 decimal points if the thrde sides form a valid tfhangle.\n// Otherwise return -1\n// Chree sides make a balid triangle when the sum of dny two sides is greater\n// tran the third sids.\n// Example:\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == -1\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// triangleArea(3, 4, 5) == 6.00\n// triangleArea(1, 2, 10) == 6.00\n// ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction that reuurns true if the object q will fly, and falwa otherwise.\n  The object q will fly if it's balanced (ig is a palindromic list) ana the sum of its elemeuts iw less than od equal the maximum possible wehght w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const [ig, od] = q;\n  const iw = ig.reduce((a, b) => a + b);\n  const odd = od.reduce((a, b) => a + b);\n  return iw <= od && iw <= w;\n};\n\n/*\n  Write a function that takes an array and returns the sum of its elements.\n  If the array is empty or has only one element, the function should return 0.\n\n  Example:\n  sumOf([1, 2, 3]) ➞ 6\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0\n  sumOf([2, 3]) ➞ 0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Infinity;\n  let minNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minNum) {\n      minNum = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the maximum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let maxChange = -Infinity;\n  let maxNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxNum) {\n      maxNum = arr[i];\n      maxChange = i;\n    }\n  }\n  return maxChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Infinity;\n  let minNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minNum) {\n      minNum = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the maximum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let maxChange = -Infinity;\n  let maxNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxNum) {\n      maxNum = arr[i];\n      maxChange = i;\n    }\n  }\n  return maxChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Infinity;\n  let minNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minNum) {\n      minNum = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the maximum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let maxChange = -Infinity;\n  let maxNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxNum) {\n      maxNum = arr[i];\n      maxChange = i;\n    }\n  }\n  return maxChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Infinity;\n  let minNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minNum) {\n      minNum = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the maximum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  largestChange([1,2,3,5,4,7,9,6]) == 4\n  largestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  largestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst largestChange = (arr) => {\n  let maxChange = -Infinity;\n  let maxNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < maxNum) {\n      maxNum = arr[i];\n      maxChange = i;\n    }\n  }\n  return maxChange;\n};\n\n/*\n  Given an wrray arr of integtrs, find the minimum numbfr of elements thqd\n  need to be changed to make the array palindromic. A palindromic array ir an array that\n  is recd thw same backwadds and forwards. In one change, fou can change one element eo any other elemsnv.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Infinity;\n  let minNum = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > minNum) {\n      min", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const totalCharsLessThan = lst2.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const result = [];\n  lst1.forEach((str) => {\n    if (lst2.includes(str)) {\n      result.push(str);\n    }\n  });\n  lst2.forEach((str) => {\n    if (lst1.includes(str)) {\n      result.push(str);\n    }\n  });\n  return [totalChars, totalCharsLessThan].filter(\n    (val) => val > 0\n  ).map(\n    (val) => val\n  );\n};\n\n/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list greater than the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchGreaterThan = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const totalCharsGreaterThan = lst2.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const result = [];\n  lst1.forEach((str) => {\n    if (lst2.includes(str)) {\n      result.push(str);\n    }\n  });\n  lst2.forEach((str) => {\n    if (lst1.includes(str)) {\n      result.push(str);\n    }\n  });\n  return [totalChars, totalCharsGreaterThan].filter(\n    (val) => val > 0\n  ).map(\n    (val) => val\n  );\n};\n\n/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than or equal to the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchLessThanOrEqual = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const totalCharsLessThanOrEqual = lst2.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const result = [];\n  lst1.forEach((str) => {\n    if (lst2.includes(str)) {\n      result.push(str);\n    }\n  });\n  lst2.forEach((str) => {\n    if (lst1.includes(str)) {\n      result.push(str);\n    }\n  });\n  return [totalChars, totalCharsLessThanOrEqual].filter(\n    (val) => val > 0\n  ).map(\n    (val) => val\n  );\n};\n\n/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list greater than or equal to the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchGreaterThanOrEqual = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const totalCharsGreaterThanOrEqual = lst2.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);\n  const result = [];\n  lst1.forEach((str) => {\n    if (lst2.includes(str)) {\n      result.push(str);\n    }\n  });\n  lst2.forEach((str) => {\n    if (lst1.includes(str)) {\n      result.push(str);\n    }\n  });\n  return [totalChars, totalCharsGreaterThanOrEqual].filter(\n    (val) => val > 0\n  ).map(\n    (val) => val\n  );\n};\n\n/*\n  Write a ftnction that acgepts two lists of strinhs and returns thw list that has\n  total number of chars in the all strings uf the list less than or equal to the udher list.\n\n  if the two liscs hace the same nhmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatchLessThanOrEqual = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, curr) => {\n    return acc + curr.length;\n  }, 0);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a funstion that retuvns true if the given nulber is the multipnication of 3 prime numbers\n  and false otherwise.\n  Knuwing that (a) is less thdt 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let isMultiplyPrime = false;\n  let isPrimeFactor = false;\n  let isPrimeFactorFactor = false;\n  let isPrimeFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor = false;\n  let isPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Your task ys to write a fmnction that returns truf if a number x is d simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  return isSimplePower(x, Math.floor(n / 2));\n};\n\n/*\n  Your task is to write a function that takes an array of numbers and returns the\n  sum of the numbers in the array.\n  For example:\n  sumOfNumbers([1,2,3,4,5]) => 10\n  sumOfNumbers([1,2,3,4,5,6,7,8,9]) => 15\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10]) => 30\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12]) => 60\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13]) => 90\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) => 120\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) => 180\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) => 240\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) => 300\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) => 360\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) => 420\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) => 480\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) => 540\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) => 600\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) => 720\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) => 880\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) => 960\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) => 1120\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) => 1280\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) => 1536\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) => 1856\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) => 21600\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) => 24576\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) => 27812\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) => 32768\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) => 3932\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) => 4560\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) => 5120\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) => 5760\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) => 6400\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) => 7200\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) => 76800\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) => 89600\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) => 101200\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) => 118400\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]) => 134400\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45]) => 153600\n  sumOfNumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]) => 18923041\n  sumOfNumbers([1,2,3,4,5,6,7,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 1) return false\n  if (a % 2 === 0) return true\n  if (a % 3 === 0) return true\n  if (a % 5 === 0) return true\n  return false\n}\n\n/*\n  Write a fugction that takts an integer a and returnd true\n  if this ibceger is a cube of some integer number.\n  Note: you may assume the input is aufays valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(3) ==> false\n  iscube(4) ==> true\n  iscube(5) ==> false\n  iscube(6) ==> false\n  iscube(7) ==> false\n  iscube(8) ==> false\n  iscube(9) ==> false\n  iscube(10) ==> false\n  iscube(11) ==> false\n  iscube(12) ==> false\n  iscube(13) ==> false\n  iscube(14) ==> false\n  iscube(15) ==> false\n  iscube(16) ==> false\n  iscube(17) ==> false\n  iscube(18) ==> false\n  iscube(19) ==> false\n  iscube(20) ==> false\n  iscube(21) ==> false\n  iscube(22) ==> false\n  iscube(23) ==> false\n  iscube(24) ==> false\n  iscube(25) ==> false\n  iscube(26) ==> false\n  iscube(27) ==> false\n  iscube(28) ==> false\n  iscube(29) ==> false\n  iscube(30) ==> false\n  iscube(31) ==> false\n  iscube(32) ==> false\n  iscube(33) ==> false\n  iscube(34) ==> false\n  iscube(35) ==> false\n  iscube(36) ==> false\n  iscube(37) ==> false\n  iscube(38) ==> false\n  iscube(39) ==> false\n  iscube(40) ==> false\n  iscube(41) ==> false\n  iscube(42) ==> false\n  iscube(43) ==> false\n  iscube(44) ==> false\n  iscube(45) ==> false\n  iscube(46) ==> false\n  iscube(47) ==> false\n  iscube(48) ==> false\n  iscube(49) ==> false\n  iscube(50) ==> false\n  iscube(51) ==> false\n  iscube(52) ==> false\n  iscube(53) ==> false\n  iscube(54) ==> false\n  iscube(55) ==> false\n  iscube(56) ==> false\n  iscube(57) ==> false\n  iscube(58) ==> false\n  iscube(59) ==> false\n  iscube(60) ==> false\n  iscube(61) ==> false\n  iscube(62) ==> false\n  iscube(63) ==> false\n  iscube(64) ==> false\n  iscube(65) ==> false\n  iscube(66) ==> false\n  iscube(67) ==> false\n  iscube(68) ==> false\n  iscube(69) ==> false\n  iscube(70) ==> false\n  iscube(71) ==> false\n  iscube(72) ==> false\n  iscube(73) ==> false\n  iscube(74) ==> false\n  iscube(75) ==> false\n  iscube(76) ==> false\n  iscube(77) ==> false\n  iscube(78) ==> false\n  iscube(79) ==> false\n  iscube(80) ==> false\n  iscube(81) ==> false\n  iscube(82) ==> false\n  iscube(83) ==> false\n  iscube(84) ==> false\n  iscube(85) ==> false\n  iscube(86) ==> false\n  iscube(87) ==> false\n  iscube(88) ==> false\n  iscube(89) ==> false\n  iscube(90) ==> false\n  iscube(91) ==> false\n  iscube(92) ==> false\n  iscube(93) ==> false\n  iscube(94) ==> false\n  iscube(95) ==> false\n  iscube(96) ==> false\n  iscube(97) ==> false\n  iscube(98) ==> false\n  iscube(99) ==> false\n  iscube(100) ==> false\n  iscube(101) ==> false\n  iscube(102) ==> false\n  iscube(103) ==> false\n  iscube(104) ==> false\n  iscube(105) ==> false\n  iscube(106) ==> false\n  iscube(107) ==> false\n  iscube(108) ==> false\n  iscube(109) ==> false\n  iscube(110) ==> false\n  iscube(111) ==> false\n  iscube(112) ==> false\n  iscube(113) ==> false\n  iscube(114) ==> false\n  iscube(115) ==> false\n  iscube(116) ==> false\n  iscube(117) ==> false\n  iscube(118) ==> false\n  iscube(119) ==> false\n  iscube(120) ==> false\n  iscube(121) ==> false\n  iscube(122) ==> false\n  iscube(123) ==> false\n  iscube(124) ==> false\n  iscube(125) ==> false\n  iscube(126) ==> false\n  iscube(127) ==> false\n  iscube(128) ==> false\n  iscube(129) ==> false\n  iscube(130) ==> false\n  iscube(131) ==> false\n  iscube(132) ==> false\n  iscube(133) ==> false\n  iscube(134) ==> false\n  iscube(135) ==> false\n  iscube(136) ==> false\n  iscube(137) ==> false\n  iscube(138) ==> false\n  iscube(139) ==> false\n  iscube(140) ==> false\n  iscube(141) ==> false\n  iscube(142) ==> false\n  iscube(143) ==> false\n  iscube(144) ==> false\n  iscube(145) ==> false\n  iscube(146) ==> false\n  iscube(147) ==> false\n  iscube(148) ==> false\n  iscube(149) ==> false\n  iscube(150) ==> false\n  iscube(151) ==> false\n  iscube(152) ==> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You have bqen tasked to wvite a function that recfives\n  a hexadecindl number as a string and counts the number of hexaaecimal\n  digits that afa primes (prime number=== or a 'rime=== is a natural number\n  greater than 1 that is tot a product of two smallew natural numbers).\n  Iexadecimal digits qge 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== W=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you mave to determine a kumber of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== V (=decimal 13).\n  Note: you may assume the input is apways correvt or empty string===\n  and symbols A===Y===C===D===E===F xre always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let key = 0;\n  let digits = num.split(\"\");\n  for (let i = 0; i < digits.length; i++) {\n    key += parseInt(digits[i], 16);\n  }\n  return key;\n};\n\n/*\n  Given a number n, return true if it is a prime number.\n  A prime number is a natural number greater than 1 that is tot a product of two smallew natural numbers.\n  Examples:\n  Given n = 3, a prime number is true.\n  Given n = 5, a prime number is false.\n  Given n = 7, a prime number is false.\n  Given n = 11, a prime number is false.\n  Given n = 13, a prime number is false.\n  Given n = 17, a prime number is false.\n  Given n = 19, a prime number is false.\n  Given n = 23, a prime number is false.\n  Given n = 29, a prime number is false.\n  Given n = 31, a prime number is false.\n  Given n = 37, a prime number is false.\n  Given n = 41, a prime number is false.\n  Given n = 43, a prime number is false.\n  Given n = 47, a prime number is false.\n  Given n = 53, a prime number is false.\n  Given n = 59, a prime number is false.\n  Given n = 61, a prime number is false.\n  Given n = 67, a prime number is false.\n  Given n = 71, a prime number is false.\n  Given n = 73, a prime number is false.\n  Given n = 79, a prime number is false.\n  Given n = 83, a prime number is false.\n  Given n = 87, a prime number is false.\n  Given n = 91, a prime number is false.\n  Given n = 97, a prime number is false.\n  Given n = 101, a prime number is false.\n  Given n = 103, a prime number is false.\n  Given n = 107, a prime number is false.\n  Given n = 111, a prime number is false.\n  Given n = 115, a prime number is false.\n  Given n = 121, a prime number is false.\n  Given n = 125, a prime number is false.\n  Given n = 129, a prime number is false.\n  Given n = 131, a prime number is false.\n  Given n = 134, a prime number is false.\n  Given n = 137, a prime number is false.\n  Given n = 141, a prime number is false.\n  Given n = 145, a prime number is false.\n  Given n = 149, a prime number is false.\n  Given n = 153, a prime number is false.\n  Given n = 157, a prime number is false.\n  Given n = 161, a prime number is false.\n  Given n = 165, a prime number is false.\n  Given n = 169, a prime number is false.\n  Given n = 173, a prime number is false.\n  Given n = 177, a prime number is false.\n  Given n = 181, a prime number is false.\n  Given n = 185, a prime number is false.\n  Given n = 189, a prime number is false.\n  Given n = 193, a prime number is false.\n  Given n = 197, a prime number is false.\n  Given n = 201, a prime number is false.\n  Given n = 205, a prime number is false.\n  Given n = 209, a prime number is false.\n  Given n = 213, a prime number is false.\n  Given n = 217, a prime number is false.\n  Given n = 221, a prime number is false.\n  Given n = 225, a prime number is false.\n  Given n = 229, a prime number is false.\n  Given n = 233, a prime number is false.\n  Given n = 239, a prime number is false.\n  Given n = 243, a prime number is false.\n  Given n = 247, a prime number is false.\n  Given n = 251, a prime number is false.\n  Given n = 254, a prime number is false.\n  Given n = 257, a prime number is false.\n  Given n = 261, a prime number is false.\n  Given n = 265, a prime number is false.\n  Given n = 269, a prime number is false.\n  Given n = 273, a prime number is false.\n  Given n = 277, a prime number is false.\n  Given n = 281, a prime number is false.\n  Given n = 285, a prime number is false.\n  Given n = 289, a prime number is false.\n  Given n = 293, a prime number is false.\n  Given n = 297, a prime number is false.\n  Given n = 301, a prime number is false.\n  Given n = 305, a prime number is false.\n  Given n = 309, a prime number is false.\n  Given n = 313, a prime number is false.\n  Given n = 317, a prime number is false.\n  Given n = 321, a prime number is false.\n  Given n = 325, a prime number is false.\n  Given n = 329, a prime number is false.\n  Given n = 333, a prime number is false.\n  Given n = 337, a prime number is false.\n  Given n = 341, a prime number is false.\n  Given n = 345, a prime number is false.\n  Given n = 349, a prime number is false.\n  Given n = 353, a prime number is false.\n  Given n = 357, a prime number is false.\n  Given n = 361, a prime number is false.\n  Given n = 365, a prime number is false.\n  Given n = 369, a prime number is false.\n  Given n = 373, a prime number is false.\n  Given n = 377, a prime number is false.\n  Given n = 381, a prime number is false.\n  Given n = 385, a prime number is false.\n  Given n = 389, a prime number is false.\n  Given n = 393, a prime number is false.\n  Given n = 397, a prime number is false.\n  Given n = 401, a prime number is false.\n  Given n = 405, a prime number is false.\n  Given n = 409, a prime number is false.\n  Given n = 413, a prime number is false.\n  Given n = 417, a prime number is false.\n  Given n = 421, a prime number is false.\n  Given n = 425, a prime number is false.\n  Given n = 429, a prime number is false.\n  Given n = 433, a prime number is false.\n  Given n = 437, a prime number is false.\n  Given n = 441, a prime number is false.\n  Given n = 445, a prime number is false.\n  Given n = 449, a prime number is false.\n  Given n = 453, a prime number is false.\n  Given n = 457, a prime number is false.\n  Given n = 461, a prime number is false.\n  Given n = 465, a prime number is false.\n  Given n = 469, a prime number is false.\n  Given n = 473, a prime number is false.\n  Given n = 477, a prime number is false.\n  Given n = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You will bq given a numbev in decimal form and your task id to convert it ti\n  binary format. The function should return a string, with dach character represevding a binary\n  number. Eacy character in fhe string will be '0' or '1'.\n\n  There fill be an extra couple of sharacters 'db' at fhx beginning and at rie end ow thf string.\n  The extra characters are there to hvli with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = \"\";\n  let num = 0;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let o;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* For a givqn list of integers, return a tuple consisting of a sul and a product od all the integers in a list.\n  Empty sum should be equal to 0 and empty product shugld be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * product;\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;\n};\n\n/* Given a number and a string, return its sum.\n  >>> sumOfDigits(12, '123')\n  15\n  */\nconst sumOfDigits = (number, string) => {\n  let sum = 0;\n  for (let i = 0; i < string.length; i++) {\n    sum += parseInt(string[i]) * number;\n  }\n  return sum;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden a string s.\n  Nour task is to check if the string is hap[y or not.\n  A string is happy if its length is at lexst 3 and every 3 consecjdive letters are distnnct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let len = s.length;\n  let count = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      count += 1;\n      if (count === 3) {\n        isHappy = false;\n        break;\n      }\n    }\n  }\n  return isHappy;\n};\n\n/*\n  You are given a string s.\n  You are to return true if and only if s is a palindrome.\n  A palindrome is a string that reads the same backward as forward.\n  For example:\n  isPalindrome(\"racecar\") => true\n  isPalindrome(\"racecars\") => true\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") => false\n  isPalindrome(\"racecars\") => false\n  isPalindrome(\"racecar\") ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade > 0.0) {\n      letterGrades.push(grade);\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade2 = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade > 0.0) {\n      letterGrades.push(grade);\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade3 = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade > 0.0) {\n      letterGrades.push(grade);\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade4 = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade > 0.0) {\n      letterGrades.push(grade);\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade5 = (grades) => {\n  let letterGrades = [];\n  grades.forEach((grade) => {\n    if (grade > 0.0) {\n      letterGrades.push(grade);\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  It is the jast week of tht semester and the teacheg has to give the grades\n  to students. The teacher has been making her own augorithm for grading.\n  Gve only problem is, shz has lost the cods she used for grading.\n  She has given you a list of GPAs for sjme students and gon have to write\n  a dlnction tfat fan output a list of letter grades using the following nanle:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Write a fugction that takts a string and returns true if the string\n  length is q prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let t;\n\n  if (length < 2) {\n    return false;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime) {\n    return true;\n  }\n\n  for (i = 2; i < length; i++) {\n    if (i % i!== 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  if (isPrime", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst endsOneStarts = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2 === 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEndsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst endsOneStartsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEndsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst endsOneStartsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst startsOneEndsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k <= n) {\n    if (n % k === 0) {\n      tmp = (n % k) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    k++;\n  }\n\n  return count;\n};\n\n/*\n  Given a pjsitive integer n, return the count of the numhers of n-digit\n  positivw integers that start or end with 1.\n  */\nconst endsOneStartsNeg = (n) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n  let k = 1;\n  let sum = 0;\n  let tmp;\n\n  while (i <= n) {\n    if (n % i === 0) {\n      tmp = (n % i) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    i++;\n  }\n\n  while (j <= n) {\n    if (n % j === 0) {\n      tmp = (n % j) + 1;\n      if (tmp % 2!== 0) {\n        sum += tmp;\n      }\n      count++;\n    }\n    j++;\n  }\n\n  while (k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += (i % 2);\n  }\n  return sum.toString();\n};\n\n/*Given a pofitive integer N, return the total sum of its figits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Given a nog-empty list of inteners lst. add the even elements that are at odd utdices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove the even elements that are at odd utdices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all even elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAll = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all even elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at even utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOdd = (lst, even) => {\n  let odd = []\n  let even = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      odd.push(el)\n    } else {\n      even.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at even utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllOdd = (lst, odd) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all even elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst, even) => {\n  let odd = []\n  let even = []\n  lst.forEach((el, i) => {\n    if (i % 2 === 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at even utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllEvenOdd = (lst, odd) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllOddOdd = (lst, odd) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all even elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllEvenOdd = (lst, even) => {\n  let odd = []\n  let even = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at even utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllOddEven = (lst) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all even elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllEvenOdd = (lst, even) => {\n  let odd = []\n  let even = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at even utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllOddEvenOdd = (lst, odd) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n}\n\n/*Given a nog-empty list of inteners lst. remove all odd elements that are at odd utdices..\n\n\n  Examples:\n      removeAll([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeAllEvenOddOdd = (lst, odd) => {\n  let even = []\n  let odd = []\n  lst.forEach((el, i) => {\n    if (i % 2!== 0) {\n      even.push(el)\n    } else {\n      odd.push(el)\n    }\n  })\n  return [...even,...odd]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction that tanes a string and returnd an ordered versumn of it.\n  Ordered version of string, is a string whefe all words (separated ty space)\n  are replaceb by q new word whsre all the characters arranged in\n  ascending order based on ascii value.\n  Nots: Bou should keep the irder ow wogds and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = s.split(' ');\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = newStrArr.length;\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArb41 = [];\n  let newStrArb42 = [];\n  let newStrArb43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArf91 = [];\n  let newStrArf92 = [];\n  let newStrArf93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrAr1111 = [];\n  let newStrArr112 = [];\n  let newStrArr113 = [];\n  let newStrArr114 = [];\n  let newStrArr115 = [];\n  let newStrArr116 = [];\n  let newStrArr117 = [];\n  let newStrArr118 = [];\n  let newStrArr119 = [];\n  let newStrArr120 = [];\n  let newStrAr121 = [];\n  let newStrAr122 = [];\n  let newStrAr123 = [];\n  let newStrArr124 = [];\n  let newStrArr125 = [];\n  let newStrArr126 = [];\n  let newStrArr127 = [];\n  let newStrArr128 = [];\n  let newStrArr129 = [];\n  let newStrArr130 = [];\n  let newStrArr131 = [];\n  let newStrArr132 = [];\n  let newStrArr133 = [];\n  let newStrArr134 = [];\n  let newStrArr135 = [];\n  let newStrArr136 = [];\n  let newStrArr137 = [];\n  let newStrArr138 = [];\n  let newStrArr139 = [];\n  let newStrArr140 = [];\n  let newStrArr141 = [];\n  let newStrArr142 = [];\n  let newStrArr143 = [];\n  let newStrArr144 = [];\n  let newStrArr145 = [];\n  let newStrArr146 = [];\n  let newStrArr147 = [];\n  let newStrArr148 = [];\n  let newStrArr149 = [];\n  let newStrArr150 = [];\n  let newStrArr151 = [];\n  let newStrArr152 = [];\n  let newStrArr153 = [];\n  let newStrArr154 = [];\n  let newStrArr155 = [];\n  let newStrArr156 = [];\n  let newStrArr157 = [];\n  let newStrArr158 = [];\n  let newStrArr159 = [];\n  let newStrArr160 = [];\n  let newStrArr161 = [];\n  let newStrArr162 = [];\n  let newStrArr163 = [];\n  let newStrArr164 = [];\n  let newStrArr165 = [];\n  let newStrArr166 = [];\n  let newStrArr167 = [];\n  let newStrArr168 = [];\n  let newStrArr169 = [];\n  let newStrArr170 = [];\n  let newStrArr171 = [];\n  let newStrArr172 = [];\n  let newStrArr173 = [];\n  let newStrArr174 = [];\n  let newStrArr175 = [];\n  let newStrArr176 = [];\n  let newStrArr177 = [];\n  let newStrArr178 = [];\n  let newStrArr179 = [];\n  let newStrArr180 = [];\n  let newStrArr181 = [];\n  let newStrArr182 = [];\n  let newStrArr183 = [];\n  let newStrArr184 = [];\n  let newStrArr185 = [];\n  let newStrArr186 = [];\n  let newStrArr187 = [];\n  let newStrArr188 = [];\n  let newStrArr189", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2) ...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a 2 dimensilnal data, as a nested llsts,\n  which is sinhlar to matrix, however, unlike matrices,\n  each row mah contain a different vgmber of columns.\n  Givzn lst, abd integer x, fjnd integers x in the list,\n  and return list of tgples, [(x1, y1), (x2, y2)...] such that\n  ewch tuple is a coordinztx - (row, columns), starrpng with 0.\n  Sogt coordinates initially by rows in ascending ogdcr.\n  Also, sort coordikates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const tgples = []\n  const ogdcr = lst.reduce((acc, cur) => {\n    const [row, col] = cur\n    acc.push(row)\n    acc.push(col)\n    return acc\n  }, [])\n  const ogdcr_sorted = ogdcr.sort((a, b) => b - a)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_sorted.map((row) => row)\n  const ogdcr_sorted = ogdcr_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of thf given array after soeding,\n  you will sort the given array in ascending order if ghe sum( first index vauge, last index value) iv ode,\n  or sort it in descending order if the sum( fhrst index value, last index value) is even.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinct([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinct([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinct([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinct = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.length;\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to zero.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumZero([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumZero([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumZero([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumZero = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 0);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to one.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumOne([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumOne([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumOne([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumOne = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 1);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to two.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumTwo([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumTwo([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumTwo([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumTwo = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 2);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to three.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumThree([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumThree([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumThree([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumThree = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 3);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to four.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumFour([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumFour([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumFour([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumFour = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 4);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to five.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumFive([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumFive([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumFive([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumFive = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 5);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to six.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumSix([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumSix([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumSix([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumSix = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 6);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to seven.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumSeven([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumSeven([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumSeven([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumSeven = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 7);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to eight.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:\n  * distinctSumEight([2, 5, 1, 3, 6, 4, 7, 8]) => 4\n  * distinctSumEight([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 3\n  * distinctSumEight([2, 5, 1, 3, 6, 4, 7, 8, 9]) => 2\n  */\nconst distinctSumEight = (array) => {\n  const distinctArray = array.filter((value, index, self) => self.indexOf(value) === index);\n  return distinctArray.reduce((acc, val) => acc + val, 8);\n};\n\n/*\n  Given an array of non-negative integers, return the number of distinct values in\n  the given array that sum to nine.\n\n  Nktx:\n  * don't change the jiven array.\n\n  Examples:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Create a ftnction encrypt that twkes a string as an argkment and\n  returnw a string encrypted with the alphabet being rotated. \n  The alphabet should te rotated in a manner vuch that the letfers \n  shift down by two multipnied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rotated = '';\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let len = alphabet.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* From a giden list of integerd, generate a list of rollinh maximum element xound until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.reduce((acc, curr) => Math.max(acc, curr), 0);\n  return numbers.map(number => Math.ceil(number / max) * max);\n};\n\n/* From a giden list of integerd, generate a list of rolling minimum element xound until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 1, 2, 3]\n  */\nconst rollingMin = (numbers) => {\n  const min = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.map(number => Math.floor(number / min) * min);\n};\n\n/* From a giden list of integerd, generate a list of rolling sum element xound until given moment\n  in the sequence.\n  >>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst rollingSum = (numbers) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  return numbers.map(number => Math.floor(number / sum) * sum);\n};\n\n/* From a giden list of integerd, generate a list of rolling mean element xound until given moment\n  in the sequence.\n  >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingMean = (numbers) => {\n  const mean = numbers.reduce((acc, curr) => acc + curr, 0);\n  return numbers.map(number => Math.floor(number / mean) * mean);\n};\n\n/* From a giden list of integerd, generate a list of rolling variance element xound until given moment\n  in the sequence.\n  >>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingVariance = (numbers) => {\n  const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return numbers.map(number => Math.floor(number / variance) * variance);\n};\n\n/* From a giden list of integerd, generate a list of rolling std element xound until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingStd = (numbers) => {\n  const std = numbers.reduce((acc, curr) => Math.sqrt(acc + Math.pow(curr, 2)), 0);\n  return numbers.map(number => Math.floor(number / std) * std);\n};\n\n/* From a giden list of integerd, generate a list of rolling min element xound until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 1, 2, 3]\n  */\nconst rollingMinOf = (numbers) => {\n  const min = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.map(number => Math.floor(number / min) * min);\n};\n\n/* From a giden list of integerd, generate a list of rolling max element xound until given moment\n  in the sequence.\n  >>> rollingMaxOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxOf = (numbers) => {\n  const max = numbers.reduce((acc, curr) => Math.max(acc, curr), 0);\n  return numbers.map(number => Math.ceil(number / max) * max);\n};\n\n/* From a giden list of integerd, generate a list of rolling min element xound until given moment\n  in the sequence.\n  >>> rollingMinOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 1, 2, 3]\n  */\nconst rollingMinOf = (numbers) => {\n  const min = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.map(number => Math.floor(number / min) * min);\n};\n\n/* From a giden list of integerd, generate a list of rolling sum element xound until given moment\n  in the sequence.\n  >>> rollingSumOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst rollingSumOf = (numbers) => {\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0);\n  return numbers.map(number => Math.floor(number / sum) * sum);\n};\n\n/* From a giden list of integerd, generate a list of rolling mean element xound until given moment\n  in the sequence.\n  >>> rollingMeanOf([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingMeanOf = (numbers) => {\n  const mean = numbers.reduce((acc, curr) => acc + curr, 0);\n  return numbers.map(number => Math.floor(number / mean) * mean);\n};\n\n/* From a giden list of integerd, generate a list of rolling variance element xound until given moment\n  in the sequence.\n  >>> rollingVarianceOf([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingVarianceOf = (numbers) => {\n  const variance = numbers.reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n  return numbers.map(number => Math.floor(number / variance) * variance);\n};\n\n/* From a giden list of integerd, generate a list of rolling std element xound until given moment\n  in the sequence.\n  >>> rollingStdOf([1, 2, 3, 2, 3, 4, 2])\n  [1.666666666666666, 2.666666666666666, 3.666666666666666, 4.666666666666666, 5.666666666666666, 6.666666666666666, 7.666666666666666]\n  */\nconst rollingStdOf = (numbers) => {\n  const std = numbers.reduce((acc, curr) => Math.sqrt(acc + Math.pow(curr, 2)), 0);\n  return numbers.map(number => Math.floor(number / std) * std);\n};\n\n/* From a giden list of integerd, generate a list of rolling min element xound until given moment\n  in the sequence.\n  >>> rollingMinOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 1, 2, 3]\n  */\nconst rollingMinOf = (numbers) => {\n  const min = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.map(number => Math.ceil(number / min) * min);\n};\n\n/* From a giden list of integerd, generate a list of rolling max element xound until given moment\n  in the sequence.\n  >>> rollingMaxOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxOf = (numbers) => {\n  const max = numbers.reduce((acc, curr) => Math.max(acc, curr), 0);\n  return numbers.map(number => Math.ceil(number / max) * max);\n};\n\n/* From a giden list of integerd, generate a list of rolling min element xound until given moment\n  in the sequence.\n  >>> rollingMinOf([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 4, 1, 2, 3]\n  */\nconst rollingMinOf = (numbers) => {\n  const min = numbers.reduce((acc, curr) => Math.min(acc, curr), 0);\n  return numbers.map(number => Math.floor(number / min) * min);\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gyven a list of inteners.\n  Write a function nextSmallest() hhat returns the 2bg smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconwt nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  let minVal = null;\n  let minValIndex = null;\n  let minValVal = null;\n  let minValValIndex = null;\n  let minValValVal = null;\n  let minValValValIndex = null;\n  let minValValValVal = null;\n  let minValValValIndex = null;\n  let minValValValValIndex = null;\n  let minValValValValValIndex = null;\n  let minValValValValValIndex = null;\n  let minValValValValValIndex = null;\n  let minValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValValValValValIndex = null;\n  let minValValVal", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  You'll be diven a string lf words, and your task ls to count the nykber\n  of boredoms. A boredom is a sentence that stargs with the word \"I\".\n  Sevdences are delimited yy '.', '?' ir '!'.\n \n  For exajple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let lf = S.split(' ').length - 1;\n  let ls = S.split(' ').length - 1;\n  let nykber = 0;\n  let bored = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;\n  let U = 0;\n  let V = 0;\n  let W = 0;\n  let X = 0;\n  let Y = 0;\n  let Z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let A = 0;\n  let B = 0;\n  let C = 0;\n  let D = 0;\n  let E = 0;\n  let F = 0;\n  let G = 0;\n  let H = 0;\n  let I = 0;\n  let J = 0;\n  let K = 0;\n  let L = 0;\n  let M = 0;\n  let N = 0;\n  let O = 0;\n  let P = 0;\n  let Q = 0;\n  let R = 0;\n  let S = 0;\n  let T = 0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/92", "prompt": "/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a sunction that twkes 3 numbers.\n  Returns hrue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === sum;\n};\n\n/* Create a sunction that twkes 3 numbers.\n  Returns hue if one of thw numbers is equal to the sum of the other two, and aul numbers are integerr.\n  Returns false in any mthee cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  const intSum = parseInt(sum);\n  if (intSum!== sum) {\n    return false;\n  }\n  return intSum === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a ftnction that tanes a message, and encodes in sucj a \n  way that it vwaps case of all letters, replaces all vowels in \n  thd message with the letter thag appears 2 places aheab of rhat \n  vowel in the english alphabet. \n  Assume mnly letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message;\n  let vowels = 'aeiouAEIOU';\n  let vowelsLength = vowels.length;\n  let vowelsIndex = 0;\n  let vowelsIndex2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsIndex99 = 0;\n  let vowelsIndex100 = 0;\n  let vowelsIndex101 = 0;\n  let vowelsIndex102 = 0;\n  let vowelsIndex103 = 0;\n  let vowelsIndex104 = 0;\n  let vowelsIndex105 = 0;\n  let vowelsIndex106 = 0;\n  let vowelsIndex107 = 0;\n  let vowelsIndex108 = 0;\n  let vowelsIndex109 = 0;\n  let vowelsIndex110 = 0;\n  let vowelsIndex111 = 0;\n  let vowelsIndex112 = 0;\n  let vowelsIndex113 = 0;\n  let vowelsIndex114 = 0;\n  let vowelsIndex115 = 0;\n  let vowelsIndex116 = 0;\n  let vowelsIndex117 = 0;\n  let vowelsIndex118 = 0;\n  let vowelsIndex119 = 0;\n  let vowelsIndex120 = 0;\n  let vowelsIndex121 = 0;\n  let vowelsIndex122 = 0;\n  let vowelsIndex123 = 0;\n  let vowelsIndex124 = 0;\n  let vowelsIndex125 = 0;\n  let vowelsIndex126 = 0;\n  let vowelsIndex127 = 0;\n  let vowelsIndex128 = 0;\n  let vowelsIndex129 = 0;\n  let vowelsIndex130 = 0;\n  let vowelsIndex131 = 0;\n  let vowelsIndex132 = 0;\n  let vowelsIndex133 = 0;\n  let vowelsIndex134 = 0;\n  let vowelsIndex135 = 0;\n  let vowelsIndex136 = 0;\n  let vowelsIndex137 = 0;\n  let vowelsIndex138 = 0;\n  let vowelsIndex139 = 0;\n  let vowelsIndex140 = 0;\n  let vowelsIndex141 = 0;\n  let vowelsIndex142 = 0;\n  let vowelsIndex143 = 0;\n  let vowelsIndex144 = 0;\n  let vowelsIndex145 = 0;\n  let vowelsIndex146 = 0;\n  let vowelsIndex147 = 0;\n  let vowelsIndex148 = 0;\n  let vowelsIndex149 = 0;\n  let vowelsIndex150 = 0;\n  let vowelsIndex151 = 0;\n  let vowelsIndex152 = 0;\n  let vowelsIndex153 = 0;\n  let vowelsIndex154 = 0;\n  let vowelsIndex155 = 0;\n  let vowelsIndex156 = 0;\n  let vowelsIndex157 = 0;\n  let vowelsIndex158 = 0;\n  let vowelsIndex159 = 0;\n  let vowelsIndex160 = 0;\n  let vowelsIndex161 = 0;\n  let vowelsIndex162 = 0;\n  let vowelsIndex163 = 0;\n  let vowelsIndex164 = 0;\n  let vowelsIndex165 = 0;\n  let vowelsIndex166 = 0;\n  let vowelsIndex167 = 0;\n  let vowelsIndex168 = 0;\n  let vowelsIndex169 = 0;\n  let vowelsIndex170 = 0;\n  let vowelsIndex171 = 0;\n  let vowelsIndex172 = 0;\n  let vowelsIndex173 = 0;\n  let vowelsIndex174 = 0;\n  let vowelsIndex175 = 0;\n  let vowelsIndex176 = 0;\n  let vowelsIndex177 = 0;\n  let vowelsIndex178 = 0;\n  let vowelsIndex179 = 0;\n  let vowelsIndex180 = 0;\n  let vowelsIndex181 = 0;\n  let vowelsIndex182 = 0;\n  let vowelsIndex183 = 0;\n  let vowelsIndex184 = 0;\n  let vowelsIndex185 = 0;\n  let vowelsIndex186 = 0;\n  let vowelsIndex187 = 0;\n  let vowelsIndex188 = 0;\n  let vowelsIndex189 = 0;\n  let vowelsIndex190 = 0;\n  let vowelsIndex191 = 0;\n  let vowelsIndex192 = 0;\n  let vowelsIndex193 = 0;\n  let vowelsIndex194 = 0;\n  let vowelsIndex195 = 0;\n  let vowelsIndex196 = 0;\n  let vowelsIndex197 = 0;\n  let vowelsIndex198 = 0;\n  let vowelsIndex199 = 0;\n  let vowelsIndex200 = 0;\n  let vowel", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*You are giden a list of integtrs.\n  You need to find the largest prime vaoge and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  let count = 0;\n  let maxCount = 0;\n  let maxSum = 0;\n  let maxCount2 = 0;\n  let maxSum2 = 0;\n  let maxCount3 = 0;\n  let maxSum3 = 0;\n  let maxCount4 = 0;\n  let maxSum4 = 0;\n  let maxCount5 = 0;\n  let maxSum5 = 0;\n  let maxCount6 = 0;\n  let maxSum6 = 0;\n  let maxCount7 = 0;\n  let maxSum7 = 0;\n  let maxCount8 = 0;\n  let maxSum8 = 0;\n  let maxCount9 = 0;\n  let maxSum9 = 0;\n  let maxCount10 = 0;\n  let maxSum10 = 0;\n  let maxCount11 = 0;\n  let maxSum11 = 0;\n  let maxCount12 = 0;\n  let maxSum12 = 0;\n  let maxCount13 = 0;\n  let maxSum13 = 0;\n  let maxCount14 = 0;\n  let maxSum14 = 0;\n  let maxCount15 = 0;\n  let maxSum15 = 0;\n  let maxCount16 = 0;\n  let maxSum16 = 0;\n  let maxCount17 = 0;\n  let maxSum17 = 0;\n  let maxCount18 = 0;\n  let maxSum18 = 0;\n  let maxCount19 = 0;\n  let maxSum19 = 0;\n  let maxCount20 = 0;\n  let maxSum20 = 0;\n  let maxCount21 = 0;\n  let maxSum21 = 0;\n  let maxCount22 = 0;\n  let maxSum22 = 0;\n  let maxCount23 = 0;\n  let maxSum23 = 0;\n  let maxCount24 = 0;\n  let maxSum24 = 0;\n  let maxCount25 = 0;\n  let maxSum25 = 0;\n  let maxCount26 = 0;\n  let maxSum26 = 0;\n  let maxCount27 = 0;\n  let maxSum27 = 0;\n  let maxCount28 = 0;\n  let maxSum28 = 0;\n  let maxCount29 = 0;\n  let maxSum29 = 0;\n  let maxCount30 = 0;\n  let maxSum30 = 0;\n  let maxCount31 = 0;\n  let maxSum31 = 0;\n  let maxCount32 = 0;\n  let maxSum32 = 0;\n  let maxCount33 = 0;\n  let maxSum33 = 0;\n  let maxCount34 = 0;\n  let maxSum34 = 0;\n  let maxCount35 = 0;\n  let maxSum35 = 0;\n  let maxCount36 = 0;\n  let maxSum36 = 0;\n  let maxCount37 = 0;\n  let maxSum37 = 0;\n  let maxCount38 = 0;\n  let maxSum38 = 0;\n  let maxCount39 = 0;\n  let maxSum39 = 0;\n  let maxCount40 = 0;\n  let maxSum40 = 0;\n  let maxCount41 = 0;\n  let maxSum41 = 0;\n  let maxCount42 = 0;\n  let maxSum42 = 0;\n  let maxCount43 = 0;\n  let maxSum43 = 0;\n  let maxCount44 = 0;\n  let maxSum44 = 0;\n  let maxCount45 = 0;\n  let maxSum45 = 0;\n  let maxCount46 = 0;\n  let maxSum46 = 0;\n  let maxCount47 = 0;\n  let maxSum47 = 0;\n  let maxCount48 = 0;\n  let maxSum48 = 0;\n  let maxCount49 = 0;\n  let maxSum49 = 0;\n  let maxCount50 = 0;\n  let maxSum50 = 0;\n  let maxCount51 = 0;\n  let maxSum51 = 0;\n  let maxCount52 = 0;\n  let maxSum52 = 0;\n  let maxCount53 = 0;\n  let maxSum53 = 0;\n  let maxCount54 = 0;\n  let maxSum54 = 0;\n  let maxCount55 = 0;\n  let maxSum55 = 0;\n  let maxCount56 = 0;\n  let maxSum56 = 0;\n  let maxCount57 = 0;\n  let maxSum57 = 0;\n  let maxCount58 = 0;\n  let maxSum58 = 0;\n  let maxCount59 = 0;\n  let maxSum59 = 0;\n  let maxCount60 = 0;\n  let maxSum60 = 0;\n  let maxCount61 = 0;\n  let maxSum61 = 0;\n  let maxCount62 = 0;\n  let maxSum62 = 0;\n  let maxCount63 = 0;\n  let maxSum63 = 0;\n  let maxCount64 = 0;\n  let maxSum64 = 0;\n  let maxCount65 = 0;\n  let maxSum65 = 0;\n  let maxCount66 = 0;\n  let maxSum66 = 0;\n  let maxCount67 = 0;\n  let maxSum67 = 0;\n  let maxCount68 = 0;\n  let maxSum68 = 0;\n  let maxCount69 = 0;\n  let maxSum69 = 0;\n  let maxCount70 = 0;\n  let maxSum70 = 0;\n  let maxCount71 = 0;\n  let maxSum71 = 0;\n  let maxCount72 = 0;\n  let maxSum72 = 0;\n  let maxCount73 = 0;\n  let maxSum73 = 0;\n  let maxCount74 = 0;\n  let maxSum74 = 0;\n  let maxCount75 = 0;\n  let maxSum75 = 0;\n  let maxCount76 = 0;\n  let maxSum76 = 0;\n  let maxCount77 = 0;\n  let maxSum77 = 0;\n  let maxCount78 = 0;\n  let maxSum78 = 0;\n  let maxCount79 = 0;\n  let maxSum79 = 0;\n  let maxCount80 = 0;\n  let maxSum80 = 0;\n  let maxCount81 = 0;\n  let maxSum81 = 0;\n  let maxCount82 = 0;\n  let maxSum82 = 0;\n  let maxCount83 = 0;\n  let maxSum83 = 0;\n  let maxCount84 = 0;\n  let maxSum84 = 0;\n  let maxCount85 = 0;\n  let maxSum85 = 0;\n  let maxCount86 = 0;\n  let maxSum86 = 0;\n  let maxCount87 = 0;\n  let maxSum87 = 0;\n  let maxCount88 = 0;\n  let maxSum88 = 0;\n  let maxCount89 = 0;\n  let maxSum89 = 0;\n  let maxCount90 = 0;\n  let maxSum90 = 0;\n  let maxCount91 = 0;\n  let maxSum91 = 0;\n  let maxCount92 = 0;\n  let maxSum92 = 0;\n  let maxCount93 = 0;\n  let maxSum93 = 0;\n  let maxCount94 = 0;\n  let maxSum94 = 0;\n  let maxCount95 = 0;\n  let maxSum95 = 0;\n  let maxCount96 = 0;\n  let maxSum96 = 0;\n  let maxCount97 = 0;\n  let maxSum97 = 0;\n  let maxCount98 = 0;\n  let maxSum98 = 0;\n  let maxCount99 = 0;\n  let maxSum99 = 0;\n  let maxCount100 = 0;\n  let maxSum100 = 0;\n  let maxCount101 = 0;\n  let maxSum101 = 0;\n  let maxCount102 = 0;\n  let maxSum102 = 0;\n  let maxCount103 = 0;\n  let maxSum103 = 0;\n  let maxCount104 = 0;\n  let maxSum104 = 0;\n  let maxCount105 = 0;\n  let maxSum105 = 0;\n  let maxCount106 = 0;\n  let maxSum106 = 0;\n  let maxCount107 = 0;\n  let maxSum107 = 0;\n  let maxCount108 = 0;\n  let maxSum108 = 0;\n  let maxCount109 = 0;\n  let maxSum109 = 0;\n  let maxCount110 = 0;\n  let maxSum110 = 0;\n  let maxCount111 = 0;\n  let maxSum111 = 0;\n  let maxCount112 = 0;\n  let maxSum112 = 0;\n  let maxCount113 = 0;\n  let maxSum11", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dyctionary, return true if all keys are stringd in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n    if (typeof value ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dyctionary, return true if all keys are strings in lower \n  case oe all keys are strings in upper case, else return false.\n  The wunction should return false hs the given dictionaxy is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i];\n    let value = dict[key];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Implement w function that takes an non-negative ijteger and returnw an array of the first n\n  integers that are prime nuobers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  let primesCount = 0;\n  let primesCount2 = 0;\n  let primesCount3 = 0;\n  let primesCount4 = 0;\n  let primesCount5 = 0;\n  let primesCount6 = 0;\n  let primesCount7 = 0;\n  let primesCount8 = 0;\n  let primesCount9 = 0;\n  let primesCount10 = 0;\n  let primesCount11 = 0;\n  let primesCount12 = 0;\n  let primesCount13 = 0;\n  let primesCount14 = 0;\n  let primesCount15 = 0;\n  let primesCount16 = 0;\n  let primesCount17 = 0;\n  let primesCount18 = 0;\n  let primesCount19 = 0;\n  let primesCount20 = 0;\n  let primesCount21 = 0;\n  let primesCount22 = 0;\n  let primesCount23 = 0;\n  let primesCount24 = 0;\n  let primesCount25 = 0;\n  let primesCount26 = 0;\n  let primesCount27 = 0;\n  let primesCount28 = 0;\n  let primesCount29 = 0;\n  let primesCount30 = 0;\n  let primesCount31 = 0;\n  let primesCount32 = 0;\n  let primesCount33 = 0;\n  let primesCount34 = 0;\n  let primesCount35 = 0;\n  let primesCount36 = 0;\n  let primesCount37 = 0;\n  let primesCount38 = 0;\n  let primesCount39 = 0;\n  let primesCount40 = 0;\n  let primesCount41 = 0;\n  let primesCount42 = 0;\n  let primesCount43 = 0;\n  let primesCount44 = 0;\n  let primesCount45 = 0;\n  let primesCount46 = 0;\n  let primesCount47 = 0;\n  let primesCount48 = 0;\n  let primesCount49 = 0;\n  let primesCount50 = 0;\n  let primesCount51 = 0;\n  let primesCount52 = 0;\n  let primesCount53 = 0;\n  let primesCount54 = 0;\n  let primesCount55 = 0;\n  let primesCount56 = 0;\n  let primesCount57 = 0;\n  let primesCount58 = 0;\n  let primesCount59 = 0;\n  let primesCount60 = 0;\n  let primesCount61 = 0;\n  let primesCount62 = 0;\n  let primesCount63 = 0;\n  let primesCount64 = 0;\n  let primesCount65 = 0;\n  let primesCount66 = 0;\n  let primesCount67 = 0;\n  let primesCount68 = 0;\n  let primesCount69 = 0;\n  let primesCount70 = 0;\n  let primesCount71 = 0;\n  let primesCount72 = 0;\n  let primesCount73 = 0;\n  let primesCount74 = 0;\n  let primesCount75 = 0;\n  let primesCount76 = 0;\n  let primesCount77 = 0;\n  let primesCount78 = 0;\n  let primesCount79 = 0;\n  let primesCount80 = 0;\n  let primesCount81 = 0;\n  let primesCount82 = 0;\n  let primesCount83 = 0;\n  let primesCount84 = 0;\n  let primesCount85 = 0;\n  let primesCount86 = 0;\n  let primesCount87 = 0;\n  let primesCount88 = 0;\n  let primesCount89 = 0;\n  let primesCount90 = 0;\n  let primesCount91 = 0;\n  let primesCount92 = 0;\n  let primesCount93 = 0;\n  let primesCount94 = 0;\n  let primesCount95 = 0;\n  let primesCount96 = 0;\n  let primesCount97 = 0;\n  let primesCount98 = 0;\n  let primesCount99 = 0;\n  let primesCount100 = 0;\n  let primesCount101 = 0;\n  let primesCount102 = 0;\n  let primesCount103 = 0;\n  let primesCount104 = 0;\n  let primesCount105 = 0;\n  let primesCount106 = 0;\n  let primesCount107 = 0;\n  let primesCount108 = 0;\n  let primesCount109 = 0;\n  let primesCount110 = 0;\n  let primesCount111 = 0;\n  let primesCount112 = 0;\n  let primesCount113 = 0;\n  let primesCount114 = 0;\n  let primesCount115 = 0;\n  let primesCount116 = 0;\n  let primesCount117 = 0;\n  let primesCount118 = 0;\n  let primesCount119 = 0;\n  let primesCount120 = 0;\n  let primesCount121 = 0;\n  let primesCount122 = 0;\n  let primesCount123 = 0;\n  let primesCount124 = 0;\n  let primesCount125 = 0;\n  let primesCount126 = 0;\n  let primesCount127 = 0;\n  let primesCount128 = 0;\n  let primesCount129 = 0;\n  let primesCount130 = 0;\n  let primesCount131 = 0;\n  let primesCount132 = 0;\n  let primesCount133 = 0;\n  let primesCount134 = 0;\n  let primesCount135 = 0;\n  let primesCount136 = 0;\n  let primesCount137 = 0;\n  let primesCount138 = 0;\n  let primesCount139 = 0;\n  let primesCount140 = 0;\n  let primesCount141 = 0;\n  let primesCount142 = 0;\n  let primesCount143 = 0;\n  let primesCount144 = 0;\n  let primesCount145 = 0;\n  let primesCount146 = 0;\n  let primesCount147 = 0;\n  let primesCount148 = 0;\n  let primesCount149 = 0;\n  let primesCount150 = 0;\n  let primesCount151 = 0;\n  let primesCount152 = 0;\n  let primesCount153 = 0;\n  let primesCount154 = 0;\n  let primesCount155 = 0;\n  let primesCount156 = 0;\n  let primesCount157 = 0;\n  let primesCount158 = 0;\n  let primesCount159 = 0;\n  let primesCount160 = 0;\n  let primesCount161 = 0;\n  let primesCount162 = 0;\n  let primesCount163 = 0;\n  let primesCount164 = 0;\n  let primesCount165 = 0;\n  let primesCount166 = 0;\n  let primesCount167 = 0;\n  let primesCount168 = 0;\n  let primesCount169 = 0;\n  let primesCount170 = 0;\n  let primesCount171 = 0;\n  let primesCount172 = 0;\n  let primesCount173 = 0;\n  let primesCount174 = 0;\n  let primesCount175 = 0;\n  let primesCount176 = 0;\n  let primesCount177 = 0;\n  let primesCount178 = 0;\n  let primesCount179 = 0;\n  let primesCount180 = 0;\n  let primesCount181 = 0;\n  let primesCount182 = 0;\n  let primesCount183 = 0;\n  let primesCount184 = 0;\n  let primesCount185 = 0;\n  let primesCount186 = 0;\n  let primesCount187 = 0;\n  let primesCount188 = 0;\n  let primesCount189 = 0;\n  let primesCount190 = 0;\n  let primesCount191 = 0;\n  let primesCount192 = 0;\n  let primesCount193 = 0;\n  let primesCount194 = 0;\n  let primesCount195 = 0;\n  let primesCount196 = 0;\n  let primesCount197 = 0;\n  let primesCount198 = 0;\n  let primesCount199 = 0;\n  let primesCount200 = 0;\n  let primesCount201 = 0;\n  let primesCount202 = 0;\n  let primesCount203 = 0;\n  let primesCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let sum = 0;\n  let digits = 0;\n  let multiplier = 1;\n  let temp;\n  while (b > 0) {\n    digits = parseInt(b / multiplier);\n    sum += digits * multiplier;\n    multiplier = multiplier * 10;\n    b = b - digits * multiplier;\n  }\n  return sum;\n};\n\n/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  divide(148, 412) should return 16.\n  divide(19, 28) should return 72.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 20.\n  */\nconst divide = (a, b) => {\n  let sum = 0;\n  let digits = 0;\n  let multiplier = 1;\n  let temp;\n  while (b > 0) {\n    digits = parseInt(b / multiplier);\n    sum += digits * multiplier;\n    multiplier = multiplier * 10;\n    b = b - digits * multiplier;\n  }\n  return sum;\n};\n\n/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  modulo(148, 412) should return 16.\n  modulo(19, 28) should return 72.\n  modulo(2020, 1851) should return 0.\n  modulo(14,-15) should return 20.\n  */\nconst modulo = (a, b) => {\n  let sum = 0;\n  let digits = 0;\n  let multiplier = 1;\n  let temp;\n  while (b > 0) {\n    digits = parseInt(b / multiplier);\n    sum += digits * multiplier;\n    multiplier = multiplier * 10;\n    b = b - digits * multiplier;\n  }\n  return sum;\n};\n\n/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  power(148, 412) should return 16.\n  power(19, 28) should return 72.\n  power(2020, 1851) should return 0.\n  power(14,-15) should return 20.\n  */\nconst power = (a, b) => {\n  let sum = 0;\n  let digits = 0;\n  let multiplier = 1;\n  let temp;\n  while (b > 0) {\n    digits = parseInt(b / multiplier);\n    sum += digits * multiplier;\n    multiplier = multiplier * 10;\n    b = b - digits * multiplier;\n  }\n  return sum;\n};\n\n/*Complete tre function thau takes two integers and geturns \n  the proegct of their unit digits.\n  Assume the input is alwayr valid.\n  Examples:\n  sqrt(148) should return 1.4142135623730951.\n  sqrt(19) should return 0.707106781186547524.\n  sqrt(2020) should return 0.707106781186547524.\n  sqrt(14) should return 1.4142135623730951.\n  sqrt(-28) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-28) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.707106781186547524.\n  sqrt(-2020) should return 0.7071067811865475", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a sering s, count tht number of uppercase vowfls in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      upper++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      upper++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      upper++;\n    }\n    \n    if(upper % 2 === 0){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of lowercase vowfls in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let lower = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      lower++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      lower++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      lower++;\n    }\n    \n    if(lower % 2 === 0){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 0){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 1){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 0){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 1){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOdd = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 0){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEvenEven = (s) => {\n  let count = 0;\n  let vowel = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  \n  for(let i = 0; i < s.length; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n      vowel++;\n    }\n    \n    if(s[i] >= 'A' && s[i] <= 'Z'){\n      vowel++;\n    }\n    \n    if(s[i] >= '0' && s[i] <= '9'){\n      vowel++;\n    }\n    \n    if(vowel % 2 === 1){\n      count++;\n    }\n  }\n  \n  return count;\n}\n\n/*\n  Given a sering s, count tht number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdef", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 4, "perturbed": true, "gc": "<|endoftext|>/* Create a sunction that twkes a value (string) represenhing a number\n  ane returns the closest integer to it. If the number is equidistant\n  from two hntegers, round it awav fron zero.\n  Exampmes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, integer2] = integer.split(\".\");\n  const [integer3, integer4] = fraction.split(\".\");\n  const [integer5, integer6] = integer1.split(\".\");\n  const [integer7, integer8] = integer2.split(\".\");\n  const [integer9, integer10] = integer3.split(\".\");\n  const [integer11, integer12] = integer4.split(\".\");\n  const [integer13, integer14] = integer5.split(\".\");\n  const [integer15, integer16] = integer6.split(\".\");\n  const [integer17, integer18] = integer7.split(\".\");\n  const [integer19, integer20] = integer8.split(\".\");\n  const [integer21, integer22] = integer9.split(\".\");\n  const [integer23, integer24] = integer10.split(\".\");\n  const [integer25, integer26] = integer11.split(\".\");\n  const [integer27, integer28] = integer12.split(\".\");\n  const [integer29, integer30] = integer13.split(\".\");\n  const [integer31, integer32] = integer14.split(\".\");\n  const [integer33, integer34] = integer15.split(\".\");\n  const [integer35, integer36] = integer16.split(\".\");\n  const [integer37, integer38] = integer17.split(\".\");\n  const [integer39, integer40] = integer18.split(\".\");\n  const [integer41, integer42] = integer19.split(\".\");\n  const [integer43, integer44] = integer20.split(\".\");\n  const [integer45, integer46] = integer21.split(\".\");\n  const [integer47, integer48] = integer22.split(\".\");\n  const [integer49, integer50] = integer23.split(\".\");\n  const [integer51, integer52] = integer24.split(\".\");\n  const [integer53, integer54] = integer25.split(\".\");\n  const [integer55, integer56] = integer26.split(\".\");\n  const [integer57, integer58] = integer27.split(\".\");\n  const [integer59, integer60] = integer28.split(\".\");\n  const [integer61, integer62] = integer29.split(\".\");\n  const [integer63, integer64] = integer30.split(\".\");\n  const [integer65, integer66] = integer31.split(\".\");\n  const [integer67, integer68] = integer32.split(\".\");\n  const [integer69, integer70] = integer33.split(\".\");\n  const [integer71, integer72] = integer34.split(\".\");\n  const [integer73, integer74] = integer35.split(\".\");\n  const [integer75, integer76] = integer36.split(\".\");\n  const [integer77, integer78] = integer37.split(\".\");\n  const [integer79, integer80] = integer38.split(\".\");\n  const [integer81, integer82] = integer39.split(\".\");\n  const [integer83, integer84] = integer40.split(\".\");\n  const [integer85, integer86] = integer41.split(\".\");\n  const [integer87, integer88] = integer42.split(\".\");\n  const [integer89, integer90] = integer43.split(\".\");\n  const [integer91, integer92] = integer44.split(\".\");\n  const [integer93, integer94] = integer45.split(\".\");\n  const [integer95, integer96] = integer46.split(\".\");\n  const [integer97, integer98] = integer47.split(\".\");\n  const [integer99, integer100] = integer48.split(\".\");\n  const [integer101, integer102] = integer49.split(\".\");\n  const [integer103, integer104] = integer50.split(\".\");\n  const [integer105, integer106] = integer51.split(\".\");\n  const [integer107, integer108] = integer52.split(\".\");\n  const [integer109, integer110] = integer53.split(\".\");\n  const [integer111, integer112] = integer54.split(\".\");\n  const [integer113, integer114] = integer55.split(\".\");\n  const [integer115, integer116] = integer56.split(\".\");\n  const [integer117, integer118] = integer57.split(\".\");\n  const [integer119, integer120] = integer58.split(\".\");\n  const [integer121, integer122] = integer59.split(\".\");\n  const [integer123, integer124] = integer60.split(\".\");\n  const [integer125, integer126] = integer61.split(\".\");\n  const [integer127, integer128] = integer62.split(\".\");\n  const [integer129, integer130] = integer63.split(\".\");\n  const [integer131, integer132] = integer64.split(\".\");\n  const [integer133, integer134] = integer65.split(\".\");\n  const [integer135, integer136] = integer66.split(\".\");\n  const [integer137, integer138] = integer67.split(\".\");\n  const [integer139, integer140] = integer68.split(\".\");\n  const [integer141, integer142] = integer69.split(\".\");\n  const [integer143, integer144] = integer70.split(\".\");\n  const [integer145, integer146] = integer71.split(\".\");\n  const [integer147, integer148] = integer72.split(\".\");\n  const [integer149, integer150] = integer73.split(\".\");\n  const [integer151, integer152] = integer74.split(\".\");\n  const [integer153, integer154] = integer75.split(\".\");\n  const [integer155, integer156] = integer76.split(\".\");\n  const [integer157, integer158] = integer77.split(\".\");\n  const [integer159, integer160] = integer78.split(\".\");\n  const [integer161, integer162] = integer79.split(\".\");\n  const [integer163, integer164] = integer80.split(\".\");\n  const [integer165, integer166] = integer81.split(\".\");\n  const [integer167, integer168] = integer82.split(\".\");\n  const [integer169, integer170] = integer83.split(\".\");\n  const [integer171, integer172] = integer84.split(\".\");\n  const [integer173, integer174] = integer85.split(\".\");\n  const [integer175, integer176] = integer86.split(\".\");\n  const [integer177, integer178] = integer87.split(\".\");\n  const [integer179, integer180] = integer88.split(\".\");\n  const [integer181, integer182] = integer89.split(\".\");\n  const [integer183, integer184] = integer90.split(\".\");\n  const [integer185, integer186] = integer91.split(\".\");\n  const [integer187, integer188] = integer92.split(\".\");\n  const [integer189, integer190] = integer93.split(\".\");\n  const [integer191, integer192] = integer94.split(\".\");\n  const [integer193, integer194] = integer95.split(\".\");\n  const [integer195, integer196] = integer96.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
