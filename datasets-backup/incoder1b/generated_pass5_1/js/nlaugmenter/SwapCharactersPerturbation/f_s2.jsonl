{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers colser to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff < 1e-6;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEquals = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZero = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZero = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2 || diff === 3;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2 || diff === 3 || diff === 4;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2 || diff === 3 || diff === 4 || diff === 5 || diff === 6;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2 || diff === 3 || diff === 4 || diff === 5 || diff === 6 || diff === 7;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold);\n    return diff <= 1e-6 || diff === 0 || diff === 1 || diff === 2 || diff === 3 || diff === 4 || diff === 5 || diff === 6 || diff === 7 || diff === 8;\n  });\n};\n\n/**\n * Check if given list of numbers is in given list of numbers, are any two numbers\n * colser to each other than given threshold.\n * >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n * false\n * >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * true\n */\nconst hasCloseElementsOrEqualsOrZeroOrOne = (numbers, threshold) => {\n  return hasCloseElements(numbers, threshold) || numbers.some((number) => {\n    const diff = Math.abs(number - threshold", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheess. Your goal is to\n  separate those group into separate strings and return the list of thoes.\n  Separate groups are balanced (each open rbace is properly closed) and ont nested withni each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.match(/\\(([^)]+)\\)/g);\n  let paren_group_strings = [];\n  paren_groups.forEach((group) => {\n    const paren_group_string = '';\n    group.forEach((char) => {\n      if (char === ')') {\n        paren_group_string += ')';\n      } else {\n        paren_group_string += char;\n      }\n    });\n    paren_group_strings.push(paren_group_string);\n  });\n  return paren_group_strings;\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmail('removed@example.com')\n  true\n  >>> isEmail('removed@example.com')\n  false\n  */\nconst isEmail = (email) => {\n  return email.startsWith('@') && email.endsWith('@');\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmail('removed@example.com')\n  true\n  >>> isEmail('removed@example.com')\n  false\n  */\nconst isEmailOrEmail = (email) => {\n  return isEmail(email) || isEmail(email.toLowerCase());\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmailOrEmail('removed@example.com')\n  true\n  >>> isEmailOrEmail('removed@example.com')\n  false\n  */\nconst isEmailOrEmailOrEmail = (email) => {\n  return isEmailOrEmail(email) || isEmailOrEmail(email.toLowerCase());\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmailOrEmailOrEmail('removed@example.com')\n  true\n  >>> isEmailOrEmailOrEmail('removed@example.com')\n  false\n  */\nconst isEmailOrEmailOrEmailOrEmail = (email) => {\n  return isEmailOrEmailOrEmail(email) || isEmailOrEmailOrEmail(email.toLowerCase());\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmailOrEmailOrEmailOrEmailOrEmail('removed@example.com')\n  true\n  >>> isEmailOrEmailOrEmailOrEmailOrEmailOrEmail('removed@example.com')\n  false\n  */\nconst isEmailOrEmailOrEmailOrEmailOrEmailOrEmail = (email) => {\n  return isEmailOrEmailOrEmailOrEmailOrEmailOrEmail(email) || isEmailOrEmailOrEmailOrEmailOrEmailOrEmail(email.toLowerCase());\n};\n\n/* Given a string, return true if it starts with '@' and ends with '@'\n  >>> isEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmailOrEmail", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins iwth a supplied string.\n  Algorithm idea is sipmle:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - pApend to the end of the string revesre of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let pPrefix = '';\n  let pSuffix = '';\n  let pSuffixLength = 0;\n  let pSuffixLength2 = 0;\n  let pSuffixLength3 = 0;\n  let pSuffixLength4 = 0;\n  let pSuffixLength5 = 0;\n  let pSuffixLength6 = 0;\n  let pSuffixLength7 = 0;\n  let pSuffixLength8 = 0;\n  let pSuffixLength9 = 0;\n  let pSuffixLength10 = 0;\n  let pSuffixLength11 = 0;\n  let pSuffixLength12 = 0;\n  let pSuffixLength13 = 0;\n  let pSuffixLength14 = 0;\n  let pSuffixLength15 = 0;\n  let pSuffixLength16 = 0;\n  let pSuffixLength17 = 0;\n  let pSuffixLength18 = 0;\n  let pSuffixLength19 = 0;\n  let pSuffixLength20 = 0;\n  let pSuffixLength21 = 0;\n  let pSuffixLength22 = 0;\n  let pSuffixLength23 = 0;\n  let pSuffixLength24 = 0;\n  let pSuffixLength25 = 0;\n  let pSuffixLength26 = 0;\n  let pSuffixLength27 = 0;\n  let pSuffixLength28 = 0;\n  let pSuffixLength29 = 0;\n  let pSuffixLength30 = 0;\n  let pSuffixLength31 = 0;\n  let pSuffixLength32 = 0;\n  let pSuffixLength33 = 0;\n  let pSuffixLength34 = 0;\n  let pSuffixLength35 = 0;\n  let pSuffixLength36 = 0;\n  let pSuffixLength37 = 0;\n  let pSuffixLength38 = 0;\n  let pSuffixLength39 = 0;\n  let pSuffixLength40 = 0;\n  let pSuffixLength41 = 0;\n  let pSuffixLength42 = 0;\n  let pSuffixLength43 = 0;\n  let pSuffixLength44 = 0;\n  let pSuffixLength45 = 0;\n  let pSuffixLength46 = 0;\n  let pSuffixLength47 = 0;\n  let pSuffixLength48 = 0;\n  let pSuffixLength49 = 0;\n  let pSuffixLength50 = 0;\n  let pSuffixLength51 = 0;\n  let pSuffixLength52 = 0;\n  let pSuffixLength53 = 0;\n  let pSuffixLength54 = 0;\n  let pSuffixLength55 = 0;\n  let pSuffixLength56 = 0;\n  let pSuffixLength57 = 0;\n  let pSuffixLength58 = 0;\n  let pSuffixLength59 = 0;\n  let pSuffixLength60 = 0;\n  let pSuffixLength61 = 0;\n  let pSuffixLength62 = 0;\n  let pSuffixLength63 = 0;\n  let pSuffixLength64 = 0;\n  let pSuffixLength65 = 0;\n  let pSuffixLength66 = 0;\n  let pSuffixLength67 = 0;\n  let pSuffixLength68 = 0;\n  let pSuffixLength69 = 0;\n  let pSuffixLength70 = 0;\n  let pSuffixLength71 = 0;\n  let pSuffixLength72 = 0;\n  let pSuffixLength73 = 0;\n  let pSuffixLength74 = 0;\n  let pSuffixLength75 = 0;\n  let pSuffixLength76 = 0;\n  let pSuffixLength77 = 0;\n  let pSuffixLength78 = 0;\n  let pSuffixLength79 = 0;\n  let pSuffixLength80 = 0;\n  let pSuffixLength81 = 0;\n  let pSuffixLength82 = 0;\n  let pSuffixLength83 = 0;\n  let pSuffixLength84 = 0;\n  let pSuffixLength85 = 0;\n  let pSuffixLength86 = 0;\n  let pSuffixLength87 = 0;\n  let pSuffixLength88 = 0;\n  let pSuffixLength89 = 0;\n  let pSuffixLength90 = 0;\n  let pSuffixLength91 = 0;\n  let pSuffixLength92 = 0;\n  let pSuffixLength93 = 0;\n  let pSuffixLength94 = 0;\n  let pSuffixLength95 = 0;\n  let pSuffixLength96 = 0;\n  let pSuffixLength97 = 0;\n  let pSuffixLength98 = 0;\n  let pSuffixLength99 = 0;\n  let pSuffixLength100 = 0;\n  let pSuffixLength101 = 0;\n  let pSuffixLength102 = 0;\n  let pSuffixLength103 = 0;\n  let pSuffixLength104 = 0;\n  let pSuffixLength105 = 0;\n  let pSuffixLength106 = 0;\n  let pSuffixLength107 = 0;\n  let pSuffixLength108 = 0;\n  let pSuffixLength109 = 0;\n  let pSuffixLength110 = 0;\n  let pSuffixLength111 = 0;\n  let pSuffixLength112 = 0;\n  let pSuffixLength113 = 0;\n  let pSuffixLength114 = 0;\n  let pSuffixLength115 = 0;\n  let pSuffixLength116 = 0;\n  let pSuffixLength117 = 0;\n  let pSuffixLength118 = 0;\n  let pSuffixLength119 = 0;\n  let pSuffixLength120 = 0;\n  let pSuffixLength121 = 0;\n  let pSuffixLength122 = 0;\n  let pSuffixLength123 = 0;\n  let pSuffixLength124 = 0;\n  let pSuffixLength125 = 0;\n  let pSuffixLength126 = 0;\n  let pSuffixLength127 = 0;\n  let pSuffixLength128 = 0;\n  let pSuffixLength129 = 0;\n  let pSuffixLength130 = 0;\n  let pSuffixLength131 = 0;\n  let pSuffixLength132 = 0;\n  let pSuffixLength133 = 0;\n  let pSuffixLength134 = 0;\n  let pSuffixLength135 = 0;\n  let pSuffixLength136 = 0;\n  let pSuffixLength137 = 0;\n  let pSuffixLength138 = 0;\n  let pSuffixLength139 = 0;\n  let pSuffixLength140 = 0;\n  let pSuffixLength141 = 0;\n  let pSuffixLength142 = 0;\n  let pSuffixLength143 = 0;\n  let pSuffixLength144 = 0;\n  let pSuffixLength145 = 0;\n  let pSuffixLength146 = 0;\n  let pSuffixLength147 = 0;\n  let pSuffixLength148 = 0;\n  let pSuffixLength149 = 0;\n  let pSuffixLength150 = 0;\n  let pSuffixLength151 = 0;\n  let pSuffixLength152 = 0;\n  let pSuffixLength153 = 0;\n  let pSuffixLength154 = 0;\n  let pSuffixLength155 = 0;\n  let pSuffixLength156 = 0;\n  let pSuffixLength157 = 0;\n  let pSuffixLength158 = 0;\n  let pSuffixLength159 = 0;\n  let pSuffixLength160 = 0;\n  let pSuffixLength161 = 0;\n  let pSuffixLength162 = 0;\n  let pSuffixLength163 = 0;\n  let pSuffixLength164 = 0;\n  let pSuffixLength165 = 0;\n  let pSuffixLength166 = 0;\n  let pSuffixLength167 = 0;\n  let pSuffixLength168 = 0;\n  let pSuffixLength169 = 0;\n  let pSuffixLength170 = 0;\n  let pSuffixLength171 = 0;\n  let pSuffixLength172 = 0;\n  let pSuffixLength173 = 0;\n  let pSuffixLength174 = 0;\n  let pSuffixLength175 = 0;\n  let pSuffixLength176 = 0;\n  let pSuffixLength177 = 0;\n  let pSuffixLength178 = 0;\n  let pSuffixLength179 = 0;\n  let pSuffixLength180 = 0;\n  let pSuffixLength181 = 0;\n  let pSuffixLength182 = 0;\n  let pSuffixLength183 = 0;\n  let pSuffixLength184 = 0;\n  let pSuffixLength185 = 0;\n  let pSuffixLength186 = 0;\n  let pSuffixLength187 = 0;\n  let pSuffixLength188 = 0;\n  let pSuffixLength189 = 0;\n  let pSuffixLength190 = 0;\n  let pSuffixLength191 = 0;\n  let pSuffixLength192 = 0;\n  let pSuffixLength193 = 0;\n  let pSuffixLength194 = 0;\n  let p", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const levels = [];\n  let level = 0;\n  let num = 0;\n  while (num < n) {\n    levels.push(level);\n    num ++;\n    level++;\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first levle has n stones.\n  The number of stones in the next level is:\n      - the netx odd number if n is odd.\n      - the next even numbre if n is even.\n  Return the number of stones in each ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(\",\");\n  return words.map((w) => w.trim());\n};\n\n/*\n  You will be gievn a string of words separated by commas or sapecs. Your atsk is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes two postiive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no scuh numbre, thne the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp168 = 0;\n  let temp169 = 0;\n  let temp170 = 0;\n  let temp171 = 0;\n  let temp172 = 0;\n  let temp173 = 0;\n  let temp174 = 0;\n  let temp175 = 0;\n  let temp176 = 0;\n  let temp177 = 0;\n  let temp178 = 0;\n  let temp179 = 0;\n  let temp180 = 0;\n  let temp181 = 0;\n  let temp182 = 0;\n  let temp183 = 0;\n  let temp184 = 0;\n  let temp185 = 0;\n  let temp186 = 0;\n  let temp187 = 0;\n  let temp188 = 0;\n  let temp189 = 0;\n  let temp190 = 0;\n  let temp191 = 0;\n  let temp192 = 0;\n  let temp193 = 0;\n  let temp194 = 0;\n  let temp195 = 0;\n  let temp196 = 0;\n  let temp197 = 0;\n  let temp198 = 0;\n  let temp199 = 0;\n  let temp200 = 0;\n  let temp201 = 0;\n  let temp202 = 0;\n  let temp203 = 0;\n  let temp204 = 0;\n  let temp205 = 0;\n  let temp206 = 0;\n  let temp207 = 0;\n  let temp208 = 0;\n  let temp209 = 0;\n  let temp210 = 0;\n  let temp211 = 0;\n  let temp212 = 0;\n  let temp213 = 0;\n  let temp214 = 0;\n  let temp215 = 0;\n  let temp216 = 0;\n  let temp217 = 0;\n  let temp218 = 0;\n  let temp219 = 0;\n  let temp220 = 0;\n  let temp221 = 0;\n  let temp222 = 0;\n  let temp223 = 0;\n  let temp224 = 0;\n  let temp225 = 0;\n  let temp226 = 0;\n  let temp227 = 0;\n  let temp228 = 0;\n  let temp229 = 0;\n  let temp230 = 0;\n  let temp231 = 0;\n  let temp232 = 0;\n  let temp233 = 0;\n  let temp234 = 0;\n  let temp235 = 0;\n  let temp236 = 0;\n  let temp237 = 0;\n  let temp238 = 0;\n  let temp239 = 0;\n  let temp240 = 0;\n  let temp241 = 0;\n  let temp242 = 0;\n  let temp243 = 0;\n  let temp244 = 0;\n  let temp245 = 0;\n  let temp246 = 0;\n  let temp247 = 0;\n  let temp248 = 0;\n  let temp249 = 0;\n  let temp250 = 0;\n  let temp251 = 0;\n  let temp252 = 0;\n  let temp253 = 0;\n  let temp254 = 0;\n  let temp255 = 0;\n  let temp256 = 0;\n  let temp257 = 0;\n  let temp258 = 0;\n  let temp259 = 0;\n  let temp260 = 0;\n  let temp261 = 0;\n  let temp262 = 0;\n  let temp263 = 0;\n  let temp264 = 0;\n  let temp265 = 0;\n  let temp266 = 0;\n  let temp267 = 0;\n  let temp268 = 0;\n  let temp269 = 0;\n  let temp270 = 0;\n  let temp271 = 0;\n  let temp272 = 0;\n  let temp273 = 0;\n  let temp274 = 0;\n  let temp275 = 0;\n  let temp276 = 0;\n  let temp277 = 0;\n  let temp278 = 0;\n  let temp279 = 0;\n  let temp280 = 0;\n  let temp281 = 0;\n  let temp282 = 0;\n  let temp283 = 0;\n  let temp284 = 0;\n  let temp285 = 0;\n  let temp286 = 0;\n  let temp287 = 0;\n  let temp288 = 0;\n  let temp289 = 0;\n  let temp290 = 0;\n  let temp291 = 0;\n  let temp292 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given two opsitive integers n and m, and yoru taks is to compute the\n  average of the nitegers form n trhough m (including n and m). \n  oRund the answer to the nearest inetger and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  let temp;\n  let i;\n  let j;\n  let k;\n  let sum2;\n  let sum3;\n  let sum4;\n  let sum5;\n  let sum6;\n  let sum7;\n  let sum8;\n  let sum9;\n  let sum10;\n  let sum11;\n  let sum12;\n  let sum13;\n  let sum14;\n  let sum15;\n  let sum16;\n  let sum17;\n  let sum18;\n  let sum19;\n  let sum20;\n  let sum21;\n  let sum22;\n  let sum23;\n  let sum24;\n  let sum25;\n  let sum26;\n  let sum27;\n  let sum28;\n  let sum29;\n  let sum30;\n  let sum31;\n  let sum32;\n  let sum33;\n  let sum34;\n  let sum35;\n  let sum36;\n  let sum37;\n  let sum38;\n  let sum39;\n  let sum40;\n  let sum41;\n  let sum42;\n  let sum43;\n  let sum44;\n  let sum45;\n  let sum46;\n  let sum47;\n  let sum48;\n  let sum49;\n  let sum50;\n  let sum51;\n  let sum52;\n  let sum53;\n  let sum54;\n  let sum55;\n  let sum56;\n  let sum57;\n  let sum58;\n  let sum59;\n  let sum60;\n  let sum61;\n  let sum62;\n  let sum63;\n  let sum64;\n  let sum65;\n  let sum66;\n  let sum67;\n  let sum68;\n  let sum69;\n  let sum70;\n  let sum71;\n  let sum72;\n  let sum73;\n  let sum74;\n  let sum75;\n  let sum76;\n  let sum77;\n  let sum78;\n  let sum79;\n  let sum80;\n  let sum81;\n  let sum82;\n  let sum83;\n  let sum84;\n  let sum85;\n  let sum86;\n  let sum87;\n  let sum88;\n  let sum89;\n  let sum90;\n  let sum91;\n  let sum92;\n  let sum93;\n  let sum94;\n  let sum95;\n  let sum96;\n  let sum97;\n  let sum98;\n  let sum99;\n  let sum100;\n  let sum101;\n  let sum102;\n  let sum103;\n  let sum104;\n  let sum105;\n  let sum106;\n  let sum107;\n  let sum108;\n  let sum109;\n  let sum110;\n  let sum111;\n  let sum112;\n  let sum113;\n  let sum114;\n  let sum115;\n  let sum116;\n  let sum117;\n  let sum118;\n  let sum119;\n  let sum120;\n  let sum121;\n  let sum122;\n  let sum123;\n  let sum124;\n  let sum125;\n  let sum126;\n  let sum127;\n  let sum128;\n  let sum129;\n  let sum130;\n  let sum131;\n  let sum132;\n  let sum133;\n  let sum134;\n  let sum135;\n  let sum136;\n  let sum137;\n  let sum138;\n  let sum139;\n  let sum140;\n  let sum141;\n  let sum142;\n  let sum143;\n  let sum144;\n  let sum145;\n  let sum146;\n  let sum147;\n  let sum148;\n  let sum149;\n  let sum150;\n  let sum151;\n  let sum152;\n  let sum153;\n  let sum154;\n  let sum155;\n  let sum156;\n  let sum157;\n  let sum158;\n  let sum159;\n  let sum160;\n  let sum161;\n  let sum162;\n  let sum163;\n  let sum164;\n  let sum165;\n  let sum166;\n  let sum167;\n  let sum168;\n  let sum169;\n  let sum170;\n  let sum171;\n  let sum172;\n  let sum173;\n  let sum174;\n  let sum175;\n  let sum176;\n  let sum177;\n  let sum178;\n  let sum179;\n  let sum180;\n  let sum181;\n  let sum182;\n  let sum183;\n  let sum184;\n  let sum185;\n  let sum186;\n  let sum187;\n  let sum188;\n  let sum189;\n  let sum190;\n  let sum191;\n  let sum192;\n  let sum193;\n  let sum194;\n  let sum195;\n  let sum196;\n  let sum197;\n  let sum198;\n  let sum199;\n  let sum200;\n  let sum201;\n  let sum202;\n  let sum203;\n  let sum204;\n  let sum205;\n  let sum206;\n  let sum207;\n  let sum208;\n  let sum209;\n  let sum210;\n  let sum211;\n  let sum212;\n  let sum213;\n  let sum214;\n  let sum215;\n  let sum216;\n  let sum217;\n  let sum218;\n  let sum219;\n  let sum220;\n  let sum221;\n  let sum222;\n  let sum223;\n  let sum224;\n  let sum225;\n  let sum226;\n  let sum227;\n  let sum228;\n  let sum229;\n  let sum230;\n  let sum231;\n  let sum232;\n  let sum233;\n  let sum234;\n  let sum235;\n  let sum236;\n  let sum237;\n  let sum238;\n  let sum239;\n  let sum240;\n  let sum241;\n  let sum242;\n  let sum243;\n  let sum244;\n  let sum245;\n  let sum246;\n  let sum247;\n  let sum248;\n  let sum249;\n  let sum250;\n  let sum251;\n  let sum252;\n  let sum253;\n  let sum254;\n  let sum255;\n  let sum256;\n  let sum257;\n  let sum258;\n  let sum259;\n  let sum260;\n  let sum261;\n  let sum262;\n  let sum263;\n  let sum264;\n  let sum265;\n  let sum266;\n  let sum267;\n  let sum268;\n  let sum269;\n  let sum270;\n  let sum271;\n  let sum272;\n  let sum273;\n  let sum274;\n  let sum275;\n  let sum276;\n  let sum277;\n  let sum278;\n  let sum279;\n  let sum280;\n  let sum281;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of lal \n  elements that hasn't any even digit.\n\n  Note: Returned list should eb sorted in incresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 1) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n  while (i--) {\n    const digit = x[i];\n    if (i % 2 === 0) {\n      res.push(digit);\n    }\n  }\n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of lal \n  elements that has odd or even digit.\n\n  Note: Returned list should eb sorted in decresaing odrer.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [33, 1422]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddEvenDigits = (x) => {\n  const res = [];\n  let i = x.length;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array of niteegrs, sort the integers that are between 1 and 9 inclusive,\n  reevrse the reuslting array, and then replace each digit yb tis correspondnig name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let reuslt = [];\n  let len = arr.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let num;\n  let arr2;\n  let arr3;\n  let arr4;\n  let arr5;\n  let arr6;\n  let arr7;\n  let arr8;\n  let arr9;\n  let arr10;\n  let arr11;\n  let arr12;\n  let arr13;\n  let arr14;\n  let arr15;\n  let arr16;\n  let arr17;\n  let arr18;\n  let arr19;\n  let arr20;\n  let arr21;\n  let arr22;\n  let arr23;\n  let arr24;\n  let arr25;\n  let arr26;\n  let arr27;\n  let arr28;\n  let arr29;\n  let arr30;\n  let arr31;\n  let arr32;\n  let arr33;\n  let arr34;\n  let arr35;\n  let arr36;\n  let arr37;\n  let arr38;\n  let arr39;\n  let arr40;\n  let arr41;\n  let arr42;\n  let arr43;\n  let arr44;\n  let arr45;\n  let arr46;\n  let arr47;\n  let arr48;\n  let arr49;\n  let arr50;\n  let arr51;\n  let arr52;\n  let arr53;\n  let arr54;\n  let arr55;\n  let arr56;\n  let arr57;\n  let arr58;\n  let arr59;\n  let arr60;\n  let arr61;\n  let arr62;\n  let arr63;\n  let arr64;\n  let arr65;\n  let arr66;\n  let arr67;\n  let arr68;\n  let arr69;\n  let arr70;\n  let arr71;\n  let arr72;\n  let arr73;\n  let arr74;\n  let arr75;\n  let arr76;\n  let arr77;\n  let arr78;\n  let arr79;\n  let arr80;\n  let arr81;\n  let arr82;\n  let arr83;\n  let arr84;\n  let arr85;\n  let arr86;\n  let arr87;\n  let arr88;\n  let arr89;\n  let arr90;\n  let arr91;\n  let arr92;\n  let arr93;\n  let arr94;\n  let arr95;\n  let arr96;\n  let arr97;\n  let arr98;\n  let arr99;\n  let arr100;\n  let arr101;\n  let arr102;\n  let arr103;\n  let arr104;\n  let arr105;\n  let arr106;\n  let arr107;\n  let arr108;\n  let arr109;\n  let arr110;\n  let arr111;\n  let arr112;\n  let arr113;\n  let arr114;\n  let arr115;\n  let arr116;\n  let arr117;\n  let arr118;\n  let arr119;\n  let arr120;\n  let arr121;\n  let arr122;\n  let arr123;\n  let arr124;\n  let arr125;\n  let arr126;\n  let arr127;\n  let arr128;\n  let arr129;\n  let arr130;\n  let arr131;\n  let arr132;\n  let arr133;\n  let arr134;\n  let arr135;\n  let arr136;\n  let arr137;\n  let arr138;\n  let arr139;\n  let arr140;\n  let arr141;\n  let arr142;\n  let arr143;\n  let arr144;\n  let arr145;\n  let arr146;\n  let arr147;\n  let arr148;\n  let arr149;\n  let arr150;\n  let arr151;\n  let arr152;\n  let arr153;\n  let arr154;\n  let arr155;\n  let arr156;\n  let arr157;\n  let arr158;\n  let arr159;\n  let arr160;\n  let arr161;\n  let arr162;\n  let arr163;\n  let arr164;\n  let arr165;\n  let arr166;\n  let arr167;\n  let arr168;\n  let arr169;\n  let arr170;\n  let arr171;\n  let arr172;\n  let arr173;\n  let arr174;\n  let arr175;\n  let arr176;\n  let arr177;\n  let arr178;\n  let arr179;\n  let arr180;\n  let arr181;\n  let arr182;\n  let arr183;\n  let arr184;\n  let arr185;\n  let arr186;\n  let arr187;\n  let arr188;\n  let arr189;\n  let arr190;\n  let arr191;\n  let arr192;\n  let arr193;\n  let arr194;\n  let arr195;\n  let arr196;\n  let arr197;\n  let arr198;\n  let arr199;\n  let arr200;\n  let arr201;\n  let arr202;\n  let arr203;\n  let arr204;\n  let arr205;\n  let arr206;\n  let arr207;\n  let arr208;\n  let arr209;\n  let arr210;\n  let arr211;\n  let arr212;\n  let arr213;\n  let arr214;\n  let arr215;\n  let arr216;\n  let arr217;\n  let arr218;\n  let arr219;\n  let arr220;\n  let arr221;\n  let arr222;\n  let arr223;\n  let arr224;\n  let arr225;\n  let arr226;\n  let arr227;\n  let arr228;\n  let arr229;\n  let arr230;\n  let arr231;\n  let arr232;\n  let arr233;\n  let arr234;\n  let arr235;\n  let arr236;\n  let arr237;\n  let arr238;\n  let arr239;\n  let arr240;\n  let arr241;\n  let arr242;\n  let arr243;\n  let arr244;\n  let arr245;\n  let arr246;\n  let arr247;\n  let arr248;\n  let arr249;\n  let arr250;\n  let arr251;\n  let arr252;\n  let arr253;\n  let arr254;\n  let arr255;\n  let arr256;\n  let arr257;\n  let arr258;\n  let arr259;\n  let arr260;\n  let arr261;\n  let arr262;\n  let arr263;\n  let arr264;\n  let arr265;\n  let arr266;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the factorial of i if i is even\n  or the smu of nmubers form 1 to i otheriwse.\n  i starts from 1.\n  the factorial of i is hte multiplication of the unmbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst g = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst h = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst i = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst j = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst k = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst l = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst m = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst n = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst o = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst p = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst q = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst r = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst s = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/* Implemetn the function f that takes n as a parmaeter,\n  and returns a list of size n, such that the vlaue of teh eleenmt at indxe i is the sum of all numbers divisible by i\n  Example:\n  f(5) == [5, 10, 15, 20, 25]\n  */\nconst t = (n) => {\n  let result = [];\n  let i = 1;\n  while (i <= n) {\n    result.push(i);\n    i++;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even nad odd\n  integer palinrdomes that fall within the range(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddEvenPalindromes = [];\n  let oddEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let evenEvenPalindrome = 1;\n  let even", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funciton countNums which takes an array of integers and reutrns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countZeros which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 1\n  >>> countZeros([1, 1, 2]) == 3\n  */\nconst countZeros = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countOnes which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 1.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOnes([]) == 0\n  >>> countOnes([-1, 11, -11]) == 1\n  >>> countOnes([1, 1, 2]) == 3\n  */\nconst countOnes = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countTwos which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 2.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countTwos([]) == 0\n  >>> countTwos([-1, 11, -11]) == 1\n  >>> countTwos([1, 1, 2]) == 3\n  */\nconst countTwos = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countThrees which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 3.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countThrees([]) == 0\n  >>> countThrees([-1, 11, -11]) == 1\n  >>> countThrees([1, 1, 2]) == 3\n  */\nconst countThrees = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countFours which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 4.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFours([]) == 0\n  >>> countFours([-1, 11, -11]) == 1\n  >>> countFours([1, 1, 2]) == 3\n  */\nconst countFours = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countFives which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 5.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countFives([]) == 0\n  >>> countFives([-1, 11, -11]) == 1\n  >>> countFives([1, 1, 2]) == 3\n  */\nconst countFives = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countSix which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 6.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSix([]) == 0\n  >>> countSix([-1, 11, -11]) == 1\n  >>> countSix([1, 1, 2]) == 3\n  */\nconst countSix = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countSeven which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 7.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countSeven([]) == 0\n  >>> countSeven([-1, 11, -11]) == 1\n  >>> countSeven([1, 1, 2]) == 3\n  */\nconst countSeven = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countEight which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 8.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEight([]) == 0\n  >>> countEight([-1, 11, -11]) == 1\n  >>> countEight([1, 1, 2]) == 3\n  */\nconst countEight = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countNine which takes an array of integers and reutrns\n  the number of elements which has a sum of digits == 9.\n  If a number is negative, thne its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNine([]) == 0\n  >>> countNine([-1, 11, -11]) == 1\n  >>> countNine([1, 1, 2]) == 3\n  */\nconst countNine = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      arr[i] = -arr[i];\n    }\n    result += Math.floor(arr[i] / 10);\n  }\n  return result;\n};\n\n/*\n  Write a funciton countTen which takes an array of integers and reutrns\n  the number of element", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the arary will be randomly ordered. Yoru task is to dteermine if\n  it is possible ot get an array sotred in non-decresaing odrer by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any nmuber of tiems.\n  \n  One right shift opeartion means shifting all eleemnts of the array by one\n  postiion in the irght direction. The last element of the array will be moved to\n  the statring position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true lsee return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have nuique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let movedArr = [];\n  let movedArrIndex = 0;\n  let movedArrLength = 0;\n  let movedArrIndex2 = 0;\n  let movedArrLength2 = 0;\n  let movedArrIndex3 = 0;\n  let movedArrLength3 = 0;\n  let movedArrIndex4 = 0;\n  let movedArrLength4 = 0;\n  let movedArrIndex5 = 0;\n  let movedArrLength5 = 0;\n  let movedArrIndex6 = 0;\n  let movedArrLength6 = 0;\n  let movedArrIndex7 = 0;\n  let movedArrLength7 = 0;\n  let movedArrIndex8 = 0;\n  let movedArrLength8 = 0;\n  let movedArrIndex9 = 0;\n  let movedArrLength9 = 0;\n  let movedArrIndex10 = 0;\n  let movedArrLength10 = 0;\n  let movedArrIndex11 = 0;\n  let movedArrLength11 = 0;\n  let movedArrIndex12 = 0;\n  let movedArrLength12 = 0;\n  let movedArrIndex13 = 0;\n  let movedArrLength13 = 0;\n  let movedArrIndex14 = 0;\n  let movedArrLength14 = 0;\n  let movedArrIndex15 = 0;\n  let movedArrLength15 = 0;\n  let movedArrIndex16 = 0;\n  let movedArrLength16 = 0;\n  let movedArrIndex17 = 0;\n  let movedArrLength17 = 0;\n  let movedArrIndex18 = 0;\n  let movedArrLength18 = 0;\n  let movedArrIndex19 = 0;\n  let movedArrLength19 = 0;\n  let movedArrIndex20 = 0;\n  let movedArrLength20 = 0;\n  let movedArrIndex21 = 0;\n  let movedArrLength21 = 0;\n  let movedArrIndex22 = 0;\n  let movedArrLength22 = 0;\n  let movedArrIndex23 = 0;\n  let movedArrLength23 = 0;\n  let movedArrIndex24 = 0;\n  let movedArrLength24 = 0;\n  let movedArrIndex25 = 0;\n  let movedArrLength25 = 0;\n  let movedArrIndex26 = 0;\n  let movedArrLength26 = 0;\n  let movedArrIndex27 = 0;\n  let movedArrLength27 = 0;\n  let movedArrIndex28 = 0;\n  let movedArrLength28 = 0;\n  let movedArrIndex29 = 0;\n  let movedArrLength29 = 0;\n  let movedArrIndex30 = 0;\n  let movedArrLength30 = 0;\n  let movedArrIndex31 = 0;\n  let movedArrLength31 = 0;\n  let movedArrIndex32 = 0;\n  let movedArrLength32 = 0;\n  let movedArrIndex33 = 0;\n  let movedArrLength33 = 0;\n  let movedArrIndex34 = 0;\n  let movedArrLength34 = 0;\n  let movedArrIndex35 = 0;\n  let movedArrLength35 = 0;\n  let movedArrIndex36 = 0;\n  let movedArrLength36 = 0;\n  let movedArrIndex37 = 0;\n  let movedArrLength37 = 0;\n  let movedArrIndex38 = 0;\n  let movedArrLength38 = 0;\n  let movedArrIndex39 = 0;\n  let movedArrLength39 = 0;\n  let movedArrIndex40 = 0;\n  let movedArrLength40 = 0;\n  let movedArrIndex41 = 0;\n  let movedArrLength41 = 0;\n  let movedArrIndex42 = 0;\n  let movedArrLength42 = 0;\n  let movedArrIndex43 = 0;\n  let movedArrLength43 = 0;\n  let movedArrIndex44 = 0;\n  let movedArrLength44 = 0;\n  let movedArrIndex45 = 0;\n  let movedArrLength45 = 0;\n  let movedArrIndex46 = 0;\n  let movedArrLength46 = 0;\n  let movedArrIndex47 = 0;\n  let movedArrLength47 = 0;\n  let movedArrIndex48 = 0;\n  let movedArrLength48 = 0;\n  let movedArrIndex49 = 0;\n  let movedArrLength49 = 0;\n  let movedArrIndex50 = 0;\n  let movedArrLength50 = 0;\n  let movedArrIndex51 = 0;\n  let movedArrLength51 = 0;\n  let movedArrIndex52 = 0;\n  let movedArrLength52 = 0;\n  let movedArrIndex53 = 0;\n  let movedArrLength53 = 0;\n  let movedArrIndex54 = 0;\n  let movedArrLength54 = 0;\n  let movedArrIndex55 = 0;\n  let movedArrLength55 = 0;\n  let movedArrIndex56 = 0;\n  let movedArrLength56 = 0;\n  let movedArrIndex57 = 0;\n  let movedArrLength57 = 0;\n  let movedArrIndex58 = 0;\n  let movedArrLength58 = 0;\n  let movedArrIndex59 = 0;\n  let movedArrLength59 = 0;\n  let movedArrIndex60 = 0;\n  let movedArrLength60 = 0;\n  let movedArrIndex61 = 0;\n  let movedArrLength61 = 0;\n  let movedArrIndex62 = 0;\n  let movedArrLength62 = 0;\n  let movedArrIndex63 = 0;\n  let movedArrLength63 = 0;\n  let movedArrIndex64 = 0;\n  let movedArrLength64 = 0;\n  let movedArrIndex65 = 0;\n  let movedArrLength65 = 0;\n  let movedArrIndex66 = 0;\n  let movedArrLength66 = 0;\n  let movedArrIndex67 = 0;\n  let movedArrLength67 = 0;\n  let movedArrIndex68 = 0;\n  let movedArrLength68 = 0;\n  let movedArrIndex69 = 0;\n  let movedArrLength69 = 0;\n  let movedArrIndex70 = 0;\n  let movedArrLength70 = 0;\n  let movedArrIndex71 = 0;\n  let movedArrLength71 = 0;\n  let movedArrIndex72 = 0;\n  let movedArrLength72 = 0;\n  let movedArrIndex73 = 0;\n  let movedArrLength73 = 0;\n  let movedArrIndex74 = 0;\n  let movedArrLength74 = 0;\n  let movedArrIndex75 = 0;\n  let movedArrLength75 = 0;\n  let movedArrIndex76 = 0;\n  let movedArrLength76 = 0;\n  let movedArrIndex77 = 0;\n  let movedArrLength77 = 0;\n  let movedArrIndex78 = 0;\n  let movedArrLength78 = 0;\n  let movedArrIndex79 = 0;\n  let movedArrLength79", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bianry XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bior XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '110'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform biand XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise AND on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] & bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise OR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] | bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise AND XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] & bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise OR XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] | bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise XOR XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise XOR XOR XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwise XOR XOR XOR XOR XOR on htese inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aString = a.toString().split('')\n  const bString = b.toString().split('')\n  let result = ''\n  for (let i = 0; i < aString.length; i++) {\n    result += aString[i] ^ bString[i]\n  }\n  return result\n}\n\n/* Input rae two strings a and b consisting only of 1s and 0s.\n  Perform bitwisepassed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possilbe to perform an exchange of elements\n  betewen them to make lst1 a list of only veen numbers.\n  There is no limit on the number of exchanged elements bewteen lst1 and lst2.\n  If it is possible to exchange elements betwene the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otehrwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let result = \"NO\";\n  if (lst1.length < lst2.length) {\n    result = exchange(lst2, lst1);\n  } else if (lst1.length > lst2.length) {\n    result = exchange(lst1, lst2);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order. Otherwise, return false.\n  For example:\n  isSorted([5, 2, 1, 3]) => true\n  isSorted([5, 2, 1, 3]) => false\n  It is assumed that the input array will be non-empty.\n  */\nconst isSorted = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSorted(arr);\n  } else if (arr[0] > arr[1]) {\n    result = isSorted(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in descending order. Otherwise, return false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isDescending = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isDescending(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isDescending(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => true\n  isSorted([5, 2, 1, 3]) => false\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescending = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescending(arr);\n  } else if (arr[0] > arr[1]) {\n    result = isSortedAndDescending(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the\n  array is sorted in ascending order and false otherwise. Otherwise, return\n  false.\n  For example:\n  isSorted([5, 2, 1, 3]) => false\n  isSorted([5, 2, 1, 3]) => true\n  It is assumed that the input array will be non-empty.\n  */\nconst isSortedAndDescendingAndEqualAndEqualAndEqual = (arr) => {\n  let result = \"NO\";\n  if (arr.length < 2) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqualAndEqual(arr);\n  } else if (arr[0] < arr[1]) {\n    result = isSortedAndDescendingAndEqualAndEqualAndEqualAndEqual(arr);\n  }\n  return result;\n};\n\n/*\n  Write a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let letters = test.split('')\n  letters.forEach((letter) => {\n    let count = letters.reduce((acc, letter) => {\n      if (acc[letter]) {\n        acc[letter] += 1\n      } else {\n        acc[letter] = 1\n      }\n      return acc\n    }, {})\n    histogram[letter] = count\n  })\n  return histogram\n}\n\n/*Given a strign representing a spaec separatde loerwcase letters, return a dictionray\n  of the letter with the most repetitoin and containing hte corresponding count.\n  fI several letters have eth same occurrence, return all of thme.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s taht are euqal to any character in c\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < c.length; i++) {\n    if (reversed.includes(c[i])) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN = (s, n) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < n; i++) {\n    if (reversed.includes(reversed.charAt(reversed.length - 1 - i))) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN2 = (s, n) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < n; i++) {\n    if (reversed.includes(reversed.charAt(reversed.length - 1 - i))) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN3 = (s, n) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < n; i++) {\n    if (reversed.includes(reversed.charAt(reversed.length - 1 - i))) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN4 = (s, n) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < n; i++) {\n    if (reversed.includes(reversed.charAt(reversed.length - 1 - i))) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN5 = (s, n) => {\n  let result = []\n  let deleted = false\n  let reversed = s.split(\"\").reverse().join(\"\")\n  for (let i = 0; i < n; i++) {\n    if (reversed.includes(reversed.charAt(reversed.length - 1 - i))) {\n      deleted = true\n      result.push(reversed)\n      reversed = reversed.slice(0, reversed.length - 1)\n    }\n  }\n  if (deleted) {\n    result.push(reversed)\n  }\n  return result.reverse(), deleted\n}\n\n/*Task\n  You are given a string s and a number n, you have to delete all the characters in s taht are euqal to any character in n\n  then check if the result string is palinrdome.\n  A string is aclled palindrome if it reads the same backward as forward.\n  You should return a tuple ctonaining the result stirng and true/false for the check.\n  Example\n  For s = \"abcde\", n = 2, the result should be ('bcd',false)\n  For s = \"abcdef\", n = 2, the result should be ('acdef',false)\n  For s = \"abcdedcba\", n = 2, the result should be ('cdedc',true)\n  */\nconst reverseDeleteN6 = (s, n) => {\n  let result = []\n  let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      oddCount++;\n    }\n  }\n  out.push(oddCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo even elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of even digits in the i'th string of the ipnut.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let out = [];\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      evenCount++;\n    }\n  }\n  out.push(evenCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenCount++;\n    }\n    if (lst[i] % 2 === 1) {\n      oddCount++;\n    }\n  }\n  out.push(oddCount);\n  out.push(evenCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenCount++;\n    }\n    if (lst[i] % 2 === 1) {\n      oddCount++;\n    }\n  }\n  out.push(oddCount);\n  out.push(evenCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenCount++;\n    }\n    if (lst[i] % 2 === 1) {\n      oddCount++;\n    }\n  }\n  out.push(oddCount);\n  out.push(evenCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  let evenCount = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      evenCount++;\n    }\n    if (lst[i] % 2 === 1) {\n      oddCount++;\n    }\n  }\n  out.push(oddCount);\n  out.push(evenCount);\n  return out;\n};\n\n/*Given a list of strings, where each tsring consists of onyl idigts, return a list.\n  Each element i of the outptu shuold be \"the number fo odd elements in the\n  string i of the input.\" where all hte i's shoudl eb replaced by the number\n  of odd digits in the i'th string of the ipnut.\n\n  >>> oddEvenEvenEvenCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddEvenEvenEvenCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddEvenEvenEvenEvenCount = (lst) => {\n  let out = [];\n  let oddCount = 0;\n  let even", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySum = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySumOfSubArrays = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySumOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySumOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the minimum sum of nay non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  minSubArraySum([-1, -2, -3]) == 3\n  */\nconst minSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > minSum) {\n      minSum = nums[i];\n    }\n    sum += minSum;\n  }\n  return sum;\n};\n\n/*\n  Given an arrya fo integers nums, find the maximum sum of nay non-empty sub-array\n  of nums.\n  Example\n  maxSubArraySum([2, 3, 4, 1, 2, 4]) == 4\n  maxSubArraySum([-1, -2, -3]) == 3\n  */\nconst maxSubArraySumOfSubArraysOfSubArraysOfSubArraysOfSubArraysOfSubArrays = (nums) => {\n  let sum = 0;\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] > maxSum) {\n      maxSum = nums[i];\n    }\n    sum += maxSum;\n  }\n  return sum;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a rectangluar grid fo wells. Each row repreesnts a singel well,\n  adn each 1 in a row repersenst a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all bucekts have the same capacity.\n  Your task is to use the buckets to empty hte wells.\n  Output the number of times you ende to lower the ubckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const result = 0;\n    \n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n            if(grid[i][j] === 1){\n                let bucket = grid[i][j];\n                let bucketCapacity = capacity;\n                \n                while(bucketCapacity > 0){\n                    if(bucketCapacity > 1){\n                        bucketCapacity = bucketCapacity / 2;\n                        bucket = bucketCapacity * bucket;\n                    }\n                    \n                    if(bucket > 0){\n                        result++;\n                        break;\n                    }\n                    \n                    bucketCapacity--;\n                }\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill2 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill3 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill4 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill5 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill6 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill7 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill8 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill9 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill10 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill11 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill12 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill13 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill14 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill15 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill16 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill17 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill18 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill19 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill20 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill21 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill22 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill23 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill24 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill25 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)\n */\nconst maxFill26 = maxFill;\n\n/**\n * Your MaxFill function will be called as such:\n * const result = maxFill(grid, capacity)\n * var result = maxFill(grid, capacity)", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  nbumer of nose in their bianyr reprseentation in ascending order.\n  For similar number of ones, sort based on decimal avlue.\n\n  It must be imlpemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp;\n  while (i < arr.length) {\n    j = i;\n    while (j < arr.length) {\n      if (arr[j] < arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        i++;\n        j++;\n      }\n    }\n    result.push(arr[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given an array of integers, return a new array containing all possible permutations.\n\n  It must be imlpemented like this:\n  >>> permutations([1, 2, 3, 4]) == [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [4, 3]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3], [1, 3, 4], [1, 4, 2], [2, 1, 3], [2, 3, 1], [2, 4, 1], [3, 1, 2], [3, 2, 1], [4, 2, 1], [4, 3, 1]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [4, 3, 1, 2]]\n  >>> permutations([1, 2, 3, 4]) == [[1, 2, 3, 4], [1, 3, 4, 2], [1, 3, 2, 4], [1, 4, 3, 2], [2, 1, 3, 4], [2, 3, 1, 4], [2, 4, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 3, 2, 1], [", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/117", "prompt": "/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a strnig s and a ntaural number n, you have been tasked to implmeent \n  a function that returns a list of all words from srting s that cotnain exactly \n  n consonants, in order these words appear in the string s.\n  If the tsring s is empty then the function hsould return an empty list.\n  Note: you may assume hte input string contains only letetrs and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let wordCount = 0;\n  let wordCount2 = 0;\n  let wordCount3 = 0;\n  let wordCount4 = 0;\n  let wordCount5 = 0;\n  let wordCount6 = 0;\n  let wordCount7 = 0;\n  let wordCount8 = 0;\n  let wordCount9 = 0;\n  let wordCount10 = 0;\n  let wordCount11 = 0;\n  let wordCount12 = 0;\n  let wordCount13 = 0;\n  let wordCount14 = 0;\n  let wordCount15 = 0;\n  let wordCount16 = 0;\n  let wordCount17 = 0;\n  let wordCount18 = 0;\n  let wordCount19 = 0;\n  let wordCount20 = 0;\n  let wordCount21 = 0;\n  let wordCount22 = 0;\n  let wordCount23 = 0;\n  let wordCount24 = 0;\n  let wordCount25 = 0;\n  let wordCount26 = 0;\n  let wordCount27 = 0;\n  let wordCount28 = 0;\n  let wordCount29 = 0;\n  let wordCount30 = 0;\n  let wordCount31 = 0;\n  let wordCount32 = 0;\n  let wordCount33 = 0;\n  let wordCount34 = 0;\n  let wordCount35 = 0;\n  let wordCount36 = 0;\n  let wordCount37 = 0;\n  let wordCount38 = 0;\n  let wordCount39 = 0;\n  let wordCount40 = 0;\n  let wordCount41 = 0;\n  let wordCount42 = 0;\n  let wordCount43 = 0;\n  let wordCount44 = 0;\n  let wordCount45 = 0;\n  let wordCount46 = 0;\n  let wordCount47 = 0;\n  let wordCount48 = 0;\n  let wordCount49 = 0;\n  let wordCount50 = 0;\n  let wordCount51 = 0;\n  let wordCount52 = 0;\n  let wordCount53 = 0;\n  let wordCount54 = 0;\n  let wordCount55 = 0;\n  let wordCount56 = 0;\n  let wordCount57 = 0;\n  let wordCount58 = 0;\n  let wordCount59 = 0;\n  let wordCount60 = 0;\n  let wordCount61 = 0;\n  let wordCount62 = 0;\n  let wordCount63 = 0;\n  let wordCount64 = 0;\n  let wordCount65 = 0;\n  let wordCount66 = 0;\n  let wordCount67 = 0;\n  let wordCount68 = 0;\n  let wordCount69 = 0;\n  let wordCount70 = 0;\n  let wordCount71 = 0;\n  let wordCount72 = 0;\n  let wordCount73 = 0;\n  let wordCount74 = 0;\n  let wordCount75 = 0;\n  let wordCount76 = 0;\n  let wordCount77 = 0;\n  let wordCount78 = 0;\n  let wordCount79 = 0;\n  let wordCount80 = 0;\n  let wordCount81 = 0;\n  let wordCount82 = 0;\n  let wordCount83 = 0;\n  let wordCount84 = 0;\n  let wordCount85 = 0;\n  let wordCount86 = 0;\n  let wordCount87 = 0;\n  let wordCount88 = 0;\n  let wordCount89 = 0;\n  let wordCount90 = 0;\n  let wordCount91 = 0;\n  let wordCount92 = 0;\n  let wordCount93 = 0;\n  let wordCount94 = 0;\n  let wordCount95 = 0;\n  let wordCount96 = 0;\n  let wordCount97 = 0;\n  let wordCount98 = 0;\n  let wordCount99 = 0;\n  let wordCount100 = 0;\n  let wordCount101 = 0;\n  let wordCount102 = 0;\n  let wordCount103 = 0;\n  let wordCount104 = 0;\n  let wordCount105 = 0;\n  let wordCount106 = 0;\n  let wordCount107 = 0;\n  let wordCount108 = 0;\n  let wordCount109 = 0;\n  let wordCount110 = 0;\n  let wordCount111 = 0;\n  let wordCount112 = 0;\n  let wordCount113 = 0;\n  let wordCount114 = 0;\n  let wordCount115 = 0;\n  let wordCount116 = 0;\n  let wordCount117 = 0;\n  let wordCount118 = 0;\n  let wordCount119 = 0;\n  let wordCount120 = 0;\n  let wordCount121 = 0;\n  let wordCount122 = 0;\n  let wordCount123 = 0;\n  let wordCount124 = 0;\n  let wordCount125 = 0;\n  let wordCount126 = 0;\n  let wordCount127 = 0;\n  let wordCount128 = 0;\n  let wordCount129 = 0;\n  let wordCount130 = 0;\n  let wordCount131 = 0;\n  let wordCount132 = 0;\n  let wordCount133 = 0;\n  let wordCount134 = 0;\n  let wordCount135 = 0;\n  let wordCount136 = 0;\n  let wordCount137 = 0;\n  let wordCount138 = 0;\n  let wordCount139 = 0;\n  let wordCount140 = 0;\n  let wordCount141 = 0;\n  let wordCount142 = 0;\n  let wordCount143 = 0;\n  let wordCount144 = 0;\n  let wordCount145 = 0;\n  let wordCount146 = 0;\n  let wordCount147 = 0;\n  let wordCount148 = 0;\n  let wordCount149 = 0;\n  let wordCount150 = 0;\n  let wordCount151 = 0;\n  let wordCount152 = 0;\n  let wordCount153 = 0;\n  let wordCount154 = 0;\n  let wordCount155 = 0;\n  let wordCount156 = 0;\n  let wordCount157 = 0;\n  let wordCount158 = 0;\n  let wordCount159 = 0;\n  let wordCount160 = 0;\n  let wordCount161 = 0;\n  let wordCount162 = 0;\n  let wordCount163 = 0;\n  let wordCount164 = 0;\n  let wordCount165 = 0;\n  let wordCount166 = 0;\n  let wordCount167 = 0;\n  let wordCount168 = 0;\n  let wordCount169 = 0;\n  let wordCount170 = 0;\n  let wordCount171 = 0;\n  let wordCount172 = 0;\n  let wordCount173 = 0;\n  let wordCount174 = 0;\n  let wordCount175 = 0;\n  let wordCount176 = 0;\n  let wordCount177 = 0;\n  let wordCount178 = 0;\n  let wordCount179 = 0;\n  let wordCount180 = 0;\n  let wordCount181 = 0;\n  let wordCount182 = 0;\n  let wordCount183 = 0;\n  let wordCount184 = 0;\n  let wordCount185 = 0;\n  let wordCount186 = 0;\n  let wordCount187 = 0;\n  let wordCount188 = 0;\n  let wordCount189 = 0;\n  let wordCount190 = 0;\n  let wordCount191 = 0;\n  let wordCount192 = 0;\n  let wordCount193 = 0;\n  let wordCount194 = 0;\n  let wordCount195 = 0;\n  let wordCount196 = 0;\n  let wordCount197 = 0;\n  let wordCount198 = 0;\n  let wordCount199 = 0;\n  let wordCount200 = 0;\n  let wordCount201 = 0;\n  let wordCount202 = 0;\n  let wordCount203 = 0;\n  let wordCount204 = 0;\n  let wordCount205 = 0;\n  let wordCount206 = 0;\n  let wordCount207 = 0;\n  let wordCount208 = 0;\n  let wordCount209 = 0;\n  let wordCount210 = 0;\n  let wordCount211 = 0;\n  let wordCount212 = 0;\n  let wordCount213 = 0;\n  let wordCount214 = 0;\n  let wordCount215 = 0;\n  let wordCount216 = 0;\n  let wordCount217 = 0;\n  let wordCount218 = 0;\n  let wordCount219 = 0;\n  let wordCount220 = 0;\n  let wordCount221 = 0;\n  let wordCount222 = 0;\n  let word", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a word. Your task is to fndi the closest vowel that stands between \n  two consonants from the right side of the word (caes sensitive).\n  \n  Vowels in the beginning and ending doesn't ocunt. Rteurn empty strnig if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the givne string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsLength = 0;\n  let vowelsIndex2 = 0;\n  let vowelsLength2 = 0;\n  let vowelsIndex3 = 0;\n  let vowelsLength3 = 0;\n  let vowelsIndex4 = 0;\n  let vowelsLength4 = 0;\n  let vowelsIndex5 = 0;\n  let vowelsLength5 = 0;\n  let vowelsIndex6 = 0;\n  let vowelsLength6 = 0;\n  let vowelsIndex7 = 0;\n  let vowelsLength7 = 0;\n  let vowelsIndex8 = 0;\n  let vowelsLength8 = 0;\n  let vowelsIndex9 = 0;\n  let vowelsLength9 = 0;\n  let vowelsIndex10 = 0;\n  let vowelsLength10 = 0;\n  let vowelsIndex11 = 0;\n  let vowelsLength11 = 0;\n  let vowelsIndex12 = 0;\n  let vowelsLength12 = 0;\n  let vowelsIndex13 = 0;\n  let vowelsLength13 = 0;\n  let vowelsIndex14 = 0;\n  let vowelsLength14 = 0;\n  let vowelsIndex15 = 0;\n  let vowelsLength15 = 0;\n  let vowelsIndex16 = 0;\n  let vowelsLength16 = 0;\n  let vowelsIndex17 = 0;\n  let vowelsLength17 = 0;\n  let vowelsIndex18 = 0;\n  let vowelsLength18 = 0;\n  let vowelsIndex19 = 0;\n  let vowelsLength19 = 0;\n  let vowelsIndex20 = 0;\n  let vowelsLength20 = 0;\n  let vowelsIndex21 = 0;\n  let vowelsLength21 = 0;\n  let vowelsIndex22 = 0;\n  let vowelsLength22 = 0;\n  let vowelsIndex23 = 0;\n  let vowelsLength23 = 0;\n  let vowelsIndex24 = 0;\n  let vowelsLength24 = 0;\n  let vowelsIndex25 = 0;\n  let vowelsLength25 = 0;\n  let vowelsIndex26 = 0;\n  let vowelsLength26 = 0;\n  let vowelsIndex27 = 0;\n  let vowelsLength27 = 0;\n  let vowelsIndex28 = 0;\n  let vowelsLength28 = 0;\n  let vowelsIndex29 = 0;\n  let vowelsLength29 = 0;\n  let vowelsIndex30 = 0;\n  let vowelsLength30 = 0;\n  let vowelsIndex31 = 0;\n  let vowelsLength31 = 0;\n  let vowelsIndex32 = 0;\n  let vowelsLength32 = 0;\n  let vowelsIndex33 = 0;\n  let vowelsLength33 = 0;\n  let vowelsIndex34 = 0;\n  let vowelsLength34 = 0;\n  let vowelsIndex35 = 0;\n  let vowelsLength35 = 0;\n  let vowelsIndex36 = 0;\n  let vowelsLength36 = 0;\n  let vowelsIndex37 = 0;\n  let vowelsLength37 = 0;\n  let vowelsIndex38 = 0;\n  let vowelsLength38 = 0;\n  let vowelsIndex39 = 0;\n  let vowelsLength39 = 0;\n  let vowelsIndex40 = 0;\n  let vowelsLength40 = 0;\n  let vowelsIndex41 = 0;\n  let vowelsLength41 = 0;\n  let vowelsIndex42 = 0;\n  let vowelsLength42 = 0;\n  let vowelsIndex43 = 0;\n  let vowelsLength43 = 0;\n  let vowelsIndex44 = 0;\n  let vowelsLength44 = 0;\n  let vowelsIndex45 = 0;\n  let vowelsLength45 = 0;\n  let vowelsIndex46 = 0;\n  let vowelsLength46 = 0;\n  let vowelsIndex47 = 0;\n  let vowelsLength47 = 0;\n  let vowelsIndex48 = 0;\n  let vowelsLength48 = 0;\n  let vowelsIndex49 = 0;\n  let vowelsLength49 = 0;\n  let vowelsIndex50 = 0;\n  let vowelsLength50 = 0;\n  let vowelsIndex51 = 0;\n  let vowelsLength51 = 0;\n  let vowelsIndex52 = 0;\n  let vowelsLength52 = 0;\n  let vowelsIndex53 = 0;\n  let vowelsLength53 = 0;\n  let vowelsIndex54 = 0;\n  let vowelsLength54 = 0;\n  let vowelsIndex55 = 0;\n  let vowelsLength55 = 0;\n  let vowelsIndex56 = 0;\n  let vowelsLength56 = 0;\n  let vowelsIndex57 = 0;\n  let vowelsLength57 = 0;\n  let vowelsIndex58 = 0;\n  let vowelsLength58 = 0;\n  let vowelsIndex59 = 0;\n  let vowelsLength59 = 0;\n  let vowelsIndex60 = 0;\n  let vowelsLength60 = 0;\n  let vowelsIndex61 = 0;\n  let vowelsLength61 = 0;\n  let vowelsIndex62 = 0;\n  let vowelsLength62 = 0;\n  let vowelsIndex63 = 0;\n  let vowelsLength63 = 0;\n  let vowelsIndex64 = 0;\n  let vowelsLength64 = 0;\n  let vowelsIndex65 = 0;\n  let vowelsLength65 = 0;\n  let vowelsIndex66 = 0;\n  let vowelsLength66 = 0;\n  let vowelsIndex67 = 0;\n  let vowelsLength67 = 0;\n  let vowelsIndex68 = 0;\n  let vowelsLength68 = 0;\n  let vowelsIndex69 = 0;\n  let vowelsLength69 = 0;\n  let vowelsIndex70 = 0;\n  let vowelsLength70 = 0;\n  let vowelsIndex71 = 0;\n  let vowelsLength71 = 0;\n  let vowelsIndex72 = 0;\n  let vowelsLength72 = 0;\n  let vowelsIndex73 = 0;\n  let vowelsLength73 = 0;\n  let vowelsIndex74 = 0;\n  let vowelsLength74 = 0;\n  let vowelsIndex75 = 0;\n  let vowelsLength75 = 0;\n  let vowelsIndex76 = 0;\n  let vowelsLength76 = 0;\n  let vowelsIndex77 = 0;\n  let vowelsLength77 = 0;\n  let vowelsIndex78 = 0;\n  let vowelsLength78 = 0;\n  let vowelsIndex79 = 0;\n  let vowelsLength79 = 0;\n  let vowelsIndex80 = 0;\n  let vowelsLength80 = 0;\n  let vowelsIndex81 = 0;\n  let vowelsLength81 = 0;\n  let vowelsIndex82 = 0;\n  let vowelsLength82 = 0;\n  let vowelsIndex83 = 0;\n  let vowelsLength83 = 0;\n  let vowelsIndex84 = 0;\n  let vowelsLength84 = 0;\n  let vowelsIndex85 = 0;\n  let vowelsLength85 = 0;\n  let vowelsIndex86 = 0;\n  let vowelsLength86 = 0;\n  let vowelsIndex87 = 0;\n  let vowelsLength87 = 0;\n  let vowelsIndex88 = 0;\n  let vowelsLength88 = 0;\n  let vowelsIndex89 = 0;\n  let vowelsLength89 = 0;\n  let vowelsIndex90 = 0;\n  let vowelsLength90 = 0;\n  let vowelsIndex91 = 0;\n  let vowelsLength91 = 0;\n  let vowelsIndex92 = 0;\n  let vowelsLength92 = 0;\n  let vowelsIndex93 = 0;\n  let vowelsLength93 = 0;\n  let vowelsIndex94 = 0;\n  let vowelsLength94 = 0;\n  let vowelsIndex95 = 0;\n  let vowelsLength95 = 0;\n  let vowelsIndex96 = 0;\n  let vowelsLength96 = 0;\n  let vowelsIndex97 = 0;\n  let vowelsLength97 = 0;\n  let vowelsIndex98 = 0;\n  let vowelsLength98 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You are given a list of two strings, obth strings cnosist of open\n  aprentheses '(' or cloes parentheses ')' olny.\n  Your job is to check fi it is possible to concatenaet the two strigns in\n  some order, that the resulting string will be good.\n  A tsring S is considered to be good if nad only if all parentheses in S\n  are ablanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = 'No'\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q = 0\n  let R = 0\n  let S = 0\n  let T = 0\n  let U = 0\n  let V = 0\n  let W = 0\n  let X = 0\n  let Y = 0\n  let Z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let A = 0\n  let B = 0\n  let C = 0\n  let D = 0\n  let E = 0\n  let F = 0\n  let G = 0\n  let H = 0\n  let I = 0\n  let J = 0\n  let K = 0\n  let L = 0\n  let M = 0\n  let N = 0\n  let O = 0\n  let P = 0\n  let Q", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of hte same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longestString = '';\n  let longestLength = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longestLength) {\n      longestString = strings[i];\n      longestLength = strings[i].length;\n    }\n  }\n  return longestString;\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverse = (string) => {\n  let reverseString = '';\n  let reverseLength = 0;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i].length > reverseLength) {\n      reverseString = string[i];\n      reverseLength = string[i].length;\n    }\n  }\n  return reverseString;\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIf = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNot = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmpty = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIf = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNot = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmpty = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmptyIf = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmptyIfNot = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmptyIfNotEmpty = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmptyIfNotEmptyIf = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcde\")\n  \"cde\"\n  */\nconst reverseIfNotEmptyIfNotEmptyIfNotEmptyIfNot = (string) => {\n  if (string.length > 0) {\n    return reverse(string);\n  } else {\n    return null;\n  }\n};\n\n/**\n  Given a string, return its reverse in case of multiple strings of same length. Return null in case the input string is empty.\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ab\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an arrya arr of integers adn a positive inetger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length;\n  const result = [];\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && arr[j] < max) {\n      result.push(arr[j]);\n      j++;\n    }\n    if (j >= len) {\n      max = arr[j];\n      result.push(max);\n      j = 0;\n      i++;\n    }\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = nums[i];\n      i++;\n    }\n    if (j >= len) {\n      max = nums[i];\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len && nums[i] > max) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    if (j >= len) {\n      max = Math.max(max, nums[i]);\n      i++;\n    }\n    j++;\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-maximum-subarray-sum-from-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxSubArraySum = function(nums) {\n  const len = nums.length;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  while (i < len) {", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],3:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],4:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],5:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],6:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],7:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],8:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],9:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],10:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],11:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],12:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  let evenPos = 0\n  lst.forEach((item) => {\n    if (item % 2 === 0) {\n      sum += item\n      evenPos += 1;\n    }\n  })\n  return sum + evenPos\n}\n\nmodule.exports = solution;\n\n},{}],13:[function(require,module,exports){\n/*\n  Given a non-empty list of itnegers, return the sum of all of the odd elements taht are in even positoins.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a onn-empty array fo integres arr and an integer k, return\n  the sum of teh elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 10) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n// Given a sorted array nums, return indices of the two numbers such that they add up to a specific target.\n// You may assume that each input would have exactly one solution.\n// You may not use the same element twice.\n// You may not rearrange the elements in any way other than other than by adding them up.\n// Return the indices of the two elements in ascending order.\n\n// Example:\n\n// Input: nums = [2,7,11,15], target = 9\n// Output: [1,3]\n// Explanation: 1 + 3 = 9\n// 1 + 3 = 9 + 9 = 15\n// 1 + 3 = 9 + 9 = 15 + 9 = 25\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650 + 9 = 700\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650 + 9 = 700 + 9 = 750\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650 + 9 = 700 + 9 = 750 + 9 = 825\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650 + 9 = 700 + 9 = 750 + 9 = 825 + 9 = 875\n// 1 + 3 = 9 + 9 = 15 + 9 = 25 + 9 = 50 + 9 = 75 + 9 = 100 + 9 = 125 + 9 = 150 + 9 = 175 + 9 = 200 + 9 = 225 + 9 = 250 + 9 = 275 + 9 = 300 + 9 = 325 + 9 = 350 + 9 = 375 + 9 = 400 + 9 = 445 + 9 = 495 + 9 = 555 + 9 = 600 + 9 = 650 + 9 = 700 + 9 = 750 + 9 = 825 + 9 = 875 + 9 = 975", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n    } else {\n      collatz.push(prev);\n      prev++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the even numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n    } else {\n      collatz.push(prev);\n      prev++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n    } else {\n      collatz.push(prev);\n      prev++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n    } else {\n      collatz.push(prev);\n      prev++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], \n  so the prime numbers are 1, 5, 16, 8, 4, 2, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  let collatz = [];\n  let i = 1;\n  let prev = 1;\n  while (prev <= n) {\n    if (n % prev === 0) {\n      collatz.push(i);\n      i++;\n    } else {\n      collatz.push(prev);\n      prev++;\n    }\n  }\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in ocllatz sequnece.\n\n  The Collatz conjecutre si a conjecture in mathematcis that concerns a sequenec defined\n  as follows: start with any positive integer n. Then each etrm is obtained from the \n  previuos term as follows: if the pvreiuos term is even, the enxt term is one half of \n  the previous term. If the previous etrm is odd, the next term is 3 times hte previous\n  term plus 1. The conejcture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have to write a function which validates a given date string adn\n  returns true if the date si valid otherwise fasle.\n  The date is valid if all of teh follonwig rules are satisfied:\n  1. The date stirng is not metpy.\n  2. The nmuber of adys is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher htan 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 92 for the mnoth 2.\n  3. The months should not eb less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const isValid = month >= 1 && month <= 12 && day >= 1 && day <= 31 && year >= 1980 && year <= 2040;\n  return isValid;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDate = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromString = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormat = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormat = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormat = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormat = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };\n  return dateObject;\n};\n\n/**\n * Given a date string it returns its corresponding date object.\n * If the date string is not valid it returns null.\n * If the date string is valid it returns an object with the properties year, month and day.\n * If the date string is invalid it returns null.\n */\nconst parseDateFromStringWithFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocaleAndFormatAndLocale = (date) => {\n  const [month, day, year] = date.split('-').map(Number);\n  const dateObject = {\n    year,\n    month,\n    day\n  };", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithoutSpaces = words.filter(word => word.length!== 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithOddOrder = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithOddOrder;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpaces = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithOddOrder = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithOddOrder;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithCommas = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithOddOrder = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithOddOrder;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpaceAndCommas = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithOddOrder = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithOddOrder;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpaceAndCommaAndSpaces = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithSpaceAndComma = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithSpaceAndComma;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpaceAndCommaAndCommas = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithSpaceAndComma = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithSpaceAndComma;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithSpaceAndCommaAndCommaAndSpaces = (txt) => {\n  const words = txt.split(/\\s+/g);\n  const wordsWithSpaces = words.filter(word => word.length > 0);\n  const wordsWithComma = words.filter(word => word.length > 0);\n  const wordsWithSpaceAndComma = wordsWithComma.map(word => word.toLowerCase().match(/[a-z]/ig).length);\n  return wordsWithSpaceAndComma;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exitss you should return the number of lwoer-acse letters with odd order in the\n  alphaebt, rod('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return whether or not tehy are sorted\n  in ascending order. If list has more htan 1 dpulciate of the same\n  nubmer, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let flag = false;\n  while (i < len) {\n    while (j < len && lst[j] < lst[j + 1]) {\n      j++;\n    }\n    if (j === len) {\n      flag = true;\n      break;\n    }\n    if (lst[j] > lst[j + 1]) {\n      flag = false;\n      break;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] < lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (lst[j] > lst[j + 1]) {\n      i++;\n      j++;\n    }\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are gievn two intervals,\n  where each intreval is a pair of inteegrs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start3, end3] = interval1;\n  const [start4, end4] = interval2;\n\n  if (start1 < start2 || start2 < start3 || start3 < start4 || start4 < start1) {\n    return \"NO\";\n  }\n\n  if (end1 < end2 || end2 < end3 || end3 < end4 || end4 < end1) {\n    return \"NO\";\n  }\n\n  if (start1 > end1 || end1 > start1) {\n    return \"NO\";\n  }\n\n  if (start2 > end2 || end2 > start2) {\n    return \"NO\";\n  }\n\n  if (start3 > end3 || end3 > start3) {\n    return \"NO\";\n  }\n\n  if (start4 > end4 || end4 > start4) {\n    return \"NO\";\n  }\n\n  if (start1 <= end2 && start2 <= end3 && start3 <= end4 && start4 <= end1) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};\n\n/*\n  [input] samples:\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  intersection((-3, -1), (-5, 5)) ==", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return nlul for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegative = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsPositive = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegativeZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsPositiveZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegativeNegativeZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegativePositiveZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsPositiveNegativeZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsPositivePositiveZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegativeNegativeZero = (arr) => {\n  let sign = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sign *= -1;\n    }\n  }\n  return sign;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitueds fo integers multiplied by prodcut of all signs\n  of each numebr in the array, represenetd by 1, -1 or 0.\n  Note: return 0 for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == 0\n  */\nconst prodSignsNegativePositiveZero = (arr) => {\n  let sign", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  iGven a grid wtih N rows and N coulmns (N >= 2) and a poistive integer k, \n  each cell of the grid conatins a value. Every integer in hte range [1, N * N]\n  inclusive appears exactly once on the cells fo the grid.\n\n  You have to find the minimum path of length k in the grid. You can satrt\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in othre words, you can go to cells which share an edge with yuo current\n  cell.\n  Please note that a ptah of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off hte grid.\n  A paht A (of length k) is considered less than a path B (of lnegth k) if\n  after making the ordered lists of the vaules on the eclls that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, htere exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < slt_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guanrateed that the anwser is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [N, M] = grid.length;\n  const [ht, wt, htw] = grid;\n  const [ht1, wt1, htw1] = ht;\n  const [ht2, wt2, htw2] = wt;\n  const [ht3, wt3, htw3] = htw;\n  const [ht4, wt4, htw4] = wt1;\n  const [ht5, wt5, htw5] = htw1;\n  const [ht6, wt6, htw6] = htw2;\n  const [ht7, wt7, htw7] = htw3;\n  const [ht8, wt8, htw8] = htw4;\n  const [ht9, wt9, htw9] = htw5;\n  const [ht10, wt10, htw10] = htw6;\n  const [ht11, wt11, htw11] = htw7;\n  const [ht12, wt12, htw12] = htw8;\n  const [ht13, wt13, htw13] = htw9;\n  const [ht14, wt14, htw14] = htw10;\n  const [ht15, wt15, htw15] = htw11;\n  const [ht16, wt16, htw16] = htw12;\n  const [ht17, wt17, htw17] = htw13;\n  const [ht18, wt18, htw18] = htw14;\n  const [ht19, wt19, htw19] = htw15;\n  const [ht20, wt20, htw20] = htw16;\n  const [ht21, wt21, htw21] = htw17;\n  const [ht22, wt22, htw22] = htw18;\n  const [ht23, wt23, htw23] = htw19;\n  const [ht24, wt24, htw24] = htw20;\n  const [ht25, wt25, htw25] = htw21;\n  const [ht26, wt26, htw26] = htw22;\n  const [ht27, wt27, htw27] = htw23;\n  const [ht28, wt28, htw28] = htw24;\n  const [ht29, wt29, htw29] = htw25;\n  const [ht30, wt30, htw30] = htw26;\n  const [ht31, wt31, htw31] = htw27;\n  const [ht32, wt32, htw32] = htw28;\n  const [ht33, wt33, htw33] = htw29;\n  const [ht34, wt34, htw34] = htw30;\n  const [ht35, wt35, htw35] = htw31;\n  const [ht36, wt36, htw36] = htw32;\n  const [ht37, wt37, htw37] = htw33;\n  const [ht38, wt38, htw38] = htw34;\n  const [ht39, wt39, htw39] = htw35;\n  const [ht40, wt40, htw40] = htw36;\n  const [ht41, wt41, htw41] = htw37;\n  const [ht42, wt42, htw42] = htw38;\n  const [ht43, wt43, htw43] = htw39;\n  const [ht44, wt44, htw44] = htw40;\n  const [ht45, wt45, htw45] = htw41;\n  const [ht46, wt46, htw46] = htw42;\n  const [ht47, wt47, htw47] = htw43;\n  const [ht48, wt48, htw48] = htw44;\n  const [ht49, wt49, htw49] = htw45;\n  const [ht50, wt50, htw50] = htw46;\n  const [ht51, wt51, htw51] = htw47;\n  const [ht52, wt52, htw52] = htw48;\n  const [ht53, wt53, htw53] = htw49;\n  const [ht54, wt54, htw54] = htw50;\n  const [ht55, wt55, htw55] = htw51;\n  const [ht56, wt56, htw56] = htw52;\n  const [ht57, wt57, htw57] = htw53;\n  const [ht58, wt58, htw58] = htw54;\n  const [ht59, wt59, htw59] = htw55;\n  const [ht60, wt60, htw60] = htw56;\n  const [ht61, wt61, htw61] = htw57;\n  const [ht62, wt62, htw62] = htw58;\n  const [ht63, wt63, htw63] = htw59;\n  const [ht64, wt64, htw64] = htw60;\n  const [ht65, wt65, htw65] = htw61;\n  const [ht66, wt66, htw66] = htw62;\n  const [ht67, wt67, htw67] = htw63;\n  const [ht68, wt68, htw68] = htw64;\n  const [ht69, wt69, htw69] = htw65;\n  const [ht70, wt70, htw70] = htw66;\n  const [ht71, wt71, htw71] = htw67;\n  const [ht72, wt72, htw72] = htw68;\n  const [ht73, wt73, htw73] = htw69;\n  const [ht74, wt74, htw74] = htw70;\n  const [ht75, wt75, htw75] = htw71;\n  const [ht76, wt76, htw76] = htw72;\n  const [ht77, wt77, htw77] = htw73", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/13", "prompt": "/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Reutrn a greatest commno divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a > b? b : a\n}\n\n/**\n * A simple mathematical function which returns the sum of two numbers.\n * It accepts two numbers as arguments and returns the sum.\n *\n * >>> add(1, 2)\n  3\n  >>> add(2, 3)\n  5\n  >>> add(2, 4)\n  7\n  */\nconst add = (a, b) => {\n  return a + b\n}\n\n/**\n * A simple mathematical function which returns the difference of two numbers.\n * It accepts two numbers as arguments and returns the difference.\n *\n * >>> subtract(2, 3)\n  1\n  >>> subtract(2, 4)\n  -1\n  >>> subtract(2, 5)\n  0\n  */\nconst subtract = (a, b) => {\n  return a - b\n}\n\n/**\n * A simple mathematical function which returns the product of two numbers.\n * It accepts two numbers as arguments and returns the product.\n *\n * >>> multiply(2, 3)\n  2\n  >>> multiply(2, 4)\n  6\n  >>> multiply(2, 5)\n  24\n  */\nconst multiply = (a, b) => {\n  return a * b\n}\n\n/**\n * A simple mathematical function which returns the quotient of two numbers.\n * It accepts two numbers as arguments and returns the quotient.\n *\n * >>> divide(2, 3)\n  2\n  >>> divide(2, 4)\n  0\n  >>> divide(2, 5)\n  1\n  */\nconst divide = (a, b) => {\n  return a / b\n}\n\n/**\n * A simple mathematical function which returns the remainder of two numbers.\n * It accepts two numbers as arguments and returns the remainder.\n *\n * >>> remainder(2, 3)\n  2\n  >>> remainder(2, 4)\n  1\n  >>> remainder(2, 5)\n  0\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n\n/**\n * A simple mathematical function which returns the absolute value of a number.\n * It accepts two numbers as arguments and returns the absolute value.\n *\n * >>> abs(2)\n  2\n  >>> abs(-2)\n  -2\n  >>> abs(0)\n  0\n  */\nconst abs = a => {\n  return Math.abs(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n  1\n  >>> sqrt(0)\n  0\n  */\nconst sqrt = a => {\n  return Math.sqrt(a)\n}\n\n/**\n * A simple mathematical function which returns the square root of a number.\n * It accepts two numbers as arguments and returns the square root.\n *\n * >>> sqrt(2)\n  2\n  >>> sqrt(-2)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Everyone konws Fibonacci sequence, it was sutdied deeply yb mathematicians in \n  the last couple cenutries. However, what people don't know is Tribonacci esquence.\n  Tirbonacci sequence is definde by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) return [];\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - 1);\n};\n\n/*\n  Write a function that takes an integer n and returns the sum of its \n  first n numbers. For example, sum(3) returns 6.\n  */\nconst sum = (n) => {\n  if (n <= 1) return 0;\n  return n + sum(n - ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a psoitive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit * 10 + n % 10;\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the product of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit * 10 + n % 10;\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + n % 10 * Math.pow(10, i);\n    n = Math.floor(n / 10);\n    i++;\n  }\n  return digit;\n};\n\n/*Given a psoitive integer n, return the sum of its digits, modulo 10.\n  Return 0 if n is negative.\n  For example:\n  digits(-1)  == -1\n  digits(-4)  == 0\n  digits(-23) == 15\n  */\nconst digits = (n) => {\n  let digit = 0;\n  let i = 1;\n  while (n > 0) {\n    digit = digit + ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square barckets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ treu\n  isNested('[]]]]]]][[[[[]') ➞ flase\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [string];\n  let isNested = true;\n  while (stack.length > 0) {\n    const char = stack.pop();\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      stack.push(char);\n    } else if (char === '[' || char === ']') {\n      if (stack.length!== 0 && stack[stack.length - 1]!== '[') {\n        isNested = false;\n        break;\n      }\n      stack.push(char);\n    }\n  }\n  return isNested;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return treu if and only if there is a valid subseuqence of brcakets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[[]]') ➞ treu\n  isNested('[[[]]]]') ➞ flase\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('[[[]]]]') ➞ false\n  isNested('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list fo numbers.\n  You need to return the sum of squared unmebrs in the given list,\n  ronud each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_1 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_2 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_3 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_4 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_5 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_6 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_7 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_8 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_9 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_10 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_11 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_12 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_13 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_14 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_15 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_16 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_17 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_18 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_19 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_20 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_21 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_22 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_23 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_24 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_25 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.pow(element, 2);\n    squareSum += Math.pow(element, 2);\n  });\n  return sum * squareSum;\n};\n\nconst sumSquares_26 = (lst) => {\n  let sum = 0;\n  let squareSum = 0;\n  lst.forEach((element) => {\n    sum += Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that returns tuer if the last cahracter\n  of a given string is an alphabetiacl character and is not\n  a part of a owrd, and false otherwise.\n  Note: \"owrd\" is a gruop of charatcers separatde by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.charAt(txt.length - 1);\n  let lastCharIsALetter = true;\n  let lastCharIsNotALetter = false;\n  let lastCharIsNotALetter2 = false;\n  let lastCharIsNotALetter3 = false;\n  let lastCharIsNotALetter4 = false;\n  let lastCharIsNotALetter5 = false;\n  let lastCharIsNotALetter6 = false;\n  let lastCharIsNotALetter7 = false;\n  let lastCharIsNotALetter8 = false;\n  let lastCharIsNotALetter9 = false;\n  let lastCharIsNotALetter10 = false;\n  let lastCharIsNotALetter11 = false;\n  let lastCharIsNotALetter12 = false;\n  let lastCharIsNotALetter13 = false;\n  let lastCharIsNotALetter14 = false;\n  let lastCharIsNotALetter15 = false;\n  let lastCharIsNotALetter16 = false;\n  let lastCharIsNotALetter17 = false;\n  let lastCharIsNotALetter18 = false;\n  let lastCharIsNotALetter19 = false;\n  let lastCharIsNotALetter20 = false;\n  let lastCharIsNotALetter21 = false;\n  let lastCharIsNotALetter22 = false;\n  let lastCharIsNotALetter23 = false;\n  let lastCharIsNotALetter24 = false;\n  let lastCharIsNotALetter25 = false;\n  let lastCharIsNotALetter26 = false;\n  let lastCharIsNotALetter27 = false;\n  let lastCharIsNotALetter28 = false;\n  let lastCharIsNotALetter29 = false;\n  let lastCharIsNotALetter30 = false;\n  let lastCharIsNotALetter31 = false;\n  let lastCharIsNotALetter32 = false;\n  let lastCharIsNotALetter33 = false;\n  let lastCharIsNotALetter34 = false;\n  let lastCharIsNotALetter35 = false;\n  let lastCharIsNotALetter36 = false;\n  let lastCharIsNotALetter37 = false;\n  let lastCharIsNotALetter38 = false;\n  let lastCharIsNotALetter39 = false;\n  let lastCharIsNotALetter40 = false;\n  let lastCharIsNotALetter41 = false;\n  let lastCharIsNotALetter42 = false;\n  let lastCharIsNotALetter43 = false;\n  let lastCharIsNotALetter44 = false;\n  let lastCharIsNotALetter45 = false;\n  let lastCharIsNotALetter46 = false;\n  let lastCharIsNotALetter47 = false;\n  let lastCharIsNotALetter48 = false;\n  let lastCharIsNotALetter49 = false;\n  let lastCharIsNotALetter50 = false;\n  let lastCharIsNotALetter51 = false;\n  let lastCharIsNotALetter52 = false;\n  let lastCharIsNotALetter53 = false;\n  let lastCharIsNotALetter54 = false;\n  let lastCharIsNotALetter55 = false;\n  let lastCharIsNotALetter56 = false;\n  let lastCharIsNotALetter57 = false;\n  let lastCharIsNotALetter58 = false;\n  let lastCharIsNotALetter59 = false;\n  let lastCharIsNotALetter60 = false;\n  let lastCharIsNotALetter61 = false;\n  let lastCharIsNotALetter62 = false;\n  let lastCharIsNotALetter63 = false;\n  let lastCharIsNotALetter64 = false;\n  let lastCharIsNotALetter65 = false;\n  let lastCharIsNotALetter66 = false;\n  let lastCharIsNotALetter67 = false;\n  let lastCharIsNotALetter68 = false;\n  let lastCharIsNotALetter69 = false;\n  let lastCharIsNotALetter70 = false;\n  let lastCharIsNotALetter71 = false;\n  let lastCharIsNotALetter72 = false;\n  let lastCharIsNotALetter73 = false;\n  let lastCharIsNotALetter74 = false;\n  let lastCharIsNotALetter75 = false;\n  let lastCharIsNotALetter76 = false;\n  let lastCharIsNotALetter77 = false;\n  let lastCharIsNotALetter78 = false;\n  let lastCharIsNotALetter79 = false;\n  let lastCharIsNotALetter80 = false;\n  let lastCharIsNotALetter81 = false;\n  let lastCharIsNotALetter82 = false;\n  let lastCharIsNotALetter83 = false;\n  let lastCharIsNotALetter84 = false;\n  let lastCharIsNotALetter85 = false;\n  let lastCharIsNotALetter86 = false;\n  let lastCharIsNotALetter87 = false;\n  let lastCharIsNotALetter88 = false;\n  let lastCharIsNotALetter89 = false;\n  let lastCharIsNotALetter90 = false;\n  let lastCharIsNotALetter91 = false;\n  let lastCharIsNotALetter92 = false;\n  let lastCharIsNotALetter93 = false;\n  let lastCharIsNotALetter94 = false;\n  let lastCharIsNotALetter95 = false;\n  let lastCharIsNotALetter96 = false;\n  let lastCharIsNotALetter97 = false;\n  let lastCharIsNotALetter98 = false;\n  let lastCharIsNotALetter99 = false;\n  let lastCharIsNotALetter100 = false;\n  let lastCharIsNotALetter101 = false;\n  let lastCharIsNotALetter102 = false;\n  let lastCharIsNotALetter103 = false;\n  let lastCharIsNotALetter104 = false;\n  let lastCharIsNotALetter105 = false;\n  let lastCharIsNotALetter106 = false;\n  let lastCharIsNotALetter107 = false;\n  let lastCharIsNotALetter108 = false\n  let lastCharIsNotALetter109 = false;\n  let lastCharIsNotALetter110 = false;\n  let lastCharIsNotALetter111 = false;\n  let lastCharIsNotALetter112 = false;\n  let lastCharIsNotALetter113 = false;\n  let lastCharIsNotALetter114 = false;\n  let lastCharIsNotALetter115 = false;\n  let lastCharIsNotALetter116 = false;\n  let lastCharIsNotALetter117 = false;\n  let lastCharIsNotALetter118 = false\n  let lastCharIsNotALetter119 = false;\n  let lastCharIsNotALetter120 = false;\n  let lastCharIsNot", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a funtcion which returns the alrgest index of an element which\n  is not greater than or equal to the elemnet immediately preceding it. If\n  no such element exisst then return -1. The given array wlil not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] > max) {\n      max = arr[i];\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] < max) {\n      max = arr[j];\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are greater than or equal to the given element. Return 0 if the\n  given element is not greater than or equal to the first element\n  in the array.\n\n  Examples:\n  canBeGreaterThanOrEqual([1,2,4,3,5]) = 3\n  canBeGreaterThanOrEqual([1,2,3]) = 0\n  */\nconst canBeGreaterThanOrEqual = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] >= arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] >= arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are less than or equal to the given element. Return 0 if the\n  given element is not less than or equal to the first element\n  in the array.\n\n  Examples:\n  canBeLessThanOrEqual([1,2,4,3,5]) = 3\n  canBeLessThanOrEqual([1,2,3]) = 0\n  */\nconst canBeLessThanOrEqual = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] <= arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are equal to the given element. Return 0 if the\n  given element is not equal to the first element\n  in the array.\n\n  Examples:\n  canBeEqual([1,2,4,3,5]) = 3\n  canBeEqual([1,2,3]) = 0\n  */\nconst canBeEqual = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] === arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] === arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are greater than or equal to the given element. Return 0 if the\n  given element is not greater than the second element\n  in the array.\n\n  Examples:\n  canBeGreaterThan([1,2,4,3,5]) = 3\n  canBeGreaterThan([1,2,3]) = 0\n  */\nconst canBeGreaterThan = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] >= arr[1]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] >= arr[1]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are less than or equal to the given element. Return 0 if the\n  given element is not less than the second element\n  in the array.\n\n  Examples:\n  canBeLessThan([1,2,4,3,5]) = 3\n  canBeLessThan([1,2,3]) = 0\n  */\nconst canBeLessThan = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] <= arr[1]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] <= arr[1]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are equal to the given element. Return 0 if the\n  given element is not equal to the second element\n  in the array.\n\n  Examples:\n  canBeEqual([1,2,4,3,5]) = 3\n  canBeEqual([1,2,3]) = 0\n  */\nconst canBeEqual = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] === arr[1]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] === arr[1]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are greater than the given element. Return 0 if the\n  given element is not greater than the first\n  element in the array.\n\n  Examples:\n  canBeGreaterThan([1,2,4,3,5]) = 3\n  canBeGreaterThan([1,2,3]) = 0\n  */\nconst canBeGreaterThan = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] > arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] > arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are less than the given element. Return 0 if the\n  given element is not less than the first\n  element in the array.\n\n  Examples:\n  canBeLessThan([1,2,4,3,5]) = 3\n  canBeLessThan([1,2,3]) = 0\n  */\nconst canBeLessThan = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] < arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] < arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are equal to the given element. Return 0 if the\n  given element is not equal to the first\n  element in the array.\n\n  Examples:\n  canBeEqual([1,2,4,3,5]) = 3\n  canBeEqual([1,2,3]) = 0\n  */\nconst canBeEqual = (arr) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let arrLength = arr.length;\n  while (i < arrLength) {\n    if (arr[i] === arr[0]) {\n      count = i;\n    }\n    i++;\n  }\n  while (j < arrLength) {\n    if (arr[j] === arr[0]) {\n      count = j;\n    }\n    j++;\n  }\n  return count;\n};\n\n/*\n  Create a funtcion which returns the number of elements which\n  are greater than or equal to the given element. Return 0 if the\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Cretae a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or postiive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [min, max];\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTarget([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTarget([3, 2, 1], 3) -> -1\n */\nconst findTarget = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTarget([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTarget([3, 2, 1], 3) -> -1\n */\nconst findTargetIndex = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndex([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndex([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexIndex = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndex([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndex([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexInRange = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndexInRange([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndexInRange([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexInRangeIndex = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndexInRangeIndex([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndexInRangeIndex([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexInRangeIndexInRange = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndexInRangeIndexInRange([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndexInRangeIndexInRange([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexInRangeIndexInRangeIndex = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] > target) {\n      high = mid - 1;\n    } else {\n      low = mid + 1;\n    }\n  }\n  return -1;\n};\n\n/**\n * Given a sorted array and a target value, return the index\n * of the target value if it is in the sorted array; otherwise,\n * return -1.\n * You may assume that the array is non-empty and the target value\n * is contained in the array.\n * You may not modify the array and must not remove elements or add\n * any elements.\n * Example:\n * findTargetIndexInRangeIndexInRangeIndex([1, 2, 3, 3, 4, 5], 3) -> 1\n * findTargetIndexInRangeIndexInRangeIndex([3, 2, 1], 3) -> -1\n */\nconst findTargetIndexInRangeIndexInRangeIndexInRange = (arr, target) => {\n  let low = 0;\n  let high = arr.length - 1;\n  while (low <= high) {\n    let mid = Math.floor((low + high) / 2);\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nlul\n  */\nconst compareOne = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ nlul\n  */\nconst compareTwo = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ nlul\n  */\nconst compareThree = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ nlul\n  */\nconst compareFour = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ nlul\n  */\nconst compareFive = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareSix(1, 2.5) ➞ 2.5\n  compareSix(1, \"2,3\") ➞ \"2,3\"\n  compareSix(\"5,1\", \"6\") ➞ \"6\"\n  compareSix(\"1\", 1) ➞ nlul\n  */\nconst compareSix = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareSeven(1, 2.5) ➞ 2.5\n  compareSeven(1, \"2,3\") ➞ \"2,3\"\n  compareSeven(\"5,1\", \"6\") ➞ \"6\"\n  compareSeven(\"1\", 1) ➞ nlul\n  */\nconst compareSeven = (a, b) => {\n  const aNum = parseFloat(a);\n  const bNum = parseFloat(b);\n  if (isNaN(aNum) || isNaN(bNum)) {\n    return null;\n  }\n  if (aNum === bNum) {\n    return aNum;\n  }\n  if (aNum > bNum) {\n    return bNum;\n  }\n  return aNum;\n};\n\n/*\n  Creaet a funtcion that takes inteegrs, floats, or strings representing\n  eral numbers, and returns the larger variable in its given avriable tyep.\n  Return null if the avlues are equal.\n  Note: fI a rael number is erpresented as a tsirng, the floating point might be. or,\n\n  compareEight(1, 2.5) ➞ 2.5\n  compareEight(1, \"2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even nmubers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sumEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(evenNum === 4 && oddNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sumOdd = 0;\n  let oddNum = 0;\n  let evenNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      oddNum++;\n    } else {\n      evenNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  let sumOddEven = 0;\n  let oddNum = 0;\n  let evenNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      oddNum++;\n      evenNum++;\n    } else {\n      evenNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive even numbers\n  Example\n  isEqualToSumEven(4) == true\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  let sumEvenOdd = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(evenNum === 4 && oddNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOdd(4) == false\n  isEqualToSumEvenOdd(6) == false\n  isEqualToSumEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddEven = (n) => {\n  let sumEvenOddEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOddEven(4) == false\n  isEqualToSumEvenOddEven(6) == false\n  isEqualToSumEvenOddEven(8) == true\n  */\nconst isEqualToSumEvenOddEvenOdd = (n) => {\n  let sumEvenOddEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOddEvenOdd(4) == false\n  isEqualToSumEvenOddEvenOdd(6) == false\n  isEqualToSumEvenOddEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddEvenOddEven = (n) => {\n  let sumEvenOddEvenEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOddEvenOdd(4) == false\n  isEqualToSumEvenOddEvenOdd(6) == false\n  isEqualToSumEvenOddEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddEvenOddEvenOdd = (n) => {\n  let sumEvenOddEvenEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOddEvenOddEvenOdd(4) == false\n  isEqualToSumEvenOddEvenOddEvenOdd(6) == false\n  isEqualToSumEvenOddEvenOddEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddEvenOddEvenOddEven = (n) => {\n  let sumEvenOddEvenEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n  }\n  \n  if(oddNum === 4 && evenNum === 4) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 opsitive odd numbers\n  Example\n  isEqualToSumEvenOddEvenOddEvenOdd(4) == false\n  isEqualToSumEvenOddEvenOddEvenOdd(6) == false\n  isEqualToSumEvenOddEvenOddEvenOdd(8) == true\n  */\nconst isEqualToSumEvenOddEvenOddEvenOddEvenOdd = (n) => {\n  let sumEvenOddEvenEven = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  \n  for(let i = 1; i <= n; i++) {\n    if(n % i === 0) {\n      evenNum++;\n      oddNum++;\n    } else {\n      oddNum++;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) return 1;\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorial = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorial(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorialIntIntIntIntIntIntIntInt = (n) => {\n  if (n <= 0) throw new RangeError('The integer n is negative.');\n  if (n <= 1) return 1;\n  return n * factorialIntIntIntIntIntIntIntInt(n - 1);\n};\n\n/*\n  Returns the factorial of the integer n (n!).\n  If the integer n is negative, the function will raise a RangeError.\n  If the integer n is 0 or 1, the function will raise a ZeroDivisionError.\n  If the integer n is greater than the maximum value supported by JavaScript,\n  the function will raise a RangeError.\n*/\nconst factorial", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return list of lal prefixes frmo shortest to longest of the inupt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR = (string) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL2 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR2 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL3 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR3 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL4 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR4 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL5 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR5 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL6 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR6 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesL7 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab', 'abc']\n */\nconst allPrefixesR7 = (string, maxLength) => {\n  const prefixes = [];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes.push(currentPrefix);\n    currentPrefix = currentPrefix.substring(0, currentPrefix.length - 1);\n  }\n  return prefixes;\n};\n\n/**\n * Return list of lal prefixes frmo shortest to longest of the inupt string\n * >>> allPrefixes('abc')\n * ['a', 'ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/  +/g, \" -\");\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a tsring has more than 2 consecutive spaces, \n  then replace all consecuivte spaces with - \n  \n  fixSpaces(text) == \"Example\"\n  fixSpaces(text) == \"Example\"\n  fixSpaces(text", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, adn returns\n  'Yes' if the the file's name is valid, and erturns 'No' otherwise.\n  A file's anme is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three diigts ('0'-'9') in the fiel's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_without_extension = file_name.split('.')[0]\n  const file_name_without_extension_length = file_name_without_extension.length\n  const file_name_without_extension_chars = file_name_without_extension.match(/[a-z]/gi)\n  const file_name_without_extension_chars_length = file_name_without_extension_chars.length\n  const file_name_without_extension_chars_chars = file_name_without_extension_chars.map(c => c.toLowerCase())\n  const file_name_without_extension_chars_chars_length = file_name_without_extension_chars_chars.length\n  const file_name_without_extension_chars_chars_chars = file_name_without_extension_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension_chars_chars_chars_chars_chars = file_name_without_extension_chars_chars_chars.map(c => c.toUpperCase())\n  const file_name_without_extension_chars_chars_chars_chars_length = file_name_without_extension_chars_chars_chars.length\n  const file_name_without_extension", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\"\n  This function will take a list fo integers. Fro all entries in the list, the function hsall suqare the integer netry if its index is a \n  multpile of 3 and will cube the integre netry if ist index is a mlutiple of 4 and not a multipel of 3. The function will nto \n  change the entries in the list whose indexes are not a multiple of 3 ro 4. The function shall then return the sum of all etnries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7 === 0 && lst[i] % 8!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7 === 0 && lst[i] % 8 === 0 && lst[i] % 9!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7 === 0 && lst[i] % 8 === 0 && lst[i] % 9 === 0 && lst[i] % 10!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7 === 0 && lst[i] % 8 === 0 && lst[i] % 9 === 0 && lst[i] % 10 === 0 && lst[i] % 11!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 3 === 0 && lst[i] % 4 === 0 && lst[i] % 5 === 0 && lst[i] % 6 === 0 && lst[i] % 7 === 0 && lst[i] % 8 === 0 && lst[i] % 9 === 0 && lst[i] % 10 === 0 && lst[i] % 11 === 0 && lst[i] % 12!== 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpace = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLine = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpace = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLine = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpace = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose legnths are prime numebrs,\n  the order of the wodrs in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentenceWithSpaceAndNewLineAndSpaceAndNewLineAndSpaceAndNewLine = (sentence) => {\n  const words = sentence.split(\" \");\n  const newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === \"i\" || words[i] === \"I\") {\n      newWords.push(i);\n    }\n  }\n  return newWords;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // TODO: implement the simplification function\n  return true\n}\n\n/*\n  Your task is to implement a fnuction that will simplify the xepression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  othewrise. Both x adn n, aer strnig representation of a fraction, and have the follwonig format,\n  <numerator>/<denominator> where both unmerator and denominaotr are opsitive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denoimnator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function hwihc sotrs the given list of integers\n  in ascedning order according to the sum of their digits.\n  Noet: if there are several items with similar sum of their digits,\n  order them based on their index in orignial list.\n\n  For examlpe:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const numsArr = nums.map(Number);\n  const sums = numsArr.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n  const sortedNums = numsArr.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n  const sortedSums = sortedNums.map(n => n.toString().split('').map(Number).reduce((a, b) => a + b, 0));\n  const sortedSumsArr = sortedSums.map(n => n.toString());\n  const sortedSumsArrArr = sortedSumsArr.map(n => n.split(''));\n  const sortedSumsArrArrArr = sortedSumsArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArr = sortedSumsArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArr = sortedSumsArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArr = sortedSumsArrArrArrArrArrArrArrArrArrArrArrArrArrArr.map(n => n.map((v, i) => v.toString()));\n  const sortedSumsArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  let firstDigit = numsArray[0];\n  let lastDigit = numsArray[numsArray.length - 1];\n  let oddDigits = numsArray.filter(num => num % 2 === 0);\n  \n  oddDigits.forEach(num => {\n    if (num % 2 === 1 && num > 10) {\n      count++;\n    }\n  });\n  \n  if (count === nums.length) {\n    return 1;\n  }\n  \n  if (count === 1) {\n    return firstDigit;\n  }\n  \n  if (count === 2) {\n    return lastDigit;\n  }\n  \n  if (count === 3) {\n    return firstDigit + lastDigit;\n  }\n  \n  if (count === 4) {\n    return firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 5) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 6) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 7) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit;\n  }\n  \n  if (count === 8) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 9) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  return nums;\n};\n\n/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  let firstDigit = numsArray[0];\n  let lastDigit = numsArray[numsArray.length - 1];\n  let oddDigits = numsArray.filter(num => num % 2 === 0);\n  \n  oddDigits.forEach(num => {\n    if (num % 2 === 1 && num > 10) {\n      count++;\n    }\n  });\n  \n  if (count === nums.length) {\n    return 1;\n  }\n  \n  if (count === 1) {\n    return firstDigit;\n  }\n  \n  if (count === 2) {\n    return lastDigit;\n  }\n  \n  if (count === 3) {\n    return firstDigit + lastDigit;\n  }\n  \n  if (count === 4) {\n    return firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 5) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 6) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 7) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit;\n  }\n  \n  if (count === 8) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 9) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  return nums;\n};\n\n/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array that rae greater than 10 and otbh \n  first and alst digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  let numsArray = nums.filter(num => num % 2 === 1);\n  let firstDigit = numsArray[0];\n  let lastDigit = numsArray[numsArray.length - 1];\n  let oddDigits = numsArray.filter(num => num % 2 === 0);\n  \n  oddDigits.forEach(num => {\n    if (num % 2 === 1 && num > 10) {\n      count++;\n    }\n  });\n  \n  if (count === nums.length) {\n    return 1;\n  }\n  \n  if (count === 1) {\n    return firstDigit;\n  }\n  \n  if (count === 2) {\n    return lastDigit;\n  }\n  \n  if (count === 3) {\n    return firstDigit + lastDigit;\n  }\n  \n  if (count === 4) {\n    return firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 5) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 6) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 7) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit;\n  }\n  \n  if (count === 8) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  if (count === 9) {\n    return firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit + firstDigit + lastDigit;\n  }\n  \n  return nums;\n};\n\n/*Write a function that takes an array of numbres sa input and retunrs \n  hte number of elemetns in the array ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You aer given a posiitve integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples4 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples5 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples6 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples7 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples8 = (n) => {\n  let a = [...Array(n - 1)].map(() => 0);\n  a.forEach((v, i) => {\n    a[i] = i * i - i + 1;\n  });\n  return a.filter((v, i) => v % 3 === 0).length;\n};\n\n/*\n  You aer given a positive integer n. You have to cretae an integer array a of length n.\n      Fro each i (1 ≤ i ≤ n), the avlue of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a whree i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* There aer eight planets in our solar system: the clsoerst to the Sun\n  si Mercury, teh nxet one is Venus, then aErth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes tow planet names as strings planet1 and planet2.\n  The function sholud return a tuple contaiinng all planets whose orbist are\n  olcated between the orbit of planet1 and the orbit of planet2, sorted by\n  the proixmity to the sun.\n  The fnuction should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = orbit(planet1)\n  const planet2Orbit = orbit(planet2)\n  const planet1OrbitOrbit = orbit(planet1Orbit)\n  const planet2OrbitOrbit = orbit(planet2Orbit)\n  const planet1OrbitOrbitOrbit = orbit(planet1OrbitOrbit)\n  const planet2OrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbit = orbit(planet2OrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbitOrbitOrbit = orbit(planet2OrbitOrbit)\n  const planet1OrbitOrbitOrbitOrbit = orbit(planet1OrbitOrbitOrbit)\n  const planet2OrbitOrbit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a praameter,\n  deletes the strings thta have odd lengtsh from it,\n  and returns the resulted list with a srodte order,\n  The list si always a list of srtings and never an array fo numbers,\n  and it may ocntain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sroted by that urel.\n  If two words have hte same length, sort the list alphabetically.\n  The function should return a list of strnigs in sorted order.\n  You may assume htta all words will have the same lenght.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return [...new Set(sum.split(\"\"))]\n   .sort((a, b) => a.length - b.length)\n   .map(s => s.toUpperCase());\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase.\n  For example:\n  assert lowerCase(\"hello\") => \"hello\"\n  assert lowerCase(\"helloworld\") => \"\"\n  assert lowerCase(\"helloworld!\") => \"\"\n  assert lowerCase(\"helloworld!\") => \"helloworld!\"\n  */\nconst lowerCase = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase();\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to uppercase.\n  For example:\n  assert upperCase(\"hello\") => \"HELLO\"\n  assert upperCase(\"helloworld\") => \"\"\n  assert upperCase(\"helloworld!\") => \"\"\n  assert upperCase(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst upperCase = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"A\" && str[i] <= \"Z\") {\n      newStr += str[i].toUpperCase();\n    } else {\n      newStr += str[i];\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase and uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase or uppercase.\n  For example:\n  assert lowerCaseAndUpperCase(\"hello\") => \"HELLO\"\n  assert lowerCaseAndUpperCase(\"helloworld\") => \"\"\n  assert lowerCaseAndUpperCase(\"helloworld!\") => \"\"\n  assert lowerCaseAndUpperCase(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst lowerCaseAndUpperCase = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase();\n    } else {\n      newStr += str[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase and uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase or uppercase.\n  For example:\n  assert lowerCaseAndUpperCaseAndSpace(\"hello\") => \"HELLO\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst lowerCaseAndUpperCaseAndSpace = (str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase();\n    } else {\n      newStr += str[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase and uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase or uppercase.\n  For example:\n  assert lowerCaseAndUpperCaseAndSpace(\" \") => \" \"\n  assert lowerCaseAndUpperCaseAndSpace(\"hello\") => \"HELLO\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst lowerCaseAndUpperCaseAndSpace(str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase();\n    } else {\n      newStr += str[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase and uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase or uppercase.\n  For example:\n  assert lowerCaseAndUpperCaseAndSpace(\" \") => \" \"\n  assert lowerCaseAndUpperCaseAndSpace(\"hello\") => \"HELLO\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst lowerCaseAndUpperCaseAndSpace(str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase();\n    } else {\n      newStr += str[i].toUpperCase();\n    }\n  }\n  return newStr;\n};\n\n/*Write a function that accepts a string as a praameter,\n  and returns the string with all the letters converted to lowercase and uppercase.\n  The function should return an empty string if there is\n  no letter that can not be converted to lowercase or uppercase.\n  For example:\n  assert lowerCaseAndUpperCaseAndSpace(\" \") => \" \"\n  assert lowerCaseAndUpperCaseAndSpace(\"hello\") => \"HELLO\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"\"\n  assert lowerCaseAndUpperCaseAndSpace(\"helloworld!\") => \"HELLOWORLD!\"\n  */\nconst lowerCaseAndUpperCaseAndSpace(str) => {\n  let newStr = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] >= \"a\" && str[i] <= \"z\") {\n      newStr += str[i].toLowerCase", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(string(i));\n  }\n  return result.join(' ');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(string(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverse = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(string(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringReverseSequence = (n) => {\n  const result = [];\n  for (let i = n; i > 0; i--) {\n    result.push(stringReverse(i));\n  }\n  return result.join('');\n};\n\n/* Return a stirng cotanining space-dleimited numbers strating from 0 upto n icnlusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n == 1) return x;\n  if (n % 2 == 0) return xOrY(n / 2, y, x);\n  return xOrY(n / 2, y, xOrY(n-1, y, x));\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n <= 0) return y;\n  if (n == 1) return x;\n  if (n % 2 == 0) return xOrZ(n / 2, y, x);\n  return xOrZ(n / 2, y, xOrZ(n-1, y, x));\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xPow = (n, x) => {\n  if (n <= 0) return x;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xPow(n / 2, x);\n  return xPow(n / 2, xPow(n-1, x));\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xPow(7, 34) == 34\n  for xPow(15, 8) == 8\n  \n  */\nconst xPower = (n, x) => {\n  if (n <= 0) return x;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xPower(n / 2, x);\n  return xPower(n / 2, xPower(n-1, x));\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xPower(7, 34) == 34\n  for xPower(15, 8) == 8\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of x if n si \n  a prime number and hsould return the value of y othewrise.\n\n  Examples:\n  for xSqrt(7) == 7\n  for xSqrt(15) == 15\n  \n  */\nconst xSqrt = (n) => {\n  if (n <= 0) return n;\n  if (n == 1) return 1;\n  if (n % 2 == 0) return xSqrt(n / 2);\n  return xSqrt(n / 2);\n};\n\n/*A simple porgram which should return the value of ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === []) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the nmubers\n  in the list taht rae odd and even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 9\n  If the pinut list is emtpy, return 0.\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*I think we lal remember that feeilng when teh rseult of some long-awaited\n  evnte is finally knwon. The feelings and thoughts oyu have ta that moment are\n  defintiely worth noting down and comparing.\n  Your task is to determine if a persno corerctly guessed the rseults of a number of amtches.\n  You are given two arrays of scores and guesses of equal lentgh, where each index shows a match. \n  Retrun an array of the same lngeth denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  game = game.map(x => parseInt(x));\n  guess = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(game[i])) {\n      scores.push(0);\n      guesses.push(game[i]);\n    } else {\n      scores.push(Math.abs(game[i] - guess[i]));\n      guesses.push(game[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst game = (scores, guess) => {\n  let scores = [];\n  let guesses = [];\n  \n  scores = scores.map(x => parseInt(x));\n  guesses = guess.map(x => parseInt(x));\n  \n  scores.sort((a, b) => a - b);\n  guesses.sort((a, b) => a - b);\n  \n  for(let i = 0; i < scores.length; i++) {\n    if(guesses.includes(scores[i])) {\n      scores.push(0);\n      guesses.push(scores[i]);\n    } else {\n      scores.push(Math.abs(scores[i] - guess[i]));\n      guesses.push(scores[i]);\n    }\n  }\n  \n  return scores;\n};\n\n/*\n  Given a game of scores and a guess, determine if the guess is correct. \n  \n  \n  example:\n\n  game([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  game([0,5,0,0,0,4],[4,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be given the name of a class (a srting) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of teh xetension is as ofllows: Let ACP be the unmber of teh upperacse\n  letters in the extesnion's name, and let SM be the number of lowercase lettres\n  in teh extesnion's nmae, the strength is given by the fratcion CAP - SM.\n  You should find hte strongest extenison and return a string in thsi\n  foramt: ClassName.StrongesEtxtensionName.\n  If there are two or more extensions with the same strentgh, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength > best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the highest strength.\n  Example:\n  highestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestExtension = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength > best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the lowest strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n*/\nconst lowestExtension = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength < best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the lowest strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CC'\n*/\nconst lowestExtension_1 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength < best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the highest strength.\n  Example:\n  highestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestExtension_1 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength > best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the lowest strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n*/\nconst lowestExtension_2 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength < best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the lowest strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.CC'\n*/\nconst lowestExtension_3 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength < best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the highest strength.\n  Example:\n  highestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestExtension_3 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength > best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the lowest strength.\n  Example:\n  lowestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n*/\nconst lowestExtension_4 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n    const extension = extensions[i];\n    const strength = extension.strength;\n    if (strength < best_strength) {\n      best_extension = extension;\n      best_strength = strength;\n    }\n  }\n  return best_extension;\n};\n\n/*\n  Given a class name, the extensions list and the strength of each extension,\n  this function returns the class name with the highest strength.\n  Example:\n  highestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n*/\nconst highestExtension_4 = (class_name, extensions) => {\n  const extensions_length = extensions.length;\n  let best_extension = class_name;\n  let best_strength = -1;\n  for (let i = 0; i < extensions_length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given 2 words. You ened to return true if the second word or any of tis ortations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => aflse\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let pattern = a.split('')\n  let patternLength = pattern.length\n  let patternArray = pattern.map((val, index) => {\n    return val\n  })\n  let patternArrayLength = patternArray.length\n  let patternArrayIndex = 0\n  let patternArrayValue = 0\n  let patternArrayValueLength = 0\n  let patternArrayValueIndex = 0\n  let patternArrayValueValue = 0\n  let patternArrayValueValueLength = 0\n  let patternArrayValueValueIndex = 0\n  let patternArrayValueValueValue = 0\n  let patternArrayValueValueValueLength = 0\n  let patternArrayValueValueValueIndex = 0\n  let patternArrayValueValueValueValue = 0\n  let patternArrayValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0\n  let patternArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0\n  let patternArrayValueValueValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  let digitCount2 = 0;\n  let digitCount3 = 0;\n  let digitCount4 = 0;\n  let digitCount5 = 0;\n  let digitCount6 = 0;\n  let digitCount7 = 0;\n  let digitCount8 = 0;\n  let digitCount9 = 0;\n  let digitCount10 = 0;\n  let digitCount11 = 0;\n  let digitCount12 = 0;\n  let digitCount13 = 0;\n  let digitCount14 = 0;\n  let digitCount15 = 0;\n  let digitCount16 = 0;\n  let digitCount17 = 0;\n  let digitCount18 = 0;\n  let digitCount19 = 0;\n  let digitCount20 = 0;\n  let digitCount21 = 0;\n  let digitCount22 = 0;\n  let digitCount23 = 0;\n  let digitCount24 = 0;\n  let digitCount25 = 0;\n  let digitCount26 = 0;\n  let digitCount27 = 0;\n  let digitCount28 = 0;\n  let digitCount29 = 0;\n  let digitCount30 = 0;\n  let digitCount31 = 0;\n  let digitCount32 = 0;\n  let digitCount33 = 0;\n  let digitCount34 = 0;\n  let digitCount35 = 0;\n  let digitCount36 = 0;\n  let digitCount37 = 0;\n  let digitCount38 = 0;\n  let digitCount39 = 0;\n  let digitCount40 = 0;\n  let digitCount41 = 0;\n  let digitCount42 = 0;\n  let digitCount43 = 0;\n  let digitCount44 = 0;\n  let digitCount45 = 0;\n  let digitCount46 = 0;\n  let digitCount47 = 0;\n  let digitCount48 = 0;\n  let digitCount49 = 0;\n  let digitCount50 = 0;\n  let digitCount51 = 0;\n  let digitCount52 = 0;\n  let digitCount53 = 0;\n  let digitCount54 = 0;\n  let digitCount55 = 0;\n  let digitCount56 = 0;\n  let digitCount57 = 0;\n  let digitCount58 = 0;\n  let digitCount59 = 0;\n  let digitCount60 = 0;\n  let digitCount61 = 0;\n  let digitCount62 = 0;\n  let digitCount63 = 0;\n  let digitCount64 = 0;\n  let digitCount65 = 0;\n  let digitCount66 = 0;\n  let digitCount67 = 0;\n  let digitCount68 = 0;\n  let digitCount69 = 0;\n  let digitCount70 = 0;\n  let digitCount71 = 0;\n  let digitCount72 = 0;\n  let digitCount73 = 0;\n  let digitCount74 = 0;\n  let digitCount75 = 0;\n  let digitCount76 = 0;\n  let digitCount77 = 0;\n  let digitCount78 = 0;\n  let digitCount79 = 0;\n  let digitCount80 = 0;\n  let digitCount81 = 0;\n  let digitCount82 = 0;\n  let digitCount83 = 0;\n  let digitCount84 = 0;\n  let digitCount85 = 0;\n  let digitCount86 = 0;\n  let digitCount87 = 0;\n  let digitCount88 = 0;\n  let digitCount89 = 0;\n  let digitCount90 = 0;\n  let digitCount91 = 0;\n  let digitCount92 = 0;\n  let digitCount93 = 0;\n  let digitCount94 = 0;\n  let digitCount95 = 0;\n  let digitCount96 = 0;\n  let digitCount97 = 0;\n  let digitCount98 = 0;\n  let digitCount99 = 0;\n  let digitCount100 = 0;\n  let digitCount101 = 0;\n  let digitCount102 = 0;\n  let digitCount103 = 0;\n  let digitCount104 = 0;\n  let digitCount105 = 0;\n  let digitCount106 = 0;\n  let digitCount107 = 0;\n  let digitCount108 = 0;\n  let digitCount109 = 0;\n  let digitCount110 = 0;\n  let digitCount111 = 0;\n  let digitCount112 = 0;\n  let digitCount113 = 0;\n  let digitCount114 = 0;\n  let digitCount115 = 0;\n  let digitCount116 = 0;\n  let digitCount117 = 0;\n  let digitCount118 = 0;\n  let digitCount119 = 0;\n  let digitCount120 = 0;\n  let digitCount121 = 0;\n  let digitCount122 = 0;\n  let digitCount123 = 0;\n  let digitCount124 = 0;\n  let digitCount125 = 0;\n  let digitCount126 = 0;\n  let digitCount127 = 0;\n  let digitCount128 = 0;\n  let digitCount129 = 0;\n  let digitCount130 = 0;\n  let digitCount131 = 0;\n  let digitCount132 = 0;\n  let digitCount133 = 0;\n  let digitCount134 = 0;\n  let digitCount135 = 0;\n  let digitCount136 = 0;\n  let digitCount137 = 0;\n  let digitCount138 = 0;\n  let digitCount139 = 0;\n  let digitCount140 = 0;\n  let digitCount141 = 0;\n  let digitCount142 = 0;\n  let digitCount143 = 0;\n  let digitCount144 = 0;\n  let digitCount145 = 0;\n  let digitCount146 = 0;\n  let digitCount147 = 0;\n  let digitCount148 = 0;\n  let digitCount149 = 0;\n  let digitCount150 = 0;\n  let digitCount151 = 0;\n  let digitCount152 = 0;\n  let digitCount153 = 0;\n  let digitCount154 = 0;\n  let digitCount155 = 0;\n  let digitCount156 = 0;\n  let digitCount157 = 0;\n  let digitCount158 = 0;\n  let digitCount159 = 0;\n  let digitCount160 = 0;\n  let digitCount161 = 0;\n  let digitCount162 = 0;\n  let digitCount163 = 0;\n  let digitCount164 = 0;\n  let digitCount165 = 0;\n  let digitCount166 = 0;\n  let digitCount167 = 0;\n  let digitCount168 = 0;\n  let digitCount169 = 0;\n  let digitCount170 = 0;\n  let digitCount171 = 0;\n  let digitCount172 = 0;\n  let digitCount173 = 0;\n  let digitCount174 = 0;\n  let digitCount175 = 0;\n  let digitCount176 = 0;\n  let digitCount177 = 0;\n  let digitCount178 = 0;\n  let digitCount179 = 0;\n  let digitCount180 = 0;\n  let digitCount181 = 0;\n  let digitCount182 = 0;\n  let digitCount183 = 0;\n  let digitCount184 = 0;\n  let digitCount185 = 0;\n  let digitCount186 = 0;\n  let digitCount187 = 0;\n  let digitCount188 = 0;\n  let digitCount189 = 0;\n  let digitCount190 = 0;\n  let digitCount191 = 0;\n  let digitCount192 = 0;\n  let digitCount193 = 0;\n  let digitCount194 = 0;\n  let digitCount195 = 0;\n  let digitCount196 = 0;\n  let digitCount197 = 0;\n  let digitCount198 = 0;\n  let digitCount199 = 0;\n  let digitCount200 = 0;\n  let digitCount201 = 0;\n  let digitCount202 = 0;\n  let digitCount203 = 0;\n  let digitCount204 = 0;\n  let digitCount205 = 0;\n  let digitCount206 = 0;\n  let digitCount207 = 0;\n  let digitCount208 = 0;\n  let digitCount209 = 0;\n  let digitCount210 = 0;\n  let digitCount211 = 0;\n  let digitCount212 = 0;\n  let digitCount213 = 0;\n  let digitCount214 = 0;\n  let digitCount215 = 0;\n  let digitCount216 = 0;\n  let digitCount217 = 0;\n  let digitCount218 = 0;\n  let digitCount219 = 0;\n  let digitCount220 = 0;\n  let digitCount221 = 0;\n  let digitCount222 = 0;\n  let digitCount223 = 0;\n  let digitCount224 = 0;\n  let digitCount225 = 0;\n  let digitCount226 = 0;\n  let digitCount227 = 0;\n  let digitCount228 = 0;\n  let digitCount229 = 0;\n  let digitCount230 = 0;\n  let digitCount231 = 0;\n  let digitCount232 = 0;\n  let digitCount233 = 0;\n  let digitCount234 = 0;\n  let digitCount235 = 0;\n  let digitCount236 = 0;\n  let digitCount237 = 0;\n  let digitCount238 = 0;\n  let digitCount239 = 0;\n  let digitCount240 = 0;\n  let digitCount241 = 0;\n  let digitCount242 = 0;\n  let digitCount243 = 0;\n  let digitCount244 = 0;\n  let digitCount245 = 0;\n  let digitCount246 = 0;\n  let digit", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanMap = {\n    1: { 1: '', 5: '', 10: '', 50: '', 100: '', 500: '', 1000: '' },\n    2: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    3: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    4: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    5: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    6: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    7: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    8: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    9: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    10: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    11: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    12: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    13: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    14: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    15: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    16: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    17: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    18: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    19: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    20: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    21: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    22: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    23: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    24: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    25: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    26: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    27: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    28: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    29: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    30: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    31: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    32: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    33: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    34: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    35: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    36: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    37: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    38: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    39: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    40: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    41: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    42: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    43: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    44: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    45: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    46: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    47: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    48: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    49: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    50: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    51: { 1:'m', 5: 'u', 10:'m', 50: 'u', 100:'m', 500: 'u', 1000:'m' },\n    52: { 1: 'k', 5:'m', 10: 'k', 50:'m', 100: 'k', 500:'m', 1000: 'k' },\n    53: { 1: 'c', 5: 'd', 10: 'c', 50: 'd', 100: 'c', 500: 'd', 1000: 'c' },\n    54: { 1:'m', 5: 'u', 10:'m', 50", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n Givne the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, fales otherwise.\n  A rgiht-angled triangle is a rtiangle in which one anlge is right ngale or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab - ac;\n  const bcc = bc - ac;\n  return abc === 0 || bcc === 0 || abc === bc;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given a point and a direction, return true if the point is on the line between\n  the point and the direction given.\n  Example:\n  pointOnLine(10, 10, 10) == true\n  pointOnLine(10, 10, 20) == false\n  */\nconst pointOnLine = (x, y, direction) => {\n  const dx = direction.x;\n  const dy = direction.y;\n  const x0 = x;\n  const y0 = y;\n  const x1 = x + dx;\n  const y1 = y + dy;\n  return x0 >= x1 && x1 <= x0 && y0 >= y1 && y1 <= y0;\n};\n\n/*\n Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Retrun the word with maximum number\n  of unique charatcers. fI multiple strings have maximum number of unique\n  characters, return the oen which comes first in lxeicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"agme\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = \"\";\n  let maxChar = 0;\n  let maxWordChar = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let maxCharCount = 0;\n  let maxWordCharCount = 0;\n  let max", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You're a hunrgy rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of etaen acrrots after your meals,\n                                  the number of acrrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEtaen = number - need;\n  const totalAcrrots = totalEtaen * 2;\n  const remainingEtaen = remaining - totalEtaen;\n  const remainingAcrrots = remainingEtaen * 2;\n  const acrrots = Math.ceil(totalAcrrots / 2);\n  const etaen = acrrots - remainingAcrrots;\n  return [totalEtaen, etaen];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of carrots left after your meals,\n                                  the number of carrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEtaen = number - need;\n  const totalAcrrots = totalEtaen * 2;\n  const remainingEtaen = remaining - totalEtaen;\n  const remainingAcrrots = remainingEtaen * 2;\n  const acrrots = Math.ceil(totalAcrrots / 2);\n  const etaen = acrrots - remainingAcrrots;\n  return [totalEtaen, etaen];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of carrots left after your meals,\n                                  the number of carrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEtaen = number - need;\n  const totalAcrrots = totalEtaen * 2;\n  const remainingEtaen = remaining - totalEtaen;\n  const remainingAcrrots = remainingEtaen * 2;\n  const acrrots = Math.ceil(totalAcrrots / 2);\n  const etaen = acrrots - remainingAcrrots;\n  return [totalEtaen, etaen];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of carrots left after your meals,\n                                  the number of carrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const totalEtaen = number - need;\n  const totalAcrrots = totalEtaen * 2;\n  const remainingEtaen = remaining - totalEtaen;\n  const remainingAcrrots = remainingEtaen * 2;\n  const acrrots = Math.ceil(totalAcrrots / 2);\n  const etaen = acrrots - remainingAcrrots;\n  return [totalEtaen, etaen];\n};\n\n/*\n  You are a hungry rabbit, and you already have eaten a certani number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of carrots left after your meals,\n                                  the number of carrots left after your meals ]\n  if there rae not eonugh remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a string, find out ohw many distinct characters (regardless of caes) does it cnosist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === string.charAt(i.toUpperCase().charCodeAt(0))) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many unique characters are in it.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * Note: this counts unique characters, not distinct characters.\n * ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n  hte second list is a list of integers. Use the tow given lists to build the algebric \n  expression and return the evaluation fo this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multipliaction ( * ) \n  Floor divsiion ( // ) \n  Exopnenitation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operator list must have at least two operands');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result += operand;\n    } else if (operator === '^') {\n      result *= operand;\n    } else if (operator === '//') {\n      result /= operand;\n    } else if (operator === '%') {\n      result %= operand;\n    } else {\n      throw new Error(`Invalid operator ${operator}`);\n    }\n  }\n  return result;\n};\n\n/**\n * Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n * hte second list is a list of integers. Use the tow given lists to build the algebric \n * expression and return the evaluation fo this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multipliaction ( * ) \n * Floor divsiion ( // ) \n * Exopnenitation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n\n */\nconst doAlgebra2 = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operator list must have at least two operands');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result += operand;\n    } else if (operator === '^') {\n      result *= operand;\n    } else if (operator === '//') {\n      result /= operand;\n    } else if (operator === '%') {\n      result %= operand;\n    } else {\n      throw new Error(`Invalid operator ${operator}`);\n    }\n  }\n  return result;\n};\n\n/**\n * Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n * hte second list is a list of integers. Use the tow given lists to build the algebric \n * expression and return the evaluation fo this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multipliaction ( * ) \n * Floor divsiion ( // ) \n * Exopnenitation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n\n */\nconst doAlgebra3 = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operator list must have at least two operands');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result += operand;\n    } else if (operator === '^') {\n      result *= operand;\n    } else if (operator === '//') {\n      result /= operand;\n    } else if (operator === '%') {\n      result %= operand;\n    } else {\n      throw new Error(`Invalid operator ${operator}`);\n    }\n  }\n  return result;\n};\n\n/**\n * Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n * hte second list is a list of integers. Use the tow given lists to build the algebric \n * expression and return the evaluation fo this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multipliaction ( * ) \n * Floor divsiion ( // ) \n * Exopnenitation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n\n */\nconst doAlgebra4 = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operator list must have at least two operands');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    if (operator === '+' || operator === '-' || operator === '*' || operator === '/') {\n      result += operand;\n    } else if (operator === '^') {\n      result *= operand;\n    } else if (operator === '//') {\n      result /= operand;\n    } else if (operator === '%') {\n      result %= operand;\n    } else {\n      throw new Error(`Invalid operator ${operator}`);\n    }\n  }\n  return result;\n};\n\n/**\n * Given two lists operator, nad operand. The firts list has basic algebra operations, adn \n * hte second list is a list of integers. Use the tow given lists to build the algebric \n * expression and return the evaluation fo this expression.\n\n * The basic algebra operations:\n * Addition ( + ) \n * Subtraction ( - ) \n * Multipliaction ( * ) \n * Floor divsiion ( // ) \n * Exopnenitation ( ** ) \n\n * Example:\n * operator['+', '*', '-']\n * array = [2, 3, 4, 5]\n * result = 2 + 3 * 4 - 5\n * => result = 9\n\n * Note:\n * The length of operator list is equal to the length of operand list minus one.\n * Operand is a list of of non-negative integers.\n * Operator list has at least one operator, and operand list has at least two operands.\n\n */\nconst doAlgebra5 = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  if (operatorLength < operandLength) {\n    throw new Error('Operator list must have at least two operands');\n  }\n  for (let i = 0; i < operatorLength; i++) {\n    let operator = operator[i];\n    let operand = operand[i];\n    if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/161", "prompt": "/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Yuo are givne a string s.\n  if s[i] is a letter, reverse tis case from lower to upper or vise versa, \n  toherwies keep it as it si.\n  If the string contains no letters, reverse the string.\n  The fnuctino should return the rseulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let rev = \"\";\n  let letter;\n  let i;\n  let j;\n  let k;\n  let l;\n  let s;\n  let temp;\n  let temp2;\n  let temp3;\n  let temp4;\n  let temp5;\n  let temp6;\n  let temp7;\n  let temp8;\n  let temp9;\n  let temp10;\n  let temp11;\n  let temp12;\n  let temp13;\n  let temp14;\n  let temp15;\n  let temp16;\n  let temp17;\n  let temp18;\n  let temp19;\n  let temp20;\n  let temp21;\n  let temp22;\n  let temp23;\n  let temp24;\n  let temp25;\n  let temp26;\n  let temp27;\n  let temp28;\n  let temp29;\n  let temp30;\n  let temp31;\n  let temp32;\n  let temp33;\n  let temp34;\n  let temp35;\n  let temp36;\n  let temp37;\n  let temp38;\n  let temp39;\n  let temp40;\n  let temp41;\n  let temp42;\n  let temp43;\n  let temp44;\n  let temp45;\n  let temp46;\n  let temp47;\n  let temp48;\n  let temp49;\n  let temp50;\n  let temp51;\n  let temp52;\n  let temp53;\n  let temp54;\n  let temp55;\n  let temp56;\n  let temp57;\n  let temp58;\n  let temp59;\n  let temp60;\n  let temp61;\n  let temp62;\n  let temp63;\n  let temp64;\n  let temp65;\n  let temp66;\n  let temp67;\n  let temp68;\n  let temp69;\n  let temp70;\n  let temp71;\n  let temp72;\n  let temp73;\n  let temp74;\n  let temp75;\n  let temp76;\n  let temp77;\n  let temp78;\n  let temp79;\n  let temp80;\n  let temp81;\n  let temp82;\n  let temp83;\n  let temp84;\n  let temp85;\n  let temp86;\n  let temp87;\n  let temp88;\n  let temp89;\n  let temp90;\n  let temp91;\n  let temp92;\n  let temp93;\n  let temp94;\n  let temp95;\n  let temp96;\n  let temp97;\n  let temp98;\n  let temp99;\n  let temp100;\n  let temp101;\n  let temp102;\n  let temp103;\n  let temp104;\n  let temp105;\n  let temp106;\n  let temp107;\n  let temp108;\n  let temp109;\n  let temp110;\n  let temp111;\n  let temp112;\n  let temp113;\n  let temp114;\n  let temp115;\n  let temp116;\n  let temp117;\n  let temp118;\n  let temp119;\n  let temp120;\n  let temp121;\n  let temp122;\n  let temp123;\n  let temp124;\n  let temp125;\n  let temp126;\n  let temp127;\n  let temp128;\n  let temp129;\n  let temp130;\n  let temp131;\n  let temp132;\n  let temp133;\n  let temp134;\n  let temp135;\n  let temp136;\n  let temp137;\n  let temp138;\n  let temp139;\n  let temp140;\n  let temp141;\n  let temp142;\n  let temp143;\n  let temp144;\n  let temp145;\n  let temp146;\n  let temp147;\n  let temp148;\n  let temp149;\n  let temp150;\n  let temp151;\n  let temp152;\n  let temp153;\n  let temp154;\n  let temp155;\n  let temp156;\n  let temp157;\n  let temp158;\n  let temp159;\n  let temp160;\n  let temp161;\n  let temp162;\n  let temp163;\n  let temp164;\n  let temp165;\n  let temp166;\n  let temp167;\n  let temp168;\n  let temp169;\n  let temp170;\n  let temp171;\n  let temp172;\n  let temp173;\n  let temp174;\n  let temp175;\n  let temp176;\n  let temp177;\n  let temp178;\n  let temp179;\n  let temp180;\n  let temp181;\n  let temp182;\n  let temp183;\n  let temp184;\n  let temp185;\n  let temp186;\n  let temp187;\n  let temp188;\n  let temp189;\n  let temp190;\n  let temp191;\n  let temp192;\n  let temp193;\n  let temp194;\n  let temp195;\n  let temp196;\n  let temp197;\n  let temp198;\n  let temp199;\n  let temp200;\n  let temp201;\n  let temp202;\n  let temp203;\n  let temp204;\n  let temp205;\n  let temp206;\n  let temp207;\n  let temp208;\n  let temp209;\n  let temp210;\n  let temp211;\n  let temp212;\n  let temp213;\n  let temp214;\n  let temp215;\n  let temp216;\n  let temp217;\n  let temp218;\n  let temp219;\n  let temp220;\n  let temp221;\n  let temp222;\n  let temp223;\n  let temp224;\n  let temp225;\n  let temp226;\n  let temp227;\n  let temp228;\n  let temp229;\n  let temp230;\n  let temp231;\n  let temp232;\n  let temp233;\n  let temp234;\n  let temp235;\n  let temp236;\n  let temp237;\n  let temp238;\n  let temp239;\n  let temp240;\n  let temp241;\n  let temp242;\n  let temp243;\n  let temp244;\n  let temp245;\n  let temp246;\n  let temp247;\n  let temp248;\n  let temp249;\n  let temp250;\n  let temp251;\n  let temp252;\n  let temp253;\n  let temp254;\n  let temp255;\n  let temp256;\n  let temp257;\n  let temp258;\n  let temp259;\n  let temp260;\n  let temp261;\n  let temp262;\n  let temp263;\n  let temp264;\n  let temp265;\n  let temp266;\n  let temp267;\n  let temp268;\n  let temp269;\n  let temp270;\n  let temp271;\n  let temp272;\n  let temp273;\n  let temp274;\n  let temp275;\n  let temp276;\n  let temp277;\n  let temp278;\n  let temp279;\n  let temp280;\n  let temp281;\n  let temp282;\n  let temp283;\n  let temp284;\n  let temp285;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Hex = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5Hex('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArray = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArray = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayStringArray = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayStringArrayString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayStringArrayStringArrayString = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.\n\n  >>> stringToMd5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5HexStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArrayStringArray = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5Hash = crypto.createHash('md5');\n  md5Hash.update(text);\n  return md5Hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash euqivalent string.\n  If 'text' is an empyt string, return null.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  let j = b;\n  while (i || j) {\n    if (i && j) {\n      result.push([i, j]);\n    }\n    if (i || j) {\n      result.push(i % 10);\n      i = Math.floor(i / 10);\n    }\n    if (j || i) {\n      result.push((j % 10) + i);\n      j = Math.floor(j / 10);\n    }\n  }\n  return result;\n};\n\n/**\n * Given a string, return the first letter of the string if it is a lower\n * case letter, otherwise return an empty string.\n */\nconst firstLetter = str => {\n  return str[0].toLowerCase() === str[0]? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a upper\n * case letter, otherwise return an empty string.\n */\nconst firstLetterCaps = str => {\n  return str[0].toUpperCase() === str[0]? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit,\n * otherwise return an empty string.\n */\nconst firstLetterDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCaps = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCaps = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetter = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst firstLetterDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigitsAndLetterCapsDigits = str => {\n  return str[0] === str[0].toUpperCase()? str : str.substr(1);\n};\n\n/**\n * Given a string, return the first letter of the string if it is a digit\n * followed by a letter, otherwise return an empty string.\n */\nconst first", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to thsi ufnction is a string repreesnting umsical notes in a special ASCII format.\n  Yuor task is to pares this srtign and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasst two beats\n  '.|' - quater onte, lasts oen baet\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_length = notes.length;\n  const notes_beats = [];\n  let beats_length = 0;\n  let beats_index = 0;\n  let beats_last = 0;\n  let beats_last_index = 0;\n  let beats_last_index2 = 0;\n  let beats_last_index3 = 0;\n  let beats_last_index4 = 0;\n  let beats_last_index5 = 0;\n  let beats_last_index6 = 0;\n  let beats_last_index7 = 0;\n  let beats_last_index8 = 0;\n  let beats_last_index9 = 0;\n  let beats_last_index10 = 0;\n  let beats_last_index11 = 0;\n  let beats_last_index12 = 0;\n  let beats_last_index13 = 0;\n  let beats_last_index14 = 0;\n  let beats_last_index15 = 0;\n  let beats_last_index16 = 0;\n  let beats_last_index17 = 0;\n  let beats_last_index18 = 0;\n  let beats_last_index19 = 0;\n  let beats_last_index20 = 0;\n  let beats_last_index21 = 0;\n  let beats_last_index22 = 0;\n  let beats_last_index23 = 0;\n  let beats_last_index24 = 0;\n  let beats_last_index25 = 0;\n  let beats_last_index26 = 0;\n  let beats_last_index27 = 0;\n  let beats_last_index28 = 0;\n  let beats_last_index29 = 0;\n  let beats_last_index30 = 0;\n  let beats_last_index31 = 0;\n  let beats_last_index32 = 0;\n  let beats_last_index33 = 0;\n  let beats_last_index34 = 0;\n  let beats_last_index35 = 0;\n  let beats_last_index36 = 0;\n  let beats_last_index37 = 0;\n  let beats_last_index38 = 0;\n  let beats_last_index39 = 0;\n  let beats_last_index40 = 0;\n  let beats_last_index41 = 0;\n  let beats_last_index42 = 0;\n  let beats_last_index43 = 0;\n  let beats_last_index44 = 0;\n  let beats_last_index45 = 0;\n  let beats_last_index46 = 0;\n  let beats_last_index47 = 0;\n  let beats_last_index48 = 0;\n  let beats_last_index49 = 0;\n  let beats_last_index50 = 0;\n  let beats_last_index51 = 0;\n  let beats_last_index52 = 0;\n  let beats_last_index53 = 0;\n  let beats_last_index54 = 0;\n  let beats_last_index55 = 0;\n  let beats_last_index56 = 0;\n  let beats_last_index57 = 0;\n  let beats_last_index58 = 0;\n  let beats_last_index59 = 0;\n  let beats_last_index60 = 0;\n  let beats_last_index61 = 0;\n  let beats_last_index62 = 0;\n  let beats_last_index63 = 0;\n  let beats_last_index64 = 0;\n  let beats_last_index65 = 0;\n  let beats_last_index66 = 0;\n  let beats_last_index67 = 0;\n  let beats_last_index68 = 0;\n  let beats_last_index69 = 0;\n  let beats_last_index70 = 0;\n  let beats_last_index71 = 0;\n  let beats_last_index72 = 0;\n  let beats_last_index73 = 0;\n  let beats_last_index74 = 0;\n  let beats_last_index75 = 0;\n  let beats_last_index76 = 0;\n  let beats_last_index77 = 0;\n  let beats_last_index78 = 0;\n  let beats_last_index79 = 0;\n  let beats_last_index80 = 0;\n  let beats_last_index81 = 0;\n  let beats_last_index82 = 0;\n  let beats_last_index83 = 0;\n  let beats_last_index84 = 0;\n  let beats_last_index85 = 0;\n  let beats_last_index86 = 0;\n  let beats_last_index87 = 0;\n  let beats_last_index88 = 0;\n  let beats_last_index89 = 0;\n  let beats_last_index90 = 0;\n  let beats_last_index91 = 0;\n  let beats_last_index92 = 0;\n  let beats_last_index93 = 0;\n  let beats_last_index94 = 0;\n  let beats_last_index95 = 0;\n  let beats_last_index96 = 0;\n  let beats_last_index97 = 0;\n  let beats_last_index98 = 0;\n  let beats_last_index99 = 0;\n  let beats_last_index100 = 0;\n  let beats_last_index101 = 0;\n  let beats_last_index102 = 0;\n  let beats_last_index103 = 0;\n  let beats_last_index104 = 0;\n  let beats_last_index105 = 0;\n  let beats_last_index106 = 0;\n  let beats_last_index107 = 0;\n  let beats_last_index108 = 0;\n  let beats_last_index109 = 0;\n  let beats_last_index110 = 0;\n  let beats_last_index111 = 0;\n  let beats_last_index112 = 0;\n  let beats_last_index113 = 0;\n  let beats_last_index114 = 0;\n  let beats_last_index115 = 0;\n  let beats_last_index116 = 0;\n  let beats_last_index117 = 0;\n  let beats_last_index118 = 0;\n  let beats_last_index119 = 0;\n  let beats_last_index120 = 0;\n  let beats_last_index121 = 0;\n  let beats_last_index122 = 0;\n  let beats_last_index123 = 0;\n  let beats_last_index124 = 0;\n  let beats_last_index125 = 0;\n  let beats_last_index126 = 0;\n  let beats_last_index127 = 0;\n  let beats_last_index128 = 0;\n  let beats_last_index129 = 0;\n  let beats_last_index130 = 0;\n  let beats_last_index131 = 0;\n  let beats_last_index132 = 0;\n  let beats_last_index133 = 0;\n  let beats_last_index134 = 0;\n  let beats_last_index135 = 0;\n  let beats_last_index136 = 0;\n  let beats_last_index137 = 0;\n  let beats_last_index138 = 0;\n  let beats_last_index139 = 0;\n  let beats_last_index140 = 0;\n  let beats_last_index141 = 0;\n  let beats_last_index142 = 0;\n  let beats_last_index143 = 0;\n  let beats_last_index144 = 0;\n  let beats_last_index145 = 0;\n  let beats_last_index146 = 0;\n  let beats_last_index147 = 0;\n  let beats_last_index148 = 0;\n  let beats_last_index149 = 0;\n  let beats_last_index150 = 0;\n  let beats_last_index151 = 0;\n  let beats_last_index152 = 0;\n  let beats_last_index153 = 0;\n  let beats_last_index154 = 0;\n  let beats_last_index155 = 0;\n  let beats_last_index156 = 0;\n  let beats_last_index157 = 0;\n  let beats_last_index158 = 0;\n  let beats_last_index159 = 0;\n  let beats_last_index160 = 0;\n  let beats_last_index161 = 0;\n  let beats_last_index162 = 0;\n  let beats_last_index163 = 0;\n  let beats_last_index164 = 0;\n  let beats_last_index165 = 0;\n  let beats_last_index166 = 0;\n  let beats_last_index167 = 0;\n  let beats_last_index168 = 0;\n  let beats_last_index169 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Find how many times a given substring can eb fonud in hte orginial string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = string.indexOf(substring);\n  while (index > -1) {\n    count++;\n    index = string.indexOf(substring, index + substring.length);\n  }\n  return count;\n};\n\n/**\n * Find all occurrences of substring in string.\n * If substring is not found, return an empty array.\n * If substring is found, return an array with one element - substring.\n * If substring is found in multiple strings,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.\n * If substring is found in multiple strings and one of them is found,\n * return an array with multiple elements - substrings.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input is a space-deliimted string of numberals rfom 'ezro' to 'nine'.\n  Valid choices are 'ezro', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' nad 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sortedNumbers = numbers.split(\" \").sort((a, b) => a - b);\n  return sortedNumbers.join(\" \");\n};\n\n/**\n  Given a string, return its reverse alphabetical order\n  >>> reverseAlphabetical('one')\n  'e'\n  */\nconst reverseAlphabetical = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverseNumeric = (str) => {\n  let reversed = str.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/**\n  Given a string, return its reverse numeric order\n  >>> reverseNumeric('one')\n  '9'\n  */\nconst reverse", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateFraction(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponent = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateMantissa(3.5)\n  3\n  */\nconst truncateMantissa = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponent(3.5)\n  3\n  */\nconst truncateExponentZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZero(3.5)\n  3\n  */\nconst truncateExponentZeroZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZeroZero(3.5)\n  3\n  */\nconst truncateExponentZeroZeroZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZeroZeroZero(3.5)\n  3\n  */\nconst truncateExponentZeroZeroZeroZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZeroZeroZeroZero(3.5)\n  3\n  */\nconst truncateExponentZeroZeroZeroZeroZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZeroZeroZeroZeroZeroZero(3.5)\n  3\n  */\nconst truncateExponentZeroZeroZeroZeroZeroZero = (number) => {\n  const decimal = number % 1;\n  const intPart = Math.floor(number);\n  return intPart > 0? intPart : decimal;\n};\n\n/**\n  Given a opsitive floating ponit number, it can eb decomopsed into\n  and integer part (alrgest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateExponentZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZeroZero", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a supplied list fo numbers (of lentgh at least wto) elsetc and return two that are the closest to aech\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestTo = numbers.reduce((acc, curr) => {\n    const diff = curr - acc;\n    if (diff < 0) return acc;\n    return curr;\n  }, Number.POSITIVE_INFINITY);\n  return numbers.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLine = (lines, wto) => {\n  const closestTo = findClosestElements(lines.map(line => line.split(\" \")));\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLines = (lines, wto) => {\n  const closestTo = findClosestElementsOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLine = (lines, wto) => {\n  const closestTo = findClosestElementsOnLinesOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLines = (lines, wto) => {\n  const closestTo = findClosestElementsOnLinesOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLinesOnLines = (lines, wto) => {\n  const closestTo = findClosestElementsOnLinesOnLinesOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLinesOnLinesOnLines = (lines, wto) => {\n  const closestTo = findClosestElementsOnLinesOnLinesOnLinesOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLinesOnLinesOnLinesOnLinesOnLines = (lines, wto) => {\n  const closestTo = findClosestElementsOnLinesOnLinesOnLinesOnLinesOnLine(lines, wto);\n  return lines.reduce((acc, curr) => {\n    const diff = curr - closestTo;\n    if (diff < 0) return acc;\n    return curr;\n  }, closestTo);\n};\n\nconst findClosestElementsOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLinesOnLine", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Given list fo numbers (of ta least wto elmeents), apply a lienar transform to that list,\n  usch that teh smlalest number will become 0 and the largest will bemcoe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const maxNumber = Math.max.apply(null, numbers);\n  const minNumber = Math.min.apply(null, numbers);\n  const rescaledNumbers = numbers.map((number) => {\n    return number / maxNumber;\n  });\n  return rescaledNumbers.map((number) => {\n    return number < minNumber? minNumber : number > maxNumber? maxNumber : number\n  });\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairs = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs;\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverse = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.reverse();\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => a[0] - b[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverse = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list that sum to k\n * >>> findPairs([1, 2, 3, 4], 2)\n  [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]\n  */\nconst findPairsReverseAndSortReverseAndSort = (numbers, k) => {\n  const pairs = [];\n  const numberPairs = numbers.map((number) => {\n    const pair = number.map((num) => {\n      return [num, number];\n    });\n    return pair;\n  });\n  numberPairs.forEach((pair) => {\n    const sum = pair.reduce((a, b) => a + b, 0);\n    if (sum === k) {\n      pairs.push(pair);\n    }\n  });\n  return pairs.sort((a, b) => b[0] - a[0]);\n};\n\n/**\n * Given a number list and a number k, find all pairs of numbers in list ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3.14]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number' && isFinite(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3, 'abc']\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1, 2])\n  [None, 1, 2]\n  */\nconst filterNone = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for empty lists\n  >>> filterEmpty([])\n  []\n  >>> filterEmpty([[]])\n  [[]]\n  >>> filterEmpty([[], []])\n  [[], []]\n  >>> filterEmpty([[], [], []])\n  [[], [], []]\n  */\nconst filterEmpty = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty dictionaries\n  >>> filterEmptyDict({})\n  {}\n  >>> filterEmptyDict({a: 1})\n  {}\n  >>> filterEmptyDict({a: []})\n  {}\n  >>> filterEmptyDict({a: [1, 2]})\n  {}\n  >>> filterEmptyDict({a: {b: 1}}, ['a', 'b'])\n  {}\n  >>> filterEmptyDict({a: {b: [1, 2]}}, ['a', 'b'])\n  {}\n  >>> filterEmptyDict({a: {b: [1, 2], c: [3, 4]}}, ['a', 'b', 'c'])\n  {}\n  >>> filterEmptyDict({a: {b: [1, 2], c: [3, 4]}, d: 5}, ['a', 'b', 'c'])\n  {}\n  >>> filterEmptyDict({a: {b: [1, 2], c: [3, 4]}, d: 5}, ['a', 'b', 'c'])\n  {}\n  */\nconst filterEmptyDict = (values, keys) => {\n  return values.filter(value => {\n    const keys = keys.filter(key => key in value);\n    return keys.length === 0;\n  });\n};\n\n/**\n * Filter given list of any python values only for empty strings\n  >>> filterEmptyString([])\n  []\n  >>> filterEmptyString([[]])\n  [[]]\n  >>> filterEmptyString([[], []])\n  [[], []]\n  >>> filterEmptyString([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptyString = (values) => {\n  return values.filter(value => typeof value ==='string' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty arrays\n  >>> filterEmptyArray([])\n  []\n  >>> filterEmptyArray([[]])\n  [[]]\n  >>> filterEmptyArray([[], []])\n  [[], []]\n  >>> filterEmptyArray([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptyArray = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty objects\n  >>> filterEmptyObject({})\n  {}\n  >>> filterEmptyObject({a: 1})\n  {}\n  >>> filterEmptyObject({a: []})\n  {}\n  >>> filterEmptyObject({a: [1, 2]})\n  {}\n  >>> filterEmptyObject({a: {b: 1}}, ['a', 'b'])\n  {}\n  >>> filterEmptyObject({a: {b: [1, 2]}}, ['a', 'b'])\n  {}\n  >>> filterEmptyObject({a: {b: [1, 2], c: [3, 4]}}, ['a', 'b', 'c'])\n  {}\n  >>> filterEmptyObject({a: {b: [1, 2], c: [3, 4]}, d: 5}, ['a', 'b', 'c'])\n  {}\n  >>> filterEmptyObject({a: {b: [1, 2], c: [3, 4]}, d: 5}, ['a', 'b', 'c'])\n  {}\n  */\nconst filterEmptyObject = (values, keys) => {\n  return values.filter(value => {\n    const keys = keys.filter(key => key in value);\n    return keys.length === 0;\n  });\n};\n\n/**\n * Filter given list of any python values only for empty functions\n  >>> filterEmptyFunction([])\n  []\n  >>> filterEmptyFunction([[]])\n  [[]]\n  >>> filterEmptyFunction([[], []])\n  [[], []]\n  >>> filterEmptyFunction([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptyFunction = (values) => {\n  return values.filter(value => typeof value === 'function');\n};\n\n/**\n * Filter given list of any python values only for empty generators\n  >>> filterEmptyGenerator([])\n  []\n  >>> filterEmptyGenerator([[]])\n  [[]]\n  >>> filterEmptyGenerator([[], []])\n  [[], []]\n  >>> filterEmptyGenerator([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptyGenerator = (values) => {\n  return values.filter(value => typeof value === 'function' && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty tuples\n  >>> filterEmptyTuple([])\n  []\n  >>> filterEmptyTuple([[]])\n  [[]]\n  >>> filterEmptyTuple([[], []])\n  [[], []]\n  >>> filterEmptyTuple([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptyTuple = (values) => {\n  return values.filter(value => Array.isArray(value) && value.length === 0);\n};\n\n/**\n * Filter given list of any python values only for empty set\n  >>> filterEmptySet([])\n  []\n  >>> filterEmptySet([[]])\n  [[]]\n  >>> filterEmptySet([[], []])\n  [[], []]\n  >>> filterEmptySet([[], [], []])\n  [[], [], []]\n  */\nconst filterEmptySet = (values) => {\n  return values.filter(value => typeof value ==='set');\n};\n\n/**\n * Filter given list of any python values only for empty map\n  >>> filterEmptyMap({})\n  {}\n  >>> filterEmptyMap({a: 1})\n  {}\n  >>> filterEmptyMap({a: []})\n  {}\n  >>> filterEmptyMap({a: [1, 2]})\n  {}\n  >>> filterEmptyMap({a: {b: 1}}, ['a', 'b'])\n  {}\n  >>> filterEmptyMap({a: {b: [1, 2]}}, ['a', 'b'])\n  {}\n  >>> filterEmptyMap({a: {b: [1, 2], c: [3, 4]}}, ['a', 'b', 'c'])\n  {}\n  >>> filterEmptyMap({a: {b: [", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/23", "prompt": "/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* eRturn lentgh of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n * Return true if given string starts with given prefix\n * >>> strstarts('abc', 'abc')\n  true\n  >>> strstarts('abc', 'b')\n  false\n  */\nconst strstarts = (string, prefix) => {\n  return string.indexOf(prefix) === 0\n}\n\n/**\n * Return true if given string ends with given suffix\n * >>> strends('abc', 'abc')\n  true\n  >>> strends('abc', 'b')\n  false\n  */\nconst strends = (string, suffix) => {\n  return string.indexOf(suffix, string.length - suffix.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'abc')\n  true\n  >>> strcontains('abc', 'b')\n  false\n  */\nconst strcontains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontains = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontains = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainsc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainsc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainscc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainscc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainsccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainsccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainscccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainscccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainsccccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainsccccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainscccccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainscccccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainsccccccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainsccccccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainscccccccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainscccccccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainsccccccccc = (string, substring) => {\n  return string.indexOf(substring, 0)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strendscontainsccccccccc = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/**\n * Return true if given string contains given substring\n * >>> strcontains('abc', 'b')\n  true\n  >>> strcontains('abc', 'abc')\n  false\n  */\nconst strstartscontainscccccccccc", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Fro a given number n, find the largest numbre that dividse n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(div);\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst smallestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.floor(div);\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> smallestDivisor(15)\n  1\n  */\nconst largestDivisor = (n) => {\n  const div = n / Math.pow(10, Math.floor(Math.log10(n)));\n  return Math.ceil(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* eRturn list of prime factros of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how amny times it appeares in factorziation.\n  Input number should be equal to the prodcut of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factorsCount = 0;\n  let factorsIndex = 0;\n  let factorsCountIndex = 0;\n  let factorsCountIndex2 = 0;\n  let factorsCountIndex3 = 0;\n  let factorsCountIndex4 = 0;\n  let factorsCountIndex5 = 0;\n  let factorsCountIndex6 = 0;\n  let factorsCountIndex7 = 0;\n  let factorsCountIndex8 = 0;\n  let factorsCountIndex9 = 0;\n  let factorsCountIndex10 = 0;\n  let factorsCountIndex11 = 0;\n  let factorsCountIndex12 = 0;\n  let factorsCountIndex13 = 0;\n  let factorsCountIndex14 = 0;\n  let factorsCountIndex15 = 0;\n  let factorsCountIndex16 = 0;\n  let factorsCountIndex17 = 0;\n  let factorsCountIndex18 = 0;\n  let factorsCountIndex19 = 0;\n  let factorsCountIndex20 = 0;\n  let factorsCountIndex21 = 0;\n  let factorsCountIndex22 = 0;\n  let factorsCountIndex23 = 0;\n  let factorsCountIndex24 = 0;\n  let factorsCountIndex25 = 0;\n  let factorsCountIndex26 = 0;\n  let factorsCountIndex27 = 0;\n  let factorsCountIndex28 = 0;\n  let factorsCountIndex29 = 0;\n  let factorsCountIndex30 = 0;\n  let factorsCountIndex31 = 0;\n  let factorsCountIndex32 = 0;\n  let factorsCountIndex33 = 0;\n  let factorsCountIndex34 = 0;\n  let factorsCountIndex35 = 0;\n  let factorsCountIndex36 = 0;\n  let factorsCountIndex37 = 0;\n  let factorsCountIndex38 = 0;\n  let factorsCountIndex39 = 0;\n  let factorsCountIndex40 = 0;\n  let factorsCountIndex41 = 0;\n  let factorsCountIndex42 = 0;\n  let factorsCountIndex43 = 0;\n  let factorsCountIndex44 = 0;\n  let factorsCountIndex45 = 0;\n  let factorsCountIndex46 = 0;\n  let factorsCountIndex47 = 0;\n  let factorsCountIndex48 = 0;\n  let factorsCountIndex49 = 0;\n  let factorsCountIndex50 = 0;\n  let factorsCountIndex51 = 0;\n  let factorsCountIndex52 = 0;\n  let factorsCountIndex53 = 0;\n  let factorsCountIndex54 = 0;\n  let factorsCountIndex55 = 0;\n  let factorsCountIndex56 = 0;\n  let factorsCountIndex57 = 0;\n  let factorsCountIndex58 = 0;\n  let factorsCountIndex59 = 0;\n  let factorsCountIndex60 = 0;\n  let factorsCountIndex61 = 0;\n  let factorsCountIndex62 = 0;\n  let factorsCountIndex63 = 0;\n  let factorsCountIndex64 = 0;\n  let factorsCountIndex65 = 0;\n  let factorsCountIndex66 = 0;\n  let factorsCountIndex67 = 0;\n  let factorsCountIndex68 = 0;\n  let factorsCountIndex69 = 0;\n  let factorsCountIndex70 = 0;\n  let factorsCountIndex71 = 0;\n  let factorsCountIndex72 = 0;\n  let factorsCountIndex73 = 0;\n  let factorsCountIndex74 = 0;\n  let factorsCountIndex75 = 0;\n  let factorsCountIndex76 = 0;\n  let factorsCountIndex77 = 0;\n  let factorsCountIndex78 = 0;\n  let factorsCountIndex79 = 0;\n  let factorsCountIndex80 = 0;\n  let factorsCountIndex81 = 0;\n  let factorsCountIndex82 = 0;\n  let factorsCountIndex83 = 0;\n  let factorsCountIndex84 = 0;\n  let factorsCountIndex85 = 0;\n  let factorsCountIndex86 = 0;\n  let factorsCountIndex87 = 0;\n  let factorsCountIndex88 = 0;\n  let factorsCountIndex89 = 0;\n  let factorsCountIndex90 = 0;\n  let factorsCountIndex91 = 0;\n  let factorsCountIndex92 = 0;\n  let factorsCountIndex93 = 0;\n  let factorsCountIndex94 = 0;\n  let factorsCountIndex95 = 0;\n  let factorsCountIndex96 = 0;\n  let factorsCountIndex97 = 0;\n  let factorsCountIndex98 = 0;\n  let factorsCountIndex99 = 0;\n  let factorsCountIndex100 = 0;\n  let factorsCountIndex101 = 0;\n  let factorsCountIndex102 = 0;\n  let factorsCountIndex103 = 0;\n  let factorsCountIndex104 = 0;\n  let factorsCountIndex105 = 0;\n  let factorsCountIndex106 = 0;\n  let factorsCountIndex107 = 0;\n  let factorsCountIndex108 = 0;\n  let factorsCountIndex109 = 0;\n  let factorsCountIndex110 = 0;\n  let factorsCountIndex111 = 0;\n  let factorsCountIndex112 = 0;\n  let factorsCountIndex113 = 0;\n  let factorsCountIndex114 = 0;\n  let factorsCountIndex115 = 0;\n  let factorsCountIndex116 = 0;\n  let factorsCountIndex117 = 0;\n  let factorsCountIndex118 = 0;\n  let factorsCountIndex119 = 0;\n  let factorsCountIndex120 = 0;\n  let factorsCountIndex121 = 0;\n  let factorsCountIndex122 = 0;\n  let factorsCountIndex123 = 0;\n  let factorsCountIndex124 = 0;\n  let factorsCountIndex125 = 0;\n  let factorsCountIndex126 = 0;\n  let factorsCountIndex127 = 0;\n  let factorsCountIndex128 = 0;\n  let factorsCountIndex129 = 0;\n  let factorsCountIndex130 = 0;\n  let factorsCountIndex131 = 0;\n  let factorsCountIndex132 = 0;\n  let factorsCountIndex133 = 0;\n  let factorsCountIndex134 = 0;\n  let factorsCountIndex135 = 0;\n  let factorsCountIndex136 = 0;\n  let factorsCountIndex137 = 0;\n  let factorsCountIndex138 = 0;\n  let factorsCountIndex139 = 0;\n  let factorsCountIndex140 = 0;\n  let factorsCountIndex141 = 0;\n  let factorsCountIndex142 = 0;\n  let factorsCountIndex143 = 0;\n  let factorsCountIndex144 = 0;\n  let factorsCountIndex145 = 0;\n  let factorsCountIndex146 = 0;\n  let factorsCountIndex147 = 0;\n  let factorsCountIndex148 = 0;\n  let factorsCountIndex149 = 0;\n  let factorsCountIndex150 = 0;\n  let factorsCountIndex151 = 0;\n  let factorsCountIndex152 = 0;\n  let factorsCountIndex153 = 0;\n  let factorsCountIndex154 = 0;\n  let factorsCountIndex155 = 0;\n  let factorsCountIndex156 = 0;\n  let factorsCountIndex157 = 0;\n  let factorsCountIndex158 = 0;\n  let factorsCountIndex159 = 0;\n  let factorsCountIndex160 = 0;\n  let factorsCountIndex161 = 0;\n  let factorsCountIndex162 = 0;\n  let factorsCountIndex163 = 0;\n  let factorsCountIndex164 = 0;\n  let factorsCountIndex165 = 0;\n  let factorsCountIndex166 = 0;\n  let factorsCountIndex167 = 0;\n  let factorsCountIndex168 = 0;\n  let factorsCountIndex169 = 0;\n  let factorsCountIndex170 = 0;\n  let factorsCountIndex171 = 0;\n  let factorsCountIndex172 = 0;\n  let factorsCountIndex173 = 0;\n  let factorsCountIndex174 = 0;\n  let factorsCountIndex175 = 0;\n  let factorsCountIndex176 = 0;\n  let factorsCountIndex177 = 0;\n  let factorsCountIndex178 = 0;\n  let factorsCountIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.reduce((acc, cur) => {\n    if (seen.has(cur)) {\n      acc.push(cur);\n    } else {\n      seen.add(cur);\n    }\n    return acc;\n  }, []);\n};\n\n/* From a list of inteegrs, remove all eelments that occur more than ncoe.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicatesNoDuplicates", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi lowercase charactesr to uppercase and uppercase to loewrcaes.\n * For a given string, flpi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Concatenate list of strings into a singel string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, curr, index) => {\n    return acc + (index < strings.length - 1? curr : '');\n  }, '');\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> toArray({ a: 1, b: 2, c: 3 })\n  [1, 2]\n  */\nconst toArray = (obj) => {\n  return Object.keys(obj).map(key => obj[key]);\n};\n\n/**\n * Convert an object to an array\n * >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Filter an input list of strings only for ones thta start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones thta end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only letters.\n  >>> filterByLetters([], 'a')\n  []\n  >>> filterByLetters(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLetters = (strings, letters) => {\n  return strings.filter(string => letters.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only numbers.\n  >>> filterByNumbers([], 'a')\n  []\n  >>> filterByNumbers(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByNumbers = (strings, numbers) => {\n  return strings.filter(string => numbers.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only symbols.\n  >>> filterBySymbols([], 'a')\n  []\n  >>> filterBySymbols(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySymbols = (strings, symbols) => {\n  return strings.filter(string => symbols.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters.\n  >>> filterByUppercase([], 'a')\n  []\n  >>> filterByUppercase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercase = (strings, uppercase) => {\n  return strings.filter(string => uppercase.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters.\n  >>> filterByLowercase([], 'a')\n  []\n  >>> filterByLowercase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercase = (strings, lowercase) => {\n  return strings.filter(string => lowercase.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters and numbers.\n  >>> filterByUppercaseNumbers([], 'a')\n  []\n  >>> filterByUppercaseNumbers(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercaseNumbers = (strings, uppercaseNumbers) => {\n  return strings.filter(string => uppercaseNumbers.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters and numbers.\n  >>> filterByLowercaseNumbers([], 'a')\n  []\n  >>> filterByLowercaseNumbers(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercaseNumbers = (strings, lowercaseNumbers) => {\n  return strings.filter(string => lowercaseNumbers.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters and symbols.\n  >>> filterByUppercaseSymbols([], 'a')\n  []\n  >>> filterByUppercaseSymbols(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercaseSymbols = (strings, uppercaseSymbols) => {\n  return strings.filter(string => uppercaseSymbols.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters and symbols.\n  >>> filterByLowercaseSymbols([], 'a')\n  []\n  >>> filterByLowercaseSymbols(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercaseSymbols = (strings, lowercaseSymbols) => {\n  return strings.filter(string => lowercaseSymbols.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters and numbers.\n  >>> filterByUppercaseNumbersAndSymbols([], 'a')\n  []\n  >>> filterByUppercaseNumbersAndSymbols(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercaseNumbersAndSymbols = (strings, uppercaseNumbersAndSymbols) => {\n  return strings.filter(string => uppercaseNumbersAndSymbols.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters and numbers.\n  >>> filterByLowercaseNumbersAndSymbols([], 'a')\n  []\n  >>> filterByLowercaseNumbersAndSymbols(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercaseNumbersAndSymbols = (strings, lowercaseNumbersAndSymbols) => {\n  return strings.filter(string => lowercaseNumbersAndSymbols.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters and symbols.\n  >>> filterByUppercaseSymbolsAndNumbers([], 'a')\n  []\n  >>> filterByUppercaseSymbolsAndNumbers(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercaseSymbolsAndNumbers = (strings, uppercaseSymbolsAndNumbers) => {\n  return strings.filter(string => uppercaseSymbolsAndNumbers.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters and symbols.\n  >>> filterByLowercaseSymbolsAndNumbers([], 'a')\n  []\n  >>> filterByLowercaseSymbolsAndNumbers(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercaseSymbolsAndNumbers = (strings, lowercaseSymbolsAndNumbers) => {\n  return strings.filter(string => lowercaseSymbolsAndNumbers.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only uppercase letters and symbols.\n  >>> filterByUppercaseNumbersAndSymbolsAndLowercase([], 'a')\n  []\n  >>> filterByUppercaseNumbersAndSymbolsAndLowercase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByUppercaseNumbersAndSymbolsAndLowercase = (strings, uppercaseNumbersAndSymbolsAndLowercase) => {\n  return strings.filter(string => uppercaseNumbersAndSymbolsAndLowercase.includes(string))\n}\n\n/**\n * Filter an input list of strings only for ones thta contain only lowercase letters and symbols.\n  >>> filterByLowercaseNumbersAndSymbolsAndLowercase([], 'a')\n  []\n  >>> filterByLowercaseNumbersAndSymbolsAndLowercase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterByLowercaseNumbersAndSymbolsAndLowercase = (strings, lowercaseNumbersAndSymbol", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* You'er given a list of deposit and withdrawal operations on a bakn account taht starts with\n  zero balance. Your task is to edtect if at any opint the balance fo accoutn fallls below zero, and\n  at that piont function should return true. Otherwise it shuold return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance <= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is greater than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance > 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is less than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance < 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance === 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is greater than or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance >= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is less than or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance <= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to or greater than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance >= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to or less than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance <= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance === 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is greater than or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance >= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is less than or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance <= 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance === 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is greater than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance > 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is less than zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance < 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n  return balance === 0;\n};\n\n/* Your task is to write a function that takes an array of operations and returns true if the\n  balance of account is greater than or equal to zero, otherwise false.\n  >>> isBalanced([10, -10, 20])\n  true\n  >>> isBalanced([10, -10, 20])\n  false\n  */\nconst isBalanced = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i][0];\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return only positive numbres in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0)\n}\n\n/*Return only negative numbres in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0)\n}\n\n/*Return only numbers in the list that are not negative.\n  >>> getNonNegative([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNegative = (l) => {\n  return l.filter(n => n >= 0)\n}\n\n/*Return only numbers in the list that are not positive.\n  >>> getNonPositive([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonPositive = (l) => {\n  return l.filter(n => n <= 0)\n}\n\n/*Return only numbers in the list that are not numbers.\n  >>> getNonNumbers([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNumbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNumbers = (l) => {\n  return l.filter(n => typeof n!== 'number')\n}\n\n/*Return only numbers in the list that are not strings or numbers.\n  >>> getNonStrings([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonStrings([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonStrings = (l) => {\n  return l.filter(n => typeof n!=='string')\n}\n\n/*Return only numbers in the list that are not booleans.\n  >>> getNonBooleans([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonBooleans([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonBooleans = (l) => {\n  return l.filter(n => typeof n!== 'boolean')\n}\n\n/*Return only numbers in the list that are not null.\n  >>> getNonNull([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonNull([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonNull = (l) => {\n  return l.filter(n => n!== null)\n}\n\n/*Return only numbers in the list that are not undefined.\n  >>> getNonUndefined([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonUndefined = (l) => {\n  return l.filter(n => typeof n === 'undefined')\n}\n\n/*Return only numbers in the list that are not empty strings.\n  >>> getNonEmptyStrings([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyStrings([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyStrings = (l) => {\n  return l.filter(n => typeof n!=='string' && n!== null)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length > 0)\n}\n\n/*Return only numbers in the list that are not empty objects.\n  >>> getNonEmptyObjects([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyObjects([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyObjects = (l) => {\n  return l.filter(n => typeof n!== 'object' && n!== null)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length === 0)\n}\n\n/*Return only numbers in the list that are not empty objects.\n  >>> getNonEmptyObjects([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyObjects([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyObjects = (l) => {\n  return l.filter(n => typeof n!== 'object' && n!== null)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length === 0)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length === 0)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length === 0)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, 2, 3, 9, 123, 1]\n  */\nconst getNonEmptyArrays = (l) => {\n  return l.filter(n => Array.isArray(n) && n.length === 0)\n}\n\n/*Return only numbers in the list that are not empty arrays.\n  >>> getNonEmptyArrays([-1, 2, -4, 5, 6])\n  [2, -4, 5, 6]\n  >>> getNonEmptyArrays([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true if a given number is prmie, and false toherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return true;\n  }\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number, return true if it is a prime number, and false otherwise.\n  >>> isPrime(123)\n  true\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>> isPrime(149)\n  false\n  >>> isPrime(150)\n  false\n  >>> isPrime(151)\n  false\n  >>> isPrime(152)\n  false\n  >>> isPrime(153)\n  false\n  >>> isPrime(154)\n  false\n  >>> isPrime(155)\n  false\n  >>> isPrime(156)\n  false\n  >>> isPrime(157)\n  false\n  >>> isPrime(158)\n  false\n  >>> isPrime(159)\n  false\n  >>> isPrime(160)\n  false\n  >>> isPrime(161)\n  false\n  >>> isPrime(162)\n  false\n  >>> isPrime(163)\n  false\n  >>> isPrime(164)\n  false\n  >>> isPrime(165)\n  false\n  >>> isPrime(166)\n  false\n  >>> isPrime(167)\n  false\n  >>> isPrime(168)\n  false\n  >>> isPrime(169)\n  false\n  >>> isPrime(170)\n  false\n  >>> isPrime(171)\n  false\n  >>> isPrime(172)\n  false\n  >>> isPrime(173)\n  false\n  >>> isPrime(174)\n  false\n  >>> isPrime(175)\n  false\n  >>> isPrime(176)\n  false\n  >>> isPrime(177)\n  false\n  >>> isPrime(178)\n  false\n  >>> isPrime(179)\n  false\n  >>> isPrime(180)\n  false\n  >>> isPrime(181)\n  false\n  >>> isPrime(182)\n  false\n  >>> isPrime(183)\n  false\n  >>> isPrime(184)\n  false\n  >>> isPrime(185)\n  false\n  >>> isPrime(186)\n  false\n  >>> isPrime(187)\n  false\n  >>> isPrime(188)\n  false\n  >>> isPrime(189)\n  false\n  >>> isPrime(190)\n  false\n  >>> isPrime(191)\n  false\n  >>> isPrime(192)\n  false\n  >>> isPrime(193)\n  false\n  >>> isPrime(194)\n  false\n  >>> isPrime(195)\n  false\n  >>> isPrime(196)\n  false\n  >>> isPrime(197)\n  false\n  >>> isPrime(198)\n  false\n  >>> isPrime(199)\n  false\n  >>> isPrime(200)\n  false\n  >>> isPrime(201)\n  false\n  >>> isPrime(202)\n  false\n  >>> isPrime(203)\n  false\n  >>> isPrime(204)\n  false\n  >>> isPrime(205)\n  false\n  >>> isPrime(206)\n  false\n  >>> isPrime(207)\n  false\n  >>> isPrime(208)\n  false\n  >>> isPrime(209)\n  false\n  >>> isPrime(210)\n  false\n  >>> isPrime(211)\n  false\n  >>> isPrime(212)\n  false\n  >>> isPrime(213)\n  false\n  >>> isPrime(214)\n  false\n  >>> isPrime(215)\n  false\n  >>> isPrime(216)\n  false\n  >>> isPrime(217)\n  false\n  >>> isPrime(218)\n  false\n  >>> isPrime(219)\n  false\n  >>> isPrime(220)\n  false\n  >>> isPrime(221)\n  false\n  >>> isPrime(222)\n  false\n  >>> isPrime(223)\n  false\n  >>> isPrime(224)\n  false\n  >>> isPrime(225)\n  false\n  >>> isPrime(226)\n  false\n  >>> isPrime(227)\n  false\n  >>> isPrime(228)\n  false\n  >>> isPrime(229)\n  false\n  >>> isPrime(230)\n  false\n  >>> isPrime(231)\n  false\n  >>> isPrime(232)\n  false\n  >>> isPrime(233)\n  false\n  >>> isPrime(234)\n  false\n  >>> isPrime(235)\n  false\n  >>> isPrime(236)\n  false\n  >>> isPrime(237", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Evaluates polynomail with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero opint, even if there are many.\n  Moreover, findZero only takes list xs having even nmuber of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let result = xs[0];\n  let zero = 0;\n  while (i < len) {\n    if (xs[i] === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] < 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 0) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] % 2 === 1) {\n      zero++;\n      i++;\n      continue;\n    }\n    if (xs[i] ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {\n        l2.splice(j, 1);\n        j++;\n      } else {\n        k++;\n      }\n    }\n    i++;\n  }\n  return l2;\n};\n\n/*This function takes a list l and retruns a list l' such that\n  l' is idetnical to l in the indciies thta are not diviisble yb three, while its values at hte indicies that are diivsilbe by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThirdSortedSortedSortedSortedSortedSorted([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThirdSortedSortedSortedSortedSortedSorted = (l) => {\n  const l2 = l.slice();\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < l.length) {\n    while (j < l.length) {\n      if (l[j] % 3 === l[j + k] % 3) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/34", "prompt": "/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sortde unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique18 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique19 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique20 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique21 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return true;\n    seen.add(v);\n    return false;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique22 = (l) => {\n  let seen = new Set();\n  return l.filter((v, i, a) => {\n    if (seen.has(v)) return false;\n    seen.add(v);\n    return true;\n  });\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique23 = (l) => {\n  let seen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.length > 0? l[l.length - 1] : null;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst minElement = (l) => {\n  return l.length > 0? l[0] : null;\n};\n\n/*Return element at specified index.\n  >>> elementAt([1, 2, 3], 1)\n  2\n  >>> elementAt([1, 2, 3], 2)\n  3\n  >>> elementAt([1, 2, 3], 3)\n  null\n  */\nconst elementAt = (l, i) => {\n  return i < 0? l.length + i : l[i];\n};\n\n/*Return element at specified index from start or end index.\n  >>> elementAtStart([1, 2, 3], 1)\n  2\n  >>> elementAtStart([1, 2, 3], 2)\n  3\n  >>> elementAtStart([1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([1, 2, 3], 1)\n  3\n  >>> elementAtEnd([1, 2, 3], 2)\n  2\n  >>> elementAtEnd([1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([1, 2, 3], 0)\n  1\n  >>> elementAtStart([1, 2, 3], 1)\n  2\n  >>> elementAtStart([1, 2, 3], 2)\n  3\n  >>> elementAtStart([1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([1, 2, 3], 0)\n  3\n  >>> elementAtEnd([1, 2, 3], 1)\n  2\n  >>> elementAtEnd([1, 2, 3], 2)\n  1\n  >>> elementAtEnd([1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], 1)\n  2\n  >>> elementAtEnd([0, 1, 2, 3], 2)\n  1\n  >>> elementAtEnd([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], 1)\n  2\n  >>> elementAtEnd([0, 1, 2, 3], 2)\n  1\n  >>> elementAtEnd([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], 1)\n  2\n  >>> elementAtEnd([0, 1, 2, 3], 2)\n  1\n  >>> elementAtEnd([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], 1)\n  2\n  >>> elementAtEnd([0, 1, 2, 3], 2)\n  1\n  >>> elementAtEnd([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], 1)\n  2\n  >>> elementAtEnd([0, 1, 2, 3], 2)\n  1\n  >>> elementAtEnd([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtEnd = (l, i) => {\n  return i < 0? l.length : i < l.length? i + 1 : i;\n};\n\n/*Return element at specified index from start index.\n  >>> elementAtStart([0, 1, 2, 3], 0)\n  0\n  >>> elementAtStart([0, 1, 2, 3], 1)\n  1\n  >>> elementAtStart([0, 1, 2, 3], 2)\n  2\n  >>> elementAtStart([0, 1, 2, 3], 3)\n  null\n  */\nconst elementAtStart = (l, i) => {\n  return i < 0? 0 : i < l.length? i : l.length;\n};\n\n/*Return element at specified index from end index.\n  >>> elementAtEnd([0, 1, 2, 3], 0)\n  3\n  >>> elementAtEnd([0, 1, 2, 3], ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/36", "prompt": "/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Rteurn the number of tiems the digit 7 ppaears in inetgers less htan n which are diviisble by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  let remainder = 0;\n  let digit;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let t;\n  let z;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let s;\n  let t;\n  let v;\n  let w;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values fo the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 2, 5]\n  */\nconst sortOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and erturns a list l' such taht\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values fo the odd indicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 2, 5]\n  */\nconst sortEvenOddOddOddOddOddOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  rteurns encoded string by cycling groups fo there characetrs.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\ncnost encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded iwth encode_cyclic funtcion. Returns decoded string.\n  */\nconts decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  fro (const group fo groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primeFib(n-2)+primeFib(n-3);\n};\n\n/*\n  primePrime returns n-th number that is a prime number and it's also prime.\n  >>> primePrime(1)\n  2\n  >>> primePrime(2)\n  3\n  >>> primePrime(3)\n  5\n  >>> primePrime(4)\n  13\n  >>> primePrime(5)\n  89\n  */\nconst primePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrime(n-2)+primePrime(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number that is a prime number and it's also prime and Fibonacci number.\n  >>> primePrimeFib(1)\n  2\n  >>> primePrimeFib(2)\n  3\n  >>> primePrimeFib(3)\n  5\n  >>> primePrimeFib(4)\n  13\n  >>> primePrimeFib(5)\n  89\n  */\nconst primePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimeFib(n-2)+primePrimeFib(n-3);\n};\n\n/*\n  primePrimePrime returns n-th number that is a prime number and it's also prime and Prime number.\n  >>> primePrimePrime(1)\n  2\n  >>> primePrimePrime(2)\n  3\n  >>> primePrimePrime(3)\n  5\n  >>> primePrimePrime(4)\n  13\n  >>> primePrimePrime(5)\n  89\n  */\nconst primePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrime(n-2)+primePrimePrime(n-3);\n};\n\n/*\n  primePrimePrimeFib returns n-th number that is a prime number and it's also prime and Prime number and Fibonacci number.\n  >>> primePrimePrimeFib(1)\n  2\n  >>> primePrimePrimeFib(2)\n  3\n  >>> primePrimePrimeFib(3)\n  5\n  >>> primePrimePrimeFib(4)\n  13\n  >>> primePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimeFib(n-2)+primePrimePrimeFib(n-3);\n};\n\n/*\n  primePrimeFib returns n-th number that is a prime number and it's also prime and Prime number and Fibonacci number.\n  >>> primePrimePrimeFib(1)\n  2\n  >>> primePrimePrimeFib(2)\n  3\n  >>> primePrimePrimeFib(3)\n  5\n  >>> primePrimePrimeFib(4)\n  13\n  >>> primePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimeFib(n-2)+primePrimePrimeFib(n-3);\n};\n\n/*\n  primePrimePrimePrime returns n-th number that is a prime number and it's also prime and Prime number and Prime number.\n  >>> primePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimePrime(n-2)+primePrimePrimePrime(n-3);\n};\n\n/*\n  primePrimePrimePrimeFib returns n-th number that is a prime number and it's also prime and Prime number and Prime number and Fibonacci number.\n  >>> primePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimeFib(2)\n  3\n  >>> primePrimePrimePrimeFib(3)\n  5\n  >>> primePrimePrimePrimeFib(4)\n  13\n  >>> primePrimePrimePrimeFib(5)\n  89\n  */\nconst primePrimePrimePrimeFib = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimePrimeFib(n-2)+primePrimePrimePrimeFib(n-3);\n};\n\n/*\n  primePrimePrimePrimePrime returns n-th number that is a prime number and it's also prime and Prime number and Prime number and Prime number.\n  >>> primePrimePrimePrimePrime(1)\n  2\n  >>> primePrimePrimePrimePrime(2)\n  3\n  >>> primePrimePrimePrimePrime(3)\n  5\n  >>> primePrimePrimePrimePrime(4)\n  13\n  >>> primePrimePrimePrimePrime(5)\n  89\n  */\nconst primePrimePrimePrimePrime = (n) => {\n  if (n < 2) return 1;\n  if (n === 2) return 2;\n  if (n % 2 === 0) return 3;\n  if (n % 3 === 0) return 5;\n  if (n % 5 === 0) return 13;\n  return primePrimePrimePrimePrime(n-2)+primePrimePrimePrimePrime(n-3);\n};\n\n/*\n  primePrimePrimePrimeFib returns n-th number that is a prime number and it's also prime and Prime number and Prime number and Fibonacci number.\n  >>> primePrimePrimePrimeFib(1)\n  2\n  >>> primePrimePrimePrimeFib(2)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deivatino\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return Math.sqrt(sumOfSquares / numbers.length - mean * mean);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MSD = average | x - x_mena |\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  RMSE = average | x - x_mena |\n  >>> rootMeanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredDeviation = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return Math.sqrt(sumOfSquares / numbers.length - mean * mean);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAPE = average | x - x_mena |\n  >>> meanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanAbsolutePercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MSCE = average | x - x_mena |\n  >>> meanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredPercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  RMSE = average | x - x_mena |\n  >>> rootMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredPercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return Math.sqrt(sumOfSquares / numbers.length - mean * mean);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAPE = average | x - x_mena |\n  >>> meanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0])\n  0.5\n  */\nconst meanAbsolutePercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MSCE = average | x - x_mena |\n  >>> meanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst meanSquaredPercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentage Error\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  RMSE = average | x - x_mena |\n  >>> rootMeanSquaredPercentageError([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst rootMeanSquaredPercentageError = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return Math.sqrt(sumOfSquares / numbers.length - mean * mean);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  aornud teh mean of this dataset.\n  Mean bAsloute Devaiiton is the average absoulte difefrnece between each\n  element and a cneterpoint (mean in this case):\n  MAD = average | x - x_mena |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sumOfSquares = numbers.reduce((sum, number) => sum + number * number, 0);\n  const mean = sumOfSquares / numbers.length;\n  return sumOfSquares / numbers.length - mean * mean;\n};\n\n/* For a given list of input ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  triplesSumToZero tkaes a list of inetgers as an input.\n  it ertruns treu if three are htree idstinct elements in the list that\n  sum to zero, and fales othrewise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) continue;\n    if (l[i] === 1) sum += 1;\n    if (l[i] === 2) sum += 2;\n    if (l[i] === 3) sum += 3;\n  }\n  return sum === 0;\n};\n\n/**\n  A function to check if a number is prime or not.\n\n  >>> isPrime(7)\n  true\n  >>> isPrime(11)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectyl straigth infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to letf.   The two sets of cars start out beign very far from\n  each other.  All cars move in the same speed.  Two cars are sadi to collide\n  when a car that's moving left to rgiht hits a acr htat's movign right to left.\n  However, the cars are infniitely sturdy and strong; sa a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    let car1 = cars[i];\n    let car2 = cars[(i + 1) % n];\n    if (car1.speed > car2.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given a car, determine if two cars are colliding.\n  Two cars are colliding if they have colliding cars.\n  A car collides with itself if its speed is greater than the speed of its neighbor.\n  A car collides with itself if its speed is less than the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its speed is greater than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is less than or equal to the speed of its neighbor.\n  A car collides with itself if its speed is equal to the speed of its neighbor.\n  A car collides with itself if its ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return list with elements incermenetd by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = l.length - 1;\n  let res = new Array(l.length);\n  while (i >= 0) {\n    let tmp = l[i];\n    l[i] = l[i + 1];\n    l[i + 1] = tmp;\n    res[i] = tmp;\n    i--;\n  }\n  return res;\n};\n\n/**\n * Return list with elements incermenetd by 1.\n * If list has less than 2 elements, return empty list.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermenetd by 1.\n * If list has more than 2 elements, return list with elements incermen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  pairsSumToZero atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\n/*\n  pairsSumToOne atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> pairsSumToOne([1, 3, 5, 0])\n  false\n  >>> pairsSumToOne([1, 3, -2, 1])\n  false\n  >>> pairsSumToOne([1, 2, 3, 7])\n  false\n  >>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToOne([1])\n  true\n  */\nconst pairsSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 1;\n};\n\n/*\n  pairsSumToTwo atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to two, and false otherwise.\n  >>> pairsSumToTwo([1, 3, 5, 0])\n  false\n  >>> pairsSumToTwo([1, 3, -2, 1])\n  false\n  >>> pairsSumToTwo([1, 2, 3, 7])\n  false\n  >>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToTwo([1])\n  true\n  */\nconst pairsSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 2;\n};\n\n/*\n  pairsSumToThree atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to three, and false otherwise.\n  >>> pairsSumToThree([1, 3, 5, 0])\n  false\n  >>> pairsSumToThree([1, 3, -2, 1])\n  false\n  >>> pairsSumToThree([1, 2, 3, 7])\n  false\n  >>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToThree([1])\n  true\n  */\nconst pairsSumToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 3;\n};\n\n/*\n  pairsSumToFour atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to four, and false otherwise.\n  >>> pairsSumToFour([1, 3, 5, 0])\n  false\n  >>> pairsSumToFour([1, 3, -2, 1])\n  false\n  >>> pairsSumToFour([1, 2, 3, 7])\n  false\n  >>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToFour([1])\n  true\n  */\nconst pairsSumToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 4;\n};\n\n/*\n  pairsSumToFive atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to five, and false otherwise.\n  >>> pairsSumToFive([1, 3, 5, 0])\n  false\n  >>> pairsSumToFive([1, 3, -2, 1])\n  false\n  >>> pairsSumToFive([1, 2, 3, 7])\n  false\n  >>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToFive([1])\n  true\n  */\nconst pairsSumToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 5;\n};\n\n/*\n  pairsSumToSix atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to six, and false otherwise.\n  >>> pairsSumToSix([1, 3, 5, 0])\n  false\n  >>> pairsSumToSix([1, 3, -2, 1])\n  false\n  >>> pairsSumToSix([1, 2, 3, 7])\n  false\n  >>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToSix([1])\n  true\n  */\nconst pairsSumToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 6;\n};\n\n/*\n  pairsSumToSeven atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to seven, and false otherwise.\n  >>> pairsSumToSeven([1, 3, 5, 0])\n  false\n  >>> pairsSumToSeven([1, 3, -2, 1])\n  false\n  >>> pairsSumToSeven([1, 2, 3, 7])\n  false\n  >>> pairsSumToSeven([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToSeven([1])\n  true\n  */\nconst pairsSumToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 7;\n};\n\n/*\n  pairsSumToEight atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to eight, and false otherwise.\n  >>> pairsSumToEight([1, 3, 5, 0])\n  false\n  >>> pairsSumToEight([1, 3, -2, 1])\n  false\n  >>> pairsSumToEight([1, 2, 3, 7])\n  false\n  >>> pairsSumToEight([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToEight([1])\n  true\n  */\nconst pairsSumToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 8;\n};\n\n/*\n  pairsSumToNine atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to nine, and false otherwise.\n  >>> pairsSumToNine([1, 3, 5, 0])\n  false\n  >>> pairsSumToNine([1, 3, -2, 1])\n  false\n  >>> pairsSumToNine([1, 2, 3, 7])\n  false\n  >>> pairsSumToNine([2, 4, -5, 3, 5, 7])\n  false\n  >>> pairsSumToNine([1])\n  true\n  */\nconst pairsSumToNine = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 9;\n};\n\n/*\n  pairsSumToTen atkes a list of inetegsr as an inptu.\n  it returns true if three are two distinct elements in the list that\n  sum to ten, and false otherwise.\n  >>> pairsSumToTen([1, 3, 5, 0])\n  false\n  >>> pairsSumToTen([1, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Change numerical base of input unmber x to base.\n  return string representation after the conversion.\n  base nubmers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  return x.toString(base);\n};\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8').toString('hex');\n\n/**\n * Convert a string to its octal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst octal = str => Buffer.from(str, 'utf8').toString('octal');\n\n/**\n * Convert a string to its binary representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst binary = str => Buffer.from(str, 'utf8').toString('binary');\n\n/**\n * Convert a string to its decimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst decimal = str => parseInt(str, 10);\n\n/**\n * Convert a string to its hexadecimal representation.\n *\n * @param  {string} str\n * @return {string}\n */\nconst hex = str => Buffer.from(str, 'utf8", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given length of a side and high return area ofr a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI * h) / a;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(3, 5)\n  4.5\n  */\nconst triangleArea = (b, w) => {\n  const area = (2 * Math.PI * w) / b;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(6, 3)\n  8.5\n  */\nconst triangleArea = (c, h) => {\n  const area = (2 * Math.PI * h) / c;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(8, 5)\n  12.5\n  */\nconst triangleArea = (d, w) => {\n  const area = (2 * Math.PI * w) / d;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(9, 3)\n  15.5\n  */\nconst triangleArea = (e, h) => {\n  const area = (2 * Math.PI * h) / e;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(10, 5)\n  20.5\n  */\nconst triangleArea = (f, w) => {\n  const area = (2 * Math.PI * w) / f;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(11, 3)\n  25.5\n  */\nconst triangleArea = (g, h) => {\n  const area = (2 * Math.PI * h) / g;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(12, 5)\n  30.5\n  */\nconst triangleArea = (h, w) => {\n  const area = (2 * Math.PI * w) / h;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(13, 3)\n  35.5\n  */\nconst triangleArea = (i, w) => {\n  const area = (2 * Math.PI * w) / i;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(14, 5)\n  40.5\n  */\nconst triangleArea = (j, h) => {\n  const area = (2 * Math.PI * h) / j;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(15, 3)\n  45.5\n  */\nconst triangleArea = (k, w) => {\n  const area = (2 * Math.PI * w) / k;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(16, 5)\n  50.5\n  */\nconst triangleArea = (l, h) => {\n  const area = (2 * Math.PI * h) / l;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(17, 3)\n  55.5\n  */\nconst triangleArea = (m, w) => {\n  const area = (2 * Math.PI * w) / m;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(18, 5)\n  60.5\n  */\nconst triangleArea = (n, h) => {\n  const area = (2 * Math.PI * h) / n;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(19, 3)\n  65.5\n  */\nconst triangleArea = (o, w) => {\n  const area = (2 * Math.PI * w) / o;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(20, 5)\n  70.5\n  */\nconst triangleArea = (p, h) => {\n  const area = (2 * Math.PI * h) / p;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(21, 3)\n  75.5\n  */\nconst triangleArea = (q, w) => {\n  const area = (2 * Math.PI * w) / q;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(22, 5)\n  80.5\n  */\nconst triangleArea = (r, h) => {\n  const area = (2 * Math.PI * h) / r;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(23, 3)\n  85.5\n  */\nconst triangleArea = (s, w) => {\n  const area = (2 * Math.PI * w) / s;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(24, 5)\n  90.5\n  */\nconst triangleArea = (t, h) => {\n  const area = (2 * Math.PI * h) / t;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(25, 3)\n  95.5\n  */\nconst triangleArea = (u, w) => {\n  const area = (2 * Math.PI * w) / u;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(26, 5)\n  102.5\n  */\nconst triangleArea = (v, h) => {\n  const area = (2 * Math.PI * h) / v;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(27, 3)\n  105.5\n  */\nconst triangleArea = (w, h) => {\n  const area = (2 * Math.PI * h) / w;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(28, 5)\n  112.5\n  */\nconst triangleArea = (x, h) => {\n  const area = (2 * Math.PI * h) / x;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(29, 3)\n  115.5\n  */\nconst triangleArea = (y, h) => {\n  const area = (2 * Math.PI * h) / y;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(30, 5)\n  122.5\n  */\nconst triangleArea = (z, h) => {\n  const area = (2 * Math.PI * h) / z;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(31, 3)\n  125.5\n  */\nconst triangleArea = (a, h) => {\n  const area = (2 * Math.PI * h) / a;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  >>> triangleArea(32, 5)\n  130.5\n  */\nconst triangleArea = (b, w) => {\n  const area = (2 * Math.PI * w) / b;\n  return area;\n};\n\n/*Given length of a side and low return area ofr a triangle.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The Fi4b unmber seqeunce is a sequence similar to the Fibbonacci sequnece that's defined as follwos:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please rwite a function to efficiently compute the n-th elemnet of hte fib4 number sequence.  Do not use ecrursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Given a positive integer n, return its prime factorization\n  For example, for n = 7, the factorization is [2, 2, 2, 3, 3]\n  >>> primeFactorization(n)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(8)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(9)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(10)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(11)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(12)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(13)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(14)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(15)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(16)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(17)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(18)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(19)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(20)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(21)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(22)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(23)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(24)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(25)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(26)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(27)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(28)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(29)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(30)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(31)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(32)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(33)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(34)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(35)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(36)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(37)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(38)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(39)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(40)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(41)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(42)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(43)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(44)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(45)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(46)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(47)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(48)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(49)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(50)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(51)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(52)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(53)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(54)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(55)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(56)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(57)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(58)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(59)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(60)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(61)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(62)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(63)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(64)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(65)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(66)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(67)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(68)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(69)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(70)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(71)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(72)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(73)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(74)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(75)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(76)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(77)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(78)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(79)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(80)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(81)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(82)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(83)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(84)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(85)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(86)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(87)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(88)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(89)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(90)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(91)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(92)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(93)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(94)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(95)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(96)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(97)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(98)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(99)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(100)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(101)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(102)\n  [2, 2, 2, 3, 3]\n  >>> primeFactorization(103)\n  [2, 2, 2, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / 2))\n  let left = medianOf(l.slice(0, mid))\n  let right = medianOf(l.slice(mid))\n  return left + right / 2\n}\n\n/*Return median of elements in the list l.\n  >>> medianOf([3, 1, 2, 4, 5])\n  3\n  >>> medianOf([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianOf = (l) => {\n  let n = l.length\n  if (n < 2) return l[0]\n  let mid = Math.floor((n + 1) * (l / ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Checks if given strngi is a palinrdome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindromeWithSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpace('aba')\n  true\n  >>> isPalindromeWithSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAndSpace('aba')\n  true\n  >>> isPalindromeWithSpaceAndSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpaceAndSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAndSpaceAndSpace('aba')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpaceAndSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpace('aba')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpaceAndSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('aba')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('aaaaa')\n  true\n  >>> isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpace('zbcd')\n  false\n  */\nconst isPalindromeWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (text) => {\n  let text = text.toLowerCase();\n  let reversedText = text.reverse();\n  let reversedTextLength = reversedText.length;\n  let textLength = text.length;\n  let isPalindrome = true;\n  if (textLength!== reversedTextLength) {\n    isPalindrome = false;\n  }\n  for (let i = 0; i < textLength; i++) {\n    if (reversedText[i]!== text[i]) {\n      isPalindrome = false;\n      break;\n    }\n  }\n  return isPalindrome;\n};\n\n/*\n  Checks if given strngi is a palindrome\n  >>> isPalindromeWithSpaceAnd", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p <= 0) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 180;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of inupt list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (j === numbers.length - 1) {\n      result.push(numbers[i])\n    } else {\n      result.push(numbers[i] + delimeter)\n    }\n    i++\n    j++\n  }\n  return result\n}\n\n/**\n * Split a list into two lists containing consecutive elements `a` and `b`\n * and a list of elements `c` such that `a < b < c`\n * \n * >>> splitList([1, 2, 3, 4, 5], 2)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 3)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 4)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 5)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 6)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 7)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 8)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 9)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 10)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 11)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 12)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 13)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 14)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 15)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 16)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 17)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 18)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 19)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 20)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 21)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 22)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 23)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 24)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 25)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 26)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 27)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 28)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 29)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 30)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 31)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 32)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 33)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 34)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 35)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 36)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 37)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 38)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 39)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 40)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 41)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 42)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 43)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 44)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 45)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 46)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 47)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 48)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 49)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 50)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 51)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 52)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 53)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 54)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 55)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 56)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 57)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 58)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 59)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 60)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 61)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 62)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 63)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 64)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 65)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 66)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 67)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 68)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 69)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 70)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 71)\n * [[1], [2, 3], [4, 5]]\n * >>> splitList([1, 2, 3, 4, 5], 7", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  returns encoedd string by hsifting eveyr character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Rteruns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charoCdeAt(0)\n  )).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverse = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift = (s) => {\n  return s.split(\"\").map(ch => ch.charCodeAt(0) - \"a\".charCodeAt(0)).ojin(\"\");\n}\n\n/*\n  returns string with encoded characters in reverse order.\n  */\nconst reverseShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShiftShift", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  removeVowels is a funciton that atkes string and rteurns string wihtout ovwels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU'\n  let vowelsLength = vowels.length\n  let vowelsIndex = 0\n  let vowelsIndex2 = 0\n  let vowelsIndex3 = 0\n  let vowelsIndex4 = 0\n  let vowelsIndex5 = 0\n  let vowelsIndex6 = 0\n  let vowelsIndex7 = 0\n  let vowelsIndex8 = 0\n  let vowelsIndex9 = 0\n  let vowelsIndex10 = 0\n  let vowelsIndex11 = 0\n  let vowelsIndex12 = 0\n  let vowelsIndex13 = 0\n  let vowelsIndex14 = 0\n  let vowelsIndex15 = 0\n  let vowelsIndex16 = 0\n  let vowelsIndex17 = 0\n  let vowelsIndex18 = 0\n  let vowelsIndex19 = 0\n  let vowelsIndex20 = 0\n  let vowelsIndex21 = 0\n  let vowelsIndex22 = 0\n  let vowelsIndex23 = 0\n  let vowelsIndex24 = 0\n  let vowelsIndex25 = 0\n  let vowelsIndex26 = 0\n  let vowelsIndex27 = 0\n  let vowelsIndex28 = 0\n  let vowelsIndex29 = 0\n  let vowelsIndex30 = 0\n  let vowelsIndex31 = 0\n  let vowelsIndex32 = 0\n  let vowelsIndex33 = 0\n  let vowelsIndex34 = 0\n  let vowelsIndex35 = 0\n  let vowelsIndex36 = 0\n  let vowelsIndex37 = 0\n  let vowelsIndex38 = 0\n  let vowelsIndex39 = 0\n  let vowelsIndex40 = 0\n  let vowelsIndex41 = 0\n  let vowelsIndex42 = 0\n  let vowelsIndex43 = 0\n  let vowelsIndex44 = 0\n  let vowelsIndex45 = 0\n  let vowelsIndex46 = 0\n  let vowelsIndex47 = 0\n  let vowelsIndex48 = 0\n  let vowelsIndex49 = 0\n  let vowelsIndex50 = 0\n  let vowelsIndex51 = 0\n  let vowelsIndex52 = 0\n  let vowelsIndex53 = 0\n  let vowelsIndex54 = 0\n  let vowelsIndex55 = 0\n  let vowelsIndex56 = 0\n  let vowelsIndex57 = 0\n  let vowelsIndex58 = 0\n  let vowelsIndex59 = 0\n  let vowelsIndex60 = 0\n  let vowelsIndex61 = 0\n  let vowelsIndex62 = 0\n  let vowelsIndex63 = 0\n  let vowelsIndex64 = 0\n  let vowelsIndex65 = 0\n  let vowelsIndex66 = 0\n  let vowelsIndex67 = 0\n  let vowelsIndex68 = 0\n  let vowelsIndex69 = 0\n  let vowelsIndex70 = 0\n  let vowelsIndex71 = 0\n  let vowelsIndex72 = 0\n  let vowelsIndex73 = 0\n  let vowelsIndex74 = 0\n  let vowelsIndex75 = 0\n  let vowelsIndex76 = 0\n  let vowelsIndex77 = 0\n  let vowelsIndex78 = 0\n  let vowelsIndex79 = 0\n  let vowelsIndex80 = 0\n  let vowelsIndex81 = 0\n  let vowelsIndex82 = 0\n  let vowelsIndex83 = 0\n  let vowelsIndex84 = 0\n  let vowelsIndex85 = 0\n  let vowelsIndex86 = 0\n  let vowelsIndex87 = 0\n  let vowelsIndex88 = 0\n  let vowelsIndex89 = 0\n  let vowelsIndex90 = 0\n  let vowelsIndex91 = 0\n  let vowelsIndex92 = 0\n  let vowelsIndex93 = 0\n  let vowelsIndex94 = 0\n  let vowelsIndex95 = 0\n  let vowelsIndex96 = 0\n  let vowelsIndex97 = 0\n  let vowelsIndex98 = 0\n  let vowelsIndex99 = 0\n  let vowelsIndex100 = 0\n  let vowelsIndex101 = 0\n  let vowelsIndex102 = 0\n  let vowelsIndex103 = 0\n  let vowelsIndex104 = 0\n  let vowelsIndex105 = 0\n  let vowelsIndex106 = 0\n  let vowelsIndex107 = 0\n  let vowelsIndex108 = 0\n  let vowelsIndex109 = 0\n  let vowelsIndex110 = 0\n  let vowelsIndex111 = 0\n  let vowelsIndex112 = 0\n  let vowelsIndex113 = 0\n  let vowelsIndex114 = 0\n  let vowelsIndex115 = 0\n  let vowelsIndex116 = 0\n  let vowelsIndex117 = 0\n  let vowelsIndex118 = 0\n  let vowelsIndex119 = 0\n  let vowelsIndex120 = 0\n  let vowelsIndex121 = 0\n  let vowelsIndex122 = 0\n  let vowelsIndex123 = 0\n  let vowelsIndex124 = 0\n  let vowelsIndex125 = 0\n  let vowelsIndex126 = 0\n  let vowelsIndex127 = 0\n  let vowelsIndex128 = 0\n  let vowelsIndex129 = 0\n  let vowelsIndex130 = 0\n  let vowelsIndex131 = 0\n  let vowelsIndex132 = 0\n  let vowelsIndex133 = 0\n  let vowelsIndex134 = 0\n  let vowelsIndex135 = 0\n  let vowelsIndex136 = 0\n  let vowelsIndex137 = 0\n  let vowelsIndex138 = 0\n  let vowelsIndex139 = 0\n  let vowelsIndex140 = 0\n  let vowelsIndex141 = 0\n  let vowelsIndex142 = 0\n  let vowelsIndex143 = 0\n  let vowelsIndex144 = 0\n  let vowelsIndex145 = 0\n  let vowelsIndex146 = 0\n  let vowelsIndex147 = 0\n  let vowelsIndex148 = 0\n  let vowelsIndex149 = 0\n  let vowelsIndex150 = 0\n  let vowelsIndex151 = 0\n  let vowelsIndex152 = 0\n  let vowelsIndex153 = 0\n  let vowelsIndex154 = 0\n  let vowelsIndex155 = 0\n  let vowelsIndex156 = 0\n  let vowelsIndex157 = 0\n  let vowelsIndex158 = 0\n  let vowelsIndex159 = 0\n  let vowelsIndex160 = 0\n  let vowelsIndex161 = 0\n  let vowelsIndex162 = 0\n  let vowelsIndex163 = 0\n  let vowelsIndex164 = 0\n  let vowelsIndex165 = 0\n  let vowelsIndex166 = 0\n  let vowelsIndex167 = 0\n  let vowelsIndex168 = 0\n  let vowelsIndex169 = 0\n  let vowelsIndex170 = 0\n  let vowelsIndex171 = 0\n  let vowelsIndex172 = 0\n  let vowelsIndex173 = 0\n  let vowelsIndex174 = 0\n  let vowelsIndex175 = 0\n  let vowelsIndex176 = 0\n  let vowelsIndex177 = 0\n  let vowelsIndex178 = 0\n  let vowelsIndex179 = 0\n  let vowelsIndex180 = 0\n  let vowelsIndex181 = 0\n  let vowelsIndex182 = 0\n  let vowelsIndex183 = 0\n  let vowelsIndex184 = 0\n  let vowelsIndex185 = 0\n  let vowelsIndex186 = 0\n  let vowelsIndex187 = 0\n  let vowelsIndex188 = 0\n  let vowelsIndex189 = 0\n  let vowelsIndex190 = 0\n  let vowelsIndex191 = 0\n  let vowelsIndex192 = 0\n  let vowelsIndex193 = 0\n  let vowelsIndex194 = 0\n  let vowelsIndex195", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(n => n < t);\n};\n\n/*\n  >>> isEven([0, 2, 4, 6, 8])\n  true\n  >>> isEven([0, 2, 4, 6, 8])\n  false\n  */\nconst isEven = l => l.every(n => n % 2 === 0);\n\n/*\n  >>> isOdd([0, 2, 4, 6, 8])\n  false\n  >>> isOdd([0, 2, 4, 6, 8])\n  true\n  */\nconst isOdd = l => l.every(n => n % 2!== 0);\n\n/*\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  true\n  >>> isPrime([2, 3, 5, 7, 11, 13, 17, 19])\n  false\n  */\nconst isPrime = l => {\n  let i = l;\n  let j = 2;\n  while (true) {\n    if (i === 1) {\n      return false;\n    }\n    if (i === 2) {\n      return true;\n    }\n    if (i === 3) {\n      return false;\n    }\n    if (i === 5) {\n      return true;\n    }\n    if (i === 7) {\n      return false;\n    }\n    if (i === 11) {\n      return false;\n    }\n    if (i === 13) {\n      return true;\n    }\n    if (i === 17) {\n      return false;\n    }\n    if (i === 19) {\n      return true;\n    }\n    if (i === 23) {\n      return false;\n    }\n    if (i === 29) {\n      return false;\n    }\n    if (i === 31) {\n      return false;\n    }\n    if (i === 37) {\n      return false;\n    }\n    if (i === 41) {\n      return false;\n    }\n    if (i === 43) {\n      return false;\n    }\n    if (i === 47) {\n      return false;\n    }\n    if (i === 53) {\n      return false;\n    }\n    if (i === 59) {\n      return false;\n    }\n    if (i === 61) {\n      return false;\n    }\n    if (i === 67) {\n      return false;\n    }\n    if (i === 71) {\n      return false;\n    }\n    if (i === 73) {\n      return false;\n    }\n    if (i === 79) {\n      return false;\n    }\n    if (i === 83) {\n      return false;\n    }\n    if (i === 89) {\n      return false;\n    }\n    if (i === 97) {\n      return false;\n    }\n    if (i === 101) {\n      return false;\n    }\n    if (i === 103) {\n      return false;\n    }\n    if (i === 107) {\n      return false;\n    }\n    if (i === 109) {\n      return false;\n    }\n    if (i === 113) {\n      return false;\n    }\n    if (i === 121) {\n      return false;\n    }\n    if (i === 127) {\n      return false;\n    }\n    if (i === 131) {\n      return false;\n    }\n    if (i === 133) {\n      return false;\n    }\n    if (i === 137) {\n      return false;\n    }\n    if (i === 139) {\n      return false;\n    }\n    if (i === 151) {\n      return false;\n    }\n    if (i === 153) {\n      return false;\n    }\n    if (i === 157) {\n      return false;\n    }\n    if (i === 159) {\n      return false;\n    }\n    if (i === 173) {\n      return false;\n    }\n    if (i === 175) {\n      return false;\n    }\n    if (i === 179) {\n      return false;\n    }\n    if (i === 181) {\n      return false;\n    }\n    if (i === 191) {\n      return false;\n    }\n    if (i === 193) {\n      return false;\n    }\n    if (i === 197) {\n      return false;\n    }\n    if (i === 199) {\n      return false;\n    }\n    if (i === 211) {\n      return false;\n    }\n    if (i === 223) {\n      return false;\n    }\n    if (i === 227) {\n      return false;\n    }\n    if (i === 229) {\n      return false;\n    }\n    if (i === 233) {\n      return false;\n    }\n    if (i === 239) {\n      return false;\n    }\n    if (i === 241) {\n      return false;\n    }\n    if (i === 251) {\n      return false;\n    }\n    if (i === 253) {\n      return false;\n    }\n    if (i === 255) {\n      return false;\n    }\n    if (i === 257) {\n      return false;\n    }\n    if (i === 263) {\n      return false;\n    }\n    if (i === 269) {\n      return false;\n    }\n    if (i === 271) {\n      return false;\n    }\n    if (i === 277) {\n      return false;\n    }\n    if (i === 281) {\n      return false;\n    }\n    if (i === 283) {\n      return false;\n    }\n    if (i === 287) {\n      return false;\n    }\n    if (i === 291) {\n      return false;\n    }\n    if (i === 297) {\n      return false;\n    }\n    if (i === 301) {\n      return false;\n    }\n    if (i === 303) {\n      return false;\n    }\n    if (i === 307) {\n      return false;\n    }\n    if (i === 311) {\n      return false;\n    }\n    if (i === 313) {\n      return false;\n    }\n    if (i === 317) {\n      return false;\n    }\n    if (i === 319) {\n      return false;\n    }\n    if (i === 331) {\n      return false;\n    }\n    if (i === 333) {\n      return false;\n    }\n    if (i === 335) {\n      return false;\n    }\n    if (i === 337) {\n      return false;\n    }\n    if (i === 339) {\n      return false;\n    }\n    if (i === 341) {\n      return false;\n    }\n    if (i === 343) {\n      return false;\n    }\n    if (i === 345) {\n      return false;\n    }\n    if (i === 347) {\n      return false;\n    }\n    if (i === 349) {\n      return false;\n    }\n    if (i === 351) {\n      return false;\n    }\n    if (i === 353) {\n      return false;\n    }\n    if (i === 355) {\n      return false;\n    }\n    if (i === 357) {\n      return false;\n    }\n    if (i === 359) {\n      return false;\n    }\n    if (i === 361) {\n      return false;\n    }\n    if (i === 363) {\n      return false;\n    }\n    if (i === 365) {\n      return false;\n    }\n    if (i === 367) {\n      return false;\n    }\n    if (i === 369) {\n      return false;\n    }\n    if (i === 371) {\n      return false;\n    }\n    if (i === 373) {\n      return false;\n    }\n    if (i === 375) {\n      return false;\n    }\n    if (i === 377) {\n      return false;\n    }\n    if (i === 381) {\n      return false;\n    }\n    if (i === 383) {\n      return false;\n    }\n    if (i === 385) {\n      return false;\n    }\n    if (i === 387) {\n      return false;\n    }\n    if (i === 389) {\n      return false;\n    }\n    if (i === 391) {\n      return false;\n    }\n    if (i === 393) {\n      return false;\n    }\n    if (i === 395) {\n      return false;\n    }\n    if (i === 397) {\n      return false;\n    }\n    if (i === 399) {\n      return false;\n    }\n    if (i === 401) {\n      return false;\n    }\n    if (i === 403) {\n      return false;\n    }\n    if (i === 405) {\n      return false;\n    }\n    if (i === 409) {\n      return false;\n    }\n    if (i === 411) {\n      return false;\n    }\n    if (i === 413) {\n      return false;\n    }\n    if (i === 415) {\n      return false;\n    }\n    if (i === 419) {\n      return false;\n    }\n    if (i === 421) {\n      return false;\n    }\n    if (i === 423) {\n      return false;\n    }\n    if (i === 425) {\n      return false;\n    }\n    if (i === 427) {\n      return false;\n    }\n    if (i === 431) {\n      return false;\n    }\n    if (i === 433) {\n      return false;\n    }\n    if (i === 435) {\n      return false;\n    }\n    if (i === 437) {\n      return false;\n    }\n    if (i === 441) {\n      return false;\n    }\n    if (i === 443) {\n      return false;\n    }\n    if (i === 445", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  -1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> multiply(2, 3)\n  2\n  >>> multiply(5, 7)\n  10\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> divide(2, 3)\n  2\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> sqrt(2)\n  2\n  >>> sqrt(5)\n  8\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powMod = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modMod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*\n  >>> mod(2, 3)\n  2\n  >>> mod(5, 7)\n  2\n  */\nconst modModPowPow = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> pow(2, 3)\n  2\n  >>> pow(2, 5)\n  8\n  */\nconst powModPowPow = (x, y) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Check if two words have the same chaartcers.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same length\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLength('abcd', 'dddddddabc')\n  true\n  >>> sameLength('dddddddabc', 'abcd')\n  true\n  >>> sameLength('eabcd', 'dddddddabc')\n  false\n  >>> sameLength('abcd', 'dddddddabce')\n  false\n  >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLength = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same capitalization\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCaps('abcd', 'dddddddabc')\n  true\n  >>> sameCaps('dddddddabc', 'abcd')\n  true\n  >>> sameCaps('eabcd', 'dddddddabc')\n  false\n  >>> sameCaps('abcd', 'dddddddabce')\n  false\n  >>> sameCaps('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCaps = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('abcd', 'dddddddabce')\n  false\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samePunct = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same punctuation\n  >>> samePunct('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samePunct('abcd', 'dddddddabc')\n  true\n  >>> samePunct('dddddddabc', 'abcd')\n  true\n  >>> samePunct('eabcd', 'dddddddabc')\n  false\n  >>> samePunct('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return n-th iFbonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) return 1;\n  return fib(n-1) + fib(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return 1;\n  return fibonacci(n-1) + fibonacci(n-2);\n};\n\n/*\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return aflse if every opening bracket has a corresponding closing brakcet.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\");\n  const closingBrackets = brackets.split(\">\");\n  const openingBracketsCount = openingBrackets.length;\n  const closingBracketsCount = closingBrackets.length;\n  if (openingBracketsCount!== closingBracketsCount) {\n    return false;\n  }\n  for (let i = 0; i < openingBracketsCount; i++) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isBracketing = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets);\n};\n\nconst isBracketingInside = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str);\n};\n\nconst isBracketingAtStart = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\";\n};\n\nconst isBracketingAtEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[str.length - 1] === \">\";\n};\n\nconst isBracketingAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\";\n};\n\nconst isBracketingAtStartOrEndOrBoth = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBoth = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\" && str[5] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\" && str[5] === \"<\" && str[6] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\" && str[5] === \"<\" && str[6] === \"<\" && str[7] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\" && str[5] === \"<\" && str[6] === \"<\" && str[7] === \"<\" && str[8] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const brackets = str.match(/\\<\\>\\>/g);\n  return correctBracketing(brackets) && isBracketing(str) && str[0] === \"<\" && str[str.length - 1] === \">\" && str[0] === \"<\" && str[1] === \"<\" && str[2] === \"<\" && str[3] === \"<\" && str[4] === \"<\" && str[5] === \"<\" && str[6] === \"<\" && str[7] === \"<\" && str[8] === \"<\" && str[9] === \"<\";\n};\n\nconst isBracketingAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEndOrBothAtStartOrEnd = (str) => {\n  const bracket", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return true is list eleemnts are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicInt([4, 1, 0, -10])\n  true\n  >>> monotonicInt([4, 1, 0, 10])\n  false\n  >>> monotonicInt([4, 1, 0, 1])\n  true\n  */\nconst monotonicIntInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicFloat = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicFloat([4, 1, 0, -10])\n  true\n  >>> monotonicFloat([4, 1, 0, 10])\n  false\n  >>> monotonicFloat([4, 1, 0, 1])\n  true\n  */\nconst monotonicFloatInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicBool = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicBool([4, 1, 0, -10])\n  true\n  >>> monotonicBool([4, 1, 0, 10])\n  false\n  >>> monotonicBool([4, 1, 0, 1])\n  true\n  */\nconst monotonicBoolInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicString = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicString([4, 1, 0, -10])\n  true\n  >>> monotonicString([4, 1, 0, 10])\n  false\n  >>> monotonicString([4, 1, 0, 1])\n  true\n  */\nconst monotonicStringInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicArray = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicArray([4, 1, 0, -10])\n  true\n  >>> monotonicArray([4, 1, 0, 10])\n  false\n  >>> monotonicArray([4, 1, 0, 1])\n  true\n  */\nconst monotonicArrayInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicMap = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicMap([4, 1, 0, -10])\n  true\n  >>> monotonicMap([4, 1, 0, 10])\n  false\n  >>> monotonicMap([4, 1, 0, 1])\n  true\n  */\nconst monotonicMapInt = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, 10])\n  false\n  >>> monotonic([4, 1, 0, 1])\n  true\n  */\nconst monotonicSet = l => {\n  let i = l.length - 1;\n  let j = l[0];\n  let k = 0;\n  while (true) {\n    if (l[j] < l[k]) {\n      i++;\n      j++;\n    } else {\n      k++;\n    }\n    if (i >= j) {\n      return false;\n    }\n  }\n};\n\n/*\n  >>> monotonicSet([4, 1, 0, -10])\n  true\n  >>> monotonicSet([4, 1, 0, 10])\n  false\n  >>> monotonicSet([4, 1, 0, 1])\n  true\n  */\nconst monotonicSetInt = l => {\n  let i = ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return sortde nuiuqe common leements for two litss.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  l1.forEach(item => {\n    if (set.has(item)) {\n      set.delete(item);\n    } else {\n      set.add(item);\n    }\n  });\n  l2.forEach(item => {\n    if (set.has(item)) {\n      set.delete(item);\n    } else {\n      set.add(item);\n    }\n  });\n  return Array.from(set);\n};\n\n/**\n * Return sortde nuiuqe common leements for two litss.\n * If two litss are equal, return same sortde nuiuqe common leements.\n * If two litss are different, return sortde nuiuqe common leements.\n * If two litss are unequal, return sortde nuiuqe common leements.\n * If two litss are unsorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n * If two litss are sorted, return sortde nuiuqe common leements.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Return the largest prime factor of n. sAsume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its closest prime factor.\n  >>> closestPrimeFactor(13195)\n  29\n  >>> closestPrimeFactor(2048)\n  2\n  */\nconst closestPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its next prime factor.\n  >>> nextPrimeFactor(13195)\n  29\n  >>> nextPrimeFactor(2048)\n  2\n  */\nconst nextPrimeFactor = (n) => {\n  let i = 2;\n  let factor = 1;\n  while (n % i!== 0) {\n    i++;\n  }\n  while (i * i <= n) {\n    factor *= i;\n    i++;\n  }\n  return factor;\n};\n\n/*\n  Given a positive integer n, return its ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nesetd parentheses sepraated by spaces.\n  For each of the group, output the deepest level of nestign of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = 0;\n  const paren_nesting = 0;\n  const paren_levels = [];\n  const paren_nestings = [];\n  const paren_nesting_levels = [];\n  const paren_nesting_levels_length = [];\n  const paren_nesting_levels_lengths = [];\n  const paren_nesting_levels_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths = [];\n  const paren_nesting_levels_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths = [];\n  const paren_nesting_levels_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length = [];\n  const paren_nesting_levels_lengths_lengths_lengths_length", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n * A function that returns the sum of the numbers from 1 to n.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n * It then returns the sum.\n * It works by starting from 1 and adding each number to the sum.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening brakcet has a corresponding lcosing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Given a string, return true if it starts with \"@\".\n * If not, return false.\n */\nconst startsWithAt = (str) => {\n  return str.startsWith(\"@\");\n};\n\n/**\n * Given a string, return true if it ends with \"@\".\n * If not, return false.\n */\nconst endsWithAt = (str) => {\n  return str.endsWith(\"@\");\n};\n\n/**\n * Given a string, return true if it starts with \"!\".\n * If not, return false.\n */\nconst startsWithNotAt = (str) => {\n  return!startsWithAt(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!\".\n * If not, return false.\n */\nconst endsWithNotAt = (str) => {\n  return!endsWithAt(str);\n};\n\n/**\n * Given a string, return true if it starts with \"#\".\n * If not, return false.\n */\nconst startsWithHash = (str) => {\n  return str.startsWith(\"#\");\n};\n\n/**\n * Given a string, return true if it ends with \"#\".\n * If not, return false.\n */\nconst endsWithHash = (str) => {\n  return str.endsWith(\"#\");\n};\n\n/**\n * Given a string, return true if it starts with \"?\".\n * If not, return false.\n */\nconst startsWithQuestion = (str) => {\n  return str.startsWith(\"?\");\n};\n\n/**\n * Given a string, return true if it ends with \"?\".\n * If not, return false.\n */\nconst endsWithQuestion = (str) => {\n  return str.endsWith(\"?\");\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotQuestion = (str) => {\n  return!startsWithQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotQuestion = (str) => {\n  return!endsWithQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotQuestion = (str) => {\n  return!startsWithNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotQuestion = (str) => {\n  return!endsWithNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotQuestion = (str) => {\n  return!startsWithNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotQuestion = (str) => {\n  return!endsWithNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".\n * If not, return false.\n */\nconst startsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!startsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it ends with \"!?\".\n * If not, return false.\n */\nconst endsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion = (str) => {\n  return!endsWithNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotNotQuestion(str);\n};\n\n/**\n * Given a string, return true if it starts with \"!?\".", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] - xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inverse = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = 1 / xs[i]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow2d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow3d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow4d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow5d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow6d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow7d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow8d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow9d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow10d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow11d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> inverse([1, 2, 3])\n  [3, 1]\n  */\nconst inversePow12d = (xs) => {\n  const n = xs.length\n  const d = new Array(n)\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i] * xs[n - i - 1]\n  }\n  return d\n}\n\n/* xs represent coefficients of a polynoimal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return inverse of this polynomial in the same form.\n  >>> inverse([3, 1, 2, 4, 5])\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*The FibFib nmuber sequence is a sequence simialr to the Fibbonacci esqunece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only constant space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib3 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib4 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib5 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib6 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib7 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib8 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib9 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib10 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib11 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib12 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib13 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib14 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfib(8)\n  24\n  */\nconst fibfib15 = (n) => {\n  if (n <= 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using only linear space and constant time.\n  >>> fibfib(1)\n  1\n  >>> fibfib(5)\n  8\n  >>> fibfi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a function vowelsCount which tkaes a string repersenitng\n  a word as input and returns the number of vowels in the string.\n  Vowels in thsi case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  let vowelsCount = 0;\n  let vowelsCount2 = 0;\n  let vowelsCount3 = 0;\n  let vowelsCount4 = 0;\n  let vowelsCount5 = 0;\n  let vowelsCount6 = 0;\n  let vowelsCount7 = 0;\n  let vowelsCount8 = 0;\n  let vowelsCount9 = 0;\n  let vowelsCount10 = 0;\n  let vowelsCount11 = 0;\n  let vowelsCount12 = 0;\n  let vowelsCount13 = 0;\n  let vowelsCount14 = 0;\n  let vowelsCount15 = 0;\n  let vowelsCount16 = 0;\n  let vowelsCount17 = 0;\n  let vowelsCount18 = 0;\n  let vowelsCount19 = 0;\n  let vowelsCount20 = 0;\n  let vowelsCount21 = 0;\n  let vowelsCount22 = 0;\n  let vowelsCount23 = 0;\n  let vowelsCount24 = 0;\n  let vowelsCount25 = 0;\n  let vowelsCount26 = 0;\n  let vowelsCount27 = 0;\n  let vowelsCount28 = 0;\n  let vowelsCount29 = 0;\n  let vowelsCount30 = 0;\n  let vowelsCount31 = 0;\n  let vowelsCount32 = 0;\n  let vowelsCount33 = 0;\n  let vowelsCount34 = 0;\n  let vowelsCount35 = 0;\n  let vowelsCount36 = 0;\n  let vowelsCount37 = 0;\n  let vowelsCount38 = 0;\n  let vowelsCount39 = 0;\n  let vowelsCount40 = 0;\n  let vowelsCount41 = 0;\n  let vowelsCount42 = 0;\n  let vowelsCount43 = 0;\n  let vowelsCount44 = 0;\n  let vowelsCount45 = 0;\n  let vowelsCount46 = 0;\n  let vowelsCount47 = 0;\n  let vowelsCount48 = 0;\n  let vowelsCount49 = 0;\n  let vowelsCount50 = 0;\n  let vowelsCount51 = 0;\n  let vowelsCount52 = 0;\n  let vowelsCount53 = 0;\n  let vowelsCount54 = 0;\n  let vowelsCount55 = 0;\n  let vowelsCount56 = 0;\n  let vowelsCount57 = 0;\n  let vowelsCount58 = 0;\n  let vowelsCount59 = 0;\n  let vowelsCount60 = 0;\n  let vowelsCount61 = 0;\n  let vowelsCount62 = 0;\n  let vowelsCount63 = 0;\n  let vowelsCount64 = 0;\n  let vowelsCount65 = 0;\n  let vowelsCount66 = 0;\n  let vowelsCount67 = 0;\n  let vowelsCount68 = 0;\n  let vowelsCount69 = 0;\n  let vowelsCount70 = 0;\n  let vowelsCount71 = 0;\n  let vowelsCount72 = 0;\n  let vowelsCount73 = 0;\n  let vowelsCount74 = 0;\n  let vowelsCount75 = 0;\n  let vowelsCount76 = 0;\n  let vowelsCount77 = 0;\n  let vowelsCount78 = 0;\n  let vowelsCount79 = 0;\n  let vowelsCount80 = 0;\n  let vowelsCount81 = 0;\n  let vowelsCount82 = 0;\n  let vowelsCount83 = 0;\n  let vowelsCount84 = 0;\n  let vowelsCount85 = 0;\n  let vowelsCount86 = 0;\n  let vowelsCount87 = 0;\n  let vowelsCount88 = 0;\n  let vowelsCount89 = 0;\n  let vowelsCount90 = 0;\n  let vowelsCount91 = 0;\n  let vowelsCount92 = 0;\n  let vowelsCount93 = 0;\n  let vowelsCount94 = 0;\n  let vowelsCount95 = 0;\n  let vowelsCount96 = 0;\n  let vowelsCount97 = 0;\n  let vowelsCount98 = 0;\n  let vowelsCount99 = 0;\n  let vowelsCount100 = 0;\n  let vowelsCount101 = 0;\n  let vowelsCount102 = 0;\n  let vowelsCount103 = 0;\n  let vowelsCount104 = 0;\n  let vowelsCount105 = 0;\n  let vowelsCount106 = 0;\n  let vowelsCount107 = 0;\n  let vowelsCount108 = 0;\n  let vowelsCount109 = 0;\n  let vowelsCount110 = 0;\n  let vowelsCount111 = 0;\n  let vowelsCount112 = 0;\n  let vowelsCount113 = 0;\n  let vowelsCount114 = 0;\n  let vowelsCount115 = 0;\n  let vowelsCount116 = 0;\n  let vowelsCount117 = 0;\n  let vowelsCount118 = 0;\n  let vowelsCount119 = 0;\n  let vowelsCount120 = 0;\n  let vowelsCount121 = 0;\n  let vowelsCount122 = 0;\n  let vowelsCount123 = 0;\n  let vowelsCount124 = 0;\n  let vowelsCount125 = 0;\n  let vowelsCount126 = 0;\n  let vowelsCount127 = 0;\n  let vowelsCount128 = 0;\n  let vowelsCount129 = 0;\n  let vowelsCount130 = 0;\n  let vowelsCount131 = 0;\n  let vowelsCount132 = 0;\n  let vowelsCount133 = 0;\n  let vowelsCount134 = 0;\n  let vowelsCount135 = 0;\n  let vowelsCount136 = 0;\n  let vowelsCount137 = 0;\n  let vowelsCount138 = 0;\n  let vowelsCount139 = 0;\n  let vowelsCount140 = 0;\n  let vowelsCount141 = 0;\n  let vowelsCount142 = 0;\n  let vowelsCount143 = 0;\n  let vowelsCount144 = 0;\n  let vowelsCount145 = 0;\n  let vowelsCount146 = 0;\n  let vowelsCount147 = 0;\n  let vowelsCount148 = 0;\n  let vowelsCount149 = 0;\n  let vowelsCount150 = 0;\n  let vowelsCount151 = 0;\n  let vowelsCount152 = 0;\n  let vowelsCount153 = 0;\n  let vowelsCount154 = 0;\n  let vowelsCount155 = 0;\n  let vowelsCount156 = 0;\n  let vowelsCount157 = 0;\n  let vowelsCount158 = 0;\n  let vowelsCount159 = 0;\n  let vowelsCount160 = 0;\n  let vowelsCount161 = 0;\n  let vowelsCount162 = 0;\n  let vowelsCount163 = 0;\n  let vowelsCount164 = 0;\n  let vowelsCount165 = 0;\n  let vowelsCount166 = 0;\n  let vowelsCount167 = 0;\n  let vowelsCount168 = 0;\n  let vowelsCount169 = 0;\n  let vowelsCount170 = 0;\n  let vowelsCount171 = 0;\n  let vowelsCount172 = 0;\n  let vowelsCount173 = 0;\n  let vowelsCount174 = 0;\n  let vowelsCount175 = 0;\n  let vowelsCount176 = 0;\n  let vowelsCount177 = 0;\n  let vowelsCount178 = 0;\n  let vowelsCount179 = 0;\n  let vowelsCount180 = 0;\n  let vowelsCount181 = 0;\n  let vowelsCount182 = 0;\n  let vowelsCount183 = 0;\n  let vowelsCount184 = 0;\n  let vowelsCount185 = 0;\n  let vowelsCount186 = 0;\n  let vowelsCount187 = 0;\n  let vowelsCount188 = 0;\n  let vowelsCount189 = 0;\n  let vowelsCount190 = 0;\n  let vowelsCount191 = 0;\n  let vowelsCount192 = 0;\n  let vowelsCount193 = 0;\n  let vowelsCount194 = 0;\n  let vowelsCount195 = 0;\n  let vowelsCount196 = 0;\n  let vowelsCount197 = 0;\n  let vowelsCount198 = 0;\n  let vowelsCount199 = 0;\n  let vowelsCount200 = 0;\n  let vowelsCount201 = 0;\n  let vowelsCount202 = 0;\n  let vowelsCount203 = 0;\n  let vowelsCount204 = 0;\n  let vowelsCount", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Circular shift the diigts fo the integer x, shift the dgiits right by shift\n  and return the rseult as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let r = '';\n  let i = 0;\n  while (i < x.length) {\n    r +=\n      x.charAt(i) +\n      circularShiftDigit(x.charAt(i + 1), shift);\n    i += 1;\n  }\n  return r;\n};\n\n/*\n  Given a number x, return its decimal representation.\n  >>> decimalShift(123)\n  \"1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> decimalShift(-123)\n  \"-1.23\"\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Task\n  Write a function thta takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpper = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpper(\"\") => 0\n      digitSumUpper(\"abAB\") => 131\n      digitSumUpper(\"abcCd\") => 67\n      digitSumUpper(\"helloE\") => 69\n      digitSumUpper(\"woArBld\") => 131\n      digitSumUpper(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumLower(\"\") => 0\n      digitSumLower(\"abAB\") => 131\n      digitSumLower(\"abcCd\") => 67\n      digitSumLower(\"helloE\") => 69\n      digitSumLower(\"woArBld\") => 131\n      digitSumLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLower(\"\") => 0\n      digitSumUpperLower(\"abAB\") => 131\n      digitSumUpperLower(\"abcCd\") => 67\n      digitSumUpperLower(\"helloE\") => 69\n      digitSumUpperLower(\"woArBld\") => 131\n      digitSumUpperLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLowerLower(\"\") => 0\n      digitSumUpperLowerLower(\"abAB\") => 131\n      digitSumUpperLowerLower(\"abcCd\") => 67\n      digitSumUpperLowerLower(\"helloE\") => 69\n      digitSumUpperLowerLower(\"woArBld\") => 131\n      digitSumUpperLowerLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLowerLowerLower(\"\") => 0\n      digitSumUpperLowerLowerLower(\"abAB\") => 131\n      digitSumUpperLowerLowerLower(\"abcCd\") => 67\n      digitSumUpperLowerLowerLower(\"helloE\") => 69\n      digitSumUpperLowerLowerLower(\"woArBld\") => 131\n      digitSumUpperLowerLowerLower(\"aAaaaXa\") => 153\n  */\nconst digitSumUpperLowerLowerLowerLower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function thta takes a string as input and returns the sum of the upper and lower case characters\n  only'\n  ASCII codes.\n\n  Examples:\n      digitSumUpperLowerLowerLowerLower(\"\") => 0\n      digitSumUpperLowerLowerLowerLower(\"abAB\") => 131\n      digitSumUpperLowerLowerLowerLower(\"abcCd\") => 67\n      digitSumUpperLowerLowerLowerLower(\"helloE\") => 69\n      digitSumUpperLowerLowerLowerLower(\"woArBld\") => 131\n      digitSumUpper", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, amngo = 0;\n  let total = 0;\n  let fruits = n.split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apples\") {\n      apples++;\n    } else if (fruits[i] == \"oranges\") {\n      oranges++;\n    } else if (fruits[i] == \"amngo\") {\n      amngo++;\n    }\n  }\n  total = apples+oranges+amngo;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, amngo = 0;\n  let total = 0;\n  let fruits = n.split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apples\") {\n      apples++;\n    } else if (fruits[i] == \"oranges\") {\n      oranges++;\n    } else if (fruits[i] == \"amngo\") {\n      amngo++;\n    }\n  }\n  total = apples+oranges+amngo;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, amngo = 0;\n  let total = 0;\n  let fruits = n.split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apples\") {\n      apples++;\n    } else if (fruits[i] == \"oranges\") {\n      oranges++;\n    } else if (fruits[i] == \"amngo\") {\n      amngo++;\n    }\n  }\n  total = apples+oranges+amngo;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, amngo = 0;\n  let total = 0;\n  let fruits = n.split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apples\") {\n      apples++;\n    } else if (fruits[i] == \"oranges\") {\n      oranges++;\n    } else if (fruits[i] == \"amngo\") {\n      amngo++;\n    }\n  }\n  total = apples+oranges+amngo;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oragnes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples nad 1 oranges\",120) -> 102 - 100 - 1 = 19\n  */\ncosnt fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, amngo = 0;\n  let total = 0;\n  let fruits = n.split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i] == \"apples\") {\n      apples++;\n    } else if (fruits[i] == \"oranges\") {\n      oranges++;\n    } else if (fruits[i] == \"amngo\") {\n      amngo++;\n    }\n  }\n  total = apples+oranges+amngo;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are disrtibtued in a bakset of fruit this basket contains\n  apples, oranges, and amngo friuts. Given the string that rperesents the toatl number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in teh basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  \"Givne an raray repersentnig a branch of a tree that has non-negative integre nodes\n  your task is to pluck one of the ondes and return it.\n  The plucked node hsould be the node wiht the smallest even vlaue.\n  fI mutlipel nodes with hte same smallest veen value are fonud return the node that has smallest index.\n\n  The plcuked node should eb returned in a list, [ smalset_value, its indxe ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  let result = [];\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] % 2 === 0) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  if (max === min) {\n    return [min, minIndex];\n  }\n  if (max === 0 || min === 0) {\n    return [];\n  }\n  if (max === min) {\n    return [max, maxIndex];\n  }\n  if (max > min) {\n    const mid = (max + min) / 2;\n    const leftIndex = pluck(arr.slice(0, mid));\n    const rightIndex = pluck(arr.slice(mid));\n    return [mid, Math.min(leftIndex[0], rightIndex[0])];\n  }\n  return [];\n};\n\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-array/discuss/7551/Java-Solution\n// https://leetcode.com/problems/find-the-minimum-number-of-distinct-pairs-in-an-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gvien a non-mepty list of positive integers. Return the rgeaetst integer thta is gerater tahn\n  zero, and has a frequency gretaer than or qeual to the value of the integer itself.\n  The frequency of na integer is the number of times it appeasr in the list.\n  If no such a vlaue exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let freq = 0;\n  let max = 0;\n  let max = lst.reduce((acc, cur) => {\n    if (cur > max) {\n      max = cur;\n    }\n    return acc;\n  }, -1);\n  let maxIndex = -1;\n  let maxVal = -1;\n  let maxValIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex + 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      maxVal = lst[i];\n      maxValIndex = i;\n    }\n  }\n  if (maxValIndex === -1) {\n    return -1;\n  }\n  for (let i = maxValIndex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": false, "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNot = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNot = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNot(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterBySubstringNotIn = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) === -1);\n};\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  >>> filterBySubstringNotIn(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['array']\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remainnig integers, tehn mniimum nad so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = lst.sort((a, b) => a - b);\n  let sortedListLength = sortedList.length;\n  let sortedListIndex = 0;\n  let sortedListIndexMax = sortedListLength - 1;\n  while (sortedListIndex < sortedListLength) {\n    if (sortedList[sortedListIndex] > sortedList[sortedListIndexMax]) {\n      sortedList[sortedListIndex] = sortedList[sortedListIndexMax];\n      sortedList[sortedListIndexMax] = sortedList[sortedListIndex];\n      sortedListIndex++;\n      sortedListIndexMax--;\n    } else {\n      sortedList[sortedListIndex] = sortedList[sortedListIndexMax];\n      sortedList[sortedListIndexMax] = sortedList[sortedListIndex];\n      sortedListIndex++;\n      sortedListIndexMax--;\n    }\n  }\n  return sortedList;\n};\n\n/**\n * Given a string, return a new string where all characters are replaced with their ASCII equivalents.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only punctuation, return an empty string.\n * If the string contains only whitespace, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * If the string contains only letters, return an empty string.\n * If the string contains only digits, return an empty string.\n * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * c);\n  const side3 = Math.sqrt(b * b + c * c);\n  return side1 * side2 * side3;\n};\n\n/*\n  Given the lengths of the three sides of a triagnle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valdi triangle.\n  Otehrwise return -1\n  Three sides make a valid tirangle wehn teh sum of nay two sides is rgeater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c) => {\n  const side1 = Math.sqrt(a * a + b * b);\n  const side2 = Math.sqrt(a * a + c * ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a funtcion that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less thna or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const maxWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeightWeight = Number.MAX_SAFE_INTEGER;\n  const maxWeightWeightWeightWeightWeightWeightWeightWeightWeight", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given an array arr of integers, find teh minimum number of eleemnts ttha\n  need to be chnaged to make the array palindrmoic. A palindromic array is an array that\n  is read the same backwdars and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverse = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverse = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverse = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverse = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverse = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArrayReverseInArray = (arr) => {\n  let minChange = Number.MAX_VALUE;\n  let minElement = arr[0];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n      minChange = i;\n    }\n  }\n  return minChange;\n};\n\nconst smallestChangeInArrayReverseInArrayReverse", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length < totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list greater than the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotMatch = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length > totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list equal the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalEqual([], []) ➞ []\n  totalEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalEqual = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length === totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list not equal the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalNotEqual([], []) ➞ []\n  totalNotEqual(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalNotEqual(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalNotEqual(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalNotEqual(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotEqual = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length > totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list contains all the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalContains([], []) ➞ []\n  totalContains(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalContains(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalContains(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalContains(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalContains = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length >= totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list does not contain all the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalNotContains([], []) ➞ []\n  totalNotContains(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalNotContains(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalNotContains(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalNotContains(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotContains = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length < totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list contains all the other list.\n\n  if the tow lists have the same unmber of chars, return the first list.\n\n  Examples\n  totalContainsAll([], []) ➞ []\n  totalContainsAll(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalContainsAll(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalContainsAll(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalContainsAll(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalContainsAll = (lst1, lst2) => {\n  const totalChars = lst1.reduce((acc, cur) => acc + cur.length, 0);\n  return lst2.filter(el => el.length >= totalChars).map(el => el);\n};\n\n/*\n  Write a function that accepts two lists of strings and returns teh list htat has\n  total number of chars in the all strings of the list does not contain all the other ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let i = 2;\n  while (a * i <= 100) {\n    if (a % i == 0) {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\n/*Write a functoin that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Know", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and flase in other cases.\n  x is a simple power fo n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === 2) return true;\n  if (x === 3) return true;\n  if (x === 5) return true;\n  if (x === 7) return true;\n  if (x === 9) return true;\n  if (x === 11) return true;\n  if (x === 13) return true;\n  if (x === 15) return true;\n  if (x === 17) return true;\n  if (x === 19) return true;\n  if (x === 23) return true;\n  if (x === 29) return true;\n  if (x === 31) return true;\n  if (x === 37) return true;\n  if (x === 43) return true;\n  if (x === 53) return true;\n  if (x === 59) return true;\n  if (x === 67) return true;\n  if (x === 73) return true;\n  if (x === 79) return true;\n  if (x === 89) return true;\n  if (x === 97) return true;\n  if (x === 101) return true;\n  if (x === 103) return true;\n  if (x === 107) return true;\n  if (x === 109) return true;\n  if (x === 111) return true;\n  if (x === 113) return true;\n  if (x === 115) return true;\n  if (x === 117) return true;\n  if (x === 119) return true;\n  if (x === 121) return true;\n  if (x === 123) return true;\n  if (x === 127) return true;\n  if (x === 129) return true;\n  if (x === 135) return true;\n  if (x === 137) return true;\n  if (x === 139) return true;\n  if (x === 141) return true;\n  if (x === 143) return true;\n  if (x === 145) return true;\n  if (x === 147) return true;\n  if (x === 149) return true;\n  if (x === 151) return true;\n  if (x === 153) return true;\n  if (x === 155) return true;\n  if (x === 157) return true;\n  if (x === 159) return true;\n  if (x === 161) return true;\n  if (x === 163) return true;\n  if (x === 165) return true;\n  if (x === 167) return true;\n  if (x === 169) return true;\n  if (x === 171) return true;\n  if (x === 173) return true;\n  if (x === 175) return true;\n  if (x === 177) return true;\n  if (x === 179) return true;\n  if (x === 181) return true;\n  if (x === 183) return true;\n  if (x === 185) return true;\n  if (x === 187) return true;\n  if (x === 189) return true;\n  if (x === 191) return true;\n  if (x === 193) return true;\n  if (x === 195) return true;\n  if (x === 197) return true;\n  if (x === 199) return true;\n  if (x === 201) return true;\n  if (x === 203) return true;\n  if (x === 205) return true;\n  if (x === 207) return true;\n  if (x === 209) return true;\n  if (x === 211) return true;\n  if (x === 213) return true;\n  if (x === 215) return true;\n  if (x === 217) return true;\n  if (x === 219) return true;\n  if (x === 221) return true;\n  if (x === 223) return true;\n  if (x === 225) return true;\n  if (x === 227) return true;\n  if (x === 229) return true;\n  if (x === 231) return true;\n  if (x === 233) return true;\n  if (x === 235) return true;\n  if (x === 237) return true;\n  if (x === 239) return true;\n  if (x === 241) return true;\n  if (x === 243) return true;\n  if (x === 245) return true;\n  if (x === 247) return true;\n  if (x === 249) return true;\n  if (x === 251) return true;\n  if (x === 253) return true;\n  if (x === 255) return true;\n  if (x === 257) return true;\n  if (x === 259) return true;\n  if (x === 261) return true;\n  if (x === 263) return true;\n  if (x === 265) return true;\n  if (x === 267) return true;\n  if (x === 269) return true;\n  if (x === 271) return true;\n  if (x === 273) return true;\n  if (x === 275) return true;\n  if (x === 277) return true;\n  if (x === 279) return true;\n  if (x === 281) return true;\n  if (x === 283) return true;\n  if (x === 285) return true;\n  if (x === 287) return true;\n  if (x === 289) return true;\n  if (x === 291) return true;\n  if (x === 293) return true;\n  if (x === 295) return true;\n  if (x === 297) return true;\n  if (x === 299) return true;\n  if (x === 301) return true;\n  if (x === 303) return true;\n  if (x === 307) return true;\n  if (x === 309) return true;\n  if (x === 311) return true;\n  if (x === 313) return true;\n  if (x === 315) return true;\n  if (x === 317) return true;\n  if (x === 319) return true;\n  if (x === 321) return true;\n  if (x === 323) return true;\n  if (x === 325) return true;\n  if (x === 327) return true;\n  if (x === 329) return true;\n  if (x === 331) return true;\n  if (x === 333) return true;\n  if (x === 335) return true;\n  if (x === 337) return true;\n  if (x === 339) return true;\n  if (x === 341) return true;\n  if (x === 343) return true;\n  if (x === 345) return true;\n  if (x === 347) return true;\n  if (x === 349) return true;\n  if (x === 351) return true;\n  if (x === 353) return true;\n  if (x === 355) return true;\n  if (x === 357) return true;\n  if (x === 359) return true;\n  if (x === 361) return true;\n  if (x === 363) return true;\n  if (x === 365) return true;\n  if (x === 367) return true;\n  if (x === 369) return true;\n  if (x === 371) return true;\n  if (x === 373) return true;\n  if (x === 375) return true;\n  if (x === 377) return true;\n  if (x === 379) return true;\n  if (x === 381) return true;\n  if (x === 383) return true;\n  if (x === 385) return true;\n  if (x === 387) return true;\n  if (x === 389) return true;\n  if (x === 391) return true;\n  if (x === 393) return true;\n  if (x === 395) return true;\n  if (x === 397) return true;\n  if (x === 399) return true;\n  if (x === 401) return true;\n  if (x === 403) return true;\n  if (x === 405) return true;\n  if (x === 407) return true;\n  if (x === 409) return true;\n  if (x === 411) return true;\n  if (x === 413) return true;\n  if (x === 415) return true;\n  if (x === 419) return true;\n  if (x === 421) return true;\n  if (x === 423) return true;\n  if (x === 425) return true;\n  if (x === 427) return true;\n  if (x === 429) return true;\n  if (x === 431) return true;\n  if (x === 433) return true;\n  if (x === 435) return true;\n  if (x === 437) return true;\n  if (x === 439) return true;\n  if (x === 441) return true;\n  if (x === 443) return true;\n  if (x === 445) return true;\n  if (x === 447) return true;\n  if (x === 449) return true;\n  if (x === 451) return true;\n  if (x === 453", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  if (a < 0 || a > 100) {\n    throw new Error('iscube: input must be between 0 and 100');\n  }\n  if (a === 0 || a === 100) {\n    return true;\n  }\n  if (a % 1 === 0) {\n    return false;\n  }\n  if (a % 2 === 0) {\n    return true;\n  }\n  if (a % 3 === 0) {\n    return false;\n  }\n  if (a % 4 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Write a function that takes an inetger a and rteurns true\n  if tihs ingeger is a cube of some integer numebr.\n  Note: yuo may assume the input is always valid.\n  Examples:\n  iscube(2) ==> true\n  iscube(-1) ==> true\n  iscube(64) ==> true\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You have been tasked to wriet a function that receives\n  a hexadeciaml number as a stirng and counts hte number of hexadecimal\n  idgist that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Heaxdeimcal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the folloiwng digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume hte input is always correct ro empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexNum = num;\n  let hexNumLength = hexNum.length;\n  let hexKey = 0;\n  let hexKeyLength = 0;\n  let hexKeyArray = [];\n  let hexKeyArrayLength = 0;\n  let hexKeyArrayIndex = 0;\n  let hexKeyArrayIndexLength = 0;\n  let hexKeyArrayIndexLength2 = 0;\n  let hexKeyArrayIndexLength3 = 0;\n  let hexKeyArrayIndexLength4 = 0;\n  let hexKeyArrayIndexLength5 = 0;\n  let hexKeyArrayIndexLength6 = 0;\n  let hexKeyArrayIndexLength7 = 0;\n  let hexKeyArrayIndexLength8 = 0;\n  let hexKeyArrayIndexLength9 = 0;\n  let hexKeyArrayIndexLength10 = 0;\n  let hexKeyArrayIndexLength11 = 0;\n  let hexKeyArrayIndexLength12 = 0;\n  let hexKeyArrayIndexLength13 = 0;\n  let hexKeyArrayIndexLength14 = 0;\n  let hexKeyArrayIndexLength15 = 0;\n  let hexKeyArrayIndexLength16 = 0;\n  let hexKeyArrayIndexLength17 = 0;\n  let hexKeyArrayIndexLength18 = 0;\n  let hexKeyArrayIndexLength19 = 0;\n  let hexKeyArrayIndexLength20 = 0;\n  let hexKeyArrayIndexLength21 = 0;\n  let hexKeyArrayIndexLength22 = 0;\n  let hexKeyArrayIndexLength23 = 0;\n  let hexKeyArrayIndexLength24 = 0;\n  let hexKeyArrayIndexLength25 = 0;\n  let hexKeyArrayIndexLength26 = 0;\n  let hexKeyArrayIndexLength27 = 0;\n  let hexKeyArrayIndexLength28 = 0;\n  let hexKeyArrayIndexLength29 = 0;\n  let hexKeyArrayIndexLength30 = 0;\n  let hexKeyArrayIndexLength31 = 0;\n  let hexKeyArrayIndexLength32 = 0;\n  let hexKeyArrayIndexLength33 = 0;\n  let hexKeyArrayIndexLength34 = 0;\n  let hexKeyArrayIndexLength35 = 0;\n  let hexKeyArrayIndexLength36 = 0;\n  let hexKeyArrayIndexLength37 = 0;\n  let hexKeyArrayIndexLength38 = 0;\n  let hexKeyArrayIndexLength39 = 0;\n  let hexKeyArrayIndexLength40 = 0;\n  let hexKeyArrayIndexLength41 = 0;\n  let hexKeyArrayIndexLength42 = 0;\n  let hexKeyArrayIndexLength43 = 0;\n  let hexKeyArrayIndexLength44 = 0;\n  let hexKeyArrayIndexLength45 = 0;\n  let hexKeyArrayIndexLength46 = 0;\n  let hexKeyArrayIndexLength47 = 0;\n  let hexKeyArrayIndexLength48 = 0;\n  let hexKeyArrayIndexLength49 = 0;\n  let hexKeyArrayIndexLength50 = 0;\n  let hexKeyArrayIndexLength51 = 0;\n  let hexKeyArrayIndexLength52 = 0;\n  let hexKeyArrayIndexLength53 = 0;\n  let hexKeyArrayIndexLength54 = 0;\n  let hexKeyArrayIndexLength55 = 0;\n  let hexKeyArrayIndexLength56 = 0;\n  let hexKeyArrayIndexLength57 = 0;\n  let hexKeyArrayIndexLength58 = 0;\n  let hexKeyArrayIndexLength59 = 0;\n  let hexKeyArrayIndexLength60 = 0;\n  let hexKeyArrayIndexLength61 = 0;\n  let hexKeyArrayIndexLength62 = 0;\n  let hexKeyArrayIndexLength63 = 0;\n  let hexKeyArrayIndexLength64 = 0;\n  let hexKeyArrayIndexLength65 = 0;\n  let hexKeyArrayIndexLength66 = 0;\n  let hexKeyArrayIndexLength67 = 0;\n  let hexKeyArrayIndexLength68 = 0;\n  let hexKeyArrayIndexLength69 = 0;\n  let hexKeyArrayIndexLength70 = 0;\n  let hexKeyArrayIndexLength71 = 0;\n  let hexKeyArrayIndexLength72 = 0;\n  let hexKeyArrayIndexLength73 = 0;\n  let hexKeyArrayIndexLength74 = 0;\n  let hexKeyArrayIndexLength75 = 0;\n  let hexKeyArrayIndexLength76 = 0;\n  let hexKeyArrayIndexLength77 = 0;\n  let hexKeyArrayIndexLength78 = 0;\n  let hexKeyArrayIndexLength79 = 0;\n  let hexKeyArrayIndexLength80 = 0;\n  let hexKeyArrayIndexLength81 = 0;\n  let hexKeyArrayIndexLength82 = 0;\n  let hexKeyArrayIndexLength83 = 0;\n  let hexKeyArrayIndexLength84 = 0;\n  let hexKeyArrayIndexLength85 = 0;\n  let hexKeyArrayIndexLength86 = 0;\n  let hexKeyArrayIndexLength87 = 0;\n  let hexKeyArrayIndexLength88 = 0;\n  let hexKeyArrayIndexLength89 = 0;\n  let hexKeyArrayIndexLength90 = 0;\n  let hexKeyArrayIndexLength91 = 0;\n  let hexKeyArrayIndexLength92 = 0;\n  let hexKeyArrayIndexLength93 = 0;\n  let hexKeyArrayIndexLength94 = 0;\n  let hexKeyArrayIndexLength95 = 0;\n  let hexKeyArrayIndexLength96 = 0;\n  let hexKeyArrayIndexLength97 = 0;\n  let hexKeyArrayIndexLength98 = 0;\n  let hexKeyArrayIndexLength99 = 0;\n  let hexKeyArrayIndexLength100 = 0;\n  let hexKeyArrayIndexLength101 = 0;\n  let hexKeyArrayIndexLength102 = 0;\n  let hexKeyArrayIndexLength103 = 0;\n  let hexKeyArrayIndexLength104 = 0;\n  let hexKeyArrayIndexLength105 = 0;\n  let hexKeyArrayIndexLength106 = 0;\n  let hexKeyArrayIndexLength107 = 0;\n  let hexKeyArrayIndexLength108 = 0;\n  let hexKeyArrayIndexLength109 = 0;\n  let hexKeyArrayIndexLength110 = 0;\n  let hexKeyArrayIndexLength111 = 0;\n  let hexKeyArrayIndexLength112 = 0;\n  let hexKeyArrayIndexLength113 = 0;\n  let hexKeyArrayIndexLength114 = 0;\n  let hexKeyArrayIndexLength115 = 0;\n  let hexKeyArrayIndexLength116 = 0;\n  let hexKeyArrayIndexLength117 = 0;\n  let hexKeyArrayIndexLength118 = 0;\n  let hexKeyArrayIndexLength119 = 0;\n  let hexKeyArrayIndexLength120 = 0;\n  let hexKeyArrayIndexLength121 = 0;\n  let hexKeyArrayIndexLength122 = 0;\n  let hexKeyArrayIndexLength123 = 0;\n  let hexKeyArrayIndexLength124 = 0;\n  let hexKeyArrayIndexLength125 = 0;\n  let hexKeyArrayIndexLength126 = 0;\n  let hexKeyArrayIndexLength127 = 0;\n  let hexKeyArrayIndexLength128 = 0;\n  let hexKeyArrayIndexLength129 = 0;\n  let hexKeyArrayIndexLength130 = 0;\n  let hexKeyArrayIndexLength131 = 0;\n  let hexKeyArrayIndexLength132 = 0;\n  let hexKeyArrayIndexLength133 = 0;\n  let hexKeyArrayIndexLength134 = 0;\n  let hexKeyArrayIndexLength135 = 0;\n  let hexKeyArrayIndexLength136 = 0;\n  let hex", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a tsrign, wiht each characetr erpersenting a binary\n  number. Each character in the strign will be '0' or '1'.\n\n  There will eb an extra couple of characters 'db' at the beginning and at the end of the stirng.\n  The extra characters are there to ehlp with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let num = 0;\n  let decimalStr = decimal.toString();\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  decimalStr = decimalStr.slice(0, decimalStr.length - 1);\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/8", "prompt": "/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* oFr a given list of integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProduct([2, 3])\n  (3, 6)\n  */\nconst sumProductAll = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAll([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZero = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZero([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOne = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOne([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithZero = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithZero([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithOne = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithOne([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithTwo = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithTwo([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithThree = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithThree([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithFour = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithFour([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithFive = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithFive([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithSix = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithSix([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithSeven = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  >>> sumProductAllWithZeroAndOneWithSeven([2, 3])\n  (3, 6)\n  */\nconst sumProductAllWithZeroAndOneWithEight = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1);\n  }\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * int;\n  }\n  return sum;\n};\n\n/* oFr a list containing all integers, return a tuple consisting of a sum adn a produtc of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be qeual to 1.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const isHappy = len >= 3 && len % 3 === 0\n  return isHappy\n}\n\n/*\n  You aer given a strign s.\n  Your taks is to cehck if the string is happy or not.\n  A srting is happy if its length is at least 3 and every 3 consecutive letters are dsitintc\n  For example:\n  isHappy(a) => false\n  isHappy(aa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to tsudents. The techaer has been making her own algorithm for grading.\n  The only rpoblem is, hes has lost the code she used for graidng.\n  She has given you a list of GPAs for osme students and yuo have to write\n  a fucntion that can output a list of letter grades using the following atlbe:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => grade + '');\n  const letterGradeArray = letterGrades.split('');\n  const letterGradeArrayLength = letterGradeArray.length;\n  const letterGradeArrayIndex = 0;\n  const letterGradeArrayIndexLength = letterGradeArray.length;\n  let letterGrade = '';\n  let letterGradeIndex = 0;\n  let letterGradeIndexLength = 0;\n  let letterGradeIndexValue = 0;\n  let letterGradeIndexValueLength = 0;\n  let letterGradeIndexValueValue = 0;\n  let letterGradeIndexValueValueLength = 0;\n  let letterGradeIndexValueValueValue = 0;\n  let letterGradeIndexValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let letterGradeIndexValueValue", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Write a funciton that takes a string and returns true if the string\n  length is a prime number or flase otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisibleBy3 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 3 === 0) {\n      isDivisibleBy3 = false;\n      break;\n    }\n  }\n  return isDivisibleBy3;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisibleBy5 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 5 === 0) {\n      isDivisibleBy5 = false;\n      break;\n    }\n  }\n  return isDivisibleBy5;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisibleBy7 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 7 === 0) {\n      isDivisibleBy7 = false;\n      break;\n    }\n  }\n  return isDivisibleBy7;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisibleBy9 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 9 === 0) {\n      isDivisibleBy9 = false;\n      break;\n    }\n  }\n  return isDivisibleBy9;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisibleBy11 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 11 === 0) {\n      isDivisibleBy11 = false;\n      break;\n    }\n  }\n  return isDivisibleBy11;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisibleBy13 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 13 === 0) {\n      isDivisibleBy13 = false;\n      break;\n    }\n  }\n  return isDivisibleBy13;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisibleBy15 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 15 === 0) {\n      isDivisibleBy15 = false;\n      break;\n    }\n  }\n  return isDivisibleBy15;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisibleBy17 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 17 === 0) {\n      isDivisibleBy17 = false;\n      break;\n    }\n  }\n  return isDivisibleBy17;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisibleBy19 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 19 === 0) {\n      isDivisibleBy19 = false;\n      break;\n    }\n  }\n  return isDivisibleBy19;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisibleBy21 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 21 === 0) {\n      isDivisibleBy21 = false;\n      break;\n    }\n  }\n  return isDivisibleBy21;\n};\n\n/*Write a funciton that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisibleBy23 = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 23 === 0) {\n      isDivisibleBy23 = false;\n      break;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 1.\n  */\ncnost startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with 0.\n  */\ncnost startsZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -1.\n  */\ncnost startsNegativeOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -2.\n  */\ncnost startsNegativeTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -3.\n  */\ncnost startsNegativeThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -4.\n  */\ncnost startsNegativeFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -5.\n  */\ncnost startsNegativeFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -6.\n  */\ncnost startsNegativeSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -7.\n  */\ncnost startsNegativeSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -8.\n  */\ncnost startsNegativeEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -9.\n  */\ncnost startsNegativeNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -10.\n  */\ncnost startsNegativeTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -11.\n  */\ncnost startsNegativeElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -12.\n  */\ncnost startsNegativeTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -13.\n  */\ncnost startsNegativeThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -14.\n  */\ncnost startsNegativeFourteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -15.\n  */\ncnost startsNegativeFifteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -16.\n  */\ncnost startsNegativeSixteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positvie itnegers that start or end with -17.\n  */\ncnost startsNegativeSeventeenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i < n) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a positive integer N, return the ottal sum of its digits in ibanry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let i = 0;\n  let j = 0;\n  let sumStr = \"\";\n  let sumBin = \"\";\n  let sumBinStr = \"\";\n  let sumBinNum = 0;\n  let sumBinNumStr = \"\";\n  let sumBinNumStrNum = \"\";\n  let sumBinNumStrNumStr = \"\";\n  let sumBinNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStr = \"\";\n  let sumBinNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStr = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNumStrNumStrNum = \"\";\n  let sumBinNumStrNumStrNumStrNumStrNumStrNumStrNum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elemenst that are at odd indcies..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the even elemenst that are at odd indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst remove = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the even elemenst that are at odd indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOdd = (lst, index) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let res = []\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      res.push(item)\n    }\n  })\n  return res\n}\n\n/*Given a non-empty list of integers lst. remove the odd elemenst that are at even indcies..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Wrtie a ufnction that takes a string and retruns an ordered vresion of it.\n  Ordered version of strnig, is a string where all owrds (separatde by space)\n  are replaecd by a new word where all the characters arranged in\n  ascendign order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the snetence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newStr = '';\n  let newStrArr = [];\n  let newStrArr2 = [];\n  let newStrArr3 = [];\n  let newStrArr4 = [];\n  let newStrArr5 = [];\n  let newStrArr6 = [];\n  let newStrArr7 = [];\n  let newStrArr8 = [];\n  let newStrArr9 = [];\n  let newStrArr10 = [];\n  let newStrArr11 = [];\n  let newStrArr12 = [];\n  let newStrArr13 = [];\n  let newStrArr14 = [];\n  let newStrArr15 = [];\n  let newStrArr16 = [];\n  let newStrArr17 = [];\n  let newStrArr18 = [];\n  let newStrArr19 = [];\n  let newStrArr20 = [];\n  let newStrArr21 = [];\n  let newStrArr22 = [];\n  let newStrArr23 = [];\n  let newStrArr24 = [];\n  let newStrArr25 = [];\n  let newStrArr26 = [];\n  let newStrArr27 = [];\n  let newStrArr28 = [];\n  let newStrArr29 = [];\n  let newStrArr30 = [];\n  let newStrArr31 = [];\n  let newStrArr32 = [];\n  let newStrArr33 = [];\n  let newStrArr34 = [];\n  let newStrArr35 = [];\n  let newStrArr36 = [];\n  let newStrArr37 = [];\n  let newStrArr38 = [];\n  let newStrArr39 = [];\n  let newStrArr40 = [];\n  let newStrArr41 = [];\n  let newStrArr42 = [];\n  let newStrArr43 = [];\n  let newStrArr44 = [];\n  let newStrArr45 = [];\n  let newStrArr46 = [];\n  let newStrArr47 = [];\n  let newStrArr48 = [];\n  let newStrArr49 = [];\n  let newStrArr50 = [];\n  let newStrArr51 = [];\n  let newStrArr52 = [];\n  let newStrArr53 = [];\n  let newStrArr54 = [];\n  let newStrArr55 = [];\n  let newStrArr56 = [];\n  let newStrArr57 = [];\n  let newStrArr58 = [];\n  let newStrArr59 = [];\n  let newStrArr60 = [];\n  let newStrArr61 = [];\n  let newStrArr62 = [];\n  let newStrArr63 = [];\n  let newStrArr64 = [];\n  let newStrArr65 = [];\n  let newStrArr66 = [];\n  let newStrArr67 = [];\n  let newStrArr68 = [];\n  let newStrArr69 = [];\n  let newStrArr70 = [];\n  let newStrArr71 = [];\n  let newStrArr72 = [];\n  let newStrArr73 = [];\n  let newStrArr74 = [];\n  let newStrArr75 = [];\n  let newStrArr76 = [];\n  let newStrArr77 = [];\n  let newStrArr78 = [];\n  let newStrArr79 = [];\n  let newStrArr80 = [];\n  let newStrArr81 = [];\n  let newStrArr82 = [];\n  let newStrArr83 = [];\n  let newStrArr84 = [];\n  let newStrArr85 = [];\n  let newStrArr86 = [];\n  let newStrArr87 = [];\n  let newStrArr88 = [];\n  let newStrArr89 = [];\n  let newStrArr90 = [];\n  let newStrArr91 = [];\n  let newStrArr92 = [];\n  let newStrArr93 = [];\n  let newStrArr94 = [];\n  let newStrArr95 = [];\n  let newStrArr96 = [];\n  let newStrArr97 = [];\n  let newStrArr98 = [];\n  let newStrArr99 = [];\n  let newStrArr100 = [];\n  let newStrArr101 = [];\n  let newStrArr102 = [];\n  let newStrArr103 = [];\n  let newStrArr104 = [];\n  let newStrArr105 = [];\n  let newStrArr106 = [];\n  let newStrArr107 = [];\n  let newStrArr108 = [];\n  let newStrArr109 = [];\n  let newStrArr110 = [];\n  let newStrAr1111 = [];\n  let newStrArr112 = [];\n  let newStrArr113 = [];\n  let newStrArr114 = [];\n  let newStrArr115 = [];\n  let newStrArr116 = [];\n  let newStrArr117 = [];\n  let newStrArr118 = [];\n  let newStrArr119 = [];\n  let newStrArr120 = [];\n  let newStrAr121 = [];\n  let newStrAr122 = [];\n  let newStrAr123 = [];\n  let newStrAr124 = [];\n  let newStrAr125 = [];\n  let newStrAr126 = [];\n  let newStrAr127 = [];\n  let newStrAr128 = [];\n  let newStrAr129 = [];\n  let newStrAr130 = [];\n  let newStrAr131 = [];\n  let newStrAr132 = [];\n  let newStrAr133 = [];\n  let newStrAr134 = [];\n  let newStrAr135 = [];\n  let newStrAr136 = [];\n  let newStrAr137 = [];\n  let newStrAr138 = [];\n  let newStrAr139 = [];\n  let newStrAr140 = [];\n  let newStrAr141 = [];\n  let newStrAr142 = [];\n  let newStrAr143 = [];\n  let newStrAr144 = [];\n  let newStrAr145 = [];\n  let newStrAr146 = [];\n  let newStrAr147 = [];\n  let newStrAr148 = [];\n  let newStrAr149 = [];\n  let newStrAr150 = [];\n  let newStrAr151 = [];\n  let newStrAr152 = [];\n  let newStrAr153 = [];\n  let newStrAr154 = [];\n  let newStrAr155 = [];\n  let newStrAr156 = [];\n  let newStrAr157 = [];\n  let newStrAr158 = [];\n  let newStrAr159 = [];\n  let newStrAr160 = [];\n  let newStrAr161 = [];\n  let newStrAr162 = [];\n  let newStrAr163 = [];\n  let newStrAr164 = [];\n  let newStrAr165 = [];\n  let newStrAr166 = [];\n  let newStrAr167 = [];\n  let newStrAr168 = [];\n  let newStrAr169 = [];\n  let newStrAr170 = [];\n  let newStrAr171 = [];\n  let newStrAr172 = [];\n  let newStrAr173 = [];\n  let newStrAr174 = [];\n  let newStrAr175 = [];\n  let newStrAr176 = [];\n  let newStrAr177 = [];\n  let newStrAr178 = [];\n  let newStrAr179 = [];\n  let newStrAr180 = [];\n  let newStrAr181 = [];\n  let newStrAr182 = [];\n  let newStrAr183 = [];\n  let newStrAr184 = [];\n  let newStrAr185 = [];\n  let newStrAr186 = [];\n  let newStrAr187 = [];\n  let newStrAr188 = [];\n  let newStrAr189 = [];\n  let newStrAr190 = [];\n  let newStrAr191 = [];\n  let newStrAr192 = [];\n  let newStr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([i, lst[j]])\n      rows.push(row)\n      row = []\n      j++\n    } else {\n      i++\n    }\n  }\n  rows.push(row)\n  return rows\n}\n\n/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n  const col = []\n  const cols = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      col.push([lst[j], i])\n      cols.push(col)\n      col = []\n      j++\n    } else {\n      i++\n    }\n  }\n  cols.push(col)\n  return cols\n}\n\n/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowCol = (lst, x) => {\n  const row = []\n  const col = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([lst[j], i])\n      cols.push(col)\n      col = []\n      j++\n    } else {\n      i++\n    }\n  }\n  cols.push(col)\n  rows.push(row)\n  return rows\n}\n\n/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowCol2 = (lst, x) => {\n  const row = []\n  const col = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([lst[j], i])\n      cols.push(col)\n      col = []\n      j++\n    } else {\n      i++\n    }\n  }\n  cols.push(col)\n  rows.push(row)\n  return rows\n}\n\n/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowCol3 = (lst, x) => {\n  const row = []\n  const col = []\n  const rows = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < lst.length) {\n    if (lst[i] === x) {\n      row.push([lst[j], i])\n      cols.push(col)\n      col = []\n      j++\n    } else {\n      i++\n    }\n  }\n  cols.push(col)\n  rows.push(row)\n  return rows\n}\n\n/*\n  Yuo are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may ocntain a idffreent number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of utples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a cooridnate - (row, columns), starting iwth 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by colunms in descedning order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowCol4 = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    } else {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    } else {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    } else {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    } else {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    } else {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array[i] > array[j]) {\n      newArray.push(array[j])\n      sum += array[j]\n      j++\n    } else {\n      newArray.push(array[i])\n      sum += array[i]\n      i++\n    }\n  }\n\n  if (sum % 2 === 0) {\n    newArray.push(sum)\n  }\n\n  return newArray\n}\n\n/*\n  Gvien an array of non-negatvie integers, return a copy of the given array after sorting,\n  you will sotr the given array in acsending order if hte sum( first index value, last index value) is odd,\n  or sort it in descending order if the smu( first index value, lats index value) is even.\n\n  oNte:\n  * don't change the givne array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayDescDescDesc = (array) => {\n  let newArray = []\n  let sum = 0\n  let i = 0\n  let j = 0\n\n  while (i < array.length) {\n    if (array", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument adn\n  returns a string encrypted with the alphabet being rotated. \n  The lahpabet should be rotated in a manner such that the letters \n  shift down by two multiplied to wto plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let rot = 0;\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newStr = '';\n  let newStr2 = [];\n  let newStr3 = [];\n  let newStr4 = [];\n  let newStr5 = [];\n  let newStr6 = [];\n  let newStr7 = [];\n  let newStr8 = [];\n  let newStr9 = [];\n  let newStr10 = [];\n  let newStr11 = [];\n  let newStr12 = [];\n  let newStr13 = [];\n  let newStr14 = [];\n  let newStr15 = [];\n  let newStr16 = [];\n  let newStr17 = [];\n  let newStr18 = [];\n  let newStr19 = [];\n  let newStr20 = [];\n  let newStr21 = [];\n  let newStr22 = [];\n  let newStr23 = [];\n  let newStr24 = [];\n  let newStr25 = [];\n  let newStr26 = [];\n  let newStr27 = [];\n  let newStr28 = [];\n  let newStr29 = [];\n  let newStr30 = [];\n  let newStr31 = [];\n  let newStr32 = [];\n  let newStr33 = [];\n  let newStr34 = [];\n  let newStr35 = [];\n  let newStr36 = [];\n  let newStr37 = [];\n  let newStr38 = [];\n  let newStr39 = [];\n  let newStr40 = [];\n  let newStr41 = [];\n  let newStr42 = [];\n  let newStr43 = [];\n  let newStr44 = [];\n  let newStr45 = [];\n  let newStr46 = [];\n  let newStr47 = [];\n  let newStr48 = [];\n  let newStr49 = [];\n  let newStr50 = [];\n  let newStr51 = [];\n  let newStr52 = [];\n  let newStr53 = [];\n  let newStr54 = [];\n  let newStr55 = [];\n  let newStr56 = [];\n  let newStr57 = [];\n  let newStr58 = [];\n  let newStr59 = [];\n  let newStr60 = [];\n  let newStr61 = [];\n  let newStr62 = [];\n  let newStr63 = [];\n  let newStr64 = [];\n  let newStr65 = [];\n  let newStr66 = [];\n  let newStr67 = [];\n  let newStr68 = [];\n  let newStr69 = [];\n  let newStr70 = [];\n  let newStr71 = [];\n  let newStr72 = [];\n  let newStr73 = [];\n  let newStr74 = [];\n  let newStr75 = [];\n  let newStr76 = [];\n  let newStr77 = [];\n  let newStr78 = [];\n  let newStr79 = [];\n  let newStr80 = [];\n  let newStr81 = [];\n  let newStr82 = [];\n  let newStr83 = [];\n  let newStr84 = [];\n  let newStr85 = [];\n  let newStr86 = [];\n  let newStr87 = [];\n  let newStr88 = [];\n  let newStr89 = [];\n  let newStr90 = [];\n  let newStr91 = [];\n  let newStr92 = [];\n  let newStr93 = [];\n  let newStr94 = [];\n  let newStr95 = [];\n  let newStr96 = [];\n  let newStr97 = [];\n  let newStr98 = [];\n  let newStr99 = [];\n  let newStr100 = [];\n  let newStr101 = [];\n  let newStr102 = [];\n  let newStr103 = [];\n  let newStr104 = [];\n  let newStr105 = [];\n  let newStr106 = [];\n  let newStr107 = [];\n  let newStr108 = [];\n  let newStr109 = [];\n  let newStr110 = [];\n  let newStr111 = [];\n  let newStr112 = [];\n  let newStr113 = [];\n  let newStr114 = [];\n  let newStr115 = [];\n  let newStr116 = [];\n  let newStr117 = [];\n  let newStr118 = [];\n  let newStr119 = [];\n  let newStr120 = [];\n  let newStr121 = [];\n  let newStr122 = [];\n  let newStr123 = [];\n  let newStr124 = [];\n  let newStr125 = [];\n  let newStr126 = [];\n  let newStr127 = [];\n  let newStr128 = [];\n  let newStr129 = [];\n  let newStr130 = [];\n  let newStr131 = [];\n  let newStr132 = [];\n  let newStr133 = [];\n  let newStr134 = [];\n  let newStr135 = [];\n  let newStr136 = [];\n  let newStr137 = [];\n  let newStr138 = [];\n  let newStr139 = [];\n  let newStr140 = [];\n  let newStr141 = [];\n  let newStr142 = [];\n  let newStr143 = [];\n  let newStr144 = [];\n  let newStr145 = [];\n  let newStr146 = [];\n  let newStr147 = [];\n  let newStr148 = [];\n  let newStr149 = [];\n  let newStr150 = [];\n  let newStr151 = [];\n  let newStr152 = [];\n  let newStr153 = [];\n  let newStr154 = [];\n  let newStr155 = [];\n  let newStr156 = [];\n  let newStr157 = [];\n  let newStr158 = [];\n  let newStr159 = [];\n  let newStr160 = [];\n  let newStr161 = [];\n  let newStr162 = [];\n  let newStr163 = [];\n  let newStr164 = [];\n  let newStr165 = [];\n  let newStr166 = [];\n  let newStr167 = [];\n  let newStr168 = [];\n  let newStr169 = [];\n  let newStr170 = [];\n  let newStr171 = [];\n  let newStr172 = [];\n  let newStr173 = [];\n  let newStr174 = [];\n  let newStr175 = [];\n  let newStr176 = [];\n  let newStr177 = [];\n  let newStr178 = [];\n  let newStr179 = [];\n  let newStr180 = [];\n  let newStr181 = [];\n  let newStr182 = [];\n  let newStr183 = [];\n  let newStr184 = [];\n  let newStr185 = [];\n  let newStr186 = [];\n  let newStr187 = [];\n  let newStr188 = [];\n  let newStr189 = [];\n  let newStr190 = [];\n  let newStr191 = [];\n  let newStr192 = [];\n  let newStr193 = [];\n  let newStr194 = [];\n  let newStr195 = [];\n  let newStr196 = [];\n  let newStr197 = [];\n  let newStr198 = [];\n  let newStr199 = [];\n  let newStr200 = [];\n  let newStr201 = [];\n  let newStr202 = [];\n  let newStr203 = [];\n  let newStr204 = [];\n  let newStr205 = [];\n  let newStr206 = [];\n  let newStr207 = [];\n  let newStr208 = [];\n  let newStr209 = [];\n  let newStr210 = [];\n  let newStr211 = [];\n  let newStr212 = [];\n  let newStr213 = [];\n  let newStr214 = [];\n  let newStr215 = [];\n  let newStr216 = [];\n  let newStr217 = [];\n  let newStr218 = [];\n  let newStr219 = [];\n  let newStr220 = [];\n  let newStr221 = [];\n  let newStr222 = [];\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* From a given list of integers, generaet a list of rolling maxmium element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxElement = numbers[0];\n  let maxElementIndex = numbers.length;\n  let maxElementIndexInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntIntInt = parseInt(maxElementIndex.toString());\n  let maxElementIndexIntIntIntIntIntIntIntIntIntIntIntIntInt", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 4\n  nextSmallest([5, 1, 4, 3, 2]) == 4\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 5\n  nextSmallest([5, 1, 4, 3, 2]) == 5\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 6\n  nextSmallest([5, 1, 4, 3, 2]) == 6\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 7\n  nextSmallest([5, 1, 4, 3, 2]) == 7\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 8\n  nextSmallest([5, 1, 4, 3, 2]) == 8\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 9\n  nextSmallest([5, 1, 4, 3, 2]) == 9\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 10\n  nextSmallest([5, 1, 4, 3, 2]) == 10\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 11\n  nextSmallest([5, 1, 4, 3, 2]) == 11\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = null;\n  let minIndex = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (min == null || lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  You are gievn a list of integers.\n  Write a funciotn nextSmallest() that returns the 2nd smallest elemetn of the list.\n  Rteurn null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 12\n  nextSmallest([5, 1, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let bored = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      bored++;\n    }\n  });\n  return bored;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of deaths. A death is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isDeath(\"Hello world\")\n  0\n  >>> isDeath(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isDeath = (S) => {\n  let deaths = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      deaths++;\n    }\n  });\n  return deaths;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of religions. A religions is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isReligion(\"Hello world\")\n  0\n  >>> isReligion(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isReligion = (S) => {\n  let religions = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      religions++;\n    }\n  });\n  return religions;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of sexes. A sexes is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isSex(\"Hello world\")\n  0\n  >>> isSex(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isSex = (S) => {\n  let sexes = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      sexes++;\n    }\n  });\n  return sexes;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of adjectives. An adjectives is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isAdjective(\"Hello world\")\n  0\n  >>> isAdjective(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdjective = (S) => {\n  let adjectives = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      adjectives++;\n    }\n  });\n  return adjectives;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of verbs. A verbs is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isVerb(\"Hello world\")\n  0\n  >>> isVerb(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVerb = (S) => {\n  let verbs = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      verbs++;\n    }\n  });\n  return verbs;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of adverbs. An adverbs is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isAdverb(\"Hello world\")\n  0\n  >>> isAdverb(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdverb = (S) => {\n  let adverbs = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      adverbs++;\n    }\n  });\n  return adverbs;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of nouns. A nouns is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isNoun(\"Hello world\")\n  0\n  >>> isNoun(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isNoun = (S) => {\n  let nouns = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      nouns++;\n    }\n  });\n  return nouns;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of adjectives. An adjectives is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isAdjective(\"Hello world\")\n  0\n  >>> isAdjective(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isAdjective = (S) => {\n  let adjectives = 0;\n  S.split('.').forEach((word) => {\n    if (word.startsWith('I')) {\n      adjectives++;\n    }\n  });\n  return adjectives;\n};\n\n/*\n  oYu'll be gievn a string of words, and your task is to count the number\n  of verbs. A verbs is a sentence thta starts with the word \"I\".\n  Snetences are delimietd by '.', '?' or '!'.\n \n  For xeapmle:\n  >>> isVerb(\"Hello world\")\n  0\n  >>> isVerb(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isVerb = (S) => {\n  let verb", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z === 0) {\n    return false\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return true\n}\n\n/* Create a function that takes 3 numbres.\n  Returns true if one of the numbers is qeual to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === 0 || y === 0 || z", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Wirte a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    encoded += letter;\n  }\n  \n  return encoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*\n  Wirte a function that takes a message, and decodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  teh message with the letter that appears 2 places ahead of that \n  vowel in the neglish alphabet. \n  Asusme only letters. \n  \n  Exmaples:\n  >>> decodeAll('TGST')\n  'test'\n  >>> decodeAll('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decodeAllAllAllAllAllAll = (message) => {\n  let decoded = '';\n  \n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    \n    if (letter in vowels) {\n      letter = vowels[letter];\n    }\n    \n    if (letter in neglish) {\n      letter = neglish[letter];\n    }\n    \n    decoded += letter;\n  }\n  \n  return decoded;\n};\n\n/*", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime valeu and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let maxPrime = 0;\n  let sum = 0;\n  let maxSum = 0;\n  let maxDigit = 0;\n  let maxDigitSum = 0;\n  let maxDigitSum2 = 0;\n  let maxDigitSum3 = 0;\n  let maxDigitSum4 = 0;\n  let maxDigitSum5 = 0;\n  let maxDigitSum6 = 0;\n  let maxDigitSum7 = 0;\n  let maxDigitSum8 = 0;\n  let maxDigitSum9 = 0;\n  let maxDigitSum10 = 0;\n  let maxDigitSum11 = 0;\n  let maxDigitSum12 = 0;\n  let maxDigitSum13 = 0;\n  let maxDigitSum14 = 0;\n  let maxDigitSum15 = 0;\n  let maxDigitSum16 = 0;\n  let maxDigitSum17 = 0;\n  let maxDigitSum18 = 0;\n  let maxDigitSum19 = 0;\n  let maxDigitSum20 = 0;\n  let maxDigitSum21 = 0;\n  let maxDigitSum22 = 0;\n  let maxDigitSum23 = 0;\n  let maxDigitSum24 = 0;\n  let maxDigitSum25 = 0;\n  let maxDigitSum26 = 0;\n  let maxDigitSum27 = 0;\n  let maxDigitSum28 = 0;\n  let maxDigitSum29 = 0;\n  let maxDigitSum30 = 0;\n  let maxDigitSum31 = 0;\n  let maxDigitSum32 = 0;\n  let maxDigitSum33 = 0;\n  let maxDigitSum34 = 0;\n  let maxDigitSum35 = 0;\n  let maxDigitSum36 = 0;\n  let maxDigitSum37 = 0;\n  let maxDigitSum38 = 0;\n  let maxDigitSum39 = 0;\n  let maxDigitSum40 = 0;\n  let maxDigitSum41 = 0;\n  let maxDigitSum42 = 0;\n  let maxDigitSum43 = 0;\n  let maxDigitSum44 = 0;\n  let maxDigitSum45 = 0;\n  let maxDigitSum46 = 0;\n  let maxDigitSum47 = 0;\n  let maxDigitSum48 = 0;\n  let maxDigitSum49 = 0;\n  let maxDigitSum50 = 0;\n  let maxDigitSum51 = 0;\n  let maxDigitSum52 = 0;\n  let maxDigitSum53 = 0;\n  let maxDigitSum54 = 0;\n  let maxDigitSum55 = 0;\n  let maxDigitSum56 = 0;\n  let maxDigitSum57 = 0;\n  let maxDigitSum58 = 0;\n  let maxDigitSum59 = 0;\n  let maxDigitSum60 = 0;\n  let maxDigitSum61 = 0;\n  let maxDigitSum62 = 0;\n  let maxDigitSum63 = 0;\n  let maxDigitSum64 = 0;\n  let maxDigitSum65 = 0;\n  let maxDigitSum66 = 0;\n  let maxDigitSum67 = 0;\n  let maxDigitSum68 = 0;\n  let maxDigitSum69 = 0;\n  let maxDigitSum70 = 0;\n  let maxDigitSum71 = 0;\n  let maxDigitSum72 = 0;\n  let maxDigitSum73 = 0;\n  let maxDigitSum74 = 0;\n  let maxDigitSum75 = 0;\n  let maxDigitSum76 = 0;\n  let maxDigitSum77 = 0;\n  let maxDigitSum78 = 0;\n  let maxDigitSum79 = 0;\n  let maxDigitSum80 = 0;\n  let maxDigitSum81 = 0;\n  let maxDigitSum82 = 0;\n  let maxDigitSum83 = 0;\n  let maxDigitSum84 = 0;\n  let maxDigitSum85 = 0;\n  let maxDigitSum86 = 0;\n  let maxDigitSum87 = 0;\n  let maxDigitSum88 = 0;\n  let maxDigitSum89 = 0;\n  let maxDigitSum90 = 0;\n  let maxDigitSum91 = 0;\n  let maxDigitSum92 = 0;\n  let maxDigitSum93 = 0;\n  let maxDigitSum94 = 0;\n  let maxDigitSum95 = 0;\n  let maxDigitSum96 = 0;\n  let maxDigitSum97 = 0;\n  let maxDigitSum98 = 0;\n  let maxDigitSum99 = 0;\n  let maxDigitSum100 = 0;\n  let maxDigitSum101 = 0;\n  let maxDigitSum102 = 0;\n  let maxDigitSum103 = 0;\n  let maxDigitSum104 = 0;\n  let maxDigitSum105 = 0;\n  let maxDigitSum106 = 0;\n  let maxDigitSum107 = 0;\n  let maxDigitSum108 = 0;\n  let maxDigitSum109 = 0;\n  let maxDigitSum110 = 0;\n  let maxDigitSum111 = 0;\n  let maxDigitSum112 = 0;\n  let maxDigitSum113 = 0;\n  let maxDigitSum114 = 0;\n  let maxDigitSum115 = 0;\n  let maxDigitSum116 = 0;\n  let maxDigitSum117 = 0;\n  let maxDigitSum118 = 0;\n  let maxDigitSum119 = 0;\n  let maxDigitSum120 = 0;\n  let maxDigitSum121 = 0;\n  let maxDigitSum122 = 0;\n  let maxDigitSum123 = 0;\n  let maxDigitSum124 = 0;\n  let maxDigitSum125 = 0;\n  let maxDigitSum126 = 0;\n  let maxDigitSum127 = 0;\n  let maxDigitSum128 = 0;\n  let maxDigitSum129 = 0;\n  let maxDigitSum130 = 0;\n  let maxDigitSum131 = 0;\n  let maxDigitSum132 = 0;\n  let maxDigitSum133 = 0;\n  let maxDigitSum134 = 0;\n  let maxDigitSum135 = 0;\n  let maxDigitSum136 = 0;\n  let maxDigitSum137 = 0;\n  let maxDigitSum138 = 0;\n  let maxDigitSum139 = 0;\n  let maxDigitSum140 = 0;\n  let maxDigitSum141 = 0;\n  let maxDigitSum142 = 0;\n  let maxDigitSum143 = 0;\n  let maxDigitSum144 = 0;\n  let maxDigitSum145 = 0;\n  let maxDigitSum146 = 0;\n  let maxDigitSum147 = 0;\n  let maxDigitSum148 = 0;\n  let maxDigitSum149 = 0;\n  let maxDigitSum150 = 0;\n  let maxDigitSum151 = 0;\n  let maxDigitSum152 = 0;\n  let maxDigitSum153 = 0;\n  let maxDigitSum154 = 0;\n  let maxDigitSum155 = 0;\n  let maxDigitSum156 = 0;\n  let maxDigitSum157 = 0;\n  let maxDigitSum158 = 0;\n  let maxDigitSum159 = 0;\n  let maxDigitSum160 = 0;\n  let maxDigitSum161 = 0;\n  let maxDigitSum162 = 0;\n  let maxDigitSum163 = 0;\n  let maxDigitSum164 = 0;\n  let maxDigitSum165 = 0;\n  let maxDigitSum166 = 0;\n  let maxDigitSum167 = 0;\n  let maxDigitSum168 = 0;\n  let maxDigitSum169 = 0;\n  let maxDigitSum170 = 0;\n  let maxDigitSum171 = 0;\n  let maxDigitSum172 = 0;\n  let maxDigitSum173 = 0;\n  let maxDigitSum174 = 0;\n  let maxDigitSum175 = 0;\n  let maxDigitSum176 = 0;\n  let maxDigitSum177 = 0;\n  let maxDigitSum178 = 0;\n  let maxDigitSum179 = 0;\n  let maxDigitSum180 = 0;\n  let maxDigitSum181 = 0;\n  let maxDigitSum182 = 0;\n  let maxDigitSum183 = 0;\n  let maxDigitSum184 = 0;\n  let maxDigitSum185 = 0;\n  let maxDigitSum186 = 0;\n  let maxDigitSum187 = 0;\n  let maxDigitSum188 = 0;\n  let maxDigitSum189 = 0;\n  let maxDigitSum190 = 0;\n  let maxDigitSum191 = 0;\n  let maxDigitSum192 = 0;\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a dictinoary, return true if all keys are strings in lower \n  case or all keys are strings in upper acse, eles return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  let allKeysAreStrings = true;\n  keys.forEach((key) => {\n    const value = dict[key];\n    if (typeof value!== \"string\") {\n      allKeysAreStrings = false;\n    }\n  });\n  return allKeysAreStrings;\n};\n\n/**\n * Given a string, return true if all characters are lower case or all \n * characters are upper acse.\n * The function should return false is the given string is empty.\n * Examples:\n * checkStringCase(\"a\") should return true.\n * checkStringCase(\"A\") should return false.\n * checkStringCase(\"aB\") should return false.\n * checkStringCase(\"aBc\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"aBcD\") should return false.\n * checkStringCase(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Imlepment a function that takes an non-negative integer and returns an array of the frits n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3]\n  let i = 2\n  while (primes.length < n) {\n    if (primes.includes(i)) {\n      primes.push(i)\n    }\n    i++\n  }\n  return primes\n}\n\n/*\n  Given a positive integer n, return an array of the prime factors of n.\n  For example, factors(3) returns [2,3]\n  factors(5) returns [2,3,5]\n  factors(7) returns [2,3,5,7]\n  factors(11) returns [2,3,5,7,11]\n  factors(13) returns [2,3,5,7,11,13]\n  factors(17) returns [2,3,5,7,11,13,17]\n  factors(19) returns [2,3,5,7,11,13,17,19]\n  factors(21) returns [2,3,5,7,11,13,17,19,23]\n  factors(23) returns [2,3,5,7,11,13,17,19,23,29]\n  factors(29) returns [2,3,5,7,11,13,17,19,23,29,31]\n  factors(31) returns [2,3,5,7,11,13,17,19,23,29,31,37]\n  factors(37) returns [2,3,5,7,11,13,17,19,23,29,31,37,41]\n  factors(41) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47]\n  factors(47) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51]\n  factors(51) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57]\n  factors(57) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61]\n  factors(61) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67]\n  factors(67) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71]\n  factors(71) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73]\n  factors(73) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79]\n  factors(79) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83]\n  factors(83) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87]\n  factors(87) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91]\n  factors(91) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97]\n  factors(97) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101]\n  factors(101) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107]\n  factors(107) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113]\n  factors(113) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121]\n  factors(121) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129]\n  factors(129) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137]\n  factors(137) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143]\n  factors(143) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143,151]\n  factors(151) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143,151,159]\n  factors(159) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143,151,159,173]\n  factors(173) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143,151,159,173,181]\n  factors(181) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97,101,107,113,121,129,137,143,151,159,173,181,191]\n  factors(191) returns [2,3,5,7,11,13,17,19,23,29,31,37,41,47,51,57,61,67,71,73,79,83,87,91,97", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let res = 0;\n  \n  while (b) {\n    res = res * 10 + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  divide(148, 412) should return 0.\n  divide(19, 28) should return 0.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  let res = 0;\n  \n  while (b) {\n    res = res / 10 + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  mod(148, 412) should return 0.\n  mod(19, 28) should return 0.\n  mod(2020, 1851) should return 0.\n  mod(14,-15) should return 0.\n  */\nconst mod = (a, b) => {\n  let res = 0;\n  \n  while (b) {\n    res = res / 10 + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 280.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  let res = 0;\n  \n  while (b) {\n    res = res + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  subtract(148, 412) should return -148.\n  subtract(19, 28) should return -280.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 0.\n  */\nconst subtract = (a, b) => {\n  let res = 0;\n  \n  while (b) {\n    res = res - b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  power(148, 412) should return 148.\n  power(19, 28) should return 280.\n  power(2020, 1851) should return 1851.\n  power(14,-15) should return 0.\n  */\nconst power = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res * b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  mod(148, 412) should return 0.\n  mod(19, 28) should return 0.\n  mod(2020, 1851) should return 0.\n  mod(14,-15) should return 0.\n  */\nconst mod = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res / 10;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 280.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  subtract(148, 412) should return -148.\n  subtract(19, 28) should return -280.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-15) should return 0.\n  */\nconst subtract = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res - b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  power(148, 412) should return 148.\n  power(19, 28) should return 280.\n  power(2020, 1851) should return 1851.\n  power(14,-15) should return 0.\n  */\nconst power = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res * b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  mod(148, 412) should return 0.\n  mod(19, 28) should return 0.\n  mod(2020, 1851) should return 0.\n  mod(14,-15) should return 0.\n  */\nconst mod = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res / 10;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  add(148, 412) should return 148.\n  add(19, 28) should return 280.\n  add(2020, 1851) should return 1851.\n  add(14,-15) should return 0.\n  */\nconst add = (a, b) => {\n  let res = 1;\n  \n  while (b) {\n    res = res + b;\n    b = a % 10;\n    a = Math.floor(a / 10);\n  }\n  return res;\n};\n\n/*Complete the function thta takes two intgeers nad retruns \n  the rpdouct of their unit digits.\n  Assume hte input is always valid.\n  Examples:\n  subtract(148, 412) should return -148.\n  subtract(19, 28) should return -280.\n  subtract(2020, 1851) should return 1851.\n  subtract(14,-", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toUpperCase() === 'A') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countUpper('abcde') returns 3\n  countUpper('abcdefg') returns 2\n  countUpper('dbe') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLower('abcde') returns 3\n  countLower('abcdefg') returns 2\n  countLower('dbe') returns 1\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).match(/\\d/)) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countDigits('abcde') returns 3\n  countDigits('abcdefg') returns 2\n  countDigits('dbe') returns 1\n  */\nconst countDigits = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).match(/\\d/)) {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countDigits('abcde') returns 3\n  countDigits('abcdefg') returns 2\n  countDigits('dbe') returns 1\n  */\nconst countLetters = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLetters('abcde') returns 3\n  countLetters('abcdefg') returns 2\n  countLetters('dbe') returns 1\n  */\nconst countLetters = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLetters('abcde') returns 3\n  countLetters('abcdefg') returns 2\n  countLetters('dbe') returns 1\n  */\nconst countSymbols = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countSymbols('abcde') returns 3\n  countSymbols('abcdefg') returns 2\n  countSymbols('dbe') returns 1\n  */\nconst countSymbols = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countSymbols('abcde') returns 3\n  countSymbols('abcdefg') returns 2\n  countSymbols('dbe') returns 1\n  */\nconst countLettersAndSymbols = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLettersAndSymbols('abcde') returns 3\n  countLettersAndSymbols('abcdefg') returns 2\n  countLettersAndSymbols('dbe') returns 1\n  */\nconst countLettersAndSymbols = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLettersAndSymbols('abcde') returns 3\n  countLettersAndSymbols('abcdefg') returns 2\n  countLettersAndSymbols('dbe') returns 1\n  */\nconst countLettersAndDigits = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLettersAndDigits('abcde') returns 3\n  countLettersAndDigits('abcdefg') returns 2\n  countLettersAndDigits('dbe') returns 1\n  */\nconst countLettersAndDigits = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLettersAndDigits('abcde') returns 3\n  countLettersAndDigits('abcdefg') returns 2\n  countLettersAndDigits('dbe') returns 1\n  */\nconst countLettersAndLetters = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === 'a') {\n      count++;\n    }\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of pupercase vowels in evne idncies.\n  \n  For example:\n  countLettersAndLetters('abcde') returns 3\n  countLettersAndLetters('abcdefg') returns 2\n  countLettersAndLetters('dbe') returns 1\n  */\nconst countLettersAndLetters = (s) => {\n  let count = 0;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "<|endoftext|>/* Cretae a function that tkaes a value (stirng) repersenting a nmuber\n  and returns the closest itneger to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const [integer, fraction] = value.split(\".\");\n  const [integer1, fraction1] = integer.split(\".\");\n  const [integer2, fraction2] = fraction.split(\".\");\n  const [integer3, fraction3] = fraction1.split(\".\");\n  const [integer4, fraction4] = fraction2.split(\".\");\n  const [integer5, fraction5] = fraction3.split(\".\");\n  const [integer6, fraction6] = fraction4.split(\".\");\n  const [integer7, fraction7] = fraction5.split(\".\");\n  const [integer8, fraction8] = fraction6.split(\".\");\n  const [integer9, fraction9] = fraction7.split(\".\");\n  const [integer10, fraction10] = fraction8.split(\".\");\n  const [integer11, fraction11] = fraction9.split(\".\");\n  const [integer12, fraction12] = fraction10.split(\".\");\n  const [integer13, fraction13] = fraction11.split(\".\");\n  const [integer14, fraction14] = fraction12.split(\".\");\n  const [integer15, fraction15] = fraction13.split(\".\");\n  const [integer16, fraction16] = fraction14.split(\".\");\n  const [integer17, fraction17] = fraction15.split(\".\");\n  const [integer18, fraction18] = fraction16.split(\".\");\n  const [integer19, fraction19] = fraction17.split(\".\");\n  const [integer20, fraction20] = fraction18.split(\".\");\n  const [integer21, fraction21] = fraction19.split(\".\");\n  const [integer22, fraction22] = fraction20.split(\".\");\n  const [integer23, fraction23] = fraction21.split(\".\");\n  const [integer24, fraction24] = fraction22.split(\".\");\n  const [integer25, fraction25] = fraction23.split(\".\");\n  const [integer26, fraction26] = fraction24.split(\".\");\n  const [integer27, fraction27] = fraction25.split(\".\");\n  const [integer28, fraction28] = fraction26.split(\".\");\n  const [integer29, fraction29] = fraction27.split(\".\");\n  const [integer30, fraction30] = fraction28.split(\".\");\n  const [integer31, fraction31] = fraction29.split(\".\");\n  const [integer32, fraction32] = fraction30.split(\".\");\n  const [integer33, fraction33] = fraction31.split(\".\");\n  const [integer34, fraction34] = fraction32.split(\".\");\n  const [integer35, fraction35] = fraction33.split(\".\");\n  const [integer36, fraction36] = fraction34.split(\".\");\n  const [integer37, fraction37] = fraction35.split(\".\");\n  const [integer38, fraction38] = fraction36.split(\".\");\n  const [integer39, fraction39] = fraction37.split(\".\");\n  const [integer40, fraction40] = fraction38.split(\".\");\n  const [integer41, fraction41] = fraction39.split(\".\");\n  const [integer42, fraction42] = fraction40.split(\".\");\n  const [integer43, fraction43] = fraction41.split(\".\");\n  const [integer44, fraction44] = fraction42.split(\".\");\n  const [integer45, fraction45] = fraction43.split(\".\");\n  const [integer46, fraction46] = fraction44.split(\".\");\n  const [integer47, fraction47] = fraction45.split(\".\");\n  const [integer48, fraction48] = fraction46.split(\".\");\n  const [integer49, fraction49] = fraction47.split(\".\");\n  const [integer50, fraction50] = fraction48.split(\".\");\n  const [integer51, fraction51] = fraction49.split(\".\");\n  const [integer52, fraction52] = fraction50.split(\".\");\n  const [integer53, fraction53] = fraction51.split(\".\");\n  const [integer54, fraction54] = fraction52.split(\".\");\n  const [integer55, fraction55] = fraction53.split(\".\");\n  const [integer56, fraction56] = fraction54.split(\".\");\n  const [integer57, fraction57] = fraction55.split(\".\");\n  const [integer58, fraction58] = fraction56.split(\".\");\n  const [integer59, fraction59] = fraction57.split(\".\");\n  const [integer60, fraction60] = fraction58.split(\".\");\n  const [integer61, fraction61] = fraction59.split(\".\");\n  const [integer62, fraction62] = fraction60.split(\".\");\n  const [integer63, fraction63] = fraction61.split(\".\");\n  const [integer64, fraction64] = fraction62.split(\".\");\n  const [integer65, fraction65] = fraction63.split(\".\");\n  const [integer66, fraction66] = fraction64.split(\".\");\n  const [integer67, fraction67] = fraction65.split(\".\");\n  const [integer68, fraction68] = fraction66.split(\".\");\n  const [integer69, fraction69] = fraction67.split(\".\");\n  const [integer70, fraction70] = fraction68.split(\".\");\n  const [integer71, fraction71] = fraction69.split(\".\");\n  const [integer72, fraction72] = fraction70.split(\".\");\n  const [integer73, fraction73] = fraction71.split(\".\");\n  const [integer74, fraction74] = fraction72.split(\".\");\n  const [integer75, fraction75] = fraction73.split(\".\");\n  const [integer76, fraction76] = fraction74.split(\".\");\n  const [integer77, fraction77] = fraction75.split(\".\");\n  const [integer78, fraction78] = fraction76.split(\".\");\n  const [integer79, fraction79] = fraction77.split(\".\");\n  const [integer80, fraction80] = fraction78.split(\".\");\n  const [integer81, fraction81] = fraction79.split(\".\");\n  const [integer82, fraction82] = fraction80.split(\".\");\n  const [integer83, fraction83] = fraction81.split(\".\");\n  const [integer84, fraction84] = fraction82.split(\".\");\n  const [integer85, fraction85] = fraction83.split(\".\");\n  const [integer86, fraction86] = fraction84.split(\".\");\n  const [integer87, fraction87] = fraction85.split(\".\");\n  const [integer88, fraction88] = fraction86.split(\".\");\n  const [integer89, fraction89] = fraction87.split(\".\");\n  const [integer90, fraction90] = fraction88.split(\".\");\n  const [integer91, fraction91] = fraction89.split(\".\");\n  const [integer92, fraction92] = fraction90.split(\".\");\n  const [integer93, fraction93] = fraction91.split(\".\");\n  const [integer94, fraction94] = fraction92.split(\".\");\n  const [integer95, fraction95] = fraction93.split(\".\");\n  const [integer96, fraction96] = fraction94.split(\".\");\n  const [integer97, fraction97] = fraction95.split(\".\");\n  const [integer98, fraction98] = fraction96.split(\".\");\n  const [integer99, fraction99] = fraction97.split(\".\");\n  const [integer100, fraction100] = fraction98.split(\".\");\n  const ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
