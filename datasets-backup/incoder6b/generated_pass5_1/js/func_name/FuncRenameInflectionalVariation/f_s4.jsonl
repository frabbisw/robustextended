{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Check if given array has any two elements closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return false;\n    }\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const groups = [];\n  let group_open = false;\n  let group_closed = false;\n  let current_group = [];\n  let current_group_length = 0;\n  let current_group_open_brace_count = 0;\n  let current_group_closed_brace_count = 0;\n  let current_group_open_brace_position = 0;\n  let current_group_closed_brace_position = 0;\n  let current_group_open_brace_position_in_string = 0;\n  let current_group_closed_brace_position_in_string = 0;\n  let current_group_open_brace_position_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_closed_brace_position_in_paren_string_in_paren_string_in_paren_string_in_paren_string_in_paren_string = 0;\n  let current_group_open_b", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  const prefix = string.slice(0, postfix.length);\n  return prefix + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr[arr.length - 1]);\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", startsWith(\"H\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", startsWith(\"o\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, startsWith) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.startsWith(startsWith));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", endsWith(\"o\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", endsWith(\"e\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, endsWith) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.endsWith(endsWith));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", contains(\"n\")) == [\"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", contains(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, contains) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.includes(contains));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", doesNotContain(\"n\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", doesNotContain(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, doesNotContain) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word =>!word.includes(doesNotContain));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter and end with a given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", startsWith(\"H\"), endsWith(\"o\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", startsWith(\"o\"), endsWith(\"e\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, startsWith, endsWith) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.startsWith(startsWith) && word.endsWith(endsWith));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter and contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", startsWith(\"H\"), contains(\"n\")) == [\"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", startsWith(\"o\"), contains(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, startsWith, contains) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.startsWith(startsWith) && word.includes(contains));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a given letter and contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", endsWith(\"o\"), contains(\"n\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", endsWith(\"e\"), contains(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, endsWith, contains) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.endsWith(endsWith) && word.includes(contains));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the given letter and contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", contains(\"n\"), contains(\"n\")) == [\"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", contains(\"n\"), contains(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, contains, contains) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word => word.includes(contains) && word.includes(contains));\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter and contain the given letter.\n  \n  For example:\n  wordString(\"Hi, my name is John\", doesNotContain(\"n\"), contains(\"n\")) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\", doesNotContain(\"n\"), contains(\"n\")) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s, doesNotContain, contains) => {\n  const words = s.split(/,|\\s/);\n  return words.map(word => word.trim()).filter(word =>!word.includes(doesNotContain) && word.includes(contains));\n};\n\n/*\n  You will be given a string of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNum(x - 2, y);\n  }\n  return chooseNum(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 13\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumOdd(x - 2, y);\n  }\n  return chooseNumOdd(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRange(x - 2, y);\n  }\n  return chooseNumInRange(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeOdd(x - 2, y);\n  }\n  return chooseNumInRangeOdd(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRange(x - 2, y);\n  }\n  return chooseNumInRangeInRange(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRangeOdd(x - 2, y);\n  }\n  return chooseNumInRangeInRangeOdd(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRangeInRange(x - 2, y);\n  }\n  return chooseNumInRangeInRangeInRange(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRangeInRangeOdd(x - 2, y);\n  }\n  return chooseNumInRangeInRangeInRangeOdd(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRangeInRangeInRange(x - 2, y);\n  }\n  return chooseNumInRangeInRangeInRangeInRange(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeInRangeInRangeOdd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return y;\n  }\n  if (y % 2 === 0) {\n    return x;\n  }\n  if (x > y) {\n    return chooseNumInRangeInRangeInRangeInRangeOdd(x - 2, y);\n  }\n  return chooseNumInRangeInRangeInRangeInRangeOdd(x, y - 2);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseNumInRangeInRangeInRangeInRangeInRange = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg * Math.pow(10, 2)) / Math.pow(10, 2);\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  if (n > m) return -1;\n  const arr = [...Array(n + 1).keys()];\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n  return Math.round(avg", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigitAndOddDigit = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let result = [];\n  let ones = arr.filter((num) => num === 1);\n  let twos = arr.filter((num) => num === 2);\n  let threes = arr.filter((num) => num === 3);\n  let fours = arr.filter((num) => num === 4);\n  let fives = arr.filter((num) => num === 5);\n  let sixes = arr.filter((num) => num === 6);\n  let sevens = arr.filter((num) => num === 7);\n  let eights = arr.filter((num) => num === 8);\n  let nines = arr.filter((num) => num === 9);\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : [];\n  sevens = sevens.length? sevens : [];\n  eights = eights.length? eights : [];\n  nines = nines.length? nines : [];\n  \n  ones = ones.length? ones : [];\n  twos = twos.length? twos : [];\n  threes = threes.length? threes : [];\n  fours = fours.length? fours : [];\n  fives = fives.length? fives : [];\n  sixes = sixes.length? sixes : ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * i);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// TESTS\nconst tests = [\n  [2, [1, 2, 4, 8, 16]],\n  [3, [1, 2, 6, 24]],\n  [4, [1, 2, 6, 24]],\n  [5, [1, 2, 6, 24]],\n  [6, [1, 2, 6, 24]],\n  [7, [1, 2, 6, 24]],\n  [8, [1, 2, 6, 24]],\n  [9, [1, 2, 6, 24]],\n  [10, [1, 2, 6, 24]],\n  [11, [1, 2, 6, 24]],\n  [12, [1, 2, 6, 24]],\n  [13, [1, 2, 6, 24]],\n  [14, [1, 2, 6, 24]],\n  [15, [1, 2, 6, 24]],\n  [16, [1, 2, 6, 24]],\n  [17, [1, 2, 6, 24]],\n  [18, [1, 2, 6, 24]],\n  [19, [1, 2, 6, 24]],\n  [20, [1, 2, 6, 24]],\n  [21, [1, 2, 6, 24]],\n  [22, [1, 2, 6, 24]],\n  [23, [1, 2, 6, 24]],\n  [24, [1, 2, 6, 24]],\n  [25, [1, 2, 6, 24]],\n  [26, [1, 2, 6, 24]],\n  [27, [1, 2, 6, 24]],\n  [28, [1, 2, 6, 24]],\n  [29, [1, 2, 6, 24]],\n  [30, [1, 2, 6, 24]],\n  [31, [1, 2, 6, 24]],\n  [32, [1, 2, 6, 24]],\n  [33, [1, 2, 6, 24]],\n  [34, [1, 2, 6, 24]],\n  [35, [1, 2, 6, 24]],\n  [36, [1, 2, 6, 24]],\n  [37, [1, 2, 6, 24]],\n  [38, [1, 2, 6, 24]],\n  [39, [1, 2, 6, 24]],\n  [40, [1, 2, 6, 24]],\n  [41, [1, 2, 6, 24]],\n  [42, [1, 2, 6, 24]],\n  [43, [1, 2, 6, 24]],\n  [44, [1, 2, 6, 24]],\n  [45, [1, 2, 6, 24]],\n  [46, [1, 2, 6, 24]],\n  [47, [1, 2, 6, 24]],\n  [48, [1, 2, 6, 24]],\n  [49, [1, 2, 6, 24]],\n  [50, [1, 2, 6, 24]],\n  [51, [1, 2, 6, 24]],\n  [52, [1, 2, 6, 24]],\n  [53, [1, 2, 6, 24]],\n  [54, [1, 2, 6, 24]],\n  [55, [1, 2, 6, 24]],\n  [56, [1, 2, 6, 24]],\n  [57, [1, 2, 6, 24]],\n  [58, [1, 2, 6, 24]],\n  [59, [1, 2, 6, 24]],\n  [60, [1, 2, 6, 24]],\n  [61, [1, 2, 6, 24]],\n  [62, [1, 2, 6, 24]],\n  [63, [1, 2, 6, 24]],\n  [64, [1, 2, 6, 24]],\n  [65, [1, 2, 6, 24]],\n  [66, [1, 2, 6, 24]],\n  [67, [1, 2, 6, 24]],\n  [68, [1, 2, 6, 24]],\n  [69, [1, 2, 6, 24]],\n  [70, [1, 2, 6, 24]],\n  [71, [1, 2, 6, 24]],\n  [72, [1, 2, 6, 24]],\n  [73, [1, 2, 6, 24]],\n  [74, [1, 2, 6, 24]],\n  [75, [1, 2, 6, 24]],\n  [76, [1, 2, 6, 24]],\n  [77, [1, 2, 6, 24]],\n  [78, [1, 2, 6, 24]],\n  [79, [1, 2, 6, 24]],\n  [80, [1, 2, 6, 24]],\n  [81, [1, 2, 6, 24]],\n  [82, [1, 2, 6, 24]],\n  [83, [1, 2, 6, 24]],\n  [84, [1, 2, 6, 24]],\n  [85, [1, 2, 6, 24]],\n  [86, [1, 2, 6, 24]],\n  [87, [1, 2, 6, 24]],\n  [88, [1, 2, 6, 24]],\n  [89, [1, 2, 6, 24]],\n  [90, [1, 2, 6, 24]],\n  [91, [1, 2, 6, 24]],\n  [92, [1, 2, 6, 24]],\n  [93, [1, 2, 6, 24]],\n  [94, [1, 2, 6, 24]],\n  [95, [1, 2, 6, 24]],\n  [96, [1, 2, 6, 24]],\n  [97, [1, 2, 6, 24]],\n  [98, [1, 2, 6, 24]],\n  [99, [1, 2, 6, 24]],\n  [100, [1, 2, 6, 24]],\n  [101, [1, 2, 6, 24]],\n  [102, [1, 2, 6, 24]],\n  [103, [1, 2, 6, 24]],\n  [104, [1, 2, 6, 24]],\n  [105, [1, 2, 6, 24]],\n  [106, [1, 2, 6, 24]],\n  [107, [1, 2, 6, 24]],\n  [108, [1, 2, 6, 24]],\n  [109, [1, 2, 6, 24]],\n  [110, [1, 2, 6, 24]],\n  [111, [1, 2, 6, 24]],\n  [112, [1, 2, 6, 24]],\n  [113, [1, 2, 6, 24]],\n  [114, [1, 2, 6, 24]],\n  [115, [1, 2, 6, 24]],\n  [116, [1, 2, 6, 24]],\n  [117, [1, 2, 6, 24]],\n  [118, [1, 2, 6, 24]],\n  [119, [1, 2, 6, 24]],\n  [120, [1, 2, 6, 24]],\n  [121, [1, 2, 6, 24]],\n  [122, [1, 2, 6, 24]],\n  [123, [1, 2, 6, 24]],\n  [124, [1, 2, 6, 24]],\n  [125, [1, 2, 6, 24]],\n  [126, [1, 2, 6, 24]],\n  [127, [1, 2, 6, 24]],\n  [128, [1, 2, 6, 24]],\n  [129, [1, 2, 6, 24]],\n  [130, [1, 2, 6, 24]],\n  [131, [1, 2, 6, 24]],\n  [132, [1, 2, 6, 24]],\n  [133, [1, 2, 6, 24]],\n  [134, [1, 2, 6, 24]],\n  [135, [1, 2, 6, 24]],\n  [136, [1, 2, 6, 24]],\n  [137, [1, 2, 6, 24]],\n  [138, [1, 2, 6, 24]],\n  [139, [1, 2, 6, 24]],\n  [140, [1, 2, 6, 24]],\n  [141, [1, 2, 6, 24]],\n  [142, [1, 2, 6, 24]],\n  [143, [1, 2, 6, 24]],\n  [144, [1, 2, 6, 24]],\n  [145, [1, 2, 6, 24]],\n  [146, [1, 2, 6, 24]],\n  [147, [1, 2, 6, 24]],\n  [148, [1, 2, 6, 24]],\n  [149, [1, 2, 6, 24]],\n  [150, [1, 2, 6, 24]],\n  [151, [1, 2, 6, 24]],\n  [152, [1, 2, 6, 24]],\n  [153, [1, 2, 6, 24]],\n  [154, [1, 2, 6, 24]],\n  [155, [1, 2, 6, 24]],\n  [156, [1, 2, 6, 24]],\n  [157, [1, 2, 6, 24]],\n  [158, [1, 2, 6, 24]],\n  [159, [1, 2, 6, 24]],\n  [160, [1, 2, 6, 24]],\n  [161, [1, 2, 6, 24]],\n  [162, [1, 2, 6, 24]],\n  [163, [1, 2, 6, 24]],\n  [164, [1, 2, 6, 24]],\n  [165, [1, 2, 6, 24]],\n  [166, [1, 2, 6, 24]],\n  [167, [1, 2, 6, 24]],\n  [168, [1, 2, 6, 24]],\n  [169, [1, 2, 6, 24]],\n  [170, [1, 2, 6, 24]],\n  [171, [1, 2, 6, 24]],\n  [172, [1, 2, 6, 24]],\n  [173, [1, 2, 6, 24]],\n  [174, [1, 2, 6, 24]],\n  [175, [1, 2, 6, 24]],\n  [176, [1, 2, 6, 24]],\n  [177, [1, 2, 6, 24]],\n  [178, [1, 2, 6, 24]],", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = isPalindrome(i);\n    const isOddPalindrome = isPalindrome(n - i);\n\n    if (isEvenPalindrome && isOddPalindrome) {\n      evenPalindromes++;\n    } else if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOdderPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall\n  within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = isPalindrome(i);\n    const isOddPalindrome = isPalindrome(n - i);\n\n    if (isEvenPalindrome && isOddPalindrome) {\n      evenPalindromes++;\n    } else if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOdderPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall\n  within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = isPalindrome(i);\n    const isOddPalindrome = isPalindrome(n - i);\n\n    if (isEvenPalindrome && isOddPalindrome) {\n      evenPalindromes++;\n    } else if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOdderPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall\n  within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = isPalindrome(i);\n    const isOddPalindrome = isPalindrome(n - i);\n\n    if (isEvenPalindrome && isOddPalindrome) {\n      evenPalindromes++;\n    } else if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOdderPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall\n  within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let evenPalindromes = 0;\n  let oddPalindromes = 0;\n\n  for (let i = 1; i <= n; i++) {\n    const isEvenPalindrome = isPalindrome(i);\n    const isOddPalindrome = isPalindrome(n - i);\n\n    if (isEvenPalindrome && isOddPalindrome) {\n      evenPalindromes++;\n    } else if (isEvenPalindrome) {\n      evenPalindromes++;\n    } else {\n      oddPalindromes++;\n    }\n  }\n\n  return [evenPalindromes, oddPalindromes];\n};\n\nexport { evenOdderPalindrome };\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall\n  within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsNegZeroNegZeroNeg = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(arr[i] / 10) * 10;\n      count += arr[i] % 10;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNumsZeroNegZeroNegZero = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      count += arr[i];\n    } else {\n      count += Math.floor(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  const sortedArr = arr.sort((a, b) => a - b);\n  const sortedArrLength = sortedArr.length;\n  let rightShiftCount = 0;\n  for (let i = 0; i < sortedArrLength; i++) {\n    if (sortedArr[i] === sortedArr[sortedArrLength - 1]) {\n      rightShiftCount++;\n    }\n  }\n  if (rightShiftCount === sortedArrLength) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Given an array arr of N integers, your task is to determine if there are two \n  distinct elements arr[0], arr[1],..., arr[N-1] in the given array such that \n  arr[i]>arr[i+1] and arr[i]>arr[i+2]. \n  \n  Your task is to return the number of such pairs.\n  \n  Note: If there are multiple such pairs then your task is to return any of them.\n  \n  Example:\n  \n  distinctPairs([1, 2, 3, 1])==>1\n  distinctPairs([1, 2, 3, 2])==>1\n  distinctPairs([1, 2, 3, 3])==>0\n  distinctPairs([1, 2, 3, 4])==>0\n  distinctPairs([1, 2, 3, 4])==>0\n  distinctPairs([1, 2, 3, 5])==>0\n  distinctPairs([1, 2, 3, 6])==>0\n  distinctPairs([1, 2, 3, 7])==>0\n  distinctPairs([1, 2, 3, 8])==>0\n  distinctPairs([1, 2, 3, 9])==>0\n  distinctPairs([1, 2, 3, 10])==>0\n  distinctPairs([1, 2, 3, 11])==>0\n  distinctPairs([1, 2, 3, 12])==>0\n  distinctPairs([1, 2, 3, 13])==>0\n  distinctPairs([1, 2, 3, 14])==>0\n  distinctPairs([1, 2, 3, 15])==>0\n  distinctPairs([1, 2, 3, 16])==>0\n  distinctPairs([1, 2, 3, 17])==>0\n  distinctPairs([1, 2, 3, 18])==>0\n  distinctPairs([1, 2, 3, 19])==>0\n  distinctPairs([1, 2, 3, 20])==>0\n  distinctPairs([1, 2, 3, 21])==>0\n  distinctPairs([1, 2, 3, 22])==>0\n  distinctPairs([1, 2, 3, 23])==>0\n  distinctPairs([1, 2, 3, 24])==>0\n  distinctPairs([1, 2, 3, 25])==>0\n  distinctPairs([1, 2, 3, 26])==>0\n  distinctPairs([1, 2, 3, 27])==>0\n  distinctPairs([1, 2, 3, 28])==>0\n  distinctPairs([1, 2, 3, 29])==>0\n  distinctPairs([1, 2, 3, 30])==>0\n  distinctPairs([1, 2, 3, 31])==>0\n  distinctPairs([1, 2, 3, 32])==>0\n  distinctPairs([1, 2, 3, 33])==>0\n  distinctPairs([1, 2, 3, 34])==>0\n  distinctPairs([1, 2, 3, 35])==>0\n  distinctPairs([1, 2, 3, 36])==>0\n  distinctPairs([1, 2, 3, 37])==>0\n  distinctPairs([1, 2, 3, 38])==>0\n  distinctPairs([1, 2, 3, 39])==>0\n  distinctPairs([1, 2, 3, 40])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 42])==>0\n  distinctPairs([1, 2, 3, 40])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n  distinctPairs([1, 2, 3, 41])==>0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/**\n * Converts string to array of bytes\n * @param {String} str String representation of binary array\n * @returns {Array} byte array representation of string\n */\nconst stringToBytes = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result;\n};\n\n/**\n * Converts array of bytes to string\n * @param {Array} arr byte array representation of string\n * @returns {String} string representation of binary array\n */\nconst bytesToString = arr => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(String.fromCharCode(arr[i]));\n  }\n  return result.join('');\n};\n\n/**\n * Converts string to hex representation of binary string\n * @param {String} str String representation of binary array\n * @returns {String} hex string representation of binary string\n */\nconst stringToHex = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(('0' + str.charCodeAt(i).toString(16)).substr(-2, 2));\n  }\n  return result.join('');\n};\n\n/**\n * Converts hex string to binary string\n * @param {String} str Hex string representation of binary array\n * @returns {String} Binary string representation of hex string\n */\nconst hexToBinary = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(parseInt(str.substr(i, 2), 16));\n  }\n  return result.join('');\n};\n\n/**\n * Converts number to its byte representation in string\n * @param {Number} num Number to convert\n * @returns {String} Byte representation of input number\n */\nconst numberToBytes = num => {\n  const result = [];\n  for (let i = 7; i >= 0; i--) {\n    result.unshift(num & 255);\n    num >>= 8;\n  }\n  return result;\n};\n\n/**\n * Converts number to its hex representation in string\n * @param {Number} num Number to convert\n * @returns {String} Hex representation of input number\n */\nconst numberToHex = num => {\n  const result = [];\n  for (let i = 7; i >= 0; i--) {\n    result.unshift(num.toString(16));\n    num >>= 8;\n  }\n  return result.join('');\n};\n\n/**\n * Converts string to its binary representation in string\n * @param {String} str String to convert\n * @returns {String} Binary representation of input string\n */\nconst stringToBinary = str => {\n  const result = [];\n  for (let i = 0; i < str.length; i++) {\n    result.push(str.charCodeAt(i));\n  }\n  return result.join('');\n};\n\n/**\n * Converts string to its JSON representation in string\n * @param {String} str String to convert\n * @returns {String} JSON representation of input string\n */\nconst stringToJson = str => {\n  return JSON.stringify(str);\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXml = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringStringString = str => {\n  return new DOMParser().parseFromString(str, 'text/xml');\n};\n\n/**\n * Converts string to its XML representation in string\n * @param {String} str String to convert\n * @returns {String} XML representation of input string\n */\nconst stringToXmlStringString", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  // Your code here\n}\n\n// Run tests\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 5, 3, 4])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45])); // \"NO\"\nconsole.log(exchanges([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const histogram = {};\n  const testArr = test.split(' ');\n  testArr.forEach((letter) => {\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return [result.join(''), i === s.length && j === c.length];\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that do not occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"bb\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(0, index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"abc\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters2 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that do not occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"bb\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters3 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(0, index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"abc\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters4 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that do not occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"bb\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters5 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(0, index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"abc\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters6 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(index));\n    i += 1;\n  }\n  return result.join('');\n};\n\n/*Task\n  You are given a string s and a number k.\n  Your task is to find the first k characters of s that do not occur in s.\n  Example\n  For s = \"abcabcbb\", and k = 3, the output should be \"bb\".\n  For s = \"bbbbb\", and k = 2, the output should be \"b\".\n  For s = \"pwwkew\", and k = 2, the output should be \"w\".\n  For s = \"pwwkew\", and k = 0, the output should be \"\".\n  For s = \"pwwkew\", and k = -1 the output should be \"\".\n*/\nconst firstKCharacters7 = (s, k) => {\n  if (k === 0) return '';\n  if (k === -1) return '';\n  if (k === 1) return s;\n  const result = [];\n  let i = 0;\n  while (i < k) {\n    const index = s.indexOf(i.toString(), 0);\n    if (index === -1) break;\n    result.push(s.slice(0, index));\n    i += 1;\n  }\n  return result.join('');", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return odd;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  return even;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return [even, odd];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return [even, odd];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return [even, odd];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenOddCount(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenOddCount = (lst) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 0) {\n        count++;\n      }\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    even.push(count);\n  }\n  for (let i = 0; i < lst.length; i++) {\n    let count = 0;\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] % 2 === 1) {\n        count++;\n      }\n    }\n    odd.push(count);\n  }\n  return [even, odd];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> evenOddCount(['1234567'])\n  [\"the number of even and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0;\n  const buckets = grid.map((row, index) => {\n    const bucket = new Array(capacity).fill(0);\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === 1) {\n        bucket[i % capacity] += 1;\n      }\n    }\n    return bucket;\n  });\n  for (let i = 0; i < buckets.length; i++) {\n    const bucket = buckets[i];\n    for (let j = 0; j < bucket.length; j++) {\n      if (bucket[j] > 0) {\n        count += bucket[j];\n      }\n    }\n  }\n  return count;\n};\n\nexport { maxFill };\n\n/*\n  You are given an array A of positive integers. \n  Each element of the array represents number of coins \n  that you will have to pay if you get this many coins.\n  You are given a target amount of money K. \n  Return the minimum number of coins you can \n  make to pay K using only coins in your array.\n  \n  Example 1:\n      Input: [1,2,1], K=10\n      Output: 3\n  \n  Example 2:\n      Input: [1,2], K=12\n      Output: 2\n  \n  Example 3:\n      Input: [1,2], K=11\n      Output: 0\n  \n  Example 4:\n      Input: [1,2], K=9\n      Output: 1\n  \n  Example 5:\n      Input: [1,2], K=8\n      Output: 0\n  \n  Example 6:\n      Input: [1,2], K=7\n      Output: 1\n  \n  Example 7:\n      Input: [1,2], K=6\n      Output: 0\n  \n  Example 8:\n      Input: [1,2], K=5\n      Output: 1\n  \n  Example 9:\n      Input: [1,2], K=4\n      Output: 0\n  \n  Example 10:\n      Input: [1,2], K=3\n      Output: 1\n  \n  Example 11:\n      Input: [1,2], K=2\n      Output: 0\n  \n  Example 12:\n      Input: [1,2], K=1\n      Output: 1\n  \n  Example 13:\n      Input: [1,2], K=0\n      Output: 0\n  \n  Constraints:\n      1 <= A.length <= 10^5\n      1 <= A[i] <= 10^5\n      0 <= K <= 10^9\n */\nconst minCoins = (A, K) => {\n  let count = 0;\n  for (let i = 0; i < A.length; i++) {\n    const coins = A[i];\n    if (coins > 0) {\n      count += coins;\n    }\n  }\n  if (count >= K) {\n    return 0;\n  }\n  for (let i = 0; i < A.length; i++) {\n    const coins = A[i];\n    if (coins < 0) {\n      count -= coins;\n    }\n  }\n  return count;\n};\n\nexport { minCoins };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Write a function to find the first missing positive integer in A.\n  \n  Example 1:\n      Input: [1,2,3]\n      Output: 2\n  \n  Example 2:\n      Input: [4,-1,1]\n      Output: 3\n  \n  Example 3:\n      Input: [7,-5,3,5]\n      Output: 4\n  \n  Example 4:\n      Input: [1,2,3]\n      Output: -1\n  \n  Example 5:\n      Input: [7,-5,3,5]\n      Output: -1\n  \n  Constraints:\n      1 <= N <= 10^5\n      -100 <= A[i] <= 100\n */\nconst firstMissingPositive = (A) => {\n  let i = 0;\n  while (i < A.length && A[i] < 0) {\n    i++;\n  }\n  return i;\n};\n\nexport { firstMissingPositive };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Write a function to find the first missing positive integer in A.\n  \n  Example 1:\n      Input: [1,2,3]\n      Output: 2\n  \n  Example 2:\n      Input: [4,-1,1]\n      Output: 3\n  \n  Example 3:\n      Input: [7,-5,3,5]\n      Output: 4\n  \n  Example 4:\n      Input: [1,2,3]\n      Output: -1\n  \n  Example 5:\n      Input: [7,-5,3,5]\n      Output: -1\n  \n  Constraints:\n      1 <= N <= 10^5\n      -100 <= A[i] <= 100\n */\nconst firstMissingPositive = (A) => {\n  let i = 0;\n  while (i < A.length && A[i] < 0) {\n    i++;\n  }\n  return i;\n};\n\nexport { firstMissingPositive };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Write a function to find the first missing positive integer in A.\n  \n  Example 1:\n      Input: [1,2,3]\n      Output: 2\n  \n  Example 2:\n      Input: [4,-1,1]\n      Output: 3\n  \n  Example 3:\n      Input: [7,-5,3,5]\n      Output: 4\n  \n  Example 4:\n      Input: [1,2,3]\n      Output: -1\n  \n  Example 5:\n      Input: [7,-5,3,5]\n      Output: -1\n  \n  Constraints:\n      1 <= N <= 10^5\n      -100 <= A[i] <= 100\n */\nconst firstMissingPositive = (A) => {\n  let i = 0;\n  while (i < A.length && A[i] < 0) {\n    i++;\n  }\n  return i;\n};\n\nexport { firstMissingPositive };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Write a function to find the first missing positive integer in A.\n  \n  Example 1:\n      Input: [1,2,3]\n      Output: 2\n  \n  Example 2:\n      Input: [4,-1,1]\n      Output: 3\n  \n  Example 3:\n      Input: [7,-5,3,5]\n      Output: 4\n  \n  Example 4:\n      Input: [1,2,3]\n      Output: -1\n  \n  Example 5:\n      Input: [7,-5,3,5]\n      Output: -1\n  \n  Constraints:\n      1 <= N <= 10^5\n      -100 <= A[i] <= 100\n */\nconst firstMissingPositive = (A) => {\n  let i = 0;\n  while (i < A.length && A[i] < 0) {\n    i++;\n  }\n  return i;\n};\n\nexport { firstMissingPositive };\n\n/*\n  You are given an integer array A consisting of N integers. \n  Write a function to find the first missing positive integer in A.\n  \n  Example 1:\n      Input: [1,2,3]\n      Output: 2\n  \n  Example 2:\n      Input: [4,-1,1]", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => a - b);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArrayDesc([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sortsArrayDesc([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArrayDesc([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArrayDesc = (arr) => {\n  const ones = arr.reduce((acc, val) => acc + (val & 1), 0);\n  const decimal = arr.sort((a, b) => b - a);\n  return decimal === ones? arr : decimal;\n};\n\n/*\n  In this ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + 1);\n    }\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) ==='') {\n      arr.push(s.substr(0, i));\n      s = s.substr(i + ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsCountFromRight = vowelsCount - 1;\n  let vowelsCountFromLeft = vowelsCount - 2;\n  let vowelsCountFromBoth = vowelsCount - 3;\n  let vowelsCountFromBothToRight = vowelsCount - 4;\n  let vowelsCountFromBothToLeft = vowelsCount - 5;\n  let vowelsCountFromBothToBoth = vowelsCount - 6;\n  let vowelsCountFromBothToBothToRight = vowelsCount - 7;\n  let vowelsCountFromBothToBothToLeft = vowelsCount - 8;\n  let vowelsCountFromBothToBothToBoth = vowelsCount - 9;\n  let vowelsCountFromBothToBothToBothToRight = vowelsCount - 10;\n  let vowelsCountFromBothToBothToBothToLeft = vowelsCount - 11;\n  let vowelsCountFromBothToBothToBothToBoth = vowelsCount - 12;\n  let vowelsCountFromBothToBothToBothToBothToRight = vowelsCount - 13;\n  let vowelsCountFromBothToBothToBothToBothToLeft = vowelsCount - 14;\n  let vowelsCountFromBothToBothToBothToBothToBoth = vowelsCount - 15;\n  let vowelsCountFromBothToBothToBothToBothToBothToRight = vowelsCount - 16;\n  let vowelsCountFromBothToBothToBothToBothToBothToLeft = vowelsCount - 17;\n  let vowelsCountFromBothToBothToBothToBothToBothToBoth = vowelsCount - 18;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToRight = vowelsCount - 19;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToLeft = vowelsCount - 20;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 21;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToRight = vowelsCount - 22;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToLeft = vowelsCount - 23;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 24;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToRight = vowelsCount - 25;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToLeft = vowelsCount - 26;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 27;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToRight = vowelsCount - 28;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToLeft = vowelsCount - 29;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 30;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToRight = vowelsCount - 31;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToLeft = vowelsCount - 32;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 33;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 34;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 35;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 36;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 37;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 38;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 39;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 40;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 41;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 42;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 43;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 44;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 45;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 46;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 47;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount - 48;\n  let vowelsCountFromBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBothToBoth = vowelsCount ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by removing some characters from S. For example, given S = '(ab)',\n  and T = '(ba)', return 'Yes', because we can construct T from '(ab)' by\n  removing 'a' and 'b' from S. Given S = '(ab)', and T = '(ab)', return\n  'No', because we can't construct T from '(ab)' by removing 'a' and 'b' from\n  S.\n  Return 'Yes' if it's possible to construct T from S, and return 'No' otherwise.\n  Examples:\n  canConstruct('(ab)', '(ba)') == 'Yes'\n  canConstruct('(ab)', '(ab)') == 'No'\n  */\nconst canConstruct = (S, T) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(i);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by adding some characters from S. For example, given S = '(ab)',\n  and T = '(ba)', return 'Yes', because we can construct T from '(ab)' by\n  adding 'a' and 'b' to S. Given S = '(ab)', and T = '(ab)', return\n  'No', because we can't construct T from '(ab)' by adding 'a' and 'b' to\n  S.\n  Return 'Yes' if it's possible to construct T from S, and return 'No' otherwise.\n  Examples:\n  canConstruct('(ab)', '(ab)') == 'Yes'\n  canConstruct('(ab)', '(ba)') == 'No'\n  */\nconst canConstruct = (S, T) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(i);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by replacing some characters from S. For example, given S = '(ab)',\n  and T = '(ba)', return 'Yes', because we can construct T from '(ab)' by\n  replacing 'a' with 'b' and 'b' with 'a' in S. Given S = '(ab)', and T = '(ab)',\n  return 'No', because we can't construct T from '(ab)' by replacing 'a' with\n  'b' and 'b' with 'a' in S.\n  Return 'Yes' if it's possible to construct T from S, and return 'No' otherwise.\n  Examples:\n  canConstruct('(ab)', '(ab)') == 'Yes'\n  canConstruct('(ab)', '(ba)') == 'No'\n  */\nconst canConstruct = (S, T) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(i);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by removing some characters from S and adding some characters from T.\n  For example, given S = '(ab)', and T = '(ba)', return 'Yes', because we\n  can construct T from '(ab)' by removing 'a' and 'b' from S, and adding\n  'a' and 'b' to T. Given S = '(ab)', and T = '(ab)', return 'No', because\n  we can't construct T from '(ab)' by removing 'a' and 'b' from S and adding\n  'a' and 'b' to T.\n  Return 'Yes' if it's possible to construct T from S, and return 'No' otherwise.\n  Examples:\n  canConstruct('(ab)', '(ba)') == 'Yes'\n  canConstruct('(ab)', '(ab)') == 'No'\n  */\nconst canConstruct = (S, T) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(i);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by adding some characters from S and removing some characters from T.\n  For example, given S = '(ab)', and T = '(ba)', return 'Yes', because we\n  can construct T from '(ab)' by adding 'a' and 'b' to S, and removing 'a' and\n  'b' from T. Given S = '(ab)', and T = '(ab)', return 'No', because we\n  can't construct T from '(ab)' by adding 'a' and 'b' to S and removing 'a' and\n  'b' from T.\n  Return 'Yes' if it's possible to construct T from S, and return 'No' otherwise.\n  Examples:\n  canConstruct('(ab)', '(ba)') == 'Yes'\n  canConstruct('(ab)', '(ab)') == 'No'\n  */\nconst canConstruct = (S, T) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(i);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, check if T can be constructed\n  from S by replacing some characters from S and adding some characters from T.\n  For example, given S = '(ab)', and T = '(ba)', return 'Yes', because we\n  can construct T from '(ab)' by replacing 'a' with 'b' and 'b' with 'a' in\n  S, and adding 'a' and 'b' to T. Given S = '(ab)', and T = '(ab)', return\n  'No', because we ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (!strings.length) return null\n  const longer = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longer.length) {\n      longer = strings[i]\n    }\n  }\n  return longer\n}\n\n/**\n * Return the shortest string in the list of strings.\n * Return null in case the input list is empty.\n * >>> shortest([])\n */\nconst shortest = (strings) => {\n  if (!strings.length) return null\n  return strings[0]\n}\n\n/**\n * Return the longest string in the list of strings.\n * Return null in case the input list is empty.\n * >>> longest([])\n */\nconst longest = (strings) => {\n  if (!strings.length) return null\n  return strings[strings.length - 1]\n}\n\n/**\n * Return the first string in the list of strings.\n * Return null in case the input list is empty.\n * >>> first([])\n */\nconst first = (strings) => {\n  if (!strings.length) return null\n  return strings[0]\n}\n\n/**\n * Return the last string in the list of strings.\n * Return null in case the input list is empty.\n * >>> last([])\n */\nconst last = (strings) => {\n  if (!strings.length) return null\n  return strings[strings.length - 1]\n}\n\n/**\n * Return the string with the first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalize([])\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter lower-cased.\n * Return null in case the input list is empty.\n * >>> lower([])\n */\nconst lower = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toLowerCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter upper-cased.\n * Return null in case the input list is empty.\n * >>> upper([])\n */\nconst upper = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter title-cased.\n * Return null in case the input list is empty.\n * >>> title([])\n */\nconst title = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalizeFirst([])\n */\nconst capitalizeFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter lower-cased.\n * Return null in case the input list is empty.\n * >>> lowerFirst([])\n */\nconst lowerFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toLowerCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter upper-cased.\n * Return null in case the input list is empty.\n * >>> upperFirst([])\n */\nconst upperFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter title-cased.\n * Return null in case the input list is empty.\n * >>> titleFirst([])\n */\nconst titleFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalize([])\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter lower-cased.\n * Return null in case the input list is empty.\n * >>> lower([])\n */\nconst lower = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toLowerCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter upper-cased.\n * Return null in case the input list is empty.\n * >>> upper([])\n */\nconst upper = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter title-cased.\n * Return null in case the input list is empty.\n * >>> title([])\n */\nconst title = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalizeFirst([])\n */\nconst capitalizeFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter lower-cased.\n * Return null in case the input list is empty.\n * >>> lowerFirst([])\n */\nconst lowerFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toLowerCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter upper-cased.\n * Return null in case the input list is empty.\n * >>> upperFirst([])\n */\nconst upperFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter title-cased.\n * Return null in case the input list is empty.\n * >>> titleFirst([])\n */\nconst titleFirst = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter capitalized.\n * Return null in case the input list is empty.\n * >>> capitalize([])\n */\nconst capitalize = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter lower-cased.\n * Return null in case the input list is empty.\n * >>> lower([])\n */\nconst lower = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toLowerCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter upper-cased.\n * Return null in case the input list is empty.\n * >>> upper([])\n */\nconst upper = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter title-cased.\n * Return null in case the input list is empty.\n * >>> title([])\n */\nconst title = (strings) => {\n  if (!strings.length) return null\n  return strings.map((s) => s[0].toUpperCase() + s.slice(1)).join('')\n}\n\n/**\n * Return the string with the first letter first letter capitalized.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === max) {\n      result.push(max);\n    }\n  }\n  return result;\n};\n\nexport { maximums };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimums = (arr, k) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (arr[i] === min) {\n      result.push(min);\n    }\n  }\n  return result;\n};\n\nexport { minimums };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the averages k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst averages = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(sum / k);\n  }\n  return result;\n};\n\nexport { averages };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the first k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst first = (arr, k) => {\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nexport { first };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the last k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, 1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst last = (arr, k) => {\n  const result = [];\n  for (let i = arr.length - 1; i >= k; i--) {\n    result.push(arr[i]);\n  }\n  return result;\n};\n\nexport { last };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers that appear k times in arr.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2, 1, 2, 3, 3], k = 2\n      Output: [1, 3, 3]\n\n  Example 2:\n\n      Input: arr = [1, 3, 3], k = 1\n      Output: [1, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst count = (arr, k) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < k; i++) {\n    count += arr.includes(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[count]);\n  }\n  return result;\n};\n\nexport { count };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers that appear more than k times in arr.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2, 1, 2, 3, 3], k = 2\n      Output: [1, 3, 3]\n\n  Example 2:\n\n      Input: arr = [1, 3, 3], k = 1\n      Output: [1, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst countMoreThan = (arr, k) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < k; i++) {\n    count += arr.includes(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    if (count >= k) {\n      result.push(arr[count]);\n    }\n  }\n  return result;\n};\n\nexport { countMoreThan };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers that appear less than k times in arr.\n\n  Example 1:\n\n      Input: arr = [1, 3, 2, 1, 2, 3, 3], k = 2\n      Output: [1, 3, 3]\n\n  Example 2:\n\n      Input: arr = [1, 3, 3], k = 1\n      Output: [1, 3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst countLessThan = (arr, k) => {\n  const result = [];\n  let count = 0;\n  for (let i = 0; i < k; i++) {\n    count += arr.includes(arr[i]);\n  }\n  for (let i = 0; i < k; i++) {\n    if (count < k) {\n      result.push(arr[count]);\n    }\n  }\n  return result;\n};\n\nexport { countLessThan };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the numbers that appear exactly k times in arr.\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  */\nconst concat = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i]);\n  }\n  return newArr.join('-');\n};\n\n/*Given a non-empty array of strings, return a new array where each element has been concatenated with the string \"-\".\n  \n\n  Examples\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['a', 'b', 'c', 'd']) ==> 'a-b-c-d'\n  concat(['", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let odderNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    odderNumbers.push(currentNumber);\n  }\n  return odderNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst gottenEvenCollatz = (n) => {\n  let evenNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    evenNumbers.push(currentNumber);\n  }\n  return evenNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenDescendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst gottenDescendingCollatz = (n) => {\n  let descendingNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    descendingNumbers.push(currentNumber);\n  }\n  return descendingNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in ascending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenAscendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst gottenAscendingCollatz = (n) => {\n  let ascendingNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    ascendingNumbers.push(currentNumber);\n  }\n  return ascendingNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenDescendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst gottenDescendingCollatz = (n) => {\n  let descendingNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    descendingNumbers.push(currentNumber);\n  }\n  return descendingNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in ascending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenAscendingCollatz(5) returns [5, 16, 8, 4, 2, 1]\n  */\nconst gottenAscendingCollatz = (n) => {\n  let ascendingNumbers = [];\n  let currentNumber = n;\n  while (currentNumber!== 1) {\n    if (currentNumber % 2 === 0) {\n      currentNumber = currentNumber / 2;\n    } else {\n      currentNumber = currentNumber * 3 + 1;\n    }\n    ascendingNumbers.push(currentNumber);\n  }\n  return ascendingNumbers;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the numbers in collatz sequence in descending order.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  let dateArray = date.split('-');\n  if(dateArray.length!== 3){\n    return false;\n  }\n  if(dateArray[0].length < 1 || dateArray[0].length > 2){\n    return false;\n  }\n  if(dateArray[1].length < 1 || dateArray[1].length > 2){\n    return false;\n  }\n  if(dateArray[2].length < 1 || dateArray[2].length > 4){\n    return false;\n  }\n  if(dateArray[0] > 12 || dateArray[0] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  if(dateArray[2] > 31 || dateArray[2] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  return true;\n}\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  let dateArray = date.split('-');\n  if(dateArray.length!== 3){\n    return false;\n  }\n  if(dateArray[0].length < 1 || dateArray[0].length > 2){\n    return false;\n  }\n  if(dateArray[1].length < 1 || dateArray[1].length > 2){\n    return false;\n  }\n  if(dateArray[2].length < 1 || dateArray[2].length > 4){\n    return false;\n  }\n  if(dateArray[0] > 12 || dateArray[0] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  if(dateArray[2] > 31 || dateArray[2] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  return true;\n}\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  let dateArray = date.split('-');\n  if(dateArray.length!== 3){\n    return false;\n  }\n  if(dateArray[0].length < 1 || dateArray[0].length > 2){\n    return false;\n  }\n  if(dateArray[1].length < 1 || dateArray[1].length > 2){\n    return false;\n  }\n  if(dateArray[2].length < 1 || dateArray[2].length > 4){\n    return false;\n  }\n  if(dateArray[0] > 12 || dateArray[0] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  if(dateArray[2] > 31 || dateArray[2] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  return true;\n}\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  let dateArray = date.split('-');\n  if(dateArray.length!== 3){\n    return false;\n  }\n  if(dateArray[0].length < 1 || dateArray[0].length > 2){\n    return false;\n  }\n  if(dateArray[1].length < 1 || dateArray[1].length > 2){\n    return false;\n  }\n  if(dateArray[2].length < 1 || dateArray[2].length > 4){\n    return false;\n  }\n  if(dateArray[0] > 12 || dateArray[0] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  if(dateArray[2] > 31 || dateArray[2] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  return true;\n}\n\n/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDesc = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDesc([5]) ➞ true\n  isSortDesc([1, 2, 3, 4, 5]) ➞ true\n  isSortDesc([1, 3, 2, 4, 5]) ➞ false\n  isSortDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortDesc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDescr = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDescr([5]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDescr = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDescr([5]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDescr = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDescr([5]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDescr = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, false);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDescr([5]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSortDescr([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortDescr([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortDescr = (lst) => {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (!map.has(val)) {\n      map.set(val, true);\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSortDescr([5]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5]) ➞ true\n  isSortDescr([1, 3, 2, 4, 5]) ➞ false\n  isSortDescr([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortDescr([1, 2, 3, 4, 5, 6, 7]) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    const temp = start1;\n    start1 = start2;\n    start2 = temp;\n  }\n  if (end1 < end2) {\n    const temp = end1;\n    end1 = end2;\n    end2 = temp;\n  }\n  if (start1 > end2) {\n    const temp = start2;\n    start2 = start1;\n    start1 = temp;\n  }\n  if (start2 > end1) {\n    const temp = end2;\n    end2 = end1;\n    end1 = temp;\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 > end2) {\n    return [\"NO\"];\n  }\n  if (start1 < start2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 > end1) {\n    return [\"NO\"];\n  }\n  if (start1 > end2 && end1 < end2) {\n    return [\"NO\"];\n  }\n  if (start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign2 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign3 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign4 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign5 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign6 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign7 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign8 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign9 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign10 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i) * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign11 = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const N = grid.length;\n  const M = grid[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3\n*/\nconst minSteps = (image) => {\n  const N = image.length;\n  const M = image[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3\n*/\nconst minSteps = (image) => {\n  const N = image.length;\n  const M = image[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3\n*/\nconst minSteps = (image) => {\n  const N = image.length;\n  const M = image[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3\n*/\nconst minSteps = (image) => {\n  const N = image.length;\n  const M = image[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3\n*/\nconst minSteps = (image) => {\n  const N = image.length;\n  const M = image[0].length;\n  const dp = Array(N * N).fill(0);\n  const visited = Array(N * N).fill(false);\n  const ans = [];\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (!visited[i * N + j]) {\n        dp[i * N + j] = Math.min(dp[i * N + j], dp[i * N + j - 1]);\n        visited[i * N + j] = true;\n      }\n    }\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < M; j++) {\n      if (dp[i * N + j] === dp[i * N + j - 1]) {\n        ans.push(i);\n      }\n    }\n  }\n  return ans.length;\n};\n\n/*\n  Given a 2D array representing an image, find the minimum number of steps \n  to reach the top-left corner of the image.\n\n  Input: image = [[1,2,3],[4,5,6],[7,8,9]]\n  Output: 3", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a < b) {\n    return gcd(b, a) % a;\n  }\n  return gcd(a, b) % b;\n};\n\n/**\n * Return the least common multiple of two or more integers\n * \n * @param {...number} numbers - The numbers to find the least common multiple of\n * @returns {number} The least common multiple of the numbers\n * @example\n * leastCommonMultiple(3, 4, 5)\n * // returns 24\n * leastCommonMultiple(3, 4, 5)\n * // returns 24\n * leastCommonMultiple(3, 4, 5)\n * // returns 24\n */\nconst leastCommonMultiple = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let min = 1;\n  let max = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  return min * max;\n};\n\n/**\n * Return the greatest common divisor of a and b\n * \n * @param {number} a The first number\n * @param {number} b The second number\n * @returns {number} The greatest common divisor of a and b\n * @example\n * gcd(3, 5)\n * // returns 1\n * gcd(25, 15)\n * // returns 5\n */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/**\n * Return the least common multiple of a and b\n * \n * @param {number} a The first number\n * @param {number} b The second number\n * @returns {number} The least common multiple of a and b\n * @example\n * lcm(3, 5)\n * // returns 3\n * lcm(25, 15)\n * // returns 30\n */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n/**\n * Return the sum of the numbers in an array\n * \n * @param {...number} numbers - The numbers to sum\n * @returns {number} The sum of the numbers\n * @example\n * sum([1, 2, 3])\n * // returns 6\n * sum([1, 2, 3])\n * // returns 6\n * sum([1, 2, 3])\n * // returns 6\n */\nconst sum = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst product = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst average = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n  return product / numbers.length;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst max = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst min = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let min = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst median = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let numberArray = numbers.sort((a, b) => a - b);\n  let middle = Math.floor(numberArray.length / 2);\n  let median = numberArray[middle];\n  return median;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst mode = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let modes = [];\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let count = numbers.filter(n => n === numbers[i]).length;\n    if (count > maxCount) {\n      maxCount = count;\n      modes = [numbers[i]];\n    } else if (count === maxCount) {\n      modes.push(numbers[i]);\n    }\n  }\n  return modes;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst variance = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let mean = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  mean = mean / numbers.length;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  variance = variance / numbers.length;\n  return variance;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst standardDeviation = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let mean = 0;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    mean += numbers[i];\n  }\n  mean = mean / numbers.length;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += Math.pow(numbers[i] - mean, 2);\n  }\n  variance = variance / numbers.length;\n  return Math.sqrt(variance);\n};\n\n/**\n * Return the product of the numbers in an array\n * \n * @param {...number} numbers - The numbers to product\n * @returns {number} The product of the numbers\n * @example\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n * product([1, 2, 3])\n * // returns 6\n */\nconst sum = () => {\n  let numbers = Array.prototype.slice.call(arguments);\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/**\n * Return the product of the numbers in an array\n * \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  let first = 1;\n  let second = 1;\n  let third = 1;\n  for (let i = 1; i <= n; i++) {\n    arr.push(first);\n    arr.push(second);\n    arr.push(third);\n    first = second + third;\n    second = third;\n    third = first + second;\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is even.\n  spiral(n) = spiral(n - 2) * spiral(n - 3) if n is odd.\n  For example:\n  spiral(3) = spiral(1) + spiral(2) * spiral(3)\n         = 1 * 2 * 3\n         = 3\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral sequence.\n  Examples:\n  spiral(3) = [1, 2, 3, 6]\n  */\nconst spiral = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral square, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral square.\n  Spiral square is defined by the recurrence:\n  spiralSquare(1) = 1\n  spiralSquare(n) = n * spiralSquare(n - 1), if n is even.\n  spiralSquare(n) = spiralSquare(n - 2) * spiralSquare(n - 3) if n is odd.\n  For example:\n  spiralSquare(3) = spiralSquare(1) + spiralSquare(2) * spiralSquare(3)\n         = 1 * 2 * 3\n         = 3\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral square.\n  Examples:\n  spiralSquare(3) = [1, 2, 3, 6]\n  */\nconst spiralSquare = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral cube, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral cube.\n  Spiral cube is defined by the recurrence:\n  spiralCube(1) = 1\n  spiralCube(n) = n * spiralCube(n - 1), if n is even.\n  spiralCube(n) = spiralCube(n - 2) * spiralCube(n - 3) if n is odd.\n  For example:\n  spiralCube(3) = spiralCube(1) + spiralCube(2) * spiralCube(3)\n         = 1 * 2 * 3\n         = 3\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral cube.\n  Examples:\n  spiralCube(3) = [1, 2, 3, 6]\n  */\nconst spiralCube = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral increment, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral increment.\n  Spiral increment is defined by the recurrence:\n  spiralIncrement(1) = 1\n  spiralIncrement(n) = n * spiralIncrement(n - 1), if n is even.\n  spiralIncrement(n) = spiralIncrement(n - 2) * spiralIncrement(n - 3) if n is odd.\n  For example:\n  spiralIncrement(3) = spiralIncrement(1) + spiralIncrement(2) * spiralIncrement(3)\n         = 1 * 2 * 3\n         = 3\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral increment.\n  Examples:\n  spiralIncrement(3) = [1, 2, 3, 6]\n  */\nconst spiralIncrement = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral decrement, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral decrement.\n  Spiral decrement is defined by the recurrence:\n  spiralDecrement(1) = 1\n  spiralDecrement(n) = n * spiralDecrement(n - 1), if n is even.\n  spiralDecrement(n) = spiralDecrement(n - 2) * spiralDecrement(n - 3) if n is odd.\n  For example:\n  spiralDecrement(3) = spiralDecrement(1) + spiralDecrement(2) * spiralDecrement(3)\n         = 1 * 2 * 3\n         = 3\n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Spiral decrement.\n  Examples:\n  spiralDecrement(3) = [1, 2, 3, 6]\n  */\nconst spiralDecrement = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral increment, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral increment.\n  Spiral increment is defined by the recurrence:\n  spiralIncrement(1) = 1\n  spiralIncrement(n) = n * spiralIncrement(n - 1), if n is even.\n  spiralIncrement(n) = spiralIncrement(n - 2) * spiralIncrement(n - 3) if n is odd.\n  For example:\n  spiralIncrement(3) = spiralIncrement(1) + spiralIncrement(2) * spiralIncrement(3)\n         = 1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i % 2? i : 1;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of its digits.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 4\n  digit(235) == 6\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 2.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 8\n  digit(235) == 42\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 3.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 9\n  digit(235) == 73\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 4.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 16\n  digit(235) == 128\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 5.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 25\n  digit(235) == 125\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 6.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 36\n  digit(235) == 126\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 7.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 49\n  digit(235) == 127\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 8.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 64\n  digit(235) == 128\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 9.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 81\n  digit(235) == 129\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 10.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 100\n  digit(235) == 130\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 11.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 111\n  digit(235) == 131\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 12.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 112\n  digit(235) == 132\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 13.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 113\n  digit(235) == 133\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 14.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 114\n  digit(235) == 134\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 15.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 115\n  digit(235) == 135\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 16.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 116\n  digit(235) == 136\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 17.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 117\n  digit(235) == 137\n  */\nconst digitSum17 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += digit(i) * 17;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of its digits multiplied by 18.\n  Return 0 if all digit are zero.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 118\n  digit(235) == 138\n  */\nconst digitSum18 = (n) => {\n  let sum = 0;\n  for (let i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];\n  const closingBrackets = [']', ']', '}'];\n  const openingBracketsCount = openingBrackets.filter(openingBracket => string.includes(openingBracket)).length;\n  const closingBracketsCount = closingBrackets.filter(closingBracket => string.includes(closingBracket)).length;\n  return openingBracketsCount === closingBracketsCount;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const openingBrackets = ['[', '(', '{'];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or a digit, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const lastCharIsALetter = lastChar ==='' || lastChar === '\\n' || lastChar === '\\t' || lastChar === '\\r';\n  return lastCharIsALetter;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let maxIndex = -1;\n  let maxValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxIndex = i;\n      maxValue = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 1\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let minIndex = -1;\n  let minValue = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < minValue) {\n      minIndex = i;\n      minValue = arr[i];\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns true if two arrays have the same elements\n  in the same order. Two arrays are considered equal if they have the same number\n  of elements and the same elements in the same order.\n\n  Examples:\n  arr1 = [1,2,3,4,5]\n  arr2 = [1,2,3,4,5]\n  arr3 = [1,2,3,4,5,6]\n  arr4 = [1,2,3,4,5,6,7]\n  arr5 = [1,2,3,4,5,6,7,8]\n  arr6 = [1,2,3,4,5,6,7,8,9]\n  arr7 = [1,2,3,4,5,6,7,8,9,10]\n  arr8 = [1,2,3,4,5,6,7,8,9,10,11,12]\n  arr9 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n  arr10 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n  arr11 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n  arr12 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n  arr13 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n  arr14 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr15 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr16 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr17 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr18 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr19 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n  arr20 = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, positiveIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [negativeIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerLargerIntegers([]) == (null, null)\n  smallerLargerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, negativeIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [positiveIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerSmallerIntegers([]) == (null, null)\n  smallerSmallerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, positiveIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [negativeIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerLargerIntegers([]) == (null, null)\n  largerLargerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, negativeIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [positiveIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerLargerIntegers([]) == (null, null)\n  smallerLargerIntegers([0]) == (null, null)\n  */\nconst smallerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, positiveIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [negativeIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, negativeIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [positiveIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  smallerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  smallerLargerIntegers([]) == (null, null)\n  smallerLargerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, positiveIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [negativeIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerLargerIntegers([]) == (null, null)\n  largerLargerIntegers([0]) == (null, null)\n  */\nconst smallerLargerIntegers = (lst) => {\n  const positiveIntegers = lst.filter((x) => x > 0);\n  const negativeIntegers = lst.filter((x) => x < 0);\n  if (positiveIntegers.length < negativeIntegers.length) {\n    return [null, negativeIntegers[0]];\n  } else if (negativeIntegers.length < positiveIntegers.length) {\n    return [positiveIntegers[0], null];\n  } else {\n    return [positiveIntegers[0], negativeIntegers[0]];\n  }\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerLargerIntegers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largerLargerIntegers([]) == (null, null)\n  largerLargerIntegers([0]) == (null, null)\n  */\nconst largerLargerIntegers = (lst) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"==\") return b\n  if (b === \"==\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \"!=\") return b\n  if (b === \"!=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"!\") return b\n  if (b === \"!\") return a\n  if (a === \"<\") return b\n  if (b === \"<\") return a\n  if (a === \"<=\") return b\n  if (b === \"<=\") return a\n  if (a === \">\") return b\n  if (b === \">\") return a\n  if (a === \">=\") return b\n  if (b === \">=\") return a\n  if (a === \"=\") return b\n  if (b === \"=\") return a\n  if (a === \"|\") return b\n  if (b === \"|\") return a\n  if (a === \"&\") return b\n  if (b === \"&\") return a\n  if (a === \"^\") return b\n  if (b === \"^\") return a\n  if (a === \"~\") return b\n  if (b === \"~\") return a\n  if (a === \"!~\") return b\n  if (b === \"!~\") return a\n  if (a === \"&&\") return b\n  if (b === \"&&\") return a\n  if (a === \"||\") return b\n  if (b === \"||\") return a\n  if (a === \"?\") return b\n  if (b === \"?\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"*\") return b\n  if (b === \"*\") return a\n  if (a === \"/\") return b\n  if (b === \"/\") return a\n  if (a === \"%\") return b\n  if (b === \"%\") return a\n  if (a === \"|=\") return b\n  if (b === \"|=\") return a\n  if (a === \"&=\") return b\n  if (b === \"&=\") return a\n  if (a === \"^=\") return b\n  if (b === \"^=\") return a\n  if (a === \"~=\") return b\n  if (b === \"~=\") return a\n  if (a === \"!~=\") return b\n  if (b === \"!~=\") return a\n  if (a === \"&&=\") return b\n  if (b === \"&&=\") return a\n  if (a === \"||=\") return b\n  if (b === \"||=\") return a\n  if (a === \"?=\") return b\n  if (b === \"?=\") return a\n  if (a === \"+=\") return b\n  if (b === \"+=\") return a\n  if (a === \"-=\") return b\n  if (b === \"-=\") return a\n  if (a === \"*=\") return b\n  if (b === \"*=\") return a\n  if (a === \"/=\") return b\n  if (b === \"/=\") return a\n  if (a === \"%=\") return b\n  if (b === \"%=\") return a\n  if (a === \"|=\") return b\n  if (b === \"|=\") return a\n  if (a === \"&=\") return b\n  if (b === \"&=\") return a\n  if (a === \"^=\") return b\n  if (b === \"^=\") return a\n  if (a === \"~=\") return b\n  if (b === \"~=\") return a\n  if (a === \"!~=\") return b\n  if (b === \"!~=\") return a\n  if (a === \"&&=\") return b\n  if (b === \"&&=\") return a\n  if (a === \"||=\") return b\n  if (b === \"||=\") return a\n  if (a === \"?=\") return b\n  if (b === \"?=\") return a\n  if (a === \"+=\") return b\n  if (b === \"+=\") return a\n  if (a === \"-=\") return b\n  if (b === \"-=\") return a\n  if (a === \"*=\") return b\n  if (b === \"*=\") return a\n  if (a === \"/=\") return b\n  if (b === \"/=\") return a\n  if (a === \"%=\") return b\n  if (b === \"%=\") return a\n  if (a === \"|=\") return b\n  if (b === \"|=\") return a\n  if (a === \"&=\") return b\n  if (b === \"&=\") return a\n  if (a === \"^=\") return b\n  if (b === \"^=\") return a\n  if (a === \"~=\") return b\n  if (b === \"~=\") return a\n  if (a === \"!~=\") return b\n  if (b === \"!~=\") return a\n  if (a === \"&&=\") return b\n  if (b === \"&&=\") return a\n  if (a === \"||=\") return b\n  if (b === \"||=\") return a\n  if (a === \"?=\") return b\n  if (b === \"?=\") return a\n  if (a === \"+=\") return b\n  if (b === \"+=\") return a\n  if (a === \"-=\") return b\n  if (b === \"-=\") return a\n  if (a === \"*=\") return b\n  if (b === \"*=\") return a\n  if (a === \"/=\") return b\n  if (b === \"/=\") return a\n  if (a === \"%=\") return b\n  if (b === \"%=\") return a\n  if (a === \"|=\") return b\n  if (b === \"|=\") return a\n  if (a === \"&=\") return b\n  if (b === \"&=\") return a\n  if (a === \"^=\") return b\n  if (b === \"^=\") return a\n  if (a === \"~=\") return b\n  if (b === \"~=\") return a\n  if (a === \"!~=\") return b\n  if (b === \"!~=\") return a\n  if (a === \"&&=\") return b\n  if (b === \"&&=\") return a\n  if (a === \"||=\") return b\n  if (b === \"||=\") return a\n  if (a === \"?=\") return b\n  if (b === \"?=\") return a\n  if (a === \"+=\") return b\n  if (b === \"+=\") return a\n  if (a === \"-=\") return b\n  if (b === \"-=\") return a\n  if (a === \"*=\") return b\n  if (b === \"*=\") return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEven(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == true\n  isEqualToSummingOdd(8) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOdd(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == false\n  isEqualToSummingEven(-6) == false\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEvenNegative = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenNegative(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == false\n  isEqualToSummingOdd(-6) == true\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOddNegative = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOddNegative(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(8) == true\n  isEqualToSummingEven(10) == true\n  isEqualToSummingEven(12) == true\n  */\nconst isEqualToSummingEvenPositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenPositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(8) == true\n  isEqualToSummingOdd(10) == true\n  isEqualToSummingOdd(12) == true\n  */\nconst isEqualToSummingOddPositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOddPositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == true\n  isEqualToSummingEven(-6) == true\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEvenNegativePositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenNegativePositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == true\n  isEqualToSummingOdd(-6) == true\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOddNegativePositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOddNegativePositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(8) == true\n  isEqualToSummingEven(10) == true\n  isEqualToSummingEven(12) == true\n  */\nconst isEqualToSummingEvenPositivePositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenPositivePositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(8) == true\n  isEqualToSummingOdd(10) == true\n  isEqualToSummingOdd(12) == true\n  */\nconst isEqualToSummingOddPositivePositive = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOddPositivePositive(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  isEqualToSummingEven(-4) == true\n  isEqualToSummingEven(-6) == true\n  isEqualToSummingEven(-8) == true\n  */\nconst isEqualToSummingEvenNegativeNegative = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenNegativeNegative(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  isEqualToSummingOdd(-4) == true\n  isEqualToSummingOdd(-6) == true\n  isEqualToSummingOdd(-8) == true\n  */\nconst isEqualToSummingOddNegativeNegative = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOddNegativeNegative(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(8) == true\n  isEqualToSummingEven(10) == true\n  isEqualToSummingEven(12) == true\n  */\nconst isEqualToSummingEvenPositiveNegative = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingEvenPositiveNegative(n / 2)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(8) == true\n  isEqualToSummingOdd(10) == true\n  isEqualToSummingOdd(12) == true\n  */\nconst isEqualToSummingOddPositiveNegative = (n) => {\n  if (n % 2 === 0) {\n    return true\n  }\n  if (n % 4 === 0) {\n    return true\n  }\n  return isEqualToSummingOdd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using recursion.\n*/\nconst factorialRecursion = (n) => {\n  if (n === 0 || n === 1) {\n    return 1;\n  } else {\n    return n * factorialRecursion(n - 1);\n  }\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n*/\nconst factorialIteration = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization2 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization3 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization4 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization5 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization6 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization7 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization8 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization9 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization10 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization11 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization12 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = factorial;\n    }\n  }\n  return factorial;\n};\n\n/*\n  A function that returns the factorial of a given number using iteration.\n  It uses memoization to avoid recalculating the factorial of a given number\n  more than once.\n*/\nconst factorialMemoization13 = (n) => {\n  let factorial = 1;\n  let memo = {};\n  for (let i = 1; i <= n; i++) {\n    if (memo.hasOwnProperty(i)) {\n      factorial = memo[i];\n    } else {\n      factorial = factorial * i;\n      memo[i] = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === prefix) {\n      prefixes.push(prefix);\n      prefix = '';\n    } else {\n      prefix += char;\n    }\n  }\n  prefixes.push(prefix);\n  return prefixes;\n};\n\n/**\n * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string.charAt(i);\n    if (char === suffix) {\n      suffixes.push(suffix);\n      suffix = '';\n    } else {\n      suffix += char;\n    }\n  }\n  suffixes.push(suffix);\n  return suffixes;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string.charAt(i);\n    if (char === substring) {\n      substrings.push(substring);\n      substring = '';\n    } else {\n      substring += char;\n    }\n  }\n  substrings.push(substring);\n  return substrings;\n};\n\n/**\n * Return list of all substrings from shortest to longest of the input string\n  >>> allSubstrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst allSubstrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"\n  fixesCapitalize(\"Example 1\") == \"example_1\"\n  fixesCapitalize(\"Example 2\") == \"Example_2\"\n  fixesCapitalize(\"Example 3\") == \"Example_3\"\n  */\nconst fixesCapitalize = (text) => {\n  return text.replace(/\\b[a-z]/g, m => m.toUpperCase());\n}\n\n/*\n  Given a string text, capitalize every first letter of every word \n  \n  fixesCapitalize(\"Example\") == \"Example\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.trim();\n  let file_name = file_name.split(\" \");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\".\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(\"\");\n  let file_name = file_name[0];\n  let file_name = file_name.split(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples2 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples5 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples6 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples7 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries in the list that \n  are a multiple of 3 and a multiple of 4. The function will not change the entries in the list whose indexes are not a multiple of 3 \n  or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst countsMultiples8 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences2 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2!== 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences4 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2!== 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences5 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences6 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2!== 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences7 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences7 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences8 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2!== 0) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { wordInSentences8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/5\", \"5/2\"));\nconsole.log(simplify(\"1/6\", \"2/2\"));\nconsole.log(simplify(\"7/10\", \"10/3\"));\nconsole.log(simplify(\"1/5\", \"5/3\"));\nconsole.log(simplify(\"1/6\", \"2/3\"));\nconsole.log(simplify(\"7/10\", \"10/4\"));\nconsole.log(simplify(\"1/5\", \"5/4\"));\nconsole.log(simplify(\"1/6\", \"2/4\"));\nconsole.log(simplify(\"7/10\", \"10/5\"));\nconsole.log(simplify(\"1/5\", \"5/5\"));\nconsole.log(simplify(\"1/6\", \"2/5\"));\nconsole.log(simplify(\"7/10\", \"10/6\"));\nconsole.log(simplify(\"1/5\", \"5/6\"));\nconsole.log(simplify(\"1/6\", \"2/6\"));\nconsole.log(simplify(\"7/10\", \"10/7\"));\nconsole.log(simplify(\"1/5\", \"5/7\"));\nconsole.log(simplify(\"1/6\", \"2/7\"));\nconsole.log(simplify(\"7/10\", \"10/8\"));\nconsole.log(simplify(\"1/5\", \"5/8\"));\nconsole.log(simplify(\"1/6\", \"2/8\"));\nconsole.log(simplify(\"7/10\", \"10/9\"));\nconsole.log(simplify(\"1/5\", \"5/9\"));\nconsole.log(simplify(\"1/6\", \"2/9\"));\nconsole.log(simplify(\"7/10\", \"10/10\"));\nconsole.log(simplify(\"1/5\", \"5/10\"));\nconsole.log(simplify(\"1/6\", \"2/10\"));\nconsole.log(simplify(\"7/10\", \"10/11\"));\nconsole.log(simplify(\"1/5\", \"5/11\"));\nconsole.log(simplify(\"1/6\", \"2/11\"));\nconsole.log(simplify(\"7/10\", \"10/12\"));\nconsole.log(simplify(\"1/5\", \"5/12\"));\nconsole.log(simplify(\"1/6\", \"2/12\"));\nconsole.log(simplify(\"7/10\", \"10/13\"));\nconsole.log(simplify(\"1/5\", \"5/13\"));\nconsole.log(simplify(\"1/6\", \"2/13\"));\nconsole.log(simplify(\"7/10\", \"10/14\"));\nconsole.log(simplify(\"1/5\", \"5/14\"));\nconsole.log(simplify(\"1/6\", \"2/14\"));\nconsole.log(simplify(\"7/10\", \"10/15\"));\nconsole.log(simplify(\"1/5\", \"5/15\"));\nconsole.log(simplify(\"1/6\", \"2/15\"));\nconsole.log(simplify(\"7/10\", \"10/16\"));\nconsole.log(simplify(\"1/5\", \"5/16\"));\nconsole.log(simplify(\"1/6\", \"2/16\"));\nconsole.log(simplify(\"7/10\", \"10/17\"));\nconsole.log(simplify(\"1/5\", \"5/17\"));\nconsole.log(simplify(\"1/6\", \"2/17\"));\nconsole.log(simplify(\"7/10\", \"10/18\"));\nconsole.log(simplify(\"1/5\", \"5/18\"));\nconsole.log(simplify(\"1/6\", \"2/18\"));\nconsole.log(simplify(\"7/10\", \"10/19\"));\nconsole.log(simplify(\"1/5\", \"5/19\"));\nconsole.log(simplify(\"1/6\", \"2/19\"));\nconsole.log(simplify(\"7/10\", \"10/20\"));\nconsole.log(simplify(\"1/5\", \"5/20\"));\nconsole.log(simplify(\"1/6\", \"2/20\"));\nconsole.log(simplify(\"7/10\", \"10/21\"));\nconsole.log(simplify(\"1/5\", \"5/21\"));\nconsole.log(simplify(\"1/6\", \"2/21\"));\nconsole.log(simplify(\"7/10\", \"10/22\"));\nconsole.log(simplify(\"1/5\", \"5/22\"));\nconsole.log(simplify(\"1/6\", \"2/22\"));\nconsole.log(simplify(\"7/10\", \"10/23\"));\nconsole.log(simplify(\"1/5\", \"5/23\"));\nconsole.log(simplify(\"1/6\", \"2/23\"));\nconsole.log(simplify(\"7/10\", \"10/24\"));\nconsole.log(simplify(\"1/5\", \"5/24\"));\nconsole.log(simplify(\"1/6\", \"2/24\"));\nconsole.log(simplify(\"7/10\", \"10/25\"));\nconsole.log(simplify(\"1/5\", \"5/25\"));\nconsole.log(simplify(\"1/6\", \"2/25\"));\nconsole.log(simplify(\"7/10\", \"10/26\"));\nconsole.log(simplify(\"1/5\", \"5/26\"));\nconsole.log(simplify(\"1/6\", \"2/26\"));\nconsole.log(simplify(\"7/10\", \"10/27\"));\nconsole.log(simplify(\"1/5\", \"5/27\"));\nconsole.log(simplify(\"1/6\", \"2/27\"));\nconsole.log(simplify(\"7/10\", \"10/28\"));\nconsole.log(simplify(\"1/5\", \"5/28\"));\nconsole.log(simplify(\"1/6\", \"2/28\"));\nconsole.log(simplify(\"7/10\", \"10/29\"));\nconsole.log(simplify(\"1/5\", \"5/29\"));\nconsole.log(simplify(\"1/6\", \"2/29\"));\nconsole.log(simplify(\"7/10\", \"10/30\"));\nconsole.log(simplify(\"1/5\", \"5/30\"));\nconsole.log(simplify(\"1/6\", \"2/30\"));\nconsole.log(simplify(\"7/10\", \"10/31\"));\nconsole.log(simplify(\"1/5\", \"5/31\"));\nconsole.log(simplify(\"1/6\", \"2/31\"));\nconsole.log(simplify(\"7/10\", \"10/32\"));\nconsole.log(simplify(\"1/5\", \"5/32\"));\nconsole.log(simplify(\"1/6\", \"2/32\"));\nconsole.log(simplify(\"7/10\", \"10/33\"));\nconsole.log(simplify(\"1/5\", \"5/33\"));\nconsole.log(simplify(\"1/6\", \"2/33\"));\nconsole.log(simplify(\"7/10\", \"10/34\"));\nconsole.log(simplify(\"1/5\", \"5/34\"));\nconsole.log(simplify(\"1/6\", \"2/34\"));\nconsole.log(simplify(\"7/10\", \"10/35\"));\nconsole.log(simplify(\"1/5\", \"5/35\"));\nconsole.log(simplify(\"1/6\", \"2/35\"));\nconsole.log(simplify(\"7/10\", \"10/36\"));\nconsole.log(simplify(\"1/5\", \"5/36\"));\nconsole.log(simplify(\"1/6\", \"2/36\"));\nconsole.log(simplify(\"7/10\", \"10/37\"));\nconsole.log(simplify(\"1/5\", \"5/37\"));\nconsole.log(simplify(\"1/6\", \"2/37\"));\nconsole.log(simplify(\"7/10\", \"10/38\"));\nconsole.log(simplify(\"1/5\", \"5/38\"));\nconsole.log(simplify(\"1/6\", \"2/38\"));\nconsole.log(simplify(\"7/10\", \"10/39\"));\nconsole.log(simplify(\"1/5\", \"5/39\"));\nconsole.log(simplify(\"1/6\", \"2/39\"));\nconsole.log(simplify(\"7/10\", \"10/40\"));\nconsole.log(simplify(\"1/5\", \"5/40\"));\nconsole.log(simplify(\"1/6\", \"2/40\"));\nconsole.log(simplify(\"7/10\", \"10/41\"));\nconsole.log(simplify(\"1/5\", \"5/41\"));\nconsole.log(simplify(\"1/6\", \"2/41\"));\nconsole.log(simplify(\"7/10\", \"10/42\"));\nconsole.log(simplify(\"1/5\", \"5/42\"));\nconsole.log(simplify(\"1/6\", \"2/42\"));\nconsole.log(simplify(\"7/10\", \"10/43\"));\nconsole.log(simplify(\"1/5\", \"5/43\"));\nconsole.log(simplify(\"1/6\", \"2/43\"));\nconsole.log(simplify(\"7/10\", \"10/44\"));\nconsole.log(simplify(\"1/5\", \"5/44\"));\nconsole.log(simplify(\"1/6\", \"2/44\"));\nconsole.log(simplify(\"7/10\", \"10/45\"));\nconsole.log(simplify(\"1/5\", \"5/45\"));\nconsole.log(simplify(\"1/6\", \"2/45\"));\nconsole.log(simplify(\"7/10\", \"10/46\"));\nconsole.log(simplify(\"1/5\", \"5/46\"));\nconsole.log(simplify(\"1/6\", \"2/46\"));\nconsole.log(simplify(\"7/10\", \"10/47\"));\nconsole.log(simplify(\"1/5\", \"5/47\"));\nconsole.log(simplify(\"1/6\", \"2/47\"));\nconsole.log(simplify(\"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDescAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n    sorted.push(sum);\n  }\n  return sorted;\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointAsc = (nums) => {\n  const len = nums.length;\n  const sorted = [];\n  let sum = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sumOfArray([15, -73, 14, -15]) => -26\n  sumOfArray([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst sumOfArray = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  productOfArray([15, -73, 14, -15]) => -75\n  productOfArray([33, -2, -3, 45, 21, 109]) => -45\n  */\nconst productOfArray = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  largestOfArray([15, -73, 14, -15]) => -15\n  largestOfArray([33, -2, -3, 45, 21, 109]) => 45\n  */\nconst largestOfArray = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  smallestOfArray([15, -73, 14, -15]) => -15\n  smallestOfArray([33, -2, -3, 45, 21, 109]) => -2\n  */\nconst smallestOfArray = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the average of the elements in the array.\n  For example:\n  averageOfArray([15, -73, 14, -15]) => -7.5\n  averageOfArray([33, -2, -3, 45, 21, 109]) => -7.5\n  */\nconst averageOfArray = (nums) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median of the elements in the array.\n  For example:\n  medianOfArray([15, -73, 14, -15]) => -15\n  medianOfArray([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst medianOfArray = (nums) => {\n  let sortedArray = nums.sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedArray.length / 2);\n  let median = sortedArray[middleIndex];\n  return median;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the mode of the elements in the array.\n  For example:\n  modeOfArray([15, -73, 14, -15, -10, -5, -4, -7, -9, -6, -3]) => -3\n  modeOfArray([33, -2, -3, 45, 21, -7, -9, -6, -3]) => -2\n  */\nconst modeOfArray = (nums) => {\n  let mode = 0;\n  let maxCount = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let count = nums.filter(n => n === nums[i]).length;\n    if (count > maxCount) {\n      maxCount = count;\n      mode = nums[i];\n    }\n  }\n  return mode;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the standard deviation of the elements in the array.\n  For example:\n  standardDeviationOfArray([15, -73, 14, -15, -10, -5, -4, -7, -9, -6, -3]) => 2.449\n  standardDeviationOfArray([33, -2, -3, 45, 21, -7, -9, -6, -3]) => 1.414\n  */\nconst standardDeviationOfArray = (nums) => {\n  let mean = averageOfArray(nums);\n  let sumOfSquares = 0;\n  let sumOfDifferences = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sumOfSquares += Math.pow(nums[i] - mean, 2);\n    sumOfDifferences += Math.abs(nums[i] - mean);\n  }\n  return Math.sqrt(sumOfSquares / nums.length) - Math.sqrt(sumOfDifferences / nums.length);\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the variance of the elements in the array.\n  For example:\n  varianceOfArray([15, -73, 14, -15, -10, -5, -4, -7, -9, -6, -3]) => 0.708\n  varianceOfArray([33, -2, -3, 45, 21, -7, -9, -6, -3]) => 0.708\n  */\nconst varianceOfArray = (nums) => {\n  let mean = averageOfArray(nums);\n  let sumOfSquares = 0;\n  let sumOfDifferences = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sumOfSquares += Math.pow(nums[i] - mean, 2);\n    sumOfDifferences += Math.abs(nums[i] - mean);\n  }\n  return sumOfSquares / nums.length - sumOfDifferences / nums.length;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median absolute deviation of the elements in the array.\n  For example:\n  medianAbsoluteDeviationOfArray([15, -73, 14, -15, -10, -5, -4, -7, -9, -6, -3]) => -7.5\n  medianAbsoluteDeviationOfArray([33, -2, -3, 45, 21, -7, -9, -6, -3]) => 21\n  */\nconst medianAbsoluteDeviationOfArray = (nums) => {\n  let sortedArray = nums.sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedArray.length / 2);\n  let median = sortedArray[middleIndex];\n  let medianAbsoluteDeviation = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let difference = Math.abs(nums[i] - median);\n    medianAbsoluteDeviation += difference;\n  }\n  return medianAbsoluteDeviation / nums.length;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the median of the elements in the array.\n  For example:\n  medianOfArray([15, -73, 14, -15]) => -15\n  medianOfArray([33, -2, -3, 45, 21, 109]) => 21\n  */\nconst medianOfArray = (nums) => {\n  let sortedArray = nums.sort((a, b) => a - b);\n  let middleIndex = Math.floor(sortedArray.length / 2);\n  let median = sortedArray[middleIndex];\n  return median;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the mode of the elements in the array.\n  For example:\n  modeOfArray([15, -73, 14, -15, -10, -5, -4, -7, -9, -6, -3]) => -3\n  modeOfArray([33, -2, -3, 45, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n};\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(10)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(100)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(1000)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(10000)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(100000)`\n<|/ c |>\n<| a tags=arrays,javascript,algorithm |>\nI believe this solution will fail for gottenMaxTriples(1000)\n\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(gottenMaxTriples(1000));</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(10000)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(100000)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(1000000)`\n<|/ c |>\n<| c |>\nI believe this solution will fail for `gottenMaxTriples(10000000)`\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction gottenMaxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(gottenMaxTriples(5));</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a dscore=1 |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (a[i] < a[j] && a[i] < a[k] && a[j] < a[k]) {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconsole.log(gottenMaxTriples(5));\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a |>\n<code>\nfunction gottenMaxTriples(n) {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const orbit = planets.map((planet2) => {\n      const d = distance(planet, planet2);\n      return d;\n    });\n    const index = orbit.indexOf(Math.min.apply(null, orbit));\n    return planets[index];\n  });\n  return orbits.filter((planet) => planet === planet1 || planet === planet2);\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const orbit = planets.map((planet2) => {\n      const d = distance(planet, planet2);\n      return d;\n    });\n    const index = orbit.indexOf(Math.min.apply(null, orbit));\n    return planets[index];\n  });\n  return orbits.filter((planet) => planet === planet1 || planet === planet2);\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with planets closest to the sun first, and planets\n  further away first. The function should return an empty tuple if planet1 or\n  planet2 are not correct planet names.\n  Examples\n  bf2(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf2(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf2(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const orbit = planets.map((planet2) => {\n      const d = distance(planet, planet2);\n      return d;\n    });\n    const index = orbit.indexOf(Math.min.apply(null, orbit));\n    return planets[index];\n  });\n  return orbits.filter((planet) => planet === planet1 || planet === planet2);\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with planets closest to the sun first, and planets\n  further away first. The function should return an empty tuple if planet1 or\n  planet2 are not correct planet names.\n  Examples\n  bf3(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf3(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf3(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const orbit = planets.map((planet2) => {\n      const d = distance(planet, planet2);\n      return d;\n    });\n    const index = orbit.indexOf(Math.min.apply(null, orbit));\n    return planets[index];\n  });\n  return orbits.filter((planet) => planet === planet1 || planet === planet2);\n};\n\n/* Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun, with planets closest to the sun first, and planets\n  further away first. The function should return an empty tuple if planet1 or\n  planet2 are not correct planet names.\n  Examples\n  bf4(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf4(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf4(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf5 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const orbit = planets.map((planet2) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    newList = newList.concat(temp);\n  }\n  return newList;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabetically = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    newList = newList.concat(temp);\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    } else if (a.length < b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSum = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    newList = newList.concat(temp);\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    } else if (a.length < b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }).reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndProduct = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    newList = newList.concat(temp);\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    } else if (a.length < b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }).reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndProductAndMax = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    newList = newList.concat(temp);\n  }\n  return newList.sort((a, b) => {\n    if (a.length > b.length) {\n      return 1;\n    } else if (a.length < b.length) {\n      return -1;\n    } else {\n      return 0;\n    }\n  }).reduce((acc, cur) => {\n    return acc + cur;\n  }, 0);\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsAlphabeticallyAndSumAndProductAndMaxAndMin = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let temp = [];\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i].length < lst[j].length) {\n        temp.push(lst[j]);\n      } else {\n        temp.push(lst[i]);\n      }\n    }\n    new", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return evenSum + doubleTheDifference(lst.filter((val) => val % 2 === 1));\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return evenSum * doubleTheDifference(lst.filter((val) => val % 2 === 1));\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 1);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all numbers in the list that\n  are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return [];\n  }\n  const evenSum = lst.reduce((acc, val) => {\n    return acc + (val % 2? val : 0);\n  }, 0);\n  return lst.filter((val) => val % 2 === 0);\n};\n\n/* Given a list of numbers, return a list of all ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = 0;\n  let guesses = 0;\n  let guessesCorrect = 0;\n  let guessesWrong = 0;\n  let guessesTotal = guess.length;\n  let gameTotal = game.length;\n  let result = [];\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < gameTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= 1;\n    }\n  }\n  for (let i = 0; i < guessesTotal; i++) {\n    if (game[i] === guess[i]) {\n      score++;\n      guessesCorrect++;\n    } else {\n      guessesWrong++;\n      guessesTotal -= ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_name = \"\";\n  for (let i = 0; i < extensions.length; i++) {\n    let extension = extensions[i];\n    let cap = extension[0].toUpperCase();\n    let sm = extension[0].toLowerCase();\n    let strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_name = extension;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n};\n\n/*\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string. For example, the string 'abcabcbb' has a\n  single 'a' so the function should return 1, but if the string had two 'a's\n  in it (such as 'aaaaaa'), then your function should return 3.\n  Write a function that takes a string and returns the number of times the\n  character 'a' appears in the string, ignoring case. For example, the string\n  'AbCdEfA' has a 'A' so the function should return 1, but if the string\n  had two 'A's in it (such as 'aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n    }\n  }\n  if (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, odd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  return romanString.toLowerCase();\n};\n\n/*\n  Given a positive integer, break it down into an array of its digits,\n  reverse them and convert them into a positive integer in reverse order.\n  Throw an exception if any single digit number is greater than 9.\n\n  Examples:\n  >>> intToRoman(123)\n  '123'\n  >>> intToRoman(120)\n  '20'\n  >>> intToRoman(998)\n  '1969'\n  >>> intToRoman(900)\n  Traceback (most recent call last):\n   ...\n  ValueError:...\n  */\nconst intToRoman = (number) => {\n  const roman = romanNumerals(number);\n  const romanString = roman.join('');\n  const romanArray = romanString.split('');\n  const romanArrayReversed = romanArray.slice().reverse();\n  const romanArrayReversedString = romanArrayReversed.join('');\n  const romanArrayReversedNumbers = romanArrayReversedString.split('');\n  const romanArrayReversedNumbersReversed = romanArrayReversedNumbers.slice().reverse();\n  const romanArrayReversedNumbersReversedString = romanArrayReversedNumbersReversed.join('');\n  const romanArrayReversedNumbersReversedNumbers = romanArrayReversedNumbersReversedString.split('');\n  const romanArrayReversedNumbersReversedNumbersReversed = romanArrayReversedNumbersReversedNumbers.slice().reverse();\n  const romanArrayReversedNumbersReversedNumbersReversedString = romanArrayReversedNumbersReversedNumbersReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversed = romanArrayReversedNumbersReversedNumbersReversedString.split('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversed.slice().reverse();\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedString = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedNumbersReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedString.split('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedString.split('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedReversedNumbersReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedReversedNumbersReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedReversedNumbersReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedReversedNumbersReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedReversedNumbersReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedNumbersReversedReversedReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversedReversedReversed = romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumbersReversedReversedReversedReversedReversedReversedReversed.join('');\n  const romanArrayReversedNumbersReversedNumbersReversedNumbersReversedReversedReversedNumber", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) > Number.EPSILON;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === Number.EPSILON;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree or to 90 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree or to 90 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree or to 90 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  scaleneTriangles(3, 4, 5) == true\n  scaleneTriangles(1, 2, 3) == false\n  */\nconst scaleneTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  or 180 degree.\n  Example:\n  equilateralTriangles(3, 4, 5) == true\n  equilateralTriangles(1, 2, 3) == false\n  */\nconst equilateralTriangles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which one angle is equal to\n  180 degree or to 90 degree.\n  Example:\n  isosceles(3, 4, 5) == true\n  isosceles(1, 2, 3) == false\n  */\nconst isosceles = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return Math.abs(ab * bc - ac * bc) === 180;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and a word. Return true if\n  the word is present in the list or false otherwise. Words are case insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase() === word.toLowerCase()) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  foundInList(\"name\", [\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundInList(\"aaaaaa\", [\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"\n  */\nconst foundInList = (word, words) => {\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].toLowerCase().includes(word.toLowerCase())) {\n      return words[i];\n    }\n  }\n  return false;\n};\n\n/*Write a function that accepts a string and a list of strings. Return true if\n  the string is a substring of the list or false otherwise. Words are case\n  insensitive.\n\n  foundInList(\"name\", [\"name\", \"of\", \"string\"]) === \"name\"\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    result.push(carrots - remaining);\n    carrots = carrots - remaining;\n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    result.push(carrots - remaining);\n    carrots = carrots - remaining;\n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    result.push(carrots - remaining);\n    carrots = carrots - remaining;\n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    result.push(carrots - remaining);\n    carrots = carrots - remaining;\n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  \n  while (needs > 0) {\n    result.push(carrots - remaining);\n    carrots = carrots - remaining;\n    needs = needs - 1;\n  }\n  \n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter2 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter3 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter4 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter5 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter6 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter7 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter8 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter9 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter10 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter11 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter12 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter13 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter14 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter15 = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra7 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters.\n  If the string contains no letters, return an empty string.\n  Examples\n  removeLetters(\"1234\") = \"\"\n  removeLetters(\"ab\") = \"ab\"\n  removeLetters(\"#a@C\") = \"#C\"\n  */\nconst removeLetters = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not digits.\n  If the string contains no digits, return an empty string.\n  Examples\n  removeDigits(\"1234\") = \"\"\n  removeDigits(\"ab\") = \"ab\"\n  removeDigits(\"#a@C\") = \"#a@C\"\n  */\nconst removeDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      newS += s[i];\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      newS += s[i];\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      newS += s[i];\n    } else {\n      newS += \"\";\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to remove all characters that are not letters or digits.\n  If the string contains no letters or digits, return an empty string.\n  Examples\n  removeNonLetterOrDigits(\"1234\") = \"\"\n  removeNonLetterOrDigits(\"ab\") = \"ab\"\n  removeNonLetterOrDigits(\"#a@C\") = \"#C\"\n  */\nconst removeNonLetterOrDigits = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a36b6a89ecaf32466ef97c1605'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha1sum = crypto.createHash('sha1')\n  sha1sum.update(text)\n  return sha1sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha256sum = crypto.createHash('sha256')\n  sha256sum.update(text)\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha256')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a36b6a89ecaf32466ef97c1605'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha1')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '9c1185a5a36b6a89ecaf32466ef97c1605'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha1')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha512 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null\n  const sha512sum = crypto.createHash('sha1')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of its digits, in ascending order.\n\n  For example:\n  sumOfDigits(12) => 1 + 2 + 3 = 6\n  sumOfDigits(13) => 1 + 3 + 5 = 9\n  sumOfDigits(14) => 1 + 3 + 5 + 7 = 13\n  sumOfDigits(100) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 58\n  sumOfDigits(101) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 61\n  sumOfDigits(999) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 = 69\n  sumOfDigits(1000) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 = 70\n  sumOfDigits(10000) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 79\n  sumOfDigits(100000) => 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 89\n  sumOfDigitsn  sumOfDigitspassed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_notes = music_string.split(' ');\n  const music_notes_length = music_notes.length;\n  const music_notes_map = new Map();\n  for (let i = 0; i < music_notes_length; i++) {\n    const music_note = music_notes[i];\n    const music_note_value = music_note.charAt(0);\n    const music_notes_map_value = music_notes_map.get(music_note_value);\n    if (music_notes_map_value == null) {\n      music_notes_map.set(music_note_value, 1);\n    } else {\n      music_notes_map.set(music_note_value, music_notes_map_value + 1);\n    }\n  }\n  const music_notes_map_length = music_notes_map.size;\n  const music_notes_map_values = music_notes_map.values();\n  const music_notes_map_values_length = music_notes_map_values.length;\n  const music_notes_map_values_map = new Map();\n  for (let i = 0; i < music_notes_map_values_length; i++) {\n    const music_notes_map_value = music_notes_map_values[i];\n    const music_notes_map_value_length = music_notes_map_value.length;\n    for (let j = 0; j < music_notes_map_value_length; j++) {\n      const music_notes_map_value_value = music_notes_map_value[j];\n      const music_notes_map_value_map_value = music_notes_map_values_map.get(music_notes_map_value_value);\n      if (music_notes_map_value_map_value == null) {\n        music_notes_map_values_map.set(music_notes_map_value_value, 1);\n      } else {\n        music_notes_map_values_map.set(music_notes_map_value_value, music_notes_map_value_map_value + 1);\n      }\n    }\n  }\n  const music_notes_map_values_map_length = music_notes_map_values_map.size;\n  const music_notes_map_values_map_values = music_notes_map_values_map.values();\n  const music_notes_map_values_map_values_length = music_notes_map_values_map_values.length;\n  const music_notes_map_values_map_values_map = new Map();\n  for (let i = 0; i < music_notes_map_values_map_values_length; i++) {\n    const music_notes_map_values_map_value = music_notes_map_values_map_values[i];\n    const music_notes_map_values_map_value_length = music_notes_map_values_map_value.length;\n    for (let j = 0; j < music_notes_map_values_map_value_length; j++) {\n      const music_notes_map_values_map_value_value = music_notes_map_values_map_value[j];\n      const music_notes_map_values_map_value_map_value = music_notes_map_values_map_values_map.get(music_notes_map_values_map_value_value);\n      if (music_notes_map_values_map_value_map_value == null) {\n        music_notes_map_values_map_values_map.set(music_notes_map_values_map_value_value, 1);\n      } else {\n        music_notes_map_values_map_values_map.set(music_notes_map_values_map_value_value, music_notes_map_values_map_value_map_value + 1);\n      }\n    }\n  }\n  const music_notes_map_values_map_values_map_length = music_notes_map_values_map_values_map.size;\n  const music_notes_map_values_map_values_map_values = music_notes_map_values_map_values_map.values();\n  const music_notes_map_values_map_values_map_values_length = music_notes_map_values_map_values_map_values.length;\n  const music_notes_map_values_map_values_map_values_map = new Map();\n  for (let i = 0; i < music_notes_map_values_map_values_map_values_length; i++) {\n    const music_notes_map_values_map_values_map_value = music_notes_map_values_map_values_map_values[i];\n    const music_notes_map_values_map_values_map_value_length = music_notes_map_values_map_values_map_value.length;\n    for (let j = 0; j < music_notes_map_values_map_values_map_value_length; j++) {\n      const music_notes_map_values_map_values_map_value_value = music_notes_map_values_map_values_map_value[j];\n      const music_notes_map_values_map_values_map_value_map_value = music_notes_map_values_map_values_map_values_map.get(music_notes_map_values_map_values_map_value_value);\n      if (music_notes_map_values_map_values_map_value_map_value == null) {\n        music_notes_map_values_map_values_map_values_map.set(music_notes_map_values_map_values_map_value_value, 1);\n      } else {\n        music_notes_map_values_map_values_map_values_map.set(music_notes_map_values_map_values_map_value_value, music_notes_map_values_map_values_map_value_map_value + 1);\n      }\n    }\n  }\n  const music_notes_map_values_map_values_map_values_map_length = music_notes_map_values_map_values_map_values_map.size;\n  const music_notes_map_values_map_values_map_values_map_values = music_notes_map_values_map_values_map_values_map.values();\n  const music_notes_map_values_map_values_map_values_map_values_length = music_notes_map_values_map_values_map_values_map_values.length;\n  const music_notes_map_values_map_values_map_values_map_values_map = new Map();\n  for (let i = 0; i < music_notes_map_values_map_values_map_values_map_length; i++) {\n    const music_notes_map_values_map_values_map_values_map_value = music_notes_map_values_map_values_map_values_map_values[i];\n    const music_notes_map_values_map_values_map_values_map_value_length = music_notes_map_values_map_values_map_values_map_value.length;\n    for (let j = 0; j < music_notes_map_values_map_values_map_values_map_value_length; j++) {\n      const music_notes_map_values_map_values_map_values_map_value_value = music_notes_map_values_map_values_map_values_map_value[j];\n      const music_notes_map_values_map_values_map_values_map_value_map_value = music_notes_map_values_map_values_map_values_map_values_map.get(music_notes_map_values_map_values_map_values_map_value_value);\n      if (music_notes_map_values_map_values_map_values_map_value_map_value == null) {\n        music_notes_map_values_map_values_map_values_map_values_map.set(music_notes_map_values_map_values_map_values_map_value_value, 1);\n      } else {\n        music_notes_map_values_map_values_map_values_map_values_map_values_map.set(music_notes_map_values_map_values_map_values_map_value_value, music_notes_map_values_map_values_map_values_map_value_map_value + 1);\n      }\n    }\n  }\n  const music_notes_map_values_map_values_map_values_map_values_map_length = music_notes_map_values_map_values_map_values_map_values_map.size;\n  const music_notes_map_values_map_values_map_values_map_values_map_values_map_length = music_notes_map_values_map_values_map_values_map_values_map_values.length;\n  const music_notes_map_values_map_values_map_values_map_values_map_values_map_values_map_length = music_notes_map_values_map_values_map_values_map_values_map_values_map_values_map.size;\n  const music_notes_map_values_map_values_map_values_map_values_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numberArray = numbers.split(' ');\n  const sortedNumberArray = numberArray.sort((a, b) => a - b);\n  return sortedNumberArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', 'one']\n  */\nconst sortsWords = (words) => {\n  const wordArray = words.split(' ');\n  const sortedWordArray = wordArray.sort();\n  return sortedWordArray.join(' ');\n};\n\n/* Input is a string of words and spaces.\n  Return an array of words and spaces sorted alphabetically\n  >>> sortsWords('one two three four')\n  ['one two three four', 'one two three', 'one two', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(integer);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseFloat(decimal);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateIntegerPart = (number) => {\n  const [integer, decimal] = number.toFixed(1).split('.');\n  return parseInt(integer, 10);\n};\n\n/**\n * Given a positive floating point number, it can be decomposed into\n  and integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const closestNumbers = [];\n  let closestDistance = sortedNumbers[0];\n  let closestElement = sortedNumbers[0];\n  for (let i = 1; i < sortedNumbers.length; i++) {\n    const currentDistance = sortedNumbers[i] - sortedNumbers[i - 1];\n    if (currentDistance < closestDistance) {\n      closestDistance = currentDistance;\n      closestElement = sortedNumbers[i];\n    }\n    closestNumbers.push(closestElement);\n  }\n  return closestNumbers;\n};\n\n/**\n * Given a sorted array of numbers, find the two numbers that are the closest to each other and return the two numbers in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number).\n * If there are two numbers that are the closest to each other, return them in order (smaller number, larger number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  return numbers.map((number) => {\n    return number - min / range;\n  });\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n * If the number is zero, return 1.\n * If the number is positive, return 1.\n * If the number is greater than 1, return 1.\n * If the number is less than 1, return 0.\n * If the number is between -1 and 1, return 0.\n * If the number is between -1 and -1, return -1.\n * If the number is between -1 and -2, return -1.\n * If the number is between -1 and -2, return -2.\n * If the number is between -1 and -2, return -3.\n * If the number is between -1 and -2, return -4.\n * If the number is between -1 and -2, return -5.\n * If the number is between -1 and -2, return -6.\n * If the number is between -1 and -2, return -7.\n * If the number is between -1 and -2, return -8.\n * If the number is between -1 and -2, return -9.\n * If the number is between -1 and -2, return -10.\n * If the number is between -1 and -2, return -11.\n * If the number is between -1 and -2, return -12.\n * If the number is between -1 and -2, return -13.\n * If the number is between -1 and -2, return -14.\n * If the number is between -1 and -2, return -15.\n * If the number is between -1 and -2, return -16.\n * If the number is between -1 and -2, return -17.\n * If the number is between -1 and -2, return -18.\n * If the number is between -1 and -2, return -19.\n * If the number is between -1 and -2, return -20.\n * If the number is between -1 and -2, return -21.\n * If the number is between -1 and -2, return -22.\n * If the number is between -1 and -2, return -23.\n * If the number is between -1 and -2, return -24.\n * If the number is between -1 and -2, return -25.\n * If the number is between -1 and -2, return -26.\n * If the number is between -1 and -2, return -27.\n * If the number is between -1 and -2, return -28.\n * If the number is between -1 and -2, return -29.\n * If the number is between -1 and -2, return -30.\n * If the number is between -1 and -2, return -31.\n * If the number is between -1 and -2, return -32.\n * If the number is between -1 and -2, return -33.\n * If the number is between -1 and -2, return -34.\n * If the number is between -1 and -2, return -35.\n * If the number is between -1 and -2, return -36.\n * If the number is between -1 and -2, return -37.\n * If the number is between -1 and -2, return -38.\n * If the number is between -1 and -2, return -39.\n * If the number is between -1 and -2, return -40.\n * If the number is between -1 and -2, return -41.\n * If the number is between -1 and -2, return -42.\n * If the number is between -1 and -2, return -43.\n * If the number is between -1 and -2, return -44.\n * If the number is between -1 and -2, return -45.\n * If the number is between -1 and -2, return -46.\n * If the number is between -1 and -2, return -47.\n * If the number is between -1 and -2, return -48.\n * If the number is between -1 and -2, return -49.\n * If the number is between -1 and -2, return -50.\n * If the number is between -1 and -2, return -51.\n * If the number is between -1 and -2, return -52.\n * If the number is between -1 and -2, return -53.\n * If the number is between -1 and -2, return -54.\n * If the number is between -1 and -2, return -55.\n * If the number is between -1 and -2, return -56.\n * If the number is between -1 and -2, return -57.\n * If the number is between -1 and -2, return -58.\n * If the number is between -1 and -2, return -59.\n * If the number is between -1 and -2, return -60.\n * If the number is between -1 and -2, return -61.\n * If the number is between -1 and -2, return -62.\n * If the number is between -1 and -2, return -63.\n * If the number is between -1 and -2, return -64.\n * If the number is between -1 and -2, return -65.\n * If the number is between -1 and -2, return -66.\n * If the number is between -1 and -2, return -67.\n * If the number is between -1 and -2, return -68.\n * If the number is between -1 and -2, return -69.\n * If the number is between -1 and -2, return -70.\n * If the number is between -1 and -2, return -71.\n * If the number is between -1 and -2, return -72.\n * If the number is between -1 and -2, return -73.\n * If the number is between -1 and -2, return -74.\n * If the number is between -1 and -2, return -75.\n * If the number is between -1 and -2, return -76.\n * If the number is between -1 and -2, return -77.\n * If the number is between -1 and -2, return -78.\n * If the number is between -1 and -2, return -79.\n * If the number is between -1 and -2, return -80.\n * If the number is between -1 and -2, return -81.\n * If the number is between -1 and -2, return -82.\n * If the number is between -1 and -2, return -83.\n * If the number is between -1 and -2, return -84.\n * If the number is between -1 and -2, return -85.\n * If the number is between -1 and -2, return -86.\n * If the number is between -1 and -2, return -87.\n * If the number is between -1 and -2, return -88.\n * If the number is between -1 and -2, return -89.\n * If the number is between -1 and -2, return -90.\n * If the number is between -1 and -2, return -91.\n * If the number is between -1 and -2, return -92.\n * If the number is between -1 and -2, return -93.\n * If the number is between -1 and -2, return -94.\n * If the number is between -1 and -2, return -95.\n * If the number is between -1 and -2, return -96.\n * If the number is between -1 and -2, return -97.\n * If the number is between -1 and -2, return -98.\n * If the number is between -1 and -2, return -99.\n * If the number is between -1 and -2, return -100.\n * If the number is between -1 and -2, return -101.\n * If the number is between -1 and -2, return -102.\n * If the number is between -1 and -2, return -103.\n * If the number is between -1 and -2, return -104.\n * If the number is between -1 and -2, return -105.\n * If the number is between -1 and -2, return -106.\n * If the number is between -1 and -2, return -107.\n * If the number is between -1 and -2, return -108.\n * If the number is between -1 and -2, return -109\n */\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * If the number is negative, return 0.\n * If the number is zero, return 1.\n * If the number is positive, return 1.\n * If the number is greater than 1, return 1.\n * If the number is less than 1, return 0.\n * If the number is between -1 and 1, return 0.\n * If the number is between -1 and -1, return -1.\n * If the number is between -1 and -2, return -1.\n * If the number is between -1 and -2, return -2.\n * If the number is between -1 and -2, return -3.\n * If the number is ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [true, false]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [true, true, false]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNones(['a', 3.14, 5])\n  [null]\n  >>> filterNones([1, 2, 3, 'abc', {}, []])\n  [null, null, null]\n  */\nconst filterNones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      length++\n    }\n  }\n  return length\n}\n\n/* Return true if given string ends with given substring\n  >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'abd')\n  false\n  */\nconst endsWith = (string, substring) => {\n  return string.indexOf(substring, string.length - substring.length)!== -1\n}\n\n/* Return true if given string starts with given substring\n  >>> startsWith('abc', 'ab')\n  true\n  >>> startsWith('abc', 'abd')\n  false\n  */\nconst startsWith = (string, substring) => {\n  return string.indexOf(substring) === 0\n}\n\n/* Return true if given string contains given substring\n  >>> contains('abc', 'ab')\n  true\n  >>> contains('abc', 'abd')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 0)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  true\n  >>> containsAtIndex('abc', 'abd', 2)\n  false\n  */\nconst containsAtIndex = (string, substring, index) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/* Return true if given string contains given substring at given index\n  >>> containsAtIndex('abc', 'ab', 2)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisorFactor;\n      }\n    }\n  }\n  return minDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let maxDivisor = 1;\n  let maxDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      maxDivisorFactor = i;\n      if (maxDivisor < maxDivisorFactor) {\n        maxDivisor = maxDivisorFactor;\n      }\n    }\n  }\n  return maxDivisor;\n};\n\n/**\n * Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallerDivisors(15)\n  3\n  */\nconst smallerDivisors = (n) => {\n  let minDivisor = 1;\n  let minDivisorFactor = 1;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      minDivisorFactor = i;\n      if (minDivisor > minDivisorFactor) {\n        minDivisor = minDivisor", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factorization = [];\n  const factors = primeFactors(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast2 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast2(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast3 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast3(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast4 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast4(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast5 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast5(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast6 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast6(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast7 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast7(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast8 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast8(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast9 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast9(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast10 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast10(n);\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(factors[i]);\n  }\n  return factorization;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizesFast11 = (n) => {\n  const factorization = [];\n  const factors = primeFactorsFast11(n);\n  for (let i = 0; i < factors.length; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 3]\n  */\nconst removeDuplicateLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!hash[number]) {\n      hash[number] = true;\n      result.push(number);\n    } else {\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur exactly once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2])\n  [1, 2]\n  */\nconst removeDuplicateExactlyOnceLessThanOnce = (numbers) => {\n  const result = [];\n  let hash = {};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string\n   .toLowerCase()\n   .replace(/[a-z]/g, char => char.toUpperCase())\n   .replace(/[A-Z]/g, char => char.toLowerCase());\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n * Given a string, return a new string with the first letter of each word capitalized.\n  >>> capitalizeFirst('Hello World')\n  'Hello World'\n  >>> capitalizeFirst('Hello World!')\n  'Hello World!'\n  */\nconst capitalizeFirst = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove all whitespace from a string\n  >>> removeWhiteSpace('  foo  ')\n  'foo'\n  */\nconst removeWhiteSpace = (str) => {\n  return str.replace(/\\s/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpace('  foo  ')\n  'foo'\n  */\nconst removeWhiteSpaceAndReplaceWithSpace = (str) => {\n  return str.replace(/\\s/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpace('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpace = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpace('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpace = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpace('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpace = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpace = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\nconst removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim = (str) => {\n  return str.replace(/\\s/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \" \").replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove all whitespace from a string and replace it with a single space\n  >>> removeWhiteSpaceAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrimAndReplaceWithSpaceAndTrim('  foo  ')\n  'foo '\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].endsWith(suffix)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filteredStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      filteredStrings.push(strings[i]);\n    }\n  }\n  return filteredStrings;\n};\n\n/**\n * Filter an input list of strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of account\n  falls below zero, and at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that takes a list of deposit and withdrawal operations on a bank\n  account that starts with zero balance. Your function should detect if at any point the balance of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> gottenNegative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> gottenNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenNegative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> gottenDivisibleBy3([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy3 = (l) => {\n  return l.filter((x) => x % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> gottenDivisibleBy5([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy5 = (l) => {\n  return l.filter((x) => x % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> gottenDivisibleBy7([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy7([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy7 = (l) => {\n  return l.filter((x) => x % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> gottenDivisibleBy11([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy11([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy11 = (l) => {\n  return l.filter((x) => x % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> gottenDivisibleBy13([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy13([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy13 = (l) => {\n  return l.filter((x) => x % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> gottenDivisibleBy17([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy17([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy17 = (l) => {\n  return l.filter((x) => x % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> gottenDivisibleBy19([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy19([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy19 = (l) => {\n  return l.filter((x) => x % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> gottenDivisibleBy21([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy21([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy21 = (l) => {\n  return l.filter((x) => x % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 23.\n  >>> gottenDivisibleBy23([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy23([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy23 = (l) => {\n  return l.filter((x) => x % 23 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 27.\n  >>> gottenDivisibleBy27([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy27([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy27 = (l) => {\n  return l.filter((x) => x % 27 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 29.\n  >>> gottenDivisibleBy29([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy29([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy29 = (l) => {\n  return l.filter((x) => x % 29 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 31.\n  >>> gottenDivisibleBy31([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy31([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy31 = (l) => {\n  return l.filter((x) => x % 31 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 33.\n  >>> gottenDivisibleBy33([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy33([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy33 = (l) => {\n  return l.filter((x) => x % 33 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 35.\n  >>> gottenDivisibleBy35([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> gottenDivisibleBy35([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, 1]\n  */\nconst gottenDivisibleBy35 = (l) => {\n  return l.filter((x) => x % 35 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 37.\n  >>> gottenDi", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    let zeroPoint = -1;\n    let maxNonZeroCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        zeroPoint = i;\n        maxNonZeroCoefficient = xs[i];\n      }\n    }\n    return zeroPoint;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest coefficient of xs.\n  findMax returns only largest coefficient, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  if (xs.length % 2 === 0) {\n    let maxCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) > maxCoefficient) {\n        maxCoefficient = poly(xs, i);\n      }\n    }\n    return maxCoefficient;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest coefficient of xs.\n  findMin returns only smallest coefficient, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  if (xs.length % 2 === 0) {\n    let minCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) < minCoefficient) {\n        minCoefficient = poly(xs, i);\n      }\n    }\n    return minCoefficient;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot finds root of polynomial with coefficients xs.\n  findRoot returns only root, even if there are many.\n  Moreover, findRoot only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoot([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoot([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoot = (xs) => {\n  if (xs.length % 2 === 0) {\n    let root = 0;\n    let maxNonZeroCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        root = i;\n        maxNonZeroCoefficient = xs[i];\n      }\n    }\n    return root;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds roots of polynomial with coefficients xs.\n  findRoots returns only roots, even if there are many.\n  Moreover, findRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRoots = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    let maxNonZeroCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        roots.push(i);\n        maxNonZeroCoefficient = xs[i];\n      }\n    }\n    return roots;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds roots of polynomial with coefficients xs.\n  findRootsOf returns only roots, even if there are many.\n  Moreover, findRootsOf only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRootsOf([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRootsOf([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRootsOf = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    let maxNonZeroCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        roots.push(i);\n        maxNonZeroCoefficient = xs[i];\n      }\n    }\n    return roots;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds roots of polynomial with coefficients xs.\n  findRootsOf returns only roots, even if there are many.\n  Moreover, findRootsOf only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRootsOf([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findRootsOf([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findRootsOf = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    let maxNonZeroCoefficient = 0;\n    for (let i = 1; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        roots.push(i);\n        maxNonZeroCoefficient = xs[i];\n      }\n    }\n    return roots;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRootsOf finds root", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsFifth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 5 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsSeventh = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 7 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsNineth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsNineth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsNineth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 9 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTenth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsTenth = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 10 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsTwenty = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 20 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsTwentyOrMore = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 20 >= 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sortsTwentyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsTwentyOrMore([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsTwentyOrMore = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 20 >= 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThirty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThirty([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 6, 8, 9, 5]\n  */\nconst sortsThirty = (l) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 30 === 0) {\n      l1.push(l[i]);\n    } else {\n      l2.push(l[i]);\n    }\n  }\n  return l1.concat(l2).sort();\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty or more, while its values at the indicies that are divisible by thirty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThirtyOrMore([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThirty", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l));\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElements = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sumElements([1, 2, 3])\n  6\n  >>> sumElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElements = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> productElements([1, 2, 3])\n  6\n  >>> productElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElements = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order.\n  >>> sumElementsReverse([1, 2, 3])\n  6\n  >>> sumElementsReverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverse = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order.\n  >>> productElementsReverse([1, 2, 3])\n  6\n  >>> productElementsReverse([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsReverse = (l) => {\n  let product = 1;\n  for (let i = l.length - 1; i >= 0; i--) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order in descending order.\n  >>> sumElementsReverseDescending([1, 2, 3])\n  6\n  >>> sumElementsReverseDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverseDescending = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order in descending order.\n  >>> productElementsReverseDescending([1, 2, 3])\n  6\n  >>> productElementsReverseDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsReverseDescending = (l) => {\n  let product = 1;\n  for (let i = l.length - 1; i >= 0; i--) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order in descending order in descending order.\n  >>> sumElementsReverseDescendingDescending([1, 2, 3])\n  6\n  >>> sumElementsReverseDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverseDescendingDescending = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order in descending order in descending order.\n  >>> productElementsReverseDescendingDescending([1, 2, 3])\n  6\n  >>> productElementsReverseDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsReverseDescendingDescending = (l) => {\n  let product = 1;\n  for (let i = l.length - 1; i >= 0; i--) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order in descending order in descending order in descending order.\n  >>> sumElementsReverseDescendingDescendingDescending([1, 2, 3])\n  6\n  >>> sumElementsReverseDescendingDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverseDescendingDescendingDescending = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order in descending order in descending order in descending order.\n  >>> productElementsReverseDescendingDescendingDescending([1, 2, 3])\n  6\n  >>> productElementsReverseDescendingDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsReverseDescendingDescendingDescending = (l) => {\n  let product = 1;\n  for (let i = l.length - 1; i >= 0; i--) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order in descending order in descending order in descending order in descending order.\n  >>> sumElementsReverseDescendingDescendingDescendingDescending([1, 2, 3])\n  6\n  >>> sumElementsReverseDescendingDescendingDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverseDescendingDescendingDescendingDescending = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order in descending order in descending order in descending order in descending order.\n  >>> productElementsReverseDescendingDescendingDescendingDescending([1, 2, 3])\n  6\n  >>> productElementsReverseDescendingDescendingDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst productElementsReverseDescendingDescendingDescendingDescending = (l) => {\n  let product = 1;\n  for (let i = l.length - 1; i >= 0; i--) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in reverse order in descending order in descending order in descending order in descending order in descending order.\n  >>> sumElementsReverseDescendingDescendingDescendingDescendingDescending([1, 2, 3])\n  6\n  >>> sumElementsReverseDescendingDescendingDescendingDescendingDescending([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sumElementsReverseDescendingDescendingDescendingDescendingDescending = (l) => {\n  let sum = 0;\n  for (let i = l.length - 1; i >= 0; i--) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in reverse order in descending order in descending order in descending order in descending order in descending order.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  1\n  >>> fizzBuzzes(79)\n  1\n  */\nconst fizzBuzzes2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes2(50)\n  0\n  >>> fizzBuzzes2(78)\n  1\n  >>> fizzBuzzes2(79)\n  1\n  */\nconst fizzBuzzes3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes3(50)\n  0\n  >>> fizzBuzzes3(78)\n  1\n  >>> fizzBuzzes3(79)\n  1\n  */\nconst fizzBuzzes4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes4(50)\n  0\n  >>> fizzBuzzes4(78)\n  1\n  >>> fizzBuzzes4(79)\n  1\n  */\nconst fizzBuzzes5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes5(50)\n  0\n  >>> fizzBuzzes5(78)\n  1\n  >>> fizzBuzzes5(79)\n  1\n  */\nconst fizzBuzzes6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes6(50)\n  0\n  >>> fizzBuzzes6(78)\n  1\n  >>> fizzBuzzes6(79)\n  1\n  */\nconst fizzBuzzes7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes7(50)\n  0\n  >>> fizzBuzzes7(78)\n  1\n  >>> fizzBuzzes7(79)\n  1\n  */\nconst fizzBuzzes8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes8(50)\n  0\n  >>> fizzBuzzes8(78)\n  1\n  >>> fizzBuzzes8(79)\n  1\n  */\nconst fizzBuzzes9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes9(50)\n  0\n  >>> fizzBuzzes9(78)\n  1\n  >>> fizzBuzzes9(79)\n  1\n  */\nconst fizzBuzzes10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes10(50)\n  0\n  >>> fizzBuzzes10(78)\n  1\n  >>> fizzBuzzes10(79)\n  1\n  */\nconst fizzBuzzes11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes11(50)\n  0\n  >>> fizzBuzzes11(78)\n  1\n  >>> fizzBuzzes11(79)\n  1\n  */\nconst fizzBuzzes12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes12(50)\n  0\n  >>> fizzBuzzes12(78)\n  1\n  >>> fizzBuzzes12(79)\n  1\n  */\nconst fizzBuzzes13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizzBuzzes13(50)\n  0\n  >>> fizzBuzzes13(78)\n  1\n  >>> fizzBuzzes13(79)\n  1\n  */\nconst fizzBuzzes14 = (n) => {\n  let count = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsOdd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encodeCyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic0 = (s) => {\n  var ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[n - 1];\n};\n\n/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [];\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  for (let i = 1; i <= n; i++) {\n    fibs.push(a);\n    a = b;\n    b = c;\n    c = a + b;\n    d = b + c;\n  }\n  return fibs[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = (numbers) => {\n    return numbers.reduce((sum, number) => sum + number, 0) / numbers.length;\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - mean(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex];\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - median(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = (numbers) => {\n    const modes = {};\n    numbers.forEach((number) => {\n      if (!modes[number]) {\n        modes[number] = 1;\n      } else {\n        modes[number]++;\n      }\n    });\n    const modesArray = [];\n    Object.keys(modes).forEach((key) => {\n      modesArray.push([key, modes[key]]);\n    });\n    modesArray.sort((a, b) => b[1] - a[1]);\n    return modesArray[0][0];\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - mode(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex];\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - median(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = (numbers) => {\n    return numbers.reduce((sum, number) => sum + number, 0) / numbers.length;\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - mean(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex];\n  };\n  const deviations = (numbers) => {\n    return numbers.map((number) => {\n      const difference = number - median(numbers);\n      return Math.pow(difference, 2);\n    });\n  };\n  const averageDeviation = deviations(numbers).map((deviation) => deviation.reduce((sum, deviation) => sum + deviation, 0) / deviation.length);\n  return Math.sqrt(averageDeviation.reduce((sum, deviation) => sum + deviation, 0) / averageDeviation.length);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mode = (numbers) => {\n    const modes = {};\n    numbers.forEach((number) => {\n      if (!modes[number]) {\n        modes[number] = 1;\n      } else {\n        modes[number]++;\n      }\n    });\n    const modesArray", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> tripleSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> tripleSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> tripleSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> tripleSummingToZeroed([1])\n  false\n  */\nconst tripleSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  tripleSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> tripleSummingToZeroed([1, 3, 5, 0])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carsRaces(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRaces = (i, j) => {\n  let xDiff = carsX(i, j) - carsX(j, i);\n  let yDiff = carsY(i, j) - carsY(j, i);\n  return xDiff * xDiff + yDiff * yDiff < carsRadius(i, j) * carsRadius(i, j);\n};\n\n/*\n  Given a starting point and an ending point, determine if the two lines they\n  are travelling through, intersect at some point.  If they intersect, return\n  the point of intersection.\n\n  For example, consider the following points:\n  (0, 0)\n  (10, 0)\n  (10, 10)\n  (0, 10)\n  If the starting point is (0, 0) and the ending point is (10, 10), then the\n  line they travel through is (10, 0).  At this point, no cars are in contact with\n  each other.  Therefore, the function should return (0, 0).\n  */\nconst carsIntersect = (startX, startY, endX, endY) => {\n  let xDiff = endX - startX;\n  let yDiff = endY - startY;\n  let denominator = xDiff * xDiff + yDiff * yDiff;\n  if (denominator === 0) {\n    return null;\n  }\n  let numerator = startX * yDiff - startY * xDiff;\n  let roots = numerator / denominator;\n  if (roots < 0) {\n    return null;\n  }\n  let x = startX + xDiff * roots;\n  let y = startY + yDiff * roots;\n  return [x, y];\n};\n\n/*\n  Given a starting point and an ending point, determine if the two lines they\n  are travelling through, intersect at some point.  If they intersect, return\n  the point of intersection.\n\n  For example, consider the following points:\n  (0, 0)\n  (10, 0)\n  (10, 10)\n  (0, 10)\n  If the starting point is (0, 0) and the ending point is (10, 10), then the\n  line they travel through is (10, 0).  At this point, no cars are in contact with\n  each other.  Therefore, the function should return (0, 0).\n  */\nconst carsIntersect2 = (startX, startY, endX, endY) => {\n  let xDiff = endX - startX;\n  let yDiff = endY - startY;\n  let denominator = xDiff * xDiff + yDiff * yDiff;\n  if (denominator === 0) {\n    return null;\n  }\n  let numerator = startX * yDiff - startY * xDiff;\n  let roots = numerator / denominator;\n  if (roots < 0) {\n    return null;\n  }\n  let x = startX + xDiff * roots;\n  let y = startY + yDiff * roots;\n  return [x, y];\n};\n\n/*\n  Given a starting point and an ending point, determine if the two lines they\n  are travelling through, intersect at some point.  If they intersect, return\n  the point of intersection.\n\n  For example, consider the following points:\n  (0, 0)\n  (10, 0)\n  (10, 10)\n  (0, 10)\n  If the starting point is (0, 0) and the ending point is (10, 10), then the\n  line they travel through is (10, 0).  At this point, no cars are in contact with\n  each other.  Therefore, the function should return (0, 0).\n  */\nconst carsIntersect3 = (startX, startY, endX, endY) => {\n  let xDiff = endX - startX;\n  let yDiff = endY - startY;\n  let denominator = xDiff * xDiff + yDiff * yDiff;\n  if (denominator === 0) {\n    return null;\n  }\n  let numerator = startX * yDiff - startY * xDiff;\n  let roots = numerator / denominator;\n  if (roots < 0) {\n    return null;\n  }\n  let x = startX + xDiff * roots;\n  let y = startY + yDiff * roots;\n  return [x, y];\n};\n\n/*\n  Given a starting point and an ending point, determine if the two lines they\n  are travelling through, intersect at some point.  If they intersect, return\n  the point of intersection.\n\n  For example, consider the following points:\n  (0, 0)\n  (10, 0)\n  (10, 10)\n  (0, 10)\n  If the starting point is (0, 0) and the ending point is (10, 10), then the\n  line they travel through is (10, 0).  At this point, no cars are in contact with\n  each other.  Therefore, the function should return (0, 0).\n  */\nconst carsIntersect4 = (startX, startY, endX, endY) => {\n  let xDiff = endX - startX;\n  let yDiff = endY - startY;\n  let denominator = xDiff * xDiff + yDiff * yDiff;\n  if (denominator === 0) {\n    return null;\n  }\n  let numerator = startX * yDiff - startY * xDiff;\n  let roots = numerator / denominator;\n  if (roots < 0) {\n    return null;\n  }\n  let x = startX + xDiff * roots;\n  let y = startY + yDiff * roots;\n  return [x, y];\n};\n\n/*\n  Given a starting point and an ending point, determine if the two lines they\n  are travelling through, intersect at some point.  If they intersect, return\n  the point of intersection.\n\n  For example, consider the following points:\n  (0, 0)\n  (10, 0)\n  (10, 10)\n  (0, 10)\n  If the starting point is (0, 0) and the ending point is (10, 10), then the\n  line they travel through is (10, 0).  At this point, no cars are in contact with\n  each other.  Therefore, the function should return (0, 0).\n  */\nconst cars", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [3, 2, 1]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst decrLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] - 1;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n  >>> divLists([1, 2, 3])\n  [1, 2, 2]\n  >>> divLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 10, 1, 12]\n  */\nconst divLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] / 2;\n  }\n  return r;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multLists([1, 2, 3])\n  [2, 4, 6]\n  >>> multLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 30, 45, 15, 30, 90, 15, 0, 123]\n  */\nconst multLists = (l) => {\n  let r = [];\n  for (let i = 0; i < l.length; i++) {\n    r[i] = l[i] * 2;\n  }\n  return r;\n};\n\n/*Return list with elements divided by 2.\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = base * x + res\n    x = x % base\n  }\n  return res\n}\n\n/*\n  Convert binary number to its decimal equivalent.\n  >>> binaryToDecimal('11')\n  3\n  >>> binaryToDecimal('1010')\n  10\n  >>> binaryToDecimal('10101')\n  11\n  >>> binaryToDecimal('11')\n  3\n  >>> binaryToDecimal('111')\n  4\n  >>> binaryToDecimal('1111')\n  5\n  >>> binaryToDecimal('11111')\n  6\n  >>> binaryToDecimal('111111')\n  7\n  >>> binaryToDecimal('1111111')\n  8\n  >>> binaryToDecimal('11111111')\n  9\n  >>> binaryToDecimal('111111111')\n  10\n  >>> binaryToDecimal('1111111111')\n  11\n  >>> binaryToDecimal('11111111111')\n  12\n  >>> binaryToDecimal('111111111111')\n  13\n  >>> binaryToDecimal('1111111111111')\n  14\n  >>> binaryToDecimal('11111111111111')\n  15\n  >>> binaryToDecimal('111111111111111')\n  16\n  >>> binaryToDecimal('1111111111111112')\n  17\n  >>> binaryToDecimal('11111111111111121')\n  18\n  >>> binaryToDecimal('111111111111111211')\n  19\n  >>> binaryToDecimal('11111111111111121111')\n  20\n  >>> binaryToDecimal('111111111111111211111')\n  21\n  >>> binaryToDecimal('1111111111111112111111')\n  22\n  >>> binaryToDecimal('11111111111111121111111')\n  23\n  >>> binaryToDecimal('111111111111111211111112')\n  24\n  >>> binaryToDecimal('1111111111111112111111121')\n  25\n  >>> binaryToDecimal('11111111111111121111111211')\n  26\n  >>> binaryToDecimal('1111111111111112111111121111')\n  27\n  >>> binaryToDecimal('11111111111111121111111211111')\n  28\n  >>> binaryToDecimal('111111111111111211111112111111')\n  29\n  >>> binaryToDecimal('1111111111111112111111121111111')\n  30\n  >>> binaryToDecimal('11111111111111121111111211111112')\n  31\n  >>> binaryToDecimal('111111111111111211111112111111121')\n  32\n  >>> binaryToDecimal('1111111111111112111111121111111211')\n  33\n  >>> binaryToDecimal('111111111111111211111112111111121111')\n  34\n  >>> binaryToDecimal('1111111111111112111111121111111211111')\n  35\n  >>> binaryToDecimal('11111111111111121111111211111112111111')\n  36\n  >>> binaryToDecimal('111111111111111211111112111111121111111')\n  37\n  >>> binaryToDecimal('1111111111111112111111121111111211111112')\n  38\n  >>> binaryToDecimal('11111111111111121111111211111112111111121')\n  39\n  >>> binaryToDecimal('111111111111111211111112111111121111111211')\n  40\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111')\n  41\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111')\n  42\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111')\n  43\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111')\n  44\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112')\n  45\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121')\n  46\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211')\n  47\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111')\n  48\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211111')\n  49\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111')\n  50\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111111')\n  51\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211111112')\n  52\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111121')\n  53\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111111211')\n  54\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111121111')\n  55\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111111211111')\n  56\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211111112111111')\n  57\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111121111111')\n  58\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111111211111112')\n  59\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211111112111111121')\n  60\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111121111111211')\n  61\n  >>> binaryToDecimal('11111111111111121111111211111112111111121111111211111112111111121111')\n  62\n  >>> binaryToDecimal('111111111111111211111112111111121111111211111112111111121111111211111')\n  63\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111111211111112111111')\n  64\n  >>> binaryToDecimal('1111111111111112111111121111111211111112111111121111", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return a * h / 2\n}\n\n/*Given length of a side and high return area for a square.\n  >>> squaresAreas(5, 3)\n  7.5\n  */\nconst squaresAreas = (a, h) => {\n  return a * h / 4\n}\n\n/*Given length of a side and high return area for a pentagon.\n  >>> pentagonsAreas(5, 3)\n  7.5\n  */\nconst pentagonsAreas = (a, h) => {\n  return a * h / 6\n}\n\n/*Given length of a side and high return area for a hexagon.\n  >>> hexagonsAreas(5, 3)\n  7.5\n  */\nconst hexagonsAreas = (a, h) => {\n  return a * h / 8\n}\n\n/*Given length of a side and high return area for a heptagon.\n  >>> heptagonsAreas(5, 3)\n  7.5\n  */\nconst heptagonsAreas = (a, h) => {\n  return a * h / 10\n}\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagonsAreas(5, 3)\n  7.5\n  */\nconst octagonsAreas = (a, h) => {\n  return a * h / 12\n}\n\n/*Given length of a side and high return area for a nonagon.\n  >>> nonagonsAreas(5, 3)\n  7.5\n  */\nconst nonagonsAreas = (a, h) => {\n  return a * h / 16\n}\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagonsAreas(5, 3)\n  7.5\n  */\nconst decagonsAreas = (a, h) => {\n  return a * h / 20\n}\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagonsAreas(5, 3)\n  7.5\n  */\nconst dodecagonsAreas = (a, h) => {\n  return a * h / 30\n}\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagonsAreas(5, 3)\n  7.5\n  */\nconst heptadecagonsAreas = (a, h) => {\n  return a * h / 40\n}\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagonsAreas(5, 3)\n  7.5\n  */\nconst octadecagonsAreas = (a, h) => {\n  return a * h / 50\n}\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagonsAreas(5, 3)\n  7.5\n  */\nconst nonadecagonsAreas = (a, h) => {\n  return a * h / 60\n}\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagonsAreas(5, 3)\n  7.5\n  */\nconst decagonsAreas = (a, h) => {\n  return a * h / 20\n}\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagonsAreas(5, 3)\n  7.5\n  */\nconst dodecagonsAreas = (a, h) => {\n  return a * h / 30\n}\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagonsAreas(5, 3)\n  7.5\n  */\nconst heptadecagonsAreas = (a, h) => {\n  return a * h / 40\n}\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagonsAreas(5, 3)\n  7.5\n  */\nconst octadecagonsAreas = (a, h) => {\n  return a * h / 50\n}\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagonsAreas(5, 3)\n  7.5\n  */\nconst nonadecagonsAreas = (a, h) => {\n  return a * h / 60\n}\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagonsAreas(5, 3)\n  7.5\n  */\nconst decagonsAreas = (a, h) => {\n  return a * h / 20\n}\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagonsAreas(5, 3)\n  7.5\n  */\nconst dodecagonsAreas = (a, h) => {\n  return a * h / 30\n}\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagonsAreas(5, 3)\n  7.5\n  */\nconst heptadecagonsAreas = (a, h) => {\n  return a * h / 40\n}\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagonsAreas(5, 3)\n  7.5\n  */\nconst octadecagonsAreas = (a, h) => {\n  return a * h / 50\n}\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagonsAreas(5, 3)\n  7.5\n  */\nconst nonadecagonsAreas = (a, h) => {\n  return a * h / 60\n}\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagonsAreas(5, 3)\n  7.5\n  */\nconst decagonsAreas = (a, h) => {\n  return a * h / 20\n}\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagonsAreas(5, 3)\n  7.5\n  */\nconst dodecagonsAreas = (a, h) => {\n  return a * h / 30\n}\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagonsAreas(5, 3)\n  7.5\n  */\nconst heptadecagonsAreas = (a, h) => {\n  return a * h / 40\n}\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagonsAreas(5, 3)\n  7.5\n  */\nconst octadecagonsAreas = (a, h) => {\n  return a * h / 50\n}\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagonsAreas(5, 3)\n  7.5\n  */\nconst nonadecagonsAreas = (a, h) => {\n  return a * h / 60\n}\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagonsAreas(5, 3)\n  7.5\n  */\nconst decagonsAreas = (a, h) => {\n  return a * h / 20\n}\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagonsAreas(5, 3)\n  7.5\n  */\nconst dodecagonsAreas = (a, h) => {\n  return a * h / 30\n}\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagonsAreas(5, 3)\n  7.5\n  */\nconst heptadecagonsAreas = (a, h) => {\n  return a * h / 40\n}\n\n/*Given length of a side ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 1\n  fib5(3) -> 2\n  fib5(4) -> 1\n  fib5(5) -> 1\n  fib5(6) -> 2\n  fib5(7) -> 3\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  if (n === 4) return 1;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 3;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5) + fib5(n - 6);\n};\n\n/*The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 1\n  fib6(2) -> 1\n  fib6(3) -> 2\n  fib6(4) -> 1\n  fib6(5) -> 1\n  fib6(6) -> 2\n  fib6(7) -> 3\n  fib6(8) -> 3\n  fib6(9) -> 5\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6) + fib6(n-7) + fib6(n-8) + fib6(n-9).\n  Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n  >>> fib6(9)\n  55\n  >>> fib6(10)\n  89\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  if (n === 4) return 1;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 3;\n  if (n === 8) return 3;\n  if (n === 9) return 5;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6) + fib6(n - 7) + fib6(n - 8) + fib6(n - 9);\n};\n\n/*The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 1\n  fib7(2) -> 1\n  fib7(3) -> 2\n  fib7(4) -> 1\n  fib7(5) -> 1\n  fib7(6) -> 2\n  fib7(7) -> 3\n  fib7(8) -> 3\n  fib7(9) -> 5\n  fib7(10) -> 5\n  fib7(11) -> 9\n  fib7(12) -> 9\n  fib7(13) -> 13\n  fib7(14) -> 13\n  fib7(15) -> 17\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7) + fib7(n-8) + fib7(n-9) + fib7(n-10) + fib7(n-11) + fib7(n-12) + fib7(n-13) + fib7(n-14) + fib7(n-15) + fib7(n-16).\n  Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n  >>> fib7(15)\n  434\n  >>> fib7(16)\n  987\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  if (n === 4) return 1;\n  if (n === 5) return 1;\n  if (n === 6) return 2;\n  if (n === 7) return 3;\n  if (n === 8) return 3;\n  if (n === 9) return 5;\n  if (n === 10) return 5;\n  if (n === 11) return 9;\n  if (n === 12) return 9;\n  if (n === 13) return 13;\n  if (n === 14) return 13;\n  if (n === 15) return 17;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7) + fib7(n - 8) + fib7(n - 9) + fib7(n - 10) + fib7(n - 11) + fib7(n - 12) + fib7(n - 13) + fib7(n - 14) + fib7(n - 15) + fib7(n - 16);\n};\n\n/*The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 1\n  fib8(2) -> 1\n  fib8(3) -> 2\n  fib8(4) -> 1\n  fib8(5) -> 1\n  fib8(6) -> 2\n  fib8(7) -> 3\n  fib8(8) -> 3\n  fib8(9) -> 5\n  fib8(10) -> 5\n  fib8(11) -> 9\n  fib8(12) -> 9\n  fib8(13) -> 13\n  fib8(14) -> 13\n  fib8(15) -> 17\n  fib8(16) -> 17\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8) + fib8(n-9) + fib8(n-10) + fib8(n-11) + fib8(n-12) + fib8(n-13) + fib8(n-14) + fib8(n-15) + fib8(n-16) + fib8(n-17).\n  Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n  >>> fib8(16)\n  434\n  >>> fib8(17)\n  987\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n  if (n === 3) return 2;\n  if (n === 4) return 1;\n  if (n === 5", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Cannot compute median of an empty list');\n  }\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[(len - 1) / 2];\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with given length\n  >>> isPalindromeWithLength('aba', 2)\n  true\n  >>> isPalindromeWithLength('aaaaa', 2)\n  true\n  >>> isPalindromeWithLength('zbcd', 2)\n  false\n  */\nconst isPalindromeWithLength = (text, length) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length;\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLength('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLength('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLength('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'lower';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'upper';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'upper')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'upper';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'lower';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'upper')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'upper';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'lower';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'upper')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'upper';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'lower';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'upper')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'upper')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text === reversed && text.length === length && case === 'upper';\n};\n\n/*\n  Checks if given string is a palindrome with given length and case\n  >>> isPalindromeWithLengthCase('aba', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('aaaaa', 2, 'lower')\n  true\n  >>> isPalindromeWithLengthCase('zbcd', 2, 'lower')\n  false\n  */\nconst isPalindromeWithLengthCase = (text, length, case) => {\n  let reversed = text\n   .toLowerCase()\n   .split('')\n   .reverse()\n   .join('');\n  return text ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = 1;\n  for (let i = 1; i <= n; i++) {\n    res *= p;\n    res %= p;\n  }\n  return res;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 10", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (i!== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/**\n * Takes a string and returns a new string with each character replaced with a new random character.\n * \n * Uses [Math.random()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\n * to generate random characters.\n * \n * Uses [String.fromCharCode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\n * to generate random characters.\n * \n * Uses [String.fromCodePoint](https://developer.mozilla.org/en-US/docs/Web", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by rotating every character by 5 in the alphabet.\n  */\nconst encodeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_rotate function. Returns decoded string.\n  */\nconst decodeRotate = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 5 to every character in the alphabet.\n  */\nconst encodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add5 function. Returns decoded string.\n  */\nconst decodeAdd5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 10 to every character in the alphabet.\n  */\nconst encodeAdd10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 10 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add10 function. Returns decoded string.\n  */\nconst decodeAdd10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 15 to every character in the alphabet.\n  */\nconst encodeAdd15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 15 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add15 function. Returns decoded string.\n  */\nconst decodeAdd15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 20 to every character in the alphabet.\n  */\nconst encodeAdd20 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 20 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add20 function. Returns decoded string.\n  */\nconst decodeAdd20 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 25 to every character in the alphabet.\n  */\nconst encodeAdd25 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 25 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add25 function. Returns decoded string.\n  */\nconst decodeAdd25 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 30 to every character in the alphabet.\n  */\nconst encodeAdd30 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 30 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add30 function. Returns decoded string.\n  */\nconst decodeAdd30 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 35 to every character in the alphabet.\n  */\nconst encodeAdd35 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 35 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add35 function. Returns decoded string.\n  */\nconst decodeAdd35 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 40 to every character in the alphabet.\n  */\nconst encodeAdd40 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 40 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add40 function. Returns decoded string.\n  */\nconst decodeAdd40 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 45 to every character in the alphabet.\n  */\nconst encodeAdd45 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 45 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add45 function. Returns decoded string.\n  */\nconst decodeAdd45 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by adding 50 to every character in the alphabet.\n  */\nconst encodeAdd50 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 50 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_add50 function. Returns decoded string.\n  */\nconst decode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  removeStopWords is a function that takes string and returns string without stopwords.\n  >>> removeStopWords('')\n  ''\n  >>> removeStopWords('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeStopWords('abcdef')\n  'abcdef'\n  >>> removeStopWords('aaaaa')\n  ''\n  >>> removeStopWords('aaBAA')\n  'aaB'\n  >>> removeStopWords('zbcd')\n  'zbc'\n  */\nconst removeStopWords = (text) => {\n  return text.replace(/\\b[a-z]+\\b/g, '');\n};\n\n/*\n  removeNumbers is a function that takes string and returns string without numbers.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'aaB'\n  >>> removeNumbers('zbcd')\n  'zbc'\n  */\nconst removeNumbers = (text) => {\n  return text.replace(/[0-9]+/g, '');\n};\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation('abcdef\\nghijklm')\n  'abcdef'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'aaB'\n  >>> removePunctuation('zbcd')\n  'zbc'\n  */\nconst removePunctuation = (text) => {\n  return text.replace(/[!,.?;:]/g, '');\n};\n\n/*\n  removeWhitespace is a function that takes string and returns string without whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'aaB'\n  >>> removeWhitespace('zbcd')\n  'zbc'\n  */\nconst removeWhitespace = (text) => {\n  return text.replace(/\\s/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric('abcdef\\nghijklm')\n  'abcdef'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'aaB'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbc'\n  */\nconst removeNonAlphanumeric = (text) => {\n  return text.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/*\n  removeNonAlphanumeric is a function that takes string and returns string without non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNon", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThresholds([1, 2, 4, 10], 100)\n  false\n  >>> aboveThresholds([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThresholds([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThresholds = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t + delta) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t+delta.\n  >>> betweenThresholds([1, 2, 4, 10], 100, 5)\n  true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtracting(2, 3)\n  1\n  >>> subtracting(5, 7)\n  3\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  42\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> dividing(2, 3)\n  1.5\n  >>> dividing(5, 7)\n  3\n  */\nconst dividing = (x, y) => {\n  return x / y;\n};\n\n/*Get the remainder of dividing x by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of a number\n  >>> absolute(10)\n  10\n  >>> absolute(-10)\n  10\n  */\nconst absolute = (x) => {\n  return Math.abs(x);\n};\n\n/*Get the sign of a number\n  >>> sign(1)\n  1\n  >>> sign(-1)\n  -1\n  */\nconst sign = (x) => {\n  return x < 0? -1 : 1;\n};\n\n/*Get the floor of a number\n  >>> floor(10)\n  10\n  >>> floor(-10)\n  -10\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Get the ceil of a number\n  >>> ceil(10)\n  10\n  >>> ceil(-10)\n  -10\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Get the floor and ceil of a number\n  >>> floorAndCeil(10)\n  [10, 10]\n  >>> floorAndCeil(-10)\n  [-10, -10]\n  */\nconst floorAndCeil = (x) => {\n  return [floor(x), ceil(x)];\n};\n\n/*Get the modulus of a number\n  >>> modulus(10, 3)\n  3\n  >>> modulus(10, -3)\n  -3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of a number divided by another number\n  >>> remainder(10, 3)\n  3\n  >>> remainder(10, -3)\n  -3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return [x % y, x % y];\n};\n\n/*Get the modulus and remainder of a number divided by another number\n  >>> modulusAndRemainder(10, 3)\n  [3, 3]\n  >>> modulusAndRemainder(10, -3)\n  [3, -3]\n  */\nconst modulusAndRemainder = (x, y) => {\n  return ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  if (n <= 1) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fib", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split('><');\n  const closingBrackets = brackets.split('>>');\n\n  for (let i = 0; i < openingBrackets.length; i += 1) {\n    if (openingBrackets[i]!== closingBrackets[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Given a string, returns the string with all instances of one character replaced\n * with another character.\n *\n * Example:\n *   replaceOne('abcabc', 'a', 'X') --> 'XbXcXb'\n *   replaceOne('abcabc', 'A', 'B') --> 'BbBcBb'\n */\nconst replaceOne = (string, a, b) => {\n  return string.replace(new RegExp(a, 'g'), b);\n};\n\n/**\n * Given a string, returns an array of the string's characters.\n *\n * Example:\n *   charsOf('abracadabra') --> ['a', 'b', 'r', 'c', 'd']\n */\nconst charsOf = (string) => {\n  return string.split('');\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size`.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicates = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicates = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOfAndDuplicates = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOfAndDuplicates = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOf = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = string.substr(index, size);\n    array.push(substr);\n    index += substr.length;\n  }\n\n  return array;\n};\n\n/**\n * Given a string, returns an array of all of the string's substrings\n * split into groups the length of `size` while maintaining order.\n *\n * Example:\n *   substringsOf('abracadabra', 2) --> ['abr', 'aca', 'adb']\n */\nconst substringsWithOrderOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOfAndDuplicatesOfAndDuplicates = (string, size) => {\n  const array = [];\n  let index = 0;\n\n  while (index < string.length) {\n    const substr = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecr = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > l[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecrIncrDecr = (l) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((v) => {\n    if (set2.has(v)) {\n      common.push(v);\n      set2.delete(v);\n    }\n  });\n  set2.forEach((v) => {\n    if (!set1.has(v)) {\n      common.push(v);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  2\n  >>> smallestPrimeFactor(2048)\n  3\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> numberOfDivisors(4, 6)\n  2\n  >>> numberOfDivisors(4, 8)\n  2\n  >>> numberOfDivisors(4, 10)\n  2\n  >>> numberOfDivisors(4, 12)\n  3\n  >>> numberOfDivisors(4, 14)\n  2\n  >>> numberOfDivisors(4, 16)\n  1\n  >>> numberOfDivisors(4, 18)\n  2\n  >>> numberOfDivisors(4, 20)\n  2\n  >>> numberOfDivisors(4, 22)\n  1\n  >>> numberOfDivisors(4, 24)\n  1\n  >>> numberOfDivisors(4, 26)\n  1\n  >>> numberOfDivisors(4, 28)\n  1\n  >>> numberOfDivisors(4, 30)\n  1\n  >>> numberOfDivisors(4, 32)\n  1\n  >>> numberOfDivisors(4, 34)\n  1\n  >>> numberOfDivisors(4, 36)\n  1\n  >>> numberOfDivisors(4, 38)\n  1\n  >>> numberOfDivisors(4, 40)\n  1\n  >>> numberOfDivisors(4, 42)\n  1\n  >>> numberOfDivisors(4, 44)\n  1\n  >>> numberOfDivisors(4, 46)\n  1\n  >>> numberOfDivisors(4, 48)\n  1\n  >>> numberOfDivisors(4, 50)\n  1\n  >>> numberOfDivisors(4, 52)\n  1\n  >>> numberOfDivisors(4, 54)\n  1\n  >>> numberOfDivisors(4, 56)\n  1\n  >>> numberOfDivisors(4, 58)\n  1\n  >>> numberOfDivisors(4, 60)\n  1\n  >>> numberOfDivisors(4, 62)\n  1\n  >>> numberOfDivisors(4, 64)\n  1\n  >>> numberOfDivisors(4, 66)\n  1\n  >>> numberOfDivisors(4, 68)\n  1\n  >>> numberOfDivisors(4, 70)\n  1\n  >>> numberOfDivisors(4, 72)\n  1\n  >>> numberOfDivisors(4, 74)\n  1\n  >>> numberOfDivisors(4, 76)\n  1\n  >>> numberOfDivisors(4, 78)\n  1\n  >>> numberOfDivisors(4, 80)\n  1\n  >>> numberOfDivisors(4, 82)\n  1\n  >>> numberOfDivisors(4, 84)\n  1\n  >>> numberOfDivisors(4, 86)\n  1\n  >>> numberOfDivisors(4, 88)\n  1\n  >>> numberOfDivisors(4, 90)\n  1\n  >>> numberOfDivisors(4, 92)\n  1\n  >>> numberOfDivisors(4, 94)\n  1\n  >>> numberOfDivisors(4, 96)\n  1\n  >>> numberOfDivisors(4, 98)\n  1\n  >>> numberOfDivisors(4, 100)\n  1\n  >>> numberOfDivisors(4, 102)\n  1\n  >>> numberOfDivisors(4, 104)\n  1\n  >>> numberOfDivisors(4, 106)\n  1\n  >>> numberOfDivisors(4, 108)\n  1\n  >>> numberOfDivisors(4, 110)\n  1\n  >>> numberOfDivisors(4, 112)\n  1\n  >>> numberOfDivisors(4, 114)\n  1\n  >>> numberOfDivisors(4, 116)\n  1\n  >>> numberOfDivisors(4, 118)\n  1\n  >>> numberOfDivisors(4, 120)\n  1\n  >>> numberOfDivisors(4, 122)\n  1\n  >>> numberOfDivisors(4, 124)\n  1\n  >>> numberOfDivisors(4, 126)\n  1\n  >>> numberOfDivisors(4, 128)\n  1\n  >>> numberOfDivisors(4, 130)\n  1\n  >>> numberOfDivisors(4, 132)\n  1\n  >>> numberOfDivisors(4, 134)\n  1\n  >>> numberOfDivisors(4, 136)\n  1\n  >>> numberOfDivisors(4, 138)\n  1\n  >>> numberOfDivisors(4, 140)\n  1\n  >>> numberOfDivisors(4, 142)\n  1\n  >>> numberOfDivisors(4, 144)\n  1\n  >>> numberOfDivisors(4, 146)\n  1\n  >>> numberOfDivisors(4, 148)\n  1\n  >>> numberOfDivisors(4, 150)\n  1\n  >>> numberOfDivisors(4, 152)\n  1\n  >>> numberOfDivisors(4, 154)\n  1\n  >>> numberOfDivisors(4, 156)\n  1\n  >>> numberOfDivisors(4, 158)\n  1\n  >>> numberOfDivisors(4, 160)\n  1\n  >>> numberOfDivisors(4, 162)\n  1\n  >>> numberOfDivisors(4, 164)\n  1\n  >>> numberOfDivisors(4, 166)\n  1\n  >>> numberOfDivisors(4, 168)\n  1\n  >>> numberOfDivisors(4, 170)\n  1\n  >>> numberOfDivisors(4, 172)\n  1\n  >>> numberOfDivisors(4, 174)\n  1\n  >>> numberOfDivisors(4, 176)\n  1\n  >>> numberOfDivisors(4, 178)\n  1\n  >>> numberOfDivisors(4, 180)\n  1\n  >>> numberOfDivisors(4, 182)\n  1\n  >>> numberOfDivisors(4, 184)\n  1\n  >>> numberOfDivisors(4, 186)\n  1\n  >>> numberOfDivisors(4, 188)\n  1\n  >>> numberOfDivisors(4, 190)\n  1\n  >>> numberOfDivisors(4, 192)\n  1\n  >>> numberOfDivisors(4, 194)\n  1\n  >>> numberOfDivisors(4, 196)\n  1\n  >>> numberOfDivisors(4, 198)\n  1\n  >>> numberOfDivisors(4, 200)\n  1\n  >>> numberOfDivisors(4, 202)\n  1\n  >>> numberOfDivisors(4, 204)\n  1\n  >>> numberOfDivisors(4, 206)\n  1\n  >>> numberOfDivisors(4, 208)\n  1\n  >>> numberOfDivisors(4, 210)\n  1\n  >>> numberOfDivisors(4, 212)\n  1\n  >>> numberOfDivisors(4, 214)\n  1", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (char ==='') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (char === ',') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else if (char ==='') {\n      if (paren_level_count === 0) {\n        paren_level.push(paren_level_count);\n        paren_level_count += 1;\n      }\n    } else {\n      paren_level_count += 1;\n    }\n  }\n\n  for (let i = 0; i < paren_level.length; i++) {\n    if (paren_level[i] > paren_level_max) {\n      paren_level_max = paren_level[i];\n      paren_level_max_index = i;\n      paren_level_max_count = paren_level[i];\n      paren_level_max_string = paren_string.substr(0, paren_level_max_index);\n    }\n  }\n\n  return paren_level;\n};\n\nconst parseNestParensString = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string;\n};\n\nconst parseNestParensArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(' ');\n};\n\nconst parseNestParensObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObjectArray = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n};\n\nconst parseNestParensObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObjectArrayObject = (paren_string) => {\n  const paren_level = parseNestParens(paren_string);\n  const paren_level_string = paren_string.substr(0, paren_level_max_index);\n  return paren_level_string.split(',');\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [];\n  let bracketCount = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      stack.push(bracket);\n      bracketCount++;\n    } else if (bracket === \")\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      bracketCount--;\n      stack.pop();\n    }\n  }\n  return bracketCount === 0;\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a replacement string.\n *\n * >>> replaceWith(\"Hello World\", \"Hello\", \"Goodbye\")\n * \"Goodbye World\"\n *\n * >>> replaceWith(\"Hello World\", \"Hello\", \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWith = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, replacement);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string.\n *\n * >>> replaceWith(\"Hello World\", \"Hello\", () => \"Goodbye\")\n * \"Goodbye World\"\n *\n * >>> replaceWith(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunction = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, () => replacement);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument.\n *\n * >>> replaceWithFunction(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument.\n *\n * >>> replaceWithFunctionWithFirstArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]][args[1]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument and the third argument replaced by the fourth argument.\n *\n * >>> replaceWithFunctionWithFirstArgumentAndSecondArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]][args[1]][args[2]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument and the third argument replaced by the fourth argument and\n * the fourth argument replaced by the fifth argument.\n *\n * >>> replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]][args[1]][args[2]][args[3]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument and the third argument replaced by the fourth argument and\n * the fourth argument replaced by the fifth argument and the fifth argument\n * replaced by the sixth argument.\n *\n * >>> replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]][args[1]][args[2]][args[3]][args[4]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument and the third argument replaced by the fourth argument and\n * the fourth argument replaced by the fifth argument and the fifth argument\n * replaced by the sixth argument and the sixth argument replaced by the seventh\n * argument.\n *\n * >>> replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgumentAndSixthArgumentAndSeventhArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgumentAndSixthArgumentAndSeventhArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n  return string.replace(regex, (match,...args) => replacement[args[0]][args[1]][args[2]][args[3]][args[4]][args[5]][args[6]]);\n};\n\n/**\n * Given a string and a pattern, return a string with the pattern replaced by\n * a function that returns the replacement string with the first argument\n * replaced by the second argument and the second argument replaced by the\n * third argument and the third argument replaced by the fourth argument and\n * the fourth argument replaced by the fifth argument and the fifth argument\n * replaced by the sixth argument and the sixth argument replaced by the seventh\n * argument and the seventh argument replaced by the eighth argument.\n *\n * >>> replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgumentAndSixthArgumentAndSeventhArgumentAndEighthArgument(\"Hello World\", \"Hello\", () => \"Goodbye\", \"!\")\n * \"Hello World!\"\n */\nconst replaceWithFunctionWithFirstArgumentAndSecondArgumentAndThirdArgumentAndFourthArgumentAndFifthArgumentAndSixthArgumentAndSeventhArgumentAndEighthArgument = (string, pattern, replacement, separator) => {\n  const regex = new RegExp(pattern, separator);\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  if (n === 0) return []\n  if (n === 1) return [xs[0]]\n  return [\n    xs[0] * derivative(xs.slice(1)),\n    xs[1] * derivative(xs.slice(1)),\n  ]\n}\n\n/* Return sum of all elements in array.\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i]\n  }\n  return sum\n}\n\n/* Return sum of squares of all elements in array.\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sumSq = (xs) => {\n  let sum = 0\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/* Return mean of all elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length\n}\n\n/* Return median of all elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length\n  if (n % 2 === 0) {\n    return (xs[n / 2 - 1] + xs[n / 2]) / 2\n  }\n  return xs[n / 2]\n}\n\n/* Return mode of all elements in array.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (xs) => {\n  let modes = []\n  let maxCount = 0\n  let maxCountIndex = 0\n  for (let i = 0; i < xs.length; i++) {\n    const count = xs.filter(x => x === xs[i]).length\n    if (count > maxCount) {\n      maxCount = count\n      maxCountIndex = i\n    }\n  }\n  modes.push(xs[maxCountIndex])\n  for (let i = 0; i < xs.length; i++) {\n    const count = xs.filter(x => x === xs[i]).length\n    if (count === maxCount) {\n      modes.push(xs[i])\n    }\n  }\n  return modes\n}\n\n/* Return standard deviation of all elements in array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const n = xs.length\n  const mean = xs.reduce((acc, x) => acc + x, 0) / n\n  const variance = sumSq(xs.map(x => Math.pow(x - mean, 2)))\n  return Math.sqrt(variance)\n}\n\n/* Return variance of all elements in array.\n  >>> variance([1, 2, 3])\n  1.5\n  */\nconst variance = (xs) => {\n  const n = xs.length\n  const mean = xs.reduce((acc, x) => acc + x, 0) / n\n  const variance = sumSq(xs.map(x => Math.pow(x - mean, 2)))\n  return variance\n}\n\n/* Return minimum of all elements in array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs)\n}\n\n/* Return maximum of all elements in array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs)\n}\n\n/* Return sum of all elements in array divided by number of elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst average = (xs) => {\n  return sum(xs) / xs.length\n}\n\n/* Return median of all elements in array divided by number of elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  return median(xs)\n}\n\n/* Return mode of all elements in array divided by number of elements in array.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (xs) => {\n  return mode(xs)\n}\n\n/* Return standard deviation of all elements in array divided by number of elements in array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  return std(xs)\n}\n\n/* Return variance of all elements in array divided by number of elements in array.\n  >>> variance([1, 2, 3])\n  1.5\n  */\nconst variance = (xs) => {\n  return variance(xs)\n}\n\n/* Return minimum of all elements in array divided by number of elements in array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return min(xs)\n}\n\n/* Return maximum of all elements in array divided by number of elements in array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return max(xs)\n}\n\n/* Return sum of all elements in array divided by number of elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst average = (xs) => {\n  return average(xs)\n}\n\n/* Return median of all elements in array divided by number of elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  return median(xs)\n}\n\n/* Return mode of all elements in array divided by number of elements in array.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (xs) => {\n  return mode(xs)\n}\n\n/* Return standard deviation of all elements in array divided by number of elements in array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  return std(xs)\n}\n\n/* Return variance of all elements in array divided by number of elements in array.\n  >>> variance([1, 2, 3])\n  1.5\n  */\nconst variance = (xs) => {\n  return variance(xs)\n}\n\n/* Return minimum of all elements in array divided by number of elements in array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return min(xs)\n}\n\n/* Return maximum of all elements in array divided by number of elements in array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return max(xs)\n}\n\n/* Return sum of all elements in array divided by number of elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst average = (xs) => {\n  return average(xs)\n}\n\n/* Return median of all elements in array divided by number of elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  return median(xs)\n}\n\n/* Return mode of all elements in array divided by number of elements in array.\n  >>> mode([1, 2, 3])\n  1\n  */\nconst mode = (xs) => {\n  return mode(xs)\n}\n\n/* Return standard deviation of all elements in array divided by number of elements in array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  return std(xs)\n}\n\n/* Return variance of all elements in array divided by number of elements in array.\n  >>> variance([1, 2, 3])\n  1.5\n  */\nconst variance = (xs) => {\n  return variance(xs)\n}\n\n/* Return minimum of all elements in array divided by number of elements in array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return min(xs)\n}\n\n/* Return maximum of all elements in array divided by number of elements in array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return max(xs)\n}\n\n/* Return sum of all elements in array divided by number of elements in array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst average = (xs) => {\n  return average(xs)\n}\n\n/* Return median of all elements in array divided by number of elements in array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  return median(xs)\n}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the squares of the numbers.\n  >>> squareSum([1,2,3,4,5])\n  25\n  >>> squareSum([-10,-5,0,5,10])\n  0\n  >>> squareSum([1,2])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([1,1,1])\n  3\n  >>> squareSum([1,0,1])\n  1\n  >>> squareSum([", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = x.toString();\n  if (shift > str.length) return str; // shift > str.length\n  if (shift < 0) return str; // shift < 0\n  let result = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str.charAt(i + shift);\n  }\n  return result;\n};\n\n/*\n  Convert a string to an array of its characters, including surrogate pairs.\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"a\"]\n  >>> stringToCharArray(\"a\")\n  [\"a\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"aAaaaXa\") => 15\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n    if (char >= 48 && char <= 57) {\n      sum += char - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 13\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 13\n      digitSums(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const [apples, oranges] = s.split(\" \").map(Number);\n  const fruits = apples + oranges;\n  return n - fruits - apples;\n};\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a tags=javascript |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\n<code>\nfunction fruitDistribution(s,n){\n  let [apples, oranges] = s.split(\" \").map(Number);\n  let fruits = apples + oranges;\n  return n - fruits - apples;\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fru", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((val) => val % 2 === 0);\n  const smallestEvenValue = evenValues.reduce((prev, curr) => {\n    return prev < curr? prev : curr;\n  });\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => {\n    return prev < curr? prev : curr;\n  });\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => {\n    return prev < curr? prev : curr;\n  });\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => {\n    return prev < curr? prev : curr;\n  });\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddValues = arr.filter((val) => val % 2!== 0);\n  const smallestOddValue = oddValues.reduce((prev, curr) => {\n    return prev", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  if (freq >= lst[freq]) {\n    return freq;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given a list of integers representing a 2D grid. Return the number of islands.\n  An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.\n  You may assume all four edges of the grid are all surrounded by water.\n  Examples:\n      grid = [[0, 1, 0, 0],\n              [1, 1, 1, 1],\n              [0, 1, 0, 0],\n              [0, 0, 0, 0]]\n      numIslands(grid) = 2\n      grid = [[0, 1, 0, 0],\n              [1, 1, 1, 0],\n              [0, 1, 0, 0],\n              [0, 0, 0, 0]]\n      numIslands(grid) = 1\n      grid = [[0, 1, 0, 0],\n              [1, 1, 1, 1],\n              [0, 1, 0, 0],\n              [0, 0, 0, 0]]\n      numIslands(grid) = 0\n*/\nconst numIslands = (grid) => {\n  let islands = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        islands++;\n      }\n    }\n  }\n  return islands;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns the length of the longest substring that\n  is a palindrome.\n  Examples:\n      palindrome(\"radar\") = 3\n      palindrome(\"level\") = 2\n      palindrome(\"racecar\") = 1\n      palindrome(\"aba\") = 0\n*/\nconst palindrome = (str) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[str.length - i - 1]) {\n      index++;\n    } else {\n      index = 0;\n    }\n    if (index > max) {\n      max = index;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u'.\n  Examples:\n      isVowel(\"a\") = true\n      isVowel(\"aeiou\") = true\n      isVowel(\"Aeiou\") = false\n      isVowel(\"aeiouAeiou\") = false\n*/\nconst isVowel = (str) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u', and does not contain the substring \"aeiou\".\n  Examples:\n      isVowel(\"a\") = true\n      isVowel(\"aeiou\") = false\n      isVowel(\"Aeiou\") = false\n      isVowel(\"aeiouAeiou\") = true\n*/\nconst isVowelNo = (str) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u', and does not contain the substring \"aeiou\", and does not\n  contain the substring \"aba\".\n  Examples:\n      isVowelNo(\"a\") = true\n      isVowelNo(\"aeiou\") = false\n      isVowelNo(\"Aeiou\") = false\n      isVowelNo(\"aeiouAeiou\") = false\n      isVowelNo(\"aba\") = true\n*/\nconst isVowelNoAndNo = (str) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u', and does not contain the substring \"aeiou\", and does not\n  contain the substring \"aba\" and the substring \"ba\".\n  Examples:\n      isVowelNoAndNo(\"a\") = true\n      isVowelNoAndNo(\"aeiou\") = false\n      isVowelNoAndNo(\"Aeiou\") = false\n      isVowelNoAndNo(\"aeiouAeiou\") = false\n      isVowelNoAndNo(\"aba\") = true\n      isVowelNoAndNo(\"ba\") = true\n*/\nconst isVowelNoAndNoAndNo = (str) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u', and does not contain the substring \"aeiou\", and does not\n  contain the substring \"aba\" and the substring \"ba\", and does not\n  contain the substring \"aba\".\n  Examples:\n      isVowelNoAndNoAndNo(\"a\") = true\n      isVowelNoAndNoAndNo(\"aeiou\") = false\n      isVowelNoAndNoAndNo(\"Aeiou\") = false\n      isVowelNoAndNoAndNo(\"aeiouAeiou\") = false\n      isVowelNoAndNoAndNo(\"aba\") = true\n      isVowelNoAndNoAndNo(\"ba\") = true\n      isVowelNoAndNoAndNo(\"abaB\") = true\n*/\nconst isVowelNoAndNoAndNoAndNo = (str) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) === -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  You are given a string of lowercase English letters. Write a function that returns true if and only if the string contains\n  only characters 'a', 'e', 'i', 'o', and 'u', and does not contain the substring \"aeiou\", and does not\n  contain the substring \"aba\" and the substring \"ba\", and does not\n  contain the substring \"aba\" and the substring \"ba\".\n  Examples:\n      isVowelNoAndNoAndNoAndNo(\"a\") = true\n      isVowelNoAndNoAndNoAnd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring([], 'a')\n  []\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  return sortedList;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sortedList = [...lst];\n  sortedList.sort((a, b) => {\n    if (a > ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a > b && a > c) {\n    return Math.round((a + b + c) / 2)\n  }\n  if (b > a && b > c) {\n    return Math.round((b + c + a) / 2)\n  }\n  if (c > a && c > b) {\n    return Math.round((c + a + b) / 2)\n  }\n  return -1\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesA", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const maxWeight = w;\n  const maxSum = maxWeight * maxWeight;\n  const isPalindromic = q.reduce((acc, cur) => acc + cur, 0) === 0;\n  return isPalindromic && q.reduce((acc, cur) => acc + cur, 0) <= maxSum;\n};\n\n// 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 👉 �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      min = Math.min(min, i - arr[arr.length - 1 - i]);\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 3\n  smallerChange([1, 2, 3, 2, 1]) == 3\n  */\nconst smallerChange = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      max = Math.max(max, arr[arr.length - 1 - i] - i);\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 6\n  smallerChange([1, 2, 3, 4, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) return lst1;\n  return lst2.filter(x => lst1.includes(x));\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  reverseWord('hello') ➞ 'olleh'\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 3) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 5 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 5) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 7 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 7) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 11 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 11) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 13 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 13) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 17 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 17) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 19 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 19) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 23 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 23) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 29 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 29) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 31 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 31) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 37 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  let counter = 0;\n  let i = 2;\n  while (i <= Math.sqrt(a)) {\n    if (a % i === 0) {\n      counter++;\n    }\n    i++;\n  }\n  if (counter === 37) {\n    return true;\n  }\n  return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 41 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    return false;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isSimplePower(x, n / 2);\n  return isSimplePower(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, 2) => true\n  isPowerOf(8, 2) => true\n  isPowerOf(3, 2) => false\n  isPowerOf(3, 1) => false\n  isPowerOf(5, 3) => false\n  */\nconst isPowerOf = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return isPowerOf(x, n / 2);\n  return isPowerOf(x, n - 1);\n};\n\n/*Your task is to write a function that returns true if a number x is a power of n and\n  false in other cases.\n  x is a power of n if n**int=x\n  For example:\n  isPowerOf(3, 4) => true\n  isPowerOf(2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let hexesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    const hex = num.charCodeAt(i).toString(16);\n    if (hex.length % 2 === 1) {\n      hexesCount++;\n    }\n  }\n  return hexesCount;\n};\n\n/*You have been tasked to write a function that receives a binary number\n  as a string and counts the number of binary digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Binary digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst binariesKeys = (num) => {\n  let binariesCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    const bin = num.charCodeAt(i).toString(2);\n    if (bin.length % 2 === 1) {\n      binariesCount++;\n    }\n  }\n  return binariesCount;\n};\n\n/*You have been tasked to write a function that receives a decimal number\n  as a string and counts the number of decimal digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Decimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst decimalsKeys = (num) => {\n  let decimalsCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    const dec = num.charCodeAt(i) - 48;\n    if (dec >= 0 && dec <= 9) {\n      decimalsCount++;\n    }\n  }\n  return decimalsCount;\n};\n\n/*You have been tasked to write a function that receives a octal number\n  as a string and counts the number of octal digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Octal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst octalsKeys = (num) => {\n  let octalsCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    const oct = num.charCodeAt(i) - 55;\n    if (oct >= 0 && oct <= 9) {\n      octalsCount++;\n    }\n  }\n  return octalsCount;\n};\n\n/*You have been tasked to write a function that receives a binary number\n  as a string and counts the number of binary digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Binary digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst binaryKeys = (num) => {\n  let binaryCount = 0;\n  for (let i = 0; i < num.length; i++) {\n    const bin = num.charCodeAt(i).toString(2);\n    if (bin.length % 2 === 1) {\n      binaryCount++;\n    }\n  }\n  return binaryCount;\n};\n\n/*You have been tasked to write a function that receives a decimal number\n  as a string and counts the number of decimal digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Decimal digits are 0=== 1=== 2=== 3=== 4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = '';\n  let decimals = decimal;\n  while (decimals > 0) {\n    binary = binary + '1';\n    decimals = decimals - 1;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to decimal.\n\n  Examples:\n  binaryToDecimal(\"1111\") returns 15\n  binaryToDecimal(\"100000\") returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary.\n\n  Examples:\n  decimalToBinary(15) returns \"1111\"\n  decimalToBinary(32) returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal = decimal - 1;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to hexadecimal.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") returns \"f\"\n  binaryToHexadecimal(\"100000\") returns \"10\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + binaryToDecimal(binary[i]);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a hexadecimal number to binary.\n\n  Examples:\n  hexadecimalToBinary(\"f\") returns \"1111\"\n  hexadecimalToBinary(\"10\") returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary = binary + decimalToBinary(hexadecimal.charAt(i));\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to octal.\n\n  Examples:\n  binaryToOctal(\"1111\") returns \"7\"\n  binaryToOctal(\"100000\") returns \"17\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binaryToDecimal(binary[i]);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts an octal number to binary.\n\n  Examples:\n  octalToBinary(\"7\") returns \"1111\"\n  octalToBinary(\"17\") returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  for (let i = 0; i < octal.length; i++) {\n    binary = binary + decimalToBinary(octal.charAt(i));\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a decimal number to hexadecimal.\n\n  Examples:\n  decimalToHexadecimal(15) returns \"f\"\n  decimalToHexadecimal(32) returns \"10\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  let hexadecimal = '';\n  while (decimal > 0) {\n    hexadecimal = hexadecimal + '0123456789abcdef'[decimal % 16];\n    decimal = decimal / 16;\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a hexadecimal number to decimal.\n\n  Examples:\n  hexadecimalToDecimal(\"f\") returns 15\n  hexadecimalToDecimal(\"10\") returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  let decimal = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    decimal = decimal + parseInt(hexadecimal.charAt(i));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to octal.\n\n  Examples:\n  decimalToOctal(15) returns \"7\"\n  decimalToOctal(32) returns \"17\"\n  */\nconst decimalToOctal = (decimal) => {\n  let octal = '';\n  while (decimal > 0) {\n    octal = octal + '01234567'[decimal % 8];\n    decimal = decimal / 8;\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts an octal number to decimal.\n\n  Examples:\n  octalToDecimal(\"7\") returns 15\n  octalToDecimal(\"17\") returns 32\n  */\nconst octalToDecimal = (octal) => {\n  let decimal = 0;\n  for (let i = 0; i < octal.length; i++) {\n    decimal = decimal + parseInt(octal.charAt(i));\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a binary number to decimal.\n\n  Examples:\n  binaryToDecimal(\"1111\") returns 15\n  binaryToDecimal(\"100000\") returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    decimal = decimal + parseInt(binary[i]);\n  }\n  return decimal;\n};\n\n/*\n  Write a function that converts a decimal number to binary.\n\n  Examples:\n  decimalToBinary(15) returns \"1111\"\n  decimalToBinary(32) returns \"100000\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary = binary + '0';\n    decimal = decimal - 1;\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to hexadecimal.\n\n  Examples:\n  binaryToHexadecimal(\"1111\") returns \"f\"\n  binaryToHexadecimal(\"100000\") returns \"10\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  let hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal = hexadecimal + binaryToDecimal(binary[i]);\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that converts a hexadecimal number to binary.\n\n  Examples:\n  hexadecimalToBinary(\"f\") returns \"1111\"\n  hexadecimalToBinary(\"10\") returns \"100000\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  let binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary = binary + decimalToBinary(hexadecimal.charAt(i));\n  }\n  return binary;\n};\n\n/*\n  Write a function that converts a binary number to octal.\n\n  Examples:\n  binaryToOctal(\"1111\") returns \"7\"\n  binaryToOctal(\"100000\") returns \"17\"\n  */\nconst binaryToOctal = (binary) => {\n  let octal = '';\n  for (let i = 0; i < binary.length; i++) {\n    octal = octal + binaryToDecimal(binary[i]);\n  }\n  return octal;\n};\n\n/*\n  Write a function that converts an octal number to binary.\n\n  Examples:\n  octalToBinary(\"7\") returns \"1111\"\n  octalToBinary(\"17\") returns \"100000\"\n  */\nconst octalToBinary = (octal) => {\n  let binary = '';\n  for (let ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts2 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts3 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts4 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts5 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts6 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts7 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts8 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts9 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts10 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts11 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts12 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */\nconst sumProducts13 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of all the integers in the list and a product of all the integers in the list.\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProducts([1, 2, 3, 4], 2)\n  (4, 16)\n  >>> sumProducts([1, 2, 3, 4], 3)\n  (24, 8)\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i)!== s.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === s.split('').filter((c) => c!== s.charAt(0)).join('').length;\n};\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays |>\n<| c |>\nThis doesn't work if you have a string like `'abbcc'`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it with `'abbcc'`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it\n<|/ c |>\n<| c |>\nI tested it and it doesn't work. Try it with `'abbcc'`\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction isHappiest(str) {\n    let count = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i)!== str.charAt(i + 1)) {\n            count++;\n        }\n    }\n    return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays |>\n<| a tags=string,javascript,arrays |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays dscore=1 |>\n<| a tags=string,javascript,arrays |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=1 |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays |>\n<| a dscore=1 |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));\nconsole.log(isHappiest('adb'));\nconsole.log(isHappiest('xyy'));</code>\n<|/ a tags=string,javascript,arrays |>\n<| a tags=string,javascript,arrays |>\n<code>\nfunction isHappiest(str) {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i)!== str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count >= 3 && count === str.split('').filter((c) => c!== str.charAt(0)).join('').length;\n}\n\nconsole.log(isHappiest('aa'));\nconsole.log(isHappiest('abcd'));\nconsole.log(isHappiest('aabb'));", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = [];\n  let gpa = grades.reduce((acc, cur) => {\n    if (cur > 3.7) {\n      letterGrades.push('A+');\n    } else if (cur > 3.3) {\n      letterGrades.push('A');\n    } else if (cur > 3) {\n      letterGrades.push('A-');\n    } else if (cur > 2.7) {\n      letterGrades.push('B+');\n    } else if (cur > 2.3) {\n      letterGrades.push('B');\n    } else if (cur > 2) {\n      letterGrades.push('B-');\n    } else if (cur > 1.7) {\n      letterGrades.push('C+');\n    } else if (cur > 1.3) {\n      letterGrades.push('C');\n    } else if (cur > 1) {\n      letterGrades.push('C-');\n    } else if (cur > 0.7) {\n      letterGrades.push('D+');\n    } else if (cur > 0) {\n      letterGrades.push('D');\n    } else if (cur > -0.7) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('E');\n    }\n    return acc + cur;\n  }, 0);\n  letterGrades.push(gpa);\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of the numbers. \n  Example:\n  sumOfNumbers([1, 2, 3, 4, 5]) ==> 15\n*/\nconst sumOfNumbers = (arr) => {\n  return arr.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the average of the numbers. \n  Example:\n  averageOfNumbers([1, 2, 3, 4, 5]) ==> 3\n*/\nconst averageOfNumbers = (arr) => {\n  return sumOfNumbers(arr) / arr.length;\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all unique elements. \n  Example:\n  unique([1, 2, 3, 3]) ==> true\n*/\nconst unique = (arr) => {\n  return arr.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all positive numbers. \n  Example:\n  positive([1, 2, 3, 3]) ==> true\n*/\nconst positive = (arr) => {\n  return arr.every((value) => value > 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all negative numbers. \n  Example:\n  negative([1, 2, 3, 3]) ==> false\n*/\nconst negative = (arr) => {\n  return arr.every((value) => value < 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all even numbers. \n  Example:\n  even([1, 2, 3, 3]) ==> true\n*/\nconst even = (arr) => {\n  return arr.every((value) => value % 2 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all odd numbers. \n  Example:\n  odd([1, 2, 3, 3]) ==> false\n*/\nconst odd = (arr) => {\n  return arr.every((value) => value % 2!== 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 7. \n  Example:\n  divisibleBy7([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy7 = (arr) => {\n  return arr.every((value) => value % 7 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 3. \n  Example:\n  divisibleBy3([1, 2, 3, 3]) ==> false\n*/\nconst divisibleBy3 = (arr) => {\n  return arr.every((value) => value % 3 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 5. \n  Example:\n  divisibleBy5([1, 2, 3, 3]) ==> false\n*/\nconst divisibleBy5 = (arr) => {\n  return arr.every((value) => value % 5 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 2. \n  Example:\n  divisibleBy2([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy2 = (arr) => {\n  return arr.every((value) => value % 2 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 1. \n  Example:\n  divisibleBy1([1, 2, 3, 3]) ==> false\n*/\nconst divisibleBy1 = (arr) => {\n  return arr.every((value) => value % 1 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 0. \n  Example:\n  divisibleBy0([1, 2, 3, 3]) ==> false\n*/\nconst divisibleBy0 = (arr) => {\n  return arr.every((value) => value % 0 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 6. \n  Example:\n  divisibleBy6([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy6 = (arr) => {\n  return arr.every((value) => value % 6 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 8. \n  Example:\n  divisibleBy8([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy8 = (arr) => {\n  return arr.every((value) => value % 8 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 9. \n  Example:\n  divisibleBy9([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy9 = (arr) => {\n  return arr.every((value) => value % 9 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 10. \n  Example:\n  divisibleBy10([1, 2, 3, 3]) ==> true\n*/\nconst divisibleBy10 = (arr) => {\n  return arr.every((value) => value % 10 === 0);\n};\n\n/*\n  Write a function that takes an array of numbers and returns true if the array has all numbers that are divisible by 11. \n  Example:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '0') {\n      prime = false\n      break\n    }\n  }\n  return prime\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  letters('Hello') == true\n  letters('abcdcba') == true\n  letters('kittens') == false\n  letters('orange') == false\n  */\nconst letters = (string) => {\n  let letter = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n      break\n    }\n  }\n  return letter\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only digits 0-9 or false otherwise\n  Examples\n  digits('Hello') == true\n  digits('abcdcba') == true\n  digits('kittens') == false\n  digits('orange') == false\n  */\nconst digits = (string) => {\n  let digit = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < '0' || string[i] > '9') {\n      digit = false\n      break\n    }\n  }\n  return digit\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters A-Z or false otherwise\n  Examples\n  uppercaseLetters('Hello') == true\n  uppercaseLetters('abcdcba') == true\n  uppercaseLetters('kittens') == false\n  uppercaseLetters('orange') == false\n  */\nconst uppercaseLetters = (string) => {\n  let upper = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] > 'Z') {\n      upper = false\n      break\n    }\n  }\n  return upper\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters a-z or false otherwise\n  Examples\n  lowercaseLetters('Hello') == true\n  lowercaseLetters('abcdcba') == true\n  lowercaseLetters('kittens') == false\n  lowercaseLetters('orange') == false\n  */\nconst lowercaseLetters = (string) => {\n  let lower = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      lower = false\n      break\n    }\n  }\n  return lower\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains only characters a-z, A-Z, 0-9, space, or false otherwise\n  Examples\n  lettersAndNumbers('Hello') == true\n  lettersAndNumbers('abcdcba') == true\n  lettersAndNumbers('kittens') == false\n  lettersAndNumbers('orange') == false\n  */\nconst lettersAndNumbers = (string) => {\n  let letter = true\n  let number = true\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < 'a' || string[i] > 'z') {\n      letter = false\n    }\n    if (string[i] < '0' || string[i] > '9') {\n      number = false\n    }\n  }\n  return letter && number\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroStarts = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst endZeroEnds = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startOneStarts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 4 \n  */\nconst addingOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6 \n  */\nconst addingOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst addingOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 4 \n  */\nconst addingOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6 \n  */\nconst addingOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst addingOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 4 \n  */\nconst addingOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 4 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at even indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 4 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 6 \n  */\nconst addingOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. adding the odd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Wrdllo!!!HI'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Wrdllo!!!HI'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Wrdllo!!!HI'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'olleh'\n  antisShuffles('Hello World!!!') returns 'Wrdllo!!!HI'\n  */\nconst antisShuffles = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const rows = lst.map(row => row.map(val => val === x? 1 : 0))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedColumns = sortedRows.sort((a, b) => b[1] - a[1])\n  return sortedColumns.map(col => [col, sortedRows.map(row => row[1])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (4, 1), (5, 1)]\n  getColumns([], 1) == []\n  getColumns([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getColumns = (lst, x) => {\n  const columns = lst.map(row => row.map(val => val === x? 1 : 0))\n  const sortedColumns = columns.sort((a, b) => a[1] - b[1])\n  const sortedRows = sortedColumns.sort((a, b) => b[0] - a[0])\n  return sortedRows.map(row => [row, sortedColumns.map(col => col[0])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getDiagonals = (lst, x) => {\n  const diagonals = lst.map(row => row.map(val => val === x? 1 : 0))\n  const sortedColumns = diagonals.sort((a, b) => a[1] - b[1])\n  const sortedRows = sortedColumns.sort((a, b) => b[0] - a[0])\n  return sortedRows.map(row => [row, sortedColumns.map(col => col[0])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getDiagonalsV2 = (lst) => {\n  const diagonals = lst.map(row => row.map(val => val === 1? 1 : 0))\n  const sortedColumns = diagonals.sort((a, b) => a[1] - b[1])\n  const sortedRows = sortedColumns.sort((a, b) => b[0] - a[0])\n  return sortedRows.map(row => [row, sortedColumns.map(col => col[0])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getDiagonalsV3 = (lst) => {\n  const diagonals = lst.map(row => row.map(val => val === 1? 1 : 0))\n  const sortedColumns = diagonals.sort((a, b) => a[1] - b[1])\n  const sortedRows = sortedColumns.sort((a, b) => b[0] - a[0])\n  return sortedRows.map(row => [row, sortedColumns.map(col => col[0])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 1), (3, 2), (4, 3), (5, 4)]\n  getDiagonals([], 1) == []\n  getDiagonals([[], [1], [1, 2, 3]], 3) == [(2, 0), (3, 2)]\n  */\nconst getDiagonalsV4 = (lst) => {\n  const diagonals = lst.map(row => row.map(val => val === 1? 1 : 0))\n  const sortedColumns = diagonals.sort((a, b) => a[1] - b[1])\n  const sortedRows = sortedColumns.sort((a, b) => b[0] - a[0])\n  return sortedRows.map(row => [row, sortedColumns.map(col => col[0])])\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const newArray = array.slice();\n  const sumOfFirstIndex = array.reduce((sum, num) => sum + num, 0);\n  const sumOfLastIndex = array.reduce((sum, num) => sum + num, 0);\n  const isOdd = sumOfFirstIndex % 2 === 1;\n  const isEven = sumOfLastIndex % 2 === 0;\n  if (isOdd && isEven) {\n    newArray.sort((a, b) => a - b);\n  } else if (isOdd) {\n    newArray.sort((a, b) => b - a);\n  } else {\n    newArray.sort((a, b) => a - b);\n  }\n  return newArray;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptDecrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt('hi') returns 'lm'\n  encryptDecrypt('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt('gf') returns 'kj'\n  encryptDecrypt('et') returns 'ix'\n  */\nconst encryptDecrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptDecrypt2 that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt2('hi') returns 'lm'\n  encryptDecrypt2('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt2('gf') returns 'kj'\n  encryptDecrypt2('et') returns 'ix'\n  */\nconst encryptDecrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function encryptDecrypt3 that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encryptDecrypt3('hi') returns 'lm'\n  encryptDecrypt3('asdfghjkl') returns 'ewhjklnop'\n  encryptDecrypt3('gf') returns 'kj'\n  encryptDecrypt3('et') returns 'ix'\n  */\nconst encryptDecrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    newString += alphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n    newString += alphab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const result = [];\n  let max = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      result.push(max);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingMin = (numbers) => {\n  const result = [];\n  let min = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      result.push(min);\n    } else {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rollingAvg([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingAvg = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(sum / numbers.length);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingMedian = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  if (count % 2 === 0) {\n    result.push(sum / numbers.length);\n  } else {\n    result.push(sum / numbers.length - 1);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rollingStd([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingStd = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rollingVar([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 4, 3]\n  */\nconst rollingVar = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const avg = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - avg, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of roll", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length <= 1) return null\n  return lst[1]\n}\n\n/*\n  You are given a list of integers. Write a function findMax() that returns the maximum value of the list.\n  Return null if there is no such element.\n  \n  findMax([1, 2, 3, 4, 5]) == 5\n  findMax([5, 1, 4, 3, 2]) == 5\n  findMax([]) == null\n  findMax([1, 1]) == null\n  */\nconst findMax = (lst) => {\n  if (lst.length <= 1) return null\n  return Math.max(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function findMin() that returns the minimum value of the list.\n  Return null if there is no such element.\n  \n  findMin([1, 2, 3, 4, 5]) == 1\n  findMin([5, 1, 4, 3, 2]) == 1\n  findMin([]) == null\n  findMin([1, 1]) == null\n  */\nconst findMin = (lst) => {\n  if (lst.length <= 1) return null\n  return Math.min(...lst)\n}\n\n/*\n  You are given a list of integers. Write a function findSum() that returns the sum of the list.\n  Return null if there is no such element.\n  \n  findSum([1, 2, 3, 4, 5]) == 15\n  findSum([5, 1, 4, 3, 2]) == 15\n  findSum([]) == null\n  findSum([1, 1]) == null\n  */\nconst findSum = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val, 0)\n}\n\n/*\n  You are given a list of integers. Write a function findAvg() that returns the average of the list.\n  Return null if there is no such element.\n  \n  findAvg([1, 2, 3, 4, 5]) == 2.5\n  findAvg([5, 1, 4, 3, 2]) == 2.5\n  findAvg([]) == null\n  findAvg([1, 1]) == null\n  */\nconst findAvg = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val, 0) / lst.length\n}\n\n/*\n  You are given a list of integers. Write a function findProduct() that returns the product of the list.\n  Return null if there is no such element.\n  \n  findProduct([1, 2, 3, 4, 5]) == 120\n  findProduct([5, 1, 4, 3, 2]) == 120\n  findProduct([]) == null\n  findProduct([1, 1]) == null\n  */\nconst findProduct = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc * val, 1)\n}\n\n/*\n  You are given a list of integers. Write a function findSumOfProducts() that returns the sum of products of the list.\n  Return null if there is no such element.\n  \n  findSumOfProducts([1, 2, 3, 4, 5]) == 120\n  findSumOfProducts([5, 1, 4, 3, 2]) == 120\n  findSumOfProducts([]) == null\n  findSumOfProducts([1, 1]) == null\n  */\nconst findSumOfProducts = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val * val, 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMaxOfProducts() that returns the max of products of the list.\n  Return null if there is no such element.\n  \n  findMaxOfProducts([1, 2, 3, 4, 5]) == 120\n  findMaxOfProducts([5, 1, 4, 3, 2]) == 120\n  findMaxOfProducts([]) == null\n  findMaxOfProducts([1, 1]) == null\n  */\nconst findMaxOfProducts = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => Math.max(acc, val * val), 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMinOfProducts() that returns the min of products of the list.\n  Return null if there is no such element.\n  \n  findMinOfProducts([1, 2, 3, 4, 5]) == 120\n  findMinOfProducts([5, 1, 4, 3, 2]) == 120\n  findMinOfProducts([]) == null\n  findMinOfProducts([1, 1]) == null\n  */\nconst findMinOfProducts = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => Math.min(acc, val * val), 0)\n}\n\n/*\n  You are given a list of integers. Write a function findSumOfSquares() that returns the sum of squares of the list.\n  Return null if there is no such element.\n  \n  findSumOfSquares([1, 2, 3, 4, 5]) == 285\n  findSumOfSquares([5, 1, 4, 3, 2]) == 285\n  findSumOfSquares([]) == null\n  findSumOfSquares([1, 1]) == null\n  */\nconst findSumOfSquares = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val * val, 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMaxOfSquares() that returns the max of squares of the list.\n  Return null if there is no such element.\n  \n  findMaxOfSquares([1, 2, 3, 4, 5]) == 285\n  findMaxOfSquares([5, 1, 4, 3, 2]) == 285\n  findMaxOfSquares([]) == null\n  findMaxOfSquares([1, 1]) == null\n  */\nconst findMaxOfSquares = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => Math.max(acc, val * val), 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMinOfSquares() that returns the min of squares of the list.\n  Return null if there is no such element.\n  \n  findMinOfSquares([1, 2, 3, 4, 5]) == 285\n  findMinOfSquares([5, 1, 4, 3, 2]) == 285\n  findMinOfSquares([]) == null\n  findMinOfSquares([1, 1]) == null\n  */\nconst findMinOfSquares = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => Math.min(acc, val * val), 0)\n}\n\n/*\n  You are given a list of integers. Write a function findSumOfCubes() that returns the sum of cubes of the list.\n  Return null if there is no such element.\n  \n  findSumOfCubes([1, 2, 3, 4, 5]) == 285\n  findSumOfCubes([5, 1, 4, 3, 2]) == 285\n  findSumOfCubes([]) == null\n  findSumOfCubes([1, 1]) == null\n  */\nconst findSumOfCubes = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => acc + val * val * val, 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMaxOfCubes() that returns the max of cubes of the list.\n  Return null if there is no such element.\n  \n  findMaxOfCubes([1, 2, 3, 4, 5]) == 285\n  findMaxOfCubes([5, 1, 4, 3, 2]) == 285\n  findMaxOfCubes([]) == null\n  findMaxOfCubes([1, 1]) == null\n  */\nconst findMaxOfCubes = (lst) => {\n  if (lst.length <= 1) return null\n  return lst.reduce((acc, val) => Math.max(acc, val * val * val), 0)\n}\n\n/*\n  You are given a list of integers. Write a function findMinOfCube", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> is", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) ➞ false\n  allInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return false\n  return true\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ true\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y || x === z || y === z) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if all of the numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  allInt(5, 2, 7) ➞ false\n  allInt(3, 2, 2) ➞ true\n  allInt(3, -2, 1) �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) - 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) - 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) - 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) - 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += letter\n    } else {\n      result += letter.charCodeAt(0) - 'a'.charCodeAt(0) + 2\n    }\n  }\n  return result\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return its value.\n\n  Examples:\n  For lst = [2,3,5,7,11] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13,17] the output should be 11\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47] the output should be 13\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49] the output should be 17\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59] the output should be 19\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97] the output should be 23\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 29\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 31\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be 33\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,49,51,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if(Object.keys(dict).length == 0){\n    return false;\n  }\n  for(let key in dict){\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toLowerCase()!= dict[key]){\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\"){\n      if(dict[key].toUpperCase()!= dict[key]){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a string, return true if all characters are in lower case or all \n  characters are in upper case, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"apple\") should return true.\n  checkStringCases(\"banana\") should return true.\n  checkStringCases(\"apple\") should return false.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"A\") should return true.\n  checkStringCases(\"a\") should return false.\n  checkStringCases(\"\") should return false.\n  */\nconst checkStringCases = (str) => {\n  if(str.length == 0){\n    return false;\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i].toLowerCase()!= str[i]){\n      return false;\n    }\n    if(str[i].toUpperCase()!= str[i]){\n      return false;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    let prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an non-negative integer and returns an array of the integers that are divisible by the\n  given integer and less than n.\n  for example:\n  countDivisibleBy(2,5) => [2]\n  countDivisibleBy(2,11) => [2,3,5,7]\n  countDivisibleBy(2,0) => []\n  countDivisibleBy(2,20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy(2,1) => []\n  countDivisibleBy(2,18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (n, num) => {\n  let divisible = [];\n  for (let i = 2; i <= num; i++) {\n    if (n % i === 0) {\n      divisible.push(i);\n    }\n  }\n  return divisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are not divisible by the\n  given integer and less than n.\n  for example:\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],11) => [2,3,5,7,11,13,17]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countNotDivisibleBy = (arr, num) => {\n  let notDivisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      notDivisible.push(arr[i]);\n    }\n  }\n  return notDivisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are divisible by the\n  given integer and less than n.\n  for example:\n  countDivisibleBy([2,3,5,7,11,13,17,19],11) => [2]\n  countDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (arr, num) => {\n  let divisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      divisible.push(arr[i]);\n    }\n  }\n  return divisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are not divisible by the\n  given integer and less than n.\n  for example:\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],11) => [2,3,5,7,11,13,17]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countNotDivisibleBy = (arr, num) => {\n  let notDivisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      notDivisible.push(arr[i]);\n    }\n  }\n  return notDivisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are divisible by the\n  given integer and less than n.\n  for example:\n  countDivisibleBy([2,3,5,7,11,13,17,19],11) => [2]\n  countDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (arr, num) => {\n  let divisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      divisible.push(arr[i]);\n    }\n  }\n  return divisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are not divisible by the\n  given integer and less than n.\n  for example:\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],11) => [2,3,5,7,11,13,17]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countNotDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countNotDivisibleBy = (arr, num) => {\n  let notDivisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      notDivisible.push(arr[i]);\n    }\n  }\n  return notDivisible;\n};\n\n/*Implement a function that takes an array of non-negative integers and returns an array of the integers that are divisible by the\n  given integer and less than n.\n  for example:\n  countDivisibleBy([2,3,5,7,11,13,17,19],11) => [2]\n  countDivisibleBy([2,3,5,7,11,13,17,19],0) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],20) => [2,3,5,7,11,13,17,19]\n  countDivisibleBy([2,3,5,7,11,13,17,19],1) => []\n  countDivisibleBy([2,3,5,7,11,13,17,19],18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisibleBy = (arr, num) => {\n  let divisible = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % num === 0) {\n      divisible.push(arr[i]);\n    }\n  }\n  return divisible;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = a % 10;\n    product *= b % 10;\n    product += a / 10 + b / 10;\n  }\n  \n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  \n  if (a > 0 && b > 0) {\n    sum = a % 10;\n    sum += b / 10;\n    sum += a / 10 + b / 10;\n  }\n  \n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  \n  if (a > 0 && b > 0) {\n    difference = a % 10;\n    difference -= b / 10;\n    difference -= a / 10 + b / 10;\n  }\n  \n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 2020.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = a % 10;\n    product *= b % 10;\n    product += a / 10 + b / 10;\n  }\n  \n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  \n  if (a > 0 && b > 0) {\n    sum = a % 10;\n    sum += b / 10;\n    sum += a / 10 + b / 10;\n  }\n  \n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  \n  if (a > 0 && b > 0) {\n    difference = a % 10;\n    difference -= b / 10;\n    difference -= a / 10 + b / 10;\n  }\n  \n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 2020.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = a % 10;\n    product *= b % 10;\n    product += a / 10 + b / 10;\n  }\n  \n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  \n  if (a > 0 && b > 0) {\n    sum = a % 10;\n    sum += b / 10;\n    sum += a / 10 + b / 10;\n  }\n  \n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  \n  if (a > 0 && b > 0) {\n    difference = a % 10;\n    difference -= b / 10;\n    difference -= a / 10 + b / 10;\n  }\n  \n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 164.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 2020.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  \n  if (a > 0 && b > 0) {\n    product = a % 10;\n    product *= b % 10;\n    product += a / 10 + b / 10;\n  }\n  \n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  \n  if (a > 0 && b > 0) {\n    sum = a % 10;\n    sum += b / 10;\n    sum += a / 10 + b / 10;\n  }\n  \n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of the unit digits of their input.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  \n  if (a > 0 && b > 0) {\n    difference = a % 10;\n    difference -= b / 10;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      evenCount += 1;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      evenCount += 1;\n    }\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices. \n  \n  For example:\n  countSpaces('aBCdEf') returns 2\n  countSpaces('abcdefg') returns 0\n  countSpaces('dBBE') returns 0\n  */\nconst countSpaces = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of digits in even indices. \n  \n  For example:\n  countDigits('aBCdEf') returns 2\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigits = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of upper case letters in odd indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of lower case letters in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLowerOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices. \n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowelsOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      oddCount += 1;\n    }\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices. \n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonantsOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'b' && s[i] <= 'z') {\n      oddCount += 1;\n    }\n    if (s[i] >= 'B' && s[i] <= 'Z') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices. \n  \n  For example:\n  countSpaces('aBCdEf') returns 2\n  countSpaces('abcdefg') returns 0\n  countSpaces('dBBE') returns 0\n  */\nconst countSpacesOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices. \n  \n  For example:\n  countDigits('aBCdEf') returns 2\n  countDigits('abcdefg') returns 0\n  countDigits('dBBE') returns 0\n  */\nconst countDigitsOdd = (s) => {\n  let oddCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      oddCount += 1;\n    }\n  }\n  return oddCount;\n};\n\n/*\n  Given a string s, count the number of upper case letters in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpperEven = (s) => {\n  let evenCount = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      evenCount += 1;\n    }\n  }\n  return evenCount;\n};\n\n/*\n  Given a string s, count the number of lower case letters in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst count", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const [integer, decimal] = value.split('.')\n  const [integer2, decimal2] = integer.split('.')\n  const [integer3, decimal3] = integer2.split('.')\n\n  const integers = [\n    parseInt(integer),\n    parseInt(integer2),\n    parseInt(integer3),\n  ]\n\n  const decimals = [\n    parseInt(decimal),\n    parseInt(decimal2),\n    parseInt(decimal3),\n  ]\n\n  const [smallestInteger] = integers\n  const [largestInteger] = integers\n  const [smallestDecimal] = decimals\n  const [largestDecimal] = decimals\n\n  if (smallestInteger > largestInteger) {\n    smallestDecimal = Math.max(smallestDecimal, largestDecimal)\n    largestInteger = Math.max(smallestInteger, largestInteger)\n  } else {\n    smallestInteger = Math.min(smallestInteger, largestInteger)\n    largestDecimal = Math.max(smallestDecimal, largestDecimal)\n  }\n\n  return `${smallestInteger}.${smallestDecimal}`\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closerDecimals(\"10.5\")\n  10.5\n  >>> closerDecimals(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closerDecimals(\"14.5\") should\n  return 15.3 and closerDecimals(\"-14.5\") should return -15.3\n  */\nconst closerDecimals = (value) => {\n  const [integer, decimal] = value.split('.')\n  const [integer2, decimal2] = integer.split('.')\n  const [integer3, decimal3] = integer2.split('.')\n\n  const integers = [\n    parseInt(integer),\n    parseInt(integer2),\n    parseInt(integer3),\n  ]\n\n  const decimals = [\n    parseInt(decimal),\n    parseInt(decimal2),\n    parseInt(decimal3),\n  ]\n\n  const [smallestInteger] = integers\n  const [largestInteger] = integers\n  const [smallestDecimal] = decimals\n  const [largestDecimal] = decimals\n\n  if (smallestInteger > largestInteger) {\n    smallestDecimal = Math.max(smallestDecimal, largestDecimal)\n    largestInteger = Math.max(smallestInteger, largestInteger)\n  } else {\n    smallestInteger = Math.min(smallestInteger, largestInteger)\n    largestDecimal = Math.max(smallestDecimal, largestDecimal)\n  }\n\n  return `${smallestDecimal}.${largestDecimal}`\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closerNumbers(\"10\")\n  10\n  >>> closerNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closerNumbers(\"14.5\") should\n  return 15 and closerNumbers(\"-14.5\") should return -15.\n  */\nconst closerNumbers = (value) => {\n  const [integer, decimal] = value.split('.')\n  const [integer2, decimal2] = integer.split('.')\n  const [integer3, decimal3] = integer2.split('.')\n\n  const integers = [\n    parseInt(integer),\n    parseInt(integer2),\n    parseInt(integer3),\n  ]\n\n  const decimals = [\n    parseInt(decimal),\n    parseInt(decimal2),\n    parseInt(decimal3),\n  ]\n\n  const [smallestInteger] = integers\n  const [largestInteger] = integers\n  const [smallestDecimal] = decimals\n  const [largestDecimal] = decimals\n\n  if (smallestInteger > largestInteger) {\n    smallestDecimal = Math.max(smallestDecimal, largestDecimal)\n    largestInteger = Math.max(smallestInteger, largestInteger)\n  } else {\n    smallestInteger = Math.min(smallestInteger, largestInteger)\n    largestDecimal = Math.max(smallestDecimal, largestDecimal)\n  }\n\n  return `${smallestInteger}.${smallestDecimal}`\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closerNumbers(\"10\")\n  10\n  >>> closerNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closerNumbers(\"14.5\") should\n  return 15 and closerNumbers(\"-14.5\") should return -15.\n  */\nconst closerNumbers = (value) => {\n  const [integer, decimal] = value.split('.')\n  const [integer2, decimal2] = integer.split('.')\n  const [integer3, decimal3] = integer2.split('.')\n\n  const integers = [\n    parseInt(integer),\n    parseInt(integer2),\n    parseInt(integer3),\n  ]\n\n  const decimals = [\n    parseInt(decimal),\n    parseInt(decimal2),\n    parseInt(decimal3),\n  ]\n\n  const [smallestInteger] = integers\n  const [largestInteger] = integers\n  const [smallestDecimal] = decimals\n  const [largestDecimal] = decimals\n\n  if (smallestInteger > largestInteger) {\n    smallestDecimal = Math.max(smallestDecimal, largestDecimal)\n    largestInteger = Math.max(smallestInteger, largestInteger)\n  } else {\n    smallestInteger = Math.min(smallestInteger, largestInteger)\n    largestDecimal = Math.max(smallestDecimal, largestDecimal)\n  }\n\n  return `${smallestInteger}.${smallestDecimal}`\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closerNumbers(\"10\")\n  10\n  >>> closerNumbers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closerNumbers(\"14.5\") should\n  return 15 and closerNumbers(\"-14.5\") should return -15.\n  */\nconst closerNumbers = (value) => {\n  const [integer, decimal] = value.split('.')\n  const [integer2, decimal2] = integer.split('.')\n  const [integer3, decimal3] = integer2.split('.')\n\n  const integers = [\n    parseInt(integer),\n    parseInt(integer2),\n    parseInt(integer3),\n  ]\n\n  const decimals = [\n    parseInt(decimal),\n    parseInt(decimal2),\n    parseInt(decimal3),\n  ]\n\n  const [smallest", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
