{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const num1 = numbers[i];\n    const num2 = numbers[i + 1];\n    if (Math.abs(num1 - num2) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  true\n  >>> has_unique_elements([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst has_unique_elements_noduplicates_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort_nosort = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements and no duplicates.\n * Note: This is not the same as 'unique' as it also removes duplicate elements.\n * >>> has_unique_elements([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  // Initialize an empty array to hold our results\n  const results = [];\n  // Iterate through each character in the string\n  for (let i = 0; i < paren_string.length; i++) {\n    // If the character is a left paren, push it to the results array\n    if (paren_string[i] === '(') {\n      results.push(paren_string[i]);\n    }\n    // If the character is a right paren, pop it from the results array\n    else if (paren_string[i] === ')') {\n      results.pop();\n    }\n  }\n  // Return the results array\n  return results;\n};\n\n// Test Cases\nconst testCases = [\n  {\n    string: '()',\n    expected: ['()'],\n  },\n  {\n    string: '(())',\n    expected: ['(())'],\n  },\n  {\n    string: '(()())',\n    expected: ['(()())'],\n  },\n  {\n    string: '(()()())',\n    expected: ['(()()())'],\n  },\n  {\n    string: '(()()()())',\n    expected: ['(()()()())'],\n  },\n  {\n    string: '(()()()()())',\n    expected: ['(()()()()())'],\n  },\n  {\n    string: '(()()()()()())',\n    expected: ['(()()()()()())'],\n  },\n  {\n    string: '(()()()()()()())',\n    expected: ['(()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()())',\n    expected: ['(()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()())',\n    expected: ['(()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()())',\n    expected: ['(()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()())',\n    expected: ['(()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()())',\n    expected: ['(()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()())',\n    expected: ['(()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()()()()())',\n    expected: ['(()()()()()()()()()()())'],\n  },\n  {\n    string: '(()()()()()()()()", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentChar = string[i];\n    const currentPalindrome = currentChar + currentChar;\n    const currentPalindromeLength = currentPalindrome.length;\n    if (currentPalindromeLength > longestPalindromeLength) {\n      longestPalindrome = currentPalindrome;\n      longestPalindromeLength = currentPalindromeLength;\n    }\n  }\n  return longestPalindrome + string.substr(0, longestPalindromeLength);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a p", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  if (n % 2 === 0) {\n    arr.push(arr.shift());\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  return s.split(',').map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that start with a given letter.\n  \n  For example:\n  words_starting_with_a(\"Hi, my name is John\", a) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_starting_with_a(\"One, two, three, four, five, six\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_starting_with_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_starting_with_a = (s, letter) => {\n  return s.split(',').filter(w => w.startsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that end with a given letter.\n  \n  For example:\n  words_ending_with_a(\"Hi, my name is John\", a) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_ending_with_a(\"One, two, three, four, five, six\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_ending_with_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_ending_with_a = (s, letter) => {\n  return s.split(',').filter(w => w.endsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that contain the given letter.\n  \n  For example:\n  words_containing_a(\"Hi, my name is John\", a) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_containing_a(\"One, two, three, four, five, six\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_containing_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_containing_a = (s, letter) => {\n  return s.split(',').filter(w => w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  words_not_containing_a(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_not_containing_a(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_not_containing_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_not_containing_a = (s, letter) => {\n  return s.split(',').filter(w =>!w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with a given letter.\n  \n  For example:\n  words_starting_with_z(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_starting_with_z(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_starting_with_z(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_starting_with_z = (s, letter) => {\n  return s.split(',').filter(w =>!w.startsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with a given letter.\n  \n  For example:\n  words_ending_with_z(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_ending_with_z(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_ending_with_z(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_ending_with_z = (s, letter) => {\n  return s.split(',').filter(w =>!w.endsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not contain the given letter.\n  \n  For example:\n  words_containing_z(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_containing_z(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_containing_z(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_containing_z = (s, letter) => {\n  return s.split(',').filter(w =>!w.includes(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not start with a given letter.\n  \n  For example:\n  words_starting_with_a(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_starting_with_a(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_starting_with_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_starting_with_a = (s, letter) => {\n  return s.split(',').filter(w =>!w.startsWith(letter)).map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of words that do not end with a given letter.\n  \n  For example:\n  words_ending_with_a(\"Hi, my name is John\", a) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words_ending_with_a(\"One, two, three, four, five, six\", a) == [\"Hi, my name is John\"]\n  words_ending_with_a(\"One, two, three, four, five, six\", z) == []\n  */\nconst words_ending_with_a = (s, letter) => {\n  return s.split(',').filter(w =>!w.endsWith(letter)).", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 13\n  choose_num(13, 12) = -1\n  */\nconst choose_num_odd = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_odd = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {\n    num = odd;\n  }\n  \n  return num;\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  let even = 0;\n  let odd = 0;\n  let num = 0;\n  \n  while (x <= y) {\n    if (x % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    x++;\n  }\n  \n  if (even > odd) {\n    num = even;\n  } else {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum / 2;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_2 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_3 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_4 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_5 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_6 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_7 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_8 = (x) => {\n  const res = [];\n  for (let i = 0; i < x.length; i++) {\n    const str = x.toString();\n    const digits = str.split('');\n    const digit = digits[i];\n    if (digit!== '0') {\n      res.push(parseInt(digit));\n    }\n  }\n  return res.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_odd_odd_digits_9 = (x) => {\n  const res = [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  \n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const reversed_length = reversed.length\n  const result = []\n  \n  for (let i = 0; i < reversed_length; i++) {\n    const digit = reversed[i]\n    const index = Math.floor(i / 10)\n    const name = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][index % 10]\n    result.push(name)\n  }\n  \n  return result\n}\n\nconst by_length_test = (arr) => {\n  console.log(`arr = [${arr}]`)\n  console.log(`by_length(arr) = [${by_length(arr)}] -> ${JSON.stringify(by_length(arr))}`)\n}\n\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, 8, 2, 3])\nby_length_test([2, 1, 1, 4, 5, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 3, 9, 27, 81]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 3, 9, 27, 81]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 3, 9, 27, 81]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 3, 9, 27, 81]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 3, 9, 27, 81]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 3, 9, 27, 81]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  p(5) == [1, 3, 9, 27, 81]\n  */\nconst p = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(...range(1, i));\n    }\n  }\n  return result;\n};\n\n/* Implement the function q that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  q(5) == [1, 3, 9, 27, 81]\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n    } else {\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes.length, oddPalindromes.length];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindrome = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const palindrome = i.toString().split('').reverse().join('');\n    if (palindrome === i.toString()) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindromes = (arr) => {\n  const palindromes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const palindrome = arr[i].toString().split('').reverse().join('');\n    if (palindrome === arr[i].toString()) {\n      palindromes.push(arr[i]);\n    }\n  }\n  return palindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindrome = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const palindrome = i.toString().split('').reverse().join('');\n    if (palindrome === i.toString()) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindromes = (arr) => {\n  const palindromes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const palindrome = arr[i].toString().split('').reverse().join('');\n    if (palindrome === arr[i].toString()) {\n      palindromes.push(arr[i]);\n    }\n  }\n  return palindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindrome = (n) => {\n  const palindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const palindrome = i.toString().split('').reverse().join('');\n    if (palindrome === i.toString()) {\n      palindromes.push(i);\n    }\n  }\n  return palindromes.length;\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of palindromes respectively.\n  */\nconst palindromes = (arr) => {\n  const palindromes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const palindrome = arr[i].toString().split('').reverse().join('');\n    if (palindrome === arr[i].toString()) {\n      palindromes.push(arr[i]);\n    }\n  }\n  return palindromes.length;\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits < 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) count++;\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let n = arr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let flag = false;\n  \n  while(i < n) {\n    flag = false;\n    j = i;\n    while(j < n) {\n      if(arr[j] > arr[j + 1]) {\n        temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n        flag = true;\n      }\n      j++;\n    }\n    if(flag) {\n      i++;\n    }\n  }\n  \n  if(arr.length === 0) {\n    return true;\n  }\n  \n  return false;\n}\n\n/*\n  Write a function that takes an array of integers and returns an array of\n  integers such that each element of the new array is equal to the product of\n  all the numbers in the original array except the number at that index.\n  \n  For example, if arr = [1, 2, 3, 4, 5], the function should return [2,\n  6, 12, 20, 30].\n  \n  If the original array is empty then return an empty array.\n  \n  Note: The given array is guaranteed to have unique elements.\n  \n  For Example:\n  \n  product_of_except_index([1, 2, 3, 4, 5], 0)==>[2, 6, 12, 20, 30]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 0, the new array will be\n               [2, 2, 6, 12, 20].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 2)==>[6, 12, 20, 30]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 2, the new array will be\n               [6, 12, 20, 30].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 3)==>[12, 20, 30]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 3, the new array will be\n               [12, 20, 30].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 4)==>[20, 30]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 4, the new array will be\n               [20, 30].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 5)==>[30]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 5, the new array will be\n               [30].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 6)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 6, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 7)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 7, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 8)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 8, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 9)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 9, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 10)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 10, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 11)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 11, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 12)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 12, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 13)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 13, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 14)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 14, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 15)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 15, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 16)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 16, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 17)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 17, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 18)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 18, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 19)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 19, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 20)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 20, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 21)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 21, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 22)==>[]\n  Explanation: By performing the product of all the numbers in the array\n               except the number at index 22, the new array will be\n               [].\n  \n  product_of_except_index([1, 2, 3, 4, 5], 23)==>[]\n  Explanation: By performing the product ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int ^ b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int & b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const a_int = parseInt(a, 2);\n  const b_int = parseInt(b, 2);\n  const result = a_int | b_int;\n  return result.toString(2);\n};\n\n/* Input are two strings a and b consisting of only 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const a_int = parseInt(a, 2);\n  const result = ~a_int;\n  return result.toString(2);\n};\n\n/* Input ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Write your code here\n}\n\n// Test Cases\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5])); // NO\nconsole.log(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter] == undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter] += 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let rev = s.split(\"\").reverse().join(\"\");\n  let result = rev;\n  let flag = false;\n  for (let i = 0; i < rev.length; i++) {\n    if (rev[i] === c[i]) {\n      continue;\n    }\n    result = rev;\n    flag = true;\n    break;\n  }\n  return [result, flag];\n};\n\n/*Task\n  You are given a string s and a number k. You have to delete k characters from string s.\n  You should return a string after deletion.\n  Example\n  For s = \"abcabc\", k = 3, the result should be \"abc\".\n  For s = \"abcabc\", k = 1 (only one character is deleted), the result should be \"b\".\n  For s = \"abcabc\", k = 5 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = 10 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -1 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -2 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -3 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -4 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -5 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -6 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -7 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -8 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -9 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -10 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -11 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -12 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -13 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -14 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -15 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -16 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -17 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -18 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -19 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -20 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -21 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -22 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -23 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -24 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -25 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -26 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -27 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -28 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -29 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -30 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -31 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -32 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -33 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -34 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -35 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -36 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -37 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -38 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -39 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -40 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -41 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -42 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -43 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -44 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -45 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -46 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -47 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -48 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -49 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -50 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -51 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -52 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -53 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -54 (no character is deleted), the result should be \"abcabc\".\n  For s = \"abcabc\", k = -55 (no character is deleted), the result ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    odd_count += odd_digits(lst[i]);\n  }\n  return odd_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_count += even_digits(lst[i]);\n  }\n  return even_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of digits in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of digits in the i'th string of the input.\n\n  >>> digits_count(['1234567'])\n  [\"the number of digits 4n the str4ng 4 of the 4nput.\"]\n  >>> digits_count(['3',\"11111111\"])\n  [\"the number of digits 1n the str1ng 1 of the 1nput.\",\n   \"the number of digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst digits_count = (lst) => {\n  let digits_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    digits_count += digits(lst[i]);\n  }\n  return digits_count;\n};\n\n/*Given a list of strings, where each string consists of ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i]);\n  }\n  return minSum;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 6\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let maxSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    maxSum = Math.max(maxSum, nums[i]);\n  }\n  return maxSum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are less than the specified value.\n  Example\n  sum_less_than([2, 3, 4, 1, 2, 4], 4) == 6\n  sum_less_than([-1, -2, -3, 4], -4) == 6\n  */\nconst sum_less_than = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < value) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are greater than the specified value.\n  Example\n  sum_greater_than([2, 3, 4, 1, 2, 4], 4) == 6\n  sum_greater_than([-1, -2, -3, 4], -4) == 3\n  */\nconst sum_greater_than = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > value) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are equal to the specified value.\n  Example\n  sum_equal_to([2, 3, 4, 1, 2, 4], 4) == 6\n  sum_equal_to([-1, -2, -3, 4], -4) == 6\n  */\nconst sum_equal_to = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === value) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are less than or equal to the specified value.\n  Example\n  sum_less_than_or_equal_to([2, 3, 4, 1, 2, 4], 4) == 6\n  sum_less_than_or_equal_to([-1, -2, -3, 4], -4) == 6\n  */\nconst sum_less_than_or_equal_to = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] <= value) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are greater than or equal to the specified value.\n  Example\n  sum_greater_than_or_equal_to([2, 3, 4, 1, 2, 4], 4) == 6\n  sum_greater_than_or_equal_to([-1, -2, -3, 4], -4) == 6\n  */\nconst sum_greater_than_or_equal_to = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > value) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are divisible by the specified value.\n  Example\n  sum_divisible_by([2, 3, 5, 7, 11], 3) == 21\n  sum_divisible_by([2, 3, 5, 7, 11], 5) == 28\n  */\nconst sum_divisible_by = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % value === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by the specified value.\n  Example\n  sum_evenly_divisible_by([2, 3, 5, 7, 11], 3) == 21\n  sum_evenly_divisible_by([2, 3, 5, 7, 11], 5) == 28\n  */\nconst sum_evenly_divisible_by = (nums, value) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % value!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by all of the specified values.\n  Example\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 3, 5) == 21\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 5, 7) == 28\n  */\nconst sum_evenly_divisible_by_all = (nums,...values) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % values.length === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by all of the specified values.\n  Example\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 3, 5) == 21\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 5, 7) == 28\n  */\nconst sum_evenly_divisible_by_all = (nums,...values) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % values.length === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by all of the specified values.\n  Example\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 3, 5) == 21\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 5, 7) == 28\n  */\nconst sum_evenly_divisible_by_all = (nums,...values) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % values.length === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by all of the specified values.\n  Example\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 3, 5) == 21\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 5, 7) == 28\n  */\nconst sum_evenly_divisible_by_all = (nums,...values) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % values.length === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all elements in the array\n  that are evenly divisible by all of the specified values.\n  Example\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 3, 5) == 21\n  sum_evenly_divisible_by_all([2, 3, 5, 7, 11], 5, 7) == 28\n  */\nconst sum_evenly_divisible_by_all = (nums,...values) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0 && nums[i] % values.length === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const bucket = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        bucket[grid[i][j] - 1]++;\n      }\n    }\n  }\n\n  let count = 0;\n  for (let i = 0; i < bucket.length; i++) {\n    if (bucket[i] > 0) {\n      count += bucket[i];\n    }\n  }\n\n  return count;\n};\n\nconst main = () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1],\n  ];\n  const bucket_capacity = 1;\n  console.log(max_fill(grid, bucket_capacity));\n};\n\nmain();</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,javascript,dynamic-programming |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming dscore=0 |>\n<| a tags=algorithm,javascript,dynamic-programming |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction maxFill(grid, capacity) {\n    let max = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                count++;\n                if (count > max) {\n                    max = count;\n                }\n            }\n        }\n    }\n    return max;\n}\n\nfunction main() {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n    ];\n    const bucket_capacity = 1;\n    console.log(maxFill(grid, bucket_capacity));\n}\n\nmain();\n</code>\n<|/ a tags=algorithm,javascript,dynamic-programming |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const len = arr.length;\n  const ones = arr.filter((x) => x === 1);\n  const decs = arr.filter((x) => x === 0);\n  const decLen = decs.length;\n  const decOnes = decs.filter((x) => x === 1);\n  const decOnesLen = decOnes.length;\n  const decOnesSum = decOnes.reduce((acc, x) => acc + x, 0);\n  const decOnesSumLen = decOnesSum.length;\n  const decOnesSumArr = Array.from(decOnesSum);\n  const decOnesSumArrLen = decOnesSumArr.length;\n  const decOnesSumArrLen2 = decOnesSumArrLen / 2;\n  const decOnesSumArrLen3 = decOnesSumArrLen / 3;\n  const decOnesSumArrLen4 = decOnesSumArrLen / 4;\n  const decOnesSumArrLen5 = decOnesSumArrLen / 5;\n  const decOnesSumArrLen6 = decOnesSumArrLen / 6;\n  const decOnesSumArrLen7 = decOnesSumArrLen / 7;\n  const decOnesSumArrLen8 = decOnesSumArrLen / 8;\n  const decOnesSumArrLen9 = decOnesSumArrLen / 9;\n  const decOnesSumArrLen10 = decOnesSumArrLen / 10;\n  const decOnesSumArrLen11 = decOnesSumArrLen / 11;\n  const decOnesSumArrLen12 = decOnesSumArrLen / 12;\n  const decOnesSumArrLen13 = decOnesSumArrLen / 13;\n  const decOnesSumArrLen14 = decOnesSumArrLen / 14;\n  const decOnesSumArrLen15 = decOnesSumArrLen / 15;\n  const decOnesSumArrLen16 = decOnesSumArrLen / 16;\n  const decOnesSumArrLen17 = decOnesSumArrLen / 17;\n  const decOnesSumArrLen18 = decOnesSumArrLen / 18;\n  const decOnesSumArrLen19 = decOnesSumArrLen / 19;\n  const decOnesSumArrLen20 = decOnesSumArrLen / 20;\n  const decOnesSumArrLen21 = decOnesSumArrLen / 21;\n  const decOnesSumArrLen22 = decOnesSumArrLen / 22;\n  const decOnesSumArrLen23 = decOnesSumArrLen / 23;\n  const decOnesSumArrLen24 = decOnesSumArrLen / 24;\n  const decOnesSumArrLen25 = decOnesSumArrLen / 25;\n  const decOnesSumArrLen26 = decOnesSumArrLen / 26;\n  const decOnesSumArrLen27 = decOnesSumArrLen / 27;\n  const decOnesSumArrLen28 = decOnesSumArrLen / 28;\n  const decOnesSumArrLen29 = decOnesSumArrLen / 29;\n  const decOnesSumArrLen30 = decOnesSumArrLen / 30;\n  const decOnesSumArrLen31 = decOnesSumArrLen / 31;\n  const decOnesSumArrLen32 = decOnesSumArrLen / 32;\n  const decOnesSumArrLen33 = decOnesSumArrLen / 33;\n  const decOnesSumArrLen34 = decOnesSumArrLen / 34;\n  const decOnesSumArrLen35 = decOnesSumArrLen / 35;\n  const decOnesSumArrLen36 = decOnesSumArrLen / 36;\n  const decOnesSumArrLen37 = decOnesSumArrLen / 37;\n  const decOnesSumArrLen38 = decOnesSumArrLen / 38;\n  const decOnesSumArrLen39 = decOnesSumArrLen / 39;\n  const decOnesSumArrLen40 = decOnesSumArrLen / 40;\n  const decOnesSumArrLen41 = decOnesSumArrLen / 41;\n  const decOnesSumArrLen42 = decOnesSumArrLen / 42;\n  const decOnesSumArrLen43 = decOnesSumArrLen / 43;\n  const decOnesSumArrLen44 = decOnesSumArrLen / 44;\n  const decOnesSumArrLen45 = decOnesSumArrLen / 45;\n  const decOnesSumArrLen46 = decOnesSumArrLen / 46;\n  const decOnesSumArrLen47 = decOnesSumArrLen / 47;\n  const decOnesSumArrLen48 = decOnesSumArrLen / 48;\n  const decOnesSumArrLen49 = decOnesSumArrLen / 49;\n  const decOnesSumArrLen50 = decOnesSumArrLen / 50;\n  const decOnesSumArrLen51 = decOnesSumArrLen / 51;\n  const decOnesSumArrLen52 = decOnesSumArrLen / 52;\n  const decOnesSumArrLen53 = decOnesSumArrLen / 53;\n  const decOnesSumArrLen54 = decOnesSumArrLen / 54;\n  const decOnesSumArrLen55 = decOnesSumArrLen / 55;\n  const decOnesSumArrLen56 = decOnesSumArrLen / 56;\n  const decOnesSumArrLen57 = decOnesSumArrLen / 57;\n  const decOnesSumArrLen58 = decOnesSumArrLen / 58;\n  const decOnesSumArrLen59 = decOnesSumArrLen / 59;\n  const decOnesSumArrLen60 = decOnesSumArrLen / 60;\n  const decOnesSumArrLen61 = decOnesSumArrLen / 61;\n  const decOnesSumArrLen62 = decOnesSumArrLen / 62;\n  const decOnesSumArrLen63 = decOnesSumArrLen / 63;\n  const decOnesSumArrLen64 = decOnesSumArrLen / 64;\n  const decOnesSumArrLen65 = decOnesSumArrLen / 65;\n  const decOnesSumArrLen66 = decOnesSumArrLen / 66;\n  const decOnesSumArrLen67 = decOnesSumArrLen / 67;\n  const decOnesSumArrLen68 = decOnesSumArrLen / 68;\n  const decOnesSumArrLen69 = decOnesSumArrLen / 69;\n  const decOnesSumArrLen70 = decOnesSumArrLen / 70;\n  const decOnesSumArrLen71 = decOnesSumArrLen / 71;\n  const decOnesSumArrLen72 = dec", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\", \"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  if (s.length === 0) {\n    return words;\n  }\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (count === n) {\n    words.push(s);\n  }\n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\", \"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2 = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5 = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8 = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11 = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14 = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17 = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20 = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23 = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26 = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29 = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32 = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35 = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38 = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41 = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44 = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47 = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50 = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53 = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56 = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59 = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowelsIndexCount62 = 0;\n  let vowelsIndexCount63 = 0;\n  let vowelsIndexCount64 = 0;\n  let vowelsIndexCount65 = 0;\n  let vowelsIndexCount66 = 0;\n  let vowelsIndexCount67 = 0;\n  let vowelsIndexCount68 = 0;\n  let vowelsIndexCount69 = 0;\n  let vowelsIndexCount70 = 0;\n  let vowelsIndexCount71 = 0;\n  let vowelsIndexCount72 = 0;\n  let vowelsIndexCount73 = 0;\n  let vowelsIndexCount74 = 0;\n  let vowelsIndexCount75 = 0;\n  let vowelsIndexCount76 = 0;\n  let vowelsIndexCount77 = 0;\n  let vowelsIndexCount78 = 0;\n  let vowelsIndexCount79 = 0;\n  let vowelsIndexCount80 = 0;\n  let vowelsIndexCount81 = 0;\n  let vowelsIndexCount82 = 0;\n  let vowelsIndexCount83 = 0;\n  let vowelsIndexCount84 = 0;\n  let vowelsIndexCount85 = 0;\n  let vowelsIndexCount86 = 0;\n  let vowelsIndexCount87 = 0;\n  let vowelsIndexCount88 = 0;\n  let vowelsIndexCount89 = 0;\n  let vowelsIndexCount90 = 0;\n  let vowelsIndexCount91 = 0;\n  let vowelsIndexCount92 = 0;\n  let vowelsIndexCount93 = 0;\n  let vowelsIndexCount94 = 0;\n  let vowelsIndexCount95 = 0;\n  let vowelsIndexCount96 = 0;\n  let vowelsIndexCount97 = 0;\n  let vowelsIndexCount98 = 0;\n  let vowelsIndexCount99 = 0;\n  let vowelsIndexCount100 = 0;\n  let vowelsIndexCount101 = 0;\n  let vowelsIndexCount102 = 0;\n  let vowelsIndexCount103 = 0;\n  let vowelsIndexCount104 = 0;\n  let vowelsIndexCount105 = 0;\n  let vowelsIndexCount106 = 0;\n  let vowelsIndexCount107 = 0;\n  let vowelsIndexCount108 = 0;\n  let vowelsIndexCount109 = 0;\n  let vowelsIndexCount110 = 0;\n  let vowelsIndexCount111 = 0;\n  let vowelsIndexCount112 = 0;\n  let vowelsIndexCount113 = 0;\n  let vowelsIndexCount114 = 0;\n  let vowelsIndexCount115 = 0;\n  let vowelsIndexCount116 = 0;\n  let vowelsIndexCount117 = 0;\n  let vowelsIndexCount118 = 0;\n  let vowelsIndexCount119 = 0;\n  let vowelsIndexCount120 = 0;\n  let vowelsIndexCount121 = 0;\n  let vowelsIndexCount122 = 0;\n  let vowelsIndexCount123 = 0;\n  let vowelsIndexCount124 = 0;\n  let vowelsIndexCount125 = 0;\n  let vowelsIndexCount126 = 0;\n  let vowelsIndexCount127 = 0;\n  let vowelsIndexCount128 = 0;\n  let vowelsIndexCount129 = 0;\n  let vowelsIndexCount130 = 0;\n  let vowelsIndexCount131 = 0;\n  let vowelsIndexCount132 = 0;\n  let vowelsIndexCount133 = 0;\n  let vowelsIndexCount134 = 0;\n  let vowelsIndexCount135 = 0;\n  let vowelsIndexCount136 = 0;\n  let vowelsIndexCount137 = 0;\n  let vowelsIndexCount138 = 0;\n  let vowelsIndexCount139 = 0;\n  let vowelsIndexCount140 = 0;\n  let vowelsIndexCount141 = 0;\n  let vowelsIndexCount142 = 0;\n  let vowelsIndexCount143 = 0;\n  let vowelsIndexCount144 = 0;\n  let vowelsIndexCount145 = 0;\n  let vowelsIndexCount146 = 0;\n  let vowelsIndexCount147 = 0;\n  let vowelsIndexCount148 = 0;\n  let vowelsIndexCount149 = 0;\n  let vowelsIndexCount150 = 0;\n  let vowelsIndexCount151 = 0;\n  let vowelsIndexCount152 = 0;\n  let vowelsIndexCount153 = 0;\n  let vowelsIndexCount154 = 0;\n  let vowelsIndexCount155 = 0;\n  let vowelsIndexCount156 = 0;\n  let vowelsIndexCount157 = 0;\n  let vowelsIndexCount158 = 0;\n  let vowelsIndexCount159 = 0;\n  let vowelsIndexCount160 = 0;\n  let vowelsIndexCount161 = 0;\n  let vowelsIndexCount162 = 0;\n  let vowelsIndexCount163 = 0;\n  let vowelsIndexCount164 = 0;\n  let vowelsIndexCount165 = 0;\n  let vowelsIndexCount166 = 0;\n  let vowelsIndexCount167 = 0;\n  let vowelsIndexCount168 = 0;\n  let vowelsIndexCount169 = 0;\n  let vowelsIndexCount170 = 0;\n  let vowelsIndexCount171 = 0;\n  let vowelsIndexCount172 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_substring('abba', 'ab') == 'False'\n  is_substring('abba', 'abba') == 'False'\n  */\nconst is_substring = (S, P) => {\n  const stack = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === P[0]) {\n      stack.push(i);\n    } else if (S[i] === P[1]) {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/* You are given a string S and a string P. Your task is to find out if P is\n  a substring of S. Return True if P is a substring of S, and return False\n  otherwise.\n  Examples:\n  is_substring('abba', 'ab') == 'True'\n  is_substring('abba', 'abba') == 'True'\n  is_substring('abba', 'abbb') == 'False'\n  is_sub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) return null\n  const longestString = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longestString.length) {\n      longestString = strings[i]\n    }\n  }\n  return longestString\n}\n\n/**\n * Return the first string that starts with the given string. Return null if no\n  string starts with the given string.\n  >>> first('a', 'ab', 'abc')\n  'a'\n  >>> first('a', 'ab', 'abd')\n  null\n  */\nconst first = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string.startsWith(strings[i])) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the last string that ends with the given string. Return null if no\n  string ends with the given string.\n  >>> last('a', 'ab', 'abc')\n  'c'\n  >>> last('a', 'ab', 'abd')\n  null\n  */\nconst last = (string,...strings) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (string.endsWith(strings[i])) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> contains('a', 'ab', 'abc')\n  'a'\n  >>> contains('a', 'ab', 'abd')\n  null\n  */\nconst contains = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (string.includes(strings[i])) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].toLowerCase().includes(string.toLowerCase())) return strings[i]\n  }\n  return null\n}\n\n/**\n * Return the string that contains the given string. Return null if no\n  string contains the given string.\n  >>> containsIgnoreCase('a', 'ab', 'abc')\n  'a'\n  >>> containsIgnoreCase('a', 'ab', 'abd')\n  null\n  */\nconst containsIgnoreCase = (string,...strings) => {\n  for (let i = 0; i < strings.length; i++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = [];\n  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    let maxValue = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > maxValue) {\n        maxValue = arr[j];\n        maxIndex = j;\n      }\n    }\n    max.push(maxValue);\n    arr.splice(maxIndex, 1);\n  }\n  return max;\n};\n\nexport { maximum, maximumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  let min = [];\n  for (let i = 0; i < k; i++) {\n    let minIndex = 0;\n    let minValue = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < minValue) {\n        minValue = arr[j];\n        minIndex = j;\n      }\n    }\n    min.push(minValue);\n    arr.splice(minIndex, 1);\n  }\n  return min;\n};\n\nexport { minimum, minimumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [5, 6, 4]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [5]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kLargest = (arr, k) => {\n  let largest = [];\n  for (let i = 0; i < k; i++) {\n    let maxIndex = 0;\n    let maxValue = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > maxValue) {\n        maxValue = arr[j];\n        maxIndex = j;\n      }\n    }\n    largest.push(maxValue);\n    arr.splice(maxIndex, 1);\n  }\n  return largest;\n};\n\nexport { kLargest, kLargestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 2\n      Output: [1, 2, 3]\n\n  Example 2:\n\n      Input: arr = [1, 5, 3, 6, 2, 4], k = 1\n      Output: [1, 5, 3, 6, 2, 4]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kSmallest = (arr, k) => {\n  let smallest = [];\n  for (let i = 0; i < k; i++) {\n    let minIndex = 0;\n    let minValue = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] < minValue) {\n        minValue = arr[j];\n        minIndex = j;\n      }\n    }\n    smallest.push(minValue);\n    arr.splice(minIndex, 1);\n  }\n  return smallest;\n};\n\nexport { kSmallest, kSmallestSorted };\n\n/*\n  Given an array arr of integers, return a new array where each element has been \n  replaced with the sum of all elements in the array.\n\n  Example 1:\n\n      Input: [1, 3, 5]\n      Output: [1, 3, 5]\n\n  Example 2:\n\n      Input: [-9, 3, 5]\n      Output: [-9, 3, 5]\n\n  Example 3:\n\n      Input: [10, 20, 30]\n      Output: [10, 20, 30]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ array's length.\n      2. k is 1 ≤ array's length ≤ 50,000.\n */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport { sum };\n\n/*\n  Given an array arr of integers, return a new array where each element has been \n  replaced with the product of all the elements in the array.\n\n  Example 1:\n\n      Input: [1, 3, 5]\n      Output: [1, 3, 5]\n\n  Example 2:\n\n      Input: [-9, 3, 5]\n      Output: [-9, 3, 5]\n\n  Example 3:\n\n      Input: [10, 20, 30]\n      Output: [10, 20, 30]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ array's length.\n      2. k is 1 ≤ array's length ≤ 50,000.\n */\nconst product = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\nexport { product };\n\n/*\n  Given an array arr of integers, return a new array where each element has been \n  replaced with the largest number in the array.\n\n  Example 1:\n\n      Input: [1, 3, 5]\n      Output: [1, 3, 5]\n\n  Example 2:\n\n      Input: [-9, 3, 5]\n      Output: [-9, 3, 5]\n\n  Example 3:\n\n      Input: [10, 20, 30]\n      Output: [10, 20, 30]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ array's length.\n      2. k is 1 ≤ array's length ≤ 50,000.\n */\nconst largest = (arr) => {\n  let largest = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i];\n    }\n  }\n  return largest;\n};\n\nexport { largest };\n\n/*\n  Given an array arr of integers, return a new array where each element has been \n  replaced with the smallest number in the array.\n\n  Example 1:\n\n      Input: [1, 3, 5]\n      Output: [1, 3, 5]\n\n  Example 2:\n\n      Input: [-9, 3, 5]\n      Output: [-9, 3, 5]\n\n  Example 3:\n\n      Input: [10, 20, 30]\n      Output: [10, 20, 30]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ array's length.\n      2. k is 1 ≤ array's length ≤ 50,000.\n */\nconst smallest = (arr) => {\n  let smallest = arr[0];\n  for (let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for the first and last elements.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  newArr.push(arr[0]);\n  newArr.push(arr[arr.length - 1]);\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr.indexOf(i)!== arr.lastIndexOf(i)) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*Given a non-empty array of integers, return a new array containing all of the elements in the original array except for those in the second array.\n\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24, 321]\n  */\nconst solution = (arr) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      odd_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      even_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      even_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      even_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      odd_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let prev = 1\n  let current = 1\n  while (current < n) {\n    if (prev % 2 === 0) {\n      odd_list.push(prev)\n      prev = prev / 2\n    } else {\n      prev = prev * 3 + 1 \n    }\n    current++\n  }\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz con", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  // Write your code here\n  let dateArray = date.split('-');\n  let dateArrayLength = dateArray.length;\n  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let daysInMonthArray = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let dayArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let dayArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArray = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let monthArrayLength = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021];\n  let yearArrayLength = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 200", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_3 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_4 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_5 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_6 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_7 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_8 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  if (words.length === 0) return words;\n  const comma = words.find((word) => word.includes(','));\n  if (comma) return words.slice(0, comma);\n  const lower = words.find((word) => word.toLowerCase().includes('a'));\n  return lower? words.slice(0, lower) : words;\n};\n\n/* Given a string of words, return a list of words split ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => a-b);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => b-a);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of the\n  same number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => a-b);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of the\n  same number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => b-a);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => a-b);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => b-a);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a,b) => a-b);\n  return sorted.length === lst.length && sorted.every((elem, i) => elem === lst[i]);\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start1 < start2) return false\n  if (start2 < end1) return false\n  if (start2 === end1 && start1 === end2) return true\n  if (start2 === end1 && start1!== end2) return false\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1!== end2) return false\n  if (start1!== start2 && end1 === end2) return false\n  if (start1!== start2 && end1!== end2) return false\n  return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 4, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start1 < start2) return false\n  if (start2 < end1) return false\n  if (start2 === end1 && start1 === end2) return true\n  if (start2 === end1 && start1!== end2) return false\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1!== end2) return false\n  if (start1!== start2 && end1 === end2) return false\n  if (start1!== start2 && end1!== end2) return false\n  return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (-1, 0)\n  which its length is 1, which a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start1 < start2) return false\n  if (start2 < end1) return false\n  if (start2 === end1 && start1 === end2) return true\n  if (start2 === end1 && start1!== end2) return false\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1!== end2) return false\n  if (start1!== start2 && end1 === end2) return false\n  if (start1!== start2 && end1!== end2) return false\n  return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of symmetric difference of these two \n  intervals is a prime number.\n  Example, the symmetric difference of the intervals (1, 3), (2, 4) is (-1, -3)\n  which its length is 2, which a prime number.\n  If the length of the symmetric difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  symmetricDifference((1, 2), (2, 3)) ==> \"NO\"\n  symmetricDifference((-1, 1), (0, 4)) ==> \"NO\"\n  symmetricDifference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst symmetricDifference = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 > end2) return false\n  if (start2 > end1) return false\n  if (start1 < start2) return false\n  if (start2 < end1) return false\n  if (start2 === end1 && start1 === end2) return true\n  if (start2 === end1 && start1!== end2) return false\n  if (start1 === start2 && end1 === end2) return true\n  if (start1 === start2 && end1!== end2) return false\n  if (start1!== start2 && end1 === end2) return false\n  if (start1!== start2 && end1!== end2) return false\n  return true\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 4, which a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1;\n    res.push(sign * Math.sign(arr[i]));\n  }\n  return res.length === 0? null : res.reduce((a, b) => a * b);\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n  const lst_C = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] > 0) {\n        M[grid[i][j]] += 1;\n        lst_A[grid[i][j]] += i;\n        lst_B[grid[i][j]] += j;\n      }\n    }\n  }\n\n  for (let i = 1; i <= k; i++) {\n    lst_C[i] = Math.min(lst_A[i], lst_B[i]);\n  }\n\n  const ans = [];\n  for (let i = 1; i <= k; i++) {\n    ans.push(lst_C[i]);\n  }\n\n  return ans;\n};\n\nconst main = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n  const k = 3;\n  const ans = min_path(grid, k);\n  console.log(ans);\n};\n\nmain();</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n  const lst_C = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] > 0) {\n        M[grid[i][j]] += 1;\n        lst_A[grid[i][j]] += i;\n        lst_B[grid[i][j]] += j;\n      }\n    }\n  }\n\n  for (let i = 1; i <= k; i++) {\n    lst_C[i] = Math.min(lst_A[i], lst_B[i]);\n  }\n\n  const ans = [];\n  for (let i = 1; i <= k; i++) {\n    ans.push(lst_C[i]);\n  }\n\n  return ans;\n};\n\nconst main = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n  const k = 3;\n  const ans = min_path(grid, k);\n  console.log(ans);\n};\n\nmain();</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n  const lst_C = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] > 0) {\n        M[grid[i][j]] += 1;\n        lst_A[grid[i][j]] += i;\n        lst_B[grid[i][j]] += j;\n      }\n    }\n  }\n\n  for (let i = 1; i <= k; i++) {\n    lst_C[i] = Math.min(lst_A[i], lst_B[i]);\n  }\n\n  const ans = [];\n  for (let i = 1; i <= k; i++) {\n    ans.push(lst_C[i]);\n  }\n\n  return ans;\n};\n\nconst main = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n  const k = 3;\n  const ans = min_path(grid, k);\n  console.log(ans);\n};\n\nmain();</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n  const lst_C = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] > 0) {\n        M[grid[i][j]] += 1;\n        lst_A[grid[i][j]] += i;\n        lst_B[grid[i][j]] += j;\n      }\n    }\n  }\n\n  for (let i = 1; i <= k; i++) {\n    lst_C[i] = Math.min(lst_A[i], lst_B[i]);\n  }\n\n  const ans = [];\n  for (let i = 1; i <= k; i++) {\n    ans.push(lst_C[i]);\n  }\n\n  return ans;\n};\n\nconst main = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n  const k = 3;\n  const ans = min_path(grid, k);\n  console.log(ans);\n};\n\nmain();</code>\n<|/ a tags=javascript,algorithm |>\n<| c |>\nPlease add some explanation to your answer\n<|/ c |>\n<| a tags=javascript,algorithm |>\n<code>\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const lst_A = new Array(N).fill(0);\n  const lst_B = new Array(N).fill(0);\n  const lst_C = new Array(N).fill(0);\n\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (grid[i][j] > 0) {\n        M[grid[i][j]] += 1;\n        lst_A[grid[i][j]] += i;\n        lst_B[grid[i][j]] += j;\n      }\n    }\n  }\n\n  for (let i = 1; i <= k; i++) {\n    lst_C[i] = Math.min(lst_A[i], lst_B[i]);\n  }\n\n  const ans = [];\n  for (let i = 1; i <= k; i++) {\n    ans.push(lst_C[i]);\n  }\n\n  return ans;\n};\n\nconst main = () => {\n  const grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n  ];\n  const k = 3;\n  const ans = min_path(grid, k);\n  console.log(ans);\n};\n\nmain();</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\n<|/", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(21, 5)\n  21\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(7, 5)\n  21\n  >>> least_common_multiple(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple_of_a_and_b(7, 5)\n  21\n  >>> least_common_multiple_of_a_and_b(21, 5)\n  21\n  */\nconst least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b = (x, y) => {\n  if (y === 0) {\n    return x;\n  }\n  return least_common_multiple_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b_of_a_and_b(y, x % y);\n};\n\n/* Return the least common multiple ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  if (n % 2 === 0) {\n    return [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i -= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1\n  digits(235) == 5\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2\n  digits(235) == 10\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6\n  digits(235) == 30\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 70\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 150\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 48\n  digits(235) == 216\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 96\n  digits(235) == 288\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 192\n  digits(235) == 576\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 9.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 384\n  digits(235) == 1152\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 768\n  digits(235) == 1536\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 11.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 896\n  digits(235) == 2304\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 12.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1184\n  digits(235) == 4624\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 13.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1792\n  digits(235) == 7168\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 14.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2592\n  digits(235) == 14336\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 15.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 4184\n  digits(235) == 28672\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 16.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 7376\n  digits(235) == 146432\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 17.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g);\n  const close_brackets = string.match(/\\]/g);\n  const open_brackets_count = open_brackets? open_brackets.length : 0;\n  const close_brackets_count = close_brackets? close_brackets.length : 0;\n  return open_brackets_count === close_brackets_count;\n};\n\n/*\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of all numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 21\n  For lst = [1,3,5,7] the output should be 25\n  For lst = [1.4,4.2,0] the output should be 4.2\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum_all = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 27\n  For lst = [1.4,4.2,0] the output should be 24\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_2 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_3 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_4 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_5 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_6 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    product *= lst[i];\n  }\n  return [Math.round(sum), Math.round(product)];\n};\n\n/*You are given a list of numbers.\n  You need to return a list of numbers that add up to the given number,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be [6,6,6]\n  For lst = [1,4,9] the output should be [24,36,27]\n  For lst = [1,3,5,7] the output should be [25,27,25]\n  For lst = [1.4,4.2,0] the output should be [4.2,4.2,4.2]\n  For lst = [-2.4,1,1] the output should be [0,1,1]\n  */\nconst sum_of_products_7 = (lst) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a whitespace and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_whitespace = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word_or_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word_or_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word_or_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word_or_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word_or_digit = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word_or_digit_or_whitespace = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word_or_digit_or_whitespace = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word_or_digit_or_whitespace = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char === \" \" || last_char === \"\\n\" || last_char === \"\\t\" || last_char === \"\\r\" || last_char === \" \";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or digit and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_word_or_digit_or_whitespace(\"apple pie\") ➞ false\n  check_if_last_char", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.max(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.max(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.max(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.max(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.min(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n  }\n  if (negatives.length === 0) {\n    return positives[0];\n  }\n  return Math.max(...negatives);\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positives = lst.filter((x) => x > 0);\n  const negatives = lst.filter((x) => x < 0);\n  if (positives.length === 0) {\n    return null;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === \".\") return null\n  if (b === \".\") return null\n  if (a === \",\") return null\n  if (b === \",\") return null\n  if (a === \"-\") return null\n  if (b === \"-\") return null\n  if (a === \".0\") return null\n  if (b === \".0\") return null\n  if (a === \"0\") return null\n  if (b === \"0\") return null\n  if (a === \".1\") return null\n  if (b === \".1\") return null\n  if (a === \"1\") return null\n  if (b === \"1\") return null\n  if (a === \"2\") return null\n  if (b === \"2\") return null\n  if (a === \"3\") return null\n  if (b === \"3\") return null\n  if (a === \"4\") return null\n  if (b === \"4\") return null\n  if (a === \"5\") return null\n  if (b === \"5\") return null\n  if (a === \"6\") return null\n  if (b === \"6\") return null\n  if (a === \"7\") return null\n  if (b === \"7\") return null\n  if (a === \"8\") return null\n  if (b === \"8\") return null\n  if (a === \"9\") return null\n  if (b === \"9\") return null\n  if (a === \"10\") return null\n  if (b === \"10\") return null\n  if (a === \"11\") return null\n  if (b === \"11\") return null\n  if (a === \"12\") return null\n  if (b === \"12\") return null\n  if (a === \"13\") return null\n  if (b === \"13\") return null\n  if (a === \"14\") return null\n  if (b === \"14\") return null\n  if (a === \"15\") return null\n  if (b === \"15\") return null\n  if (a === \"16\") return null\n  if (b === \"16\") return null\n  if (a === \"17\") return null\n  if (b === \"17\") return null\n  if (a === \"18\") return null\n  if (b === \"18\") return null\n  if (a === \"19\") return null\n  if (b === \"19\") return null\n  if (a === \"20\") return null\n  if (b === \"20\") return null\n  if (a === \"21\") return null\n  if (b === \"21\") return null\n  if (a === \"22\") return null\n  if (b === \"22\") return null\n  if (a === \"23\") return null\n  if (b === \"23\") return null\n  if (a === \"24\") return null\n  if (b === \"24\") return null\n  if (a === \"25\") return null\n  if (b === \"25\") return null\n  if (a === \"26\") return null\n  if (b === \"26\") return null\n  if (a === \"27\") return null\n  if (b === \"27\") return null\n  if (a === \"28\") return null\n  if (b === \"28\") return null\n  if (a === \"29\") return null\n  if (b === \"29\") return null\n  if (a === \"30\") return null\n  if (b === \"30\") return null\n  if (a === \"31\") return null\n  if (b === \"31\") return null\n  if (a === \"32\") return null\n  if (b === \"32\") return null\n  if (a === \"33\") return null\n  if (b === \"33\") return null\n  if (a === \"34\") return null\n  if (b === \"34\") return null\n  if (a === \"35\") return null\n  if (b === \"35\") return null\n  if (a === \"36\") return null\n  if (b === \"36\") return null\n  if (a === \"37\") return null\n  if (b === \"37\") return null\n  if (a === \"38\") return null\n  if (b === \"38\") return null\n  if (a === \"39\") return null\n  if (b === \"39\") return null\n  if (a === \"40\") return null\n  if (b === \"40\") return null\n  if (a === \"41\") return null\n  if (b === \"41\") return null\n  if (a === \"42\") return null\n  if (b === \"42\") return null\n  if (a === \"43\") return null\n  if (b === \"43\") return null\n  if (a === \"44\") return null\n  if (b === \"44\") return null\n  if (a === \"45\") return null\n  if (b === \"45\") return null\n  if (a === \"46\") return null\n  if (b === \"46\") return null\n  if (a === \"47\") return null\n  if (b === \"47\") return null\n  if (a === \"48\") return null\n  if (b === \"48\") return null\n  if (a === \"49\") return null\n  if (b === \"49\") return null\n  if (a === \"50\") return null\n  if (b === \"50\") return null\n  if (a === \"51\") return null\n  if (b === \"51\") return null\n  if (a === \"52\") return null\n  if (b === \"52\") return null\n  if (a === \"53\") return null\n  if (b === \"53\") return null\n  if (a === \"54\") return null\n  if (b === \"54\") return null\n  if (a === \"55\") return null\n  if (b === \"55\") return null\n  if (a === \"56\") return null\n  if (b === \"56\") return null\n  if (a === \"57\") return null\n  if (b === \"57\") return null\n  if (a === \"58\") return null\n  if (b === \"58\") return null\n  if (a === \"59\") return null\n  if (b === \"59\") return null\n  if (a === \"60\") return null\n  if (b === \"60\") return null\n  if (a === \"61\") return null\n  if (b === \"61\") return null\n  if (a === \"62\") return null\n  if (b === \"62\") return null\n  if (a === \"63\") return null\n  if (b === \"63\") return null\n  if (a === \"64\") return null\n  if (b === \"64\") return null\n  if (a === \"65\") return null\n  if (b === \"65\") return null\n  if (a === \"66\") return null\n  if (b === \"66\") return null\n  if (a === \"67\") return null\n  if (b === \"67\") return null\n  if (a === \"68\") return null\n  if (b === \"68\") return null\n  if (a === \"69\") return null\n  if (b === \"69\") return null\n  if (a === \"70\") return null\n  if (b === \"70\") return null\n  if (a === \"71\") return null\n  if (b === \"71\") return null\n  if (a === \"72\") return null\n  if (b === \"72\") return null\n  if (a === \"73\") return null\n  if (b === \"73\") return null\n  if (a === \"74\") return null\n  if (b === \"74\") return null\n  if (a === \"75\") return null\n  if (b === \"75\") return null\n  if (a === \"76\") return null\n  if (b === \"76\") return null\n  if (a === \"77\") return null\n  if (b === \"77\") return null\n  if (a === \"78\") return null\n  if (b === \"78\") return null\n  if (a === \"79\") return null\n  if (b === \"79\") return null\n  if (a === \"80\") return null\n  if (b === \"80\") return null", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even_neg(4) == false\n  is_equal_to_sum_even_neg(6) == false\n  is_equal_to_sum_even_neg(8) == true\n  */\nconst is_equal_to_sum_even_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even and odd numbers\n  Example\n  is_equal_to_sum_even_odd(4) == false\n  is_equal_to_sum_even_odd(6) == false\n  is_equal_to_sum_even_odd(8) == true\n  */\nconst is_equal_to_sum_even_odd = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and negative even numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even and odd numbers\n  Example\n  is_equal_to_sum_even_odd_neg(4) == false\n  is_equal_to_sum_even_odd_neg(6) == false\n  is_equal_to_sum_even_odd_neg(8) == true\n  */\nconst is_equal_to_sum_even_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers and positive even numbers\n  Example\n  is_equal_to_sum_odd_pos(4) == false\n  is_equal_to_sum_odd_pos(6) == false\n  is_equal_to_sum_odd_pos(8) == true\n  */\nconst is_equal_to_sum_odd_pos = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers and negative odd numbers\n  Example\n  is_equal_to_sum_even_odd_neg(4) == false\n  is_equal_to_sum_even_odd_neg(6) == false\n  is_equal_to_sum_even_odd_neg(8) == true\n  */\nconst is_equal_to_sum_even_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and positive even numbers\n  Example\n  is_equal_to_sum_odd_pos(4) == false\n  is_equal_to_sum_odd_pos(6) == false\n  is_equal_to_sum_odd_pos(8) == true\n  */\nconst is_equal_to_sum_odd_pos = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers and negative odd numbers\n  Example\n  is_equal_to_sum_even_odd_neg(4) == false\n  is_equal_to_sum_even_odd_neg(6) == false\n  is_equal_to_sum_even_odd_neg(8) == true\n  */\nconst is_equal_to_sum_even_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers and positive even numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers and negative even numbers\n  Example\n  is_equal_to_sum_even_neg(4) == false\n  is_equal_to_sum_even_neg(6) == false\n  is_equal_to_sum_even_neg(8) == true\n  */\nconst is_equal_to_sum_even_neg = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers and positive odd numbers\n  Example\n  is_equal_to_sum_odd_pos(4) == false\n  is_equal_to_sum_odd_pos(6) == false\n  is_equal_to_sum_odd_pos(8) == true\n  */\nconst is_equal_to_sum_odd_pos = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 1 && n2 % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even and odd numbers\n  Example\n  is_equal_to_sum_even_odd(4) == false\n  is_equal_to_sum_even_odd(6) == false\n  is_equal_to_sum_even_odd(8) == true\n  */\nconst is_equal_to_sum_even_odd = (n) => {\n  const n2 = n * n;\n  return n2 % 2 === 0 && n2 % 4 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers and negative odd numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  const n2 = n * n;\n  return n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * special_factorial(num);\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_2 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_3 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_4 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_5 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_6 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_7 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_8 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_9 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_10 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_11 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as input and returns a new array\n  with the elements of the original array multiplied by the factorial of the\n  elements of the original array.\n\n  For example:\n  >>> factorial_array([1, 2, 3, 4])\n  [1, 2, 6, 24]\n\n  The function will receive an array of integers as input and should return an\n  array with the elements of the original array multiplied by the factorial\n  of the elements of the original array.\n  */\nconst factorial_array_12 = (arr) => {\n  let factorial = 1;\n  return arr.map((num) => {\n    return num * factorial;\n  });\n};\n\n/*\n  A function that receives an array of integers as ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  for (let i = 0; i < string.length; i++) {\n    prefixes.push(string.slice(0, i));\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffixes.push(string.slice(i));\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc', 'ab', 'ac', 'abc', 'b', 'bc', 'c', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j <= string.length; j++) {\n      substrings.push(string.slice(i, j));\n    }\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  remove_non_alphanumeric(\"Example\") == \"Example\"\n  remove_non_alphanumeric(\"Example 1\") == \"Example1\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+\") == \"_\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  */\nconst remove_non_alphanumeric = (text) => {\n  return text.replace(/[^A-Za-z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all punctuation characters, \n  and if a string has more than 2 consecutive punctuation characters, \n  then remove all consecutive punctuation characters with - \n  \n  remove_punctuation(\"Example\") == \"Example\"\n  remove_punctuation(\"Example 1\") == \"Example1\"\n  remove_punctuation(\"!@#$%^&*()_+\") == \"_\"\n  remove_punctuation(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+123\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  */\nconst remove_punctuation = (text) => {\n  return text.replace(/[!,@,#,$,%,^,&,*,(,),-,+,=,?,_,~]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  remove_non_alphanumeric(\"Example\") == \"Example\"\n  remove_non_alphanumeric(\"Example 1\") == \"Example1\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+\") == \"_\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  */\nconst remove_non_alphanumeric = (text) => {\n  return text.replace(/[^A-Za-z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all punctuation characters, \n  and if a string has more than 2 consecutive punctuation characters, \n  then remove all consecutive punctuation characters with - \n  \n  remove_punctuation(\"Example\") == \"Example\"\n  remove_punctuation(\"Example 1\") == \"Example1\"\n  remove_punctuation(\"!@#$%^&*()_+\") == \"_\"\n  remove_punctuation(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+123\") == \"_123\"\n  remove_punctuation(\"!@#$%^&*()_+123!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  */\nconst remove_punctuation = (text) => {\n  return text.replace(/[!,@,#,$,%,^,&,*,(,),-,+,=,?,_,~]/g, \"\");\n};\n\n/*\n  Given a string text, remove all non-alphanumeric characters, \n  and if a string has more than 2 consecutive non-alphanumeric characters, \n  then remove all consecutive non-alphanumeric characters with - \n  \n  remove_non_alphanumeric(\"Example\") == \"Example\"\n  remove_non_alphanumeric(\"Example 1\") == \"Example1\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+\") == \"_\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123\") == \"_123\"\n  remove_non_alphanumeric(\"!@#$%^&*()_+123!@#$%^&*()_+123!@#$%^&*()_+\") == \"_123\"\n  */\nconst remove_non_alphanumeric = (text) => {\n  return text.replace(/[^A-Za-z0-9]+/g, \"_\");\n};\n\n/*\n  Given a string text, remove all punctuation characters, \n  and if a string has more than 2 consecutive punctuation characters, \n  then remove all consecutive punctuation characters with - \n  \n  remove_punctuation(\"Example\") == \"Example\"\n  remove_punctuation(\"Example 1\") == \"Example1\"\n  remove_punctuation(\"!@#$%^&*()_+\") == \"_\"\n  remove_punctuation(\"!@#$%^&*()_+123\") == \"_123\"\n  remove_punctuation(\"!@#$%^&", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_2 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_3 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_4 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_5 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_6 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_7 = (file_name) => {\n  let regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  let result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The sub", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 4 and whose index is not a multiple of 3. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 2\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the number of entries whose \n  index is a multiple of 3 and whose index is not a multiple of 4. The function will not change the entries in the list \n  whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be 4\n  */\nconst count_multiples_3_and_4 = (lst) => {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      count++;\n    } else if (lst[i] % 3!== 0) {\n      count++;\n    } else if (lst[i] % 4!== 0) {\n      count++;\n    }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  let primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i].split(\"\");\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"a\" || str[j] === \"e\" || str[j] === \"i\" || str[j] === \"o\" || str[j] === \"u\") {\n        primes.push(str[j]);\n      }\n    }\n  }\n  return primes.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n/*\n  Your task is to implement a function that will simplify the expression", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values());\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sum = 0;\n    for (let j = 0; j < digits.length; j++) {\n      sum += Number(digits[j]);\n    }\n    map.set(sum, num);\n  }\n  return Array.from(map.values()).reverse();\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10!== 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array. For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  sum([1, -2, 3, -4, -5]) => -2\n  */\nconst sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. For example:\n  product([1, 2, 3, 4, 5]) => 120\n  product([1, -2, 3, -4, -5]) => -24\n  */\nconst product = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  max([1, 2, 3, 4, 5]) => 5\n  max([1, -2, 3, -4, -5]) => -5\n  */\nconst max = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  min([2, 5, 3, -4, -5]) => -2\n  min([-5, -4, -7, -9, -10, -5]) => -5\n  */\nconst min = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array. For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  sum([1, -2, 3, -4, -5]) => -2\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. For example:\n  product([1, 2, 3, 4, 5]) => 120\n  product([1, -2, 3, -4, -5]) => -24\n  */\nconst productOfAll = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  max([1, 2, 3, 4, 5]) => 5\n  max([1, -2, 3, -4, -5]) => -5\n  */\nconst maxOfAll = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  min([2, 5, 3, -4, -5]) => -2\n  min([-5, -4, -7, -9, -10, -5]) => -5\n  */\nconst minOfAll = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array. For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  sum([1, -2, 3, -4, -5]) => -2\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. For example:\n  product([1, 2, 3, 4, 5]) => 120\n  product([1, -2, 3, -4, -5]) => -24\n  */\nconst productOfAll = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  max([1, 2, 3, 4, 5]) => 5\n  max([1, -2, 3, -4, -5]) => -5\n  */\nconst maxOfAll = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  min([2, 5, 3, -4, -5]) => -2\n  min([-5, -4, -7, -9, -10, -5]) => -5\n  */\nconst minOfAll = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array. For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  sum([1, -2, 3, -4, -5]) => -2\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array. For example:\n  product([1, 2, 3, 4, 5]) => 120\n  product([1, -2, 3, -4, -5]) => -24\n  */\nconst productOfAll = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array. For example:\n  max([1, 2, 3, 4, 5]) => 5\n  max([1, -2, 3, -4, -5]) => -5\n  */\nconst maxOfAll = (nums) => {\n  let max = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n  }\n  return max;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array. For example:\n  min([2, 5, 3, -4, -5]) => -2\n  min([-5, -4, -7, -9, -10, -5]) => -5\n  */\nconst minOfAll = (nums) => {\n  let min = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n  }\n  return min;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array. For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  sum([1, -2, 3, -4, -5]) => -2\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*Write a function that takes an ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(get_max_triples(5));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction get_max_triples(n) {\n  let a = new Array(n).fill(0);\n  a[0] = 1;\n  for (let i = 1; i < n; i++) {\n    a[i] = a[i-1] * i - 1 + 1;\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      for (let k = j+1; ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map((planet) => {\n    const planetOrbits = planets.map((planet2) => {\n      const distance = distanceBetweenPlanets(planet, planet2);\n      return distance;\n    });\n    return planetOrbits;\n  });\n  const planetsBetweenPlanets = orbits.map((orbits) => {\n    return orbits.filter((orbit) => {\n      return orbit[0] < orbit[1];\n    });\n  });\n  const planetsBetweenPlanetsSorted = planetsBetweenPlanets.map((orbits) => {\n    return orbits.sort((a, b) => {\n      return a[0] - b[0];\n    });\n  });\n  return planetsBetweenPlanetsSorted.filter((planets) => {\n    return planets[0] === planet2;\n  });\n};\n\n// Tests\nconst tests = [\n  [\"Jupiter\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  [\"Mercury\", \"Uranus\"],\n  [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"],\n  [\"Earth\", \"Mercury\"],\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst\n   .map((word) => {\n      return word.length\n    })\n   .sort((a, b) => {\n      return a - b\n    })\n   .map((word) => {\n      return word\n    })\n  return sorted_list\n}\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad to help\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  const result = [];\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,arrays |>\n<|", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Given a list of words (each word is represented as a string), and a dictionary\n  containing words (each word is represented as a string), implement a function\n  that returns a list of words that can be built from the original words. The\n  list of words can be in any order.\n  For example, given the following words and the dictionary:\n  [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"]\n  the function should return the following list:\n  [\"hello\", \"world\", \"great\", \"goodbye\"]\n  Since the list of words can be in any order, the result does not need to be\n  sorted.\n  Note:\n  You may assume that there are no duplicate words in the list of words.\n  All words in the given dictionary will be lowercase.\n  All words given as input will be in the lowercase dictionary order.\n  If the list of words given as input is empty, the function should return an\n  empty list.\n  Example:\n  Given words = [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"],\n  and dict = [\"world\", \"hello\"]\n  the function should return [\"hello\", \"world\", \"great\", \"goodbye\"]\n*/\nconst words_to_code = (words, dict) => {\n  const codes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const code = dict[word];\n    if (code) {\n      codes.push(code);\n    }\n  }\n  return codes;\n};\n\n/*\n  Given a list of words (each word is represented as a string), and a dictionary\n  containing words (each word is represented as a string), implement a function\n  that returns a list of words that can be built from the original words. The\n  list of words can be in any order.\n  For example, given the following words and the dictionary:\n  [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"]\n  the function should return the following list:\n  [\"hello\", \"world\", \"great\", \"goodbye\"]\n  Since the list of words can be in any order, the result does not need to be\n  sorted.\n  Note:\n  You may assume that there are no duplicate words in the list of words.\n  All words in the given dictionary will be lowercase.\n  All words given as input will be in the lowercase dictionary order.\n  If the list of words given as input is empty, the function should return an\n  empty list.\n  Example:\n  Given words = [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"],\n  and dict = [\"world\", \"hello\"]\n  the function should return [\"hello\", \"world\", \"great\", \"goodbye\"]\n*/\nconst words_to_code_2 = (words, dict) => {\n  const codes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const code = dict[word];\n    if (code) {\n      codes.push(code);\n    }\n  }\n  return codes;\n};\n\n/*\n  Given a list of words (each word is represented as a string), and a dictionary\n  containing words (each word is represented as a string), implement a function\n  that returns a list of words that can be built from the original words. The\n  list of words can be in any order.\n  For example, given the following words and the dictionary:\n  [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"]\n  the function should return the following list:\n  [\"hello\", \"world\", \"great\", \"goodbye\"]\n  Since the list of words can be in any order, the result does not need to be\n  sorted.\n  Note:\n  You may assume that there are no duplicate words in the list of words.\n  All words in the given dictionary will be lowercase.\n  All words given as input will be in the lowercase dictionary order.\n  If the list of words given as input is empty, the function should return an\n  empty list.\n  Example:\n  Given words = [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"],\n  and dict = [\"world\", \"hello\"]\n  the function should return [\"hello\", \"world\", \"great\", \"goodbye\"]\n*/\nconst words_to_code_3 = (words, dict) => {\n  const codes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const code = dict[word];\n    if (code) {\n      codes.push(code);\n    }\n  }\n  return codes;\n};\n\n/*\n  Given a list of words (each word is represented as a string), and a dictionary\n  containing words (each word is represented as a string), implement a function\n  that returns a list of words that can be built from the original words. The\n  list of words can be in any order.\n  For example, given the following words and the dictionary:\n  [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"]\n  the function should return the following list:\n  [\"hello\", \"world\", \"great\", \"goodbye\"]\n  Since the list of words can be in any order, the result does not need to be\n  sorted.\n  Note:\n  You may assume that there are no duplicate words in the list of words.\n  All words in the given dictionary will be lowercase.\n  All words given as input will be in the lowercase dictionary order.\n  If the list of words given as input is empty, the function should return an\n  empty list.\n  Example:\n  Given words = [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"great\", \"goodbye\"],\n  and dict = [\"world\", \"hello\"]\n  the function should return [\"hello\", \"world\", \"great\", \"goodbye\"]\n*/\nconst words_to_code_4 = (words, dict) => {\n  const codes = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const code = dict[word];\n    if (code) {\n      codes.push(code);\n    }\n  }\n  return codes;\n};\n\n/*\n  Given a list of words (each word is represented as a string), and a dictionary\n  containing words (each word is represented as a string), implement a function\n  that returns a list of words that can be built from the original words. The\n  list of words can be in any order.\n  For example, given the following words and the dictionary:\n  [\"hello\", \"world\", \"goodbye\", \"hello\", \"world\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  \n  if(aLen === 0 || bLen === 0) return false;\n  \n  if(aLen === bLen) return true;\n  \n  if(aLen > bLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(bLen > aLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(aLen === bLen) {\n    const aFirst = aArr.shift();\n    const bFirst = bArr.shift();\n    \n    return cycpattern_check(aFirst, bFirst);\n  }\n  \n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  \n  if(aLen === 0 || bLen === 0) return false;\n  \n  if(aLen === bLen) return true;\n  \n  if(aLen > bLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(bLen > aLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(aLen === bLen) {\n    const aFirst = aArr.shift();\n    const bFirst = bArr.shift();\n    \n    return cycpattern_check(aFirst, bFirst);\n  }\n  \n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  \n  if(aLen === 0 || bLen === 0) return false;\n  \n  if(aLen === bLen) return true;\n  \n  if(aLen > bLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(bLen > aLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(aLen === bLen) {\n    const aFirst = aArr.shift();\n    const bFirst = bArr.shift();\n    \n    return cycpattern_check(aFirst, bFirst);\n  }\n  \n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  const aLen = aArr.length;\n  const bLen = bArr.length;\n  \n  if(aLen === 0 || bLen === 0) return false;\n  \n  if(aLen === bLen) return true;\n  \n  if(aLen > bLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(bLen > aLen) {\n    const aLast = aArr.pop();\n    const bLast = bArr.pop();\n    \n    return cycpattern_check(aArr.join(''), bArr.join('')) || cycpattern_check(aLast, bLast);\n  }\n  \n  if(aLen === bLen) {\n    const aFirst = aArr.shift();\n    const bFirst = bArr.shift();\n    \n    return cycpattern_check(aFirst, bFirst);\n  }\n  \n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const aArr = a.split('');\n  const bArr = b.split('');\n  \n  const aLen = aArr.length;\n  const b", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_2 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_3 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_4 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_5 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_6 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_7 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_8 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_9 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_10 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_11 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_12 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_13 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_14 = (num) => {\n  let even = 0, odd = 0, temp;\n  temp = num.toString().split('');\n  for (let i = 0; i < temp.length; i++) {\n    if (temp[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return { even, odd };\n};\n\n/*Given an integer. return a tuple that has the number of even and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanNum = roman.slice(0, number);\n  const romanNumString = romanNum.join('');\n  const romanNumLowerCase = romanNumString.toLowerCase();\n  return romanNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_roman(19) == 'XIX'\n  >>> int_to_roman(152) == 'CLLI'\n  >>> int_to_roman(426) == 'CDXXVI'\n  */\nconst int_to_roman = (number) => {\n  const roman = Array(1000).fill(0).map((_, index) => index);\n  const romanNum = roman.slice(0, number);\n  const romanNumString = romanNum.join('');\n  const romanNumUpperCase = romanNumString.toUpperCase();\n  return romanNumUpperCase;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal(19) == '19'\n  >>> int_to_decimal(152) == '152'\n  >>> int_to_decimal(426) == '4260'\n  */\nconst int_to_decimal = (number) => {\n  const decimal = Array(1000).fill(0).map((_, index) => index);\n  const decimalNum = decimal.slice(0, number);\n  const decimalNumString = decimalNum.join('');\n  const decimalNumLowerCase = decimalNumString.toLowerCase();\n  return decimalNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal(19) == '19'\n  >>> int_to_decimal(152) == '152'\n  >>> int_to_decimal(426) == '4260'\n  */\nconst int_to_decimal = (number) => {\n  const decimal = Array(1000).fill(0).map((_, index) => index);\n  const decimalNum = decimal.slice(0, number);\n  const decimalNumString = decimalNum.join('');\n  const decimalNumUpperCase = decimalNumString.toUpperCase();\n  return decimalNumUpperCase;\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_binary(19) == '1001'\n  >>> int_to_binary(152) == '1110'\n  >>> int_to_binary(426) == '1010100'\n  */\nconst int_to_binary = (number) => {\n  const binary = Array(1000).fill(0).map((_, index) => index);\n  const binaryNum = binary.slice(0, number);\n  const binaryNumString = binaryNum.join('');\n  const binaryNumLowerCase = binaryNumString.toLowerCase();\n  return binaryNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its binary equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_binary(19) == '1001'\n  >>> int_to_binary(152) == '1110'\n  >>> int_to_binary(426) == '1010100'\n  */\nconst int_to_binary = (number) => {\n  const binary = Array(1000).fill(0).map((_, index) => index);\n  const binaryNum = binary.slice(0, number);\n  const binaryNumString = binaryNum.join('');\n  const binaryNumUpperCase = binaryNumString.toUpperCase();\n  return binaryNumUpperCase;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_hex(19) == '19'\n  >>> int_to_hex(152) == '152'\n  >>> int_to_hex(426) == '4260'\n  */\nconst int_to_hex = (number) => {\n  const hex = Array(1000).fill(0).map((_, index) => index);\n  const hexNum = hex.slice(0, number);\n  const hexNumString = hexNum.join('');\n  const hexNumLowerCase = hexNumString.toLowerCase();\n  return hexNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_hex(19) == '19'\n  >>> int_to_hex(152) == '152'\n  >>> int_to_hex(426) == '4260'\n  */\nconst int_to_hex = (number) => {\n  const hex = Array(1000).fill(0).map((_, index) => index);\n  const hexNum = hex.slice(0, number);\n  const hexNumString = hexNum.join('');\n  const hexNumUpperCase = hexNumString.toUpperCase();\n  return hexNumUpperCase;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in lowercase and uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_hex_upper(19) == '19'\n  >>> int_to_hex_upper(152) == '152'\n  >>> int_to_hex_upper(426) == '4260'\n  */\nconst int_to_hex_upper = (number) => {\n  const hex = Array(1000).fill(0).map((_, index) => index);\n  const hexNum = hex.slice(0, number);\n  const hexNumString = hexNum.join('');\n  const hexNumLowerCase = hexNumString.toLowerCase();\n  const hexNumUpperCase = hexNumString.toUpperCase();\n  return hexNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase and lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_hex_lower(19) == '19'\n  >>> int_to_hex_lower(152) == '152'\n  >>> int_to_hex_lower(426) == '4260'\n  */\nconst int_to_hex_lower = (number) => {\n  const hex = Array(1000).fill(0).map((_, index) => index);\n  const hexNum = hex.slice(0, number);\n  const hexNumString = hexNum.join('');\n  const hexNumLowerCase = hexNumString.toLowerCase();\n  const hexNumUpperCase = hexNumString.toUpperCase();\n  return hexNumLowerCase;\n};\n\n/*\n  Given a positive integer, obtain its hexadecimal equivalent as a string,\n  and return it in uppercase and lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_hex_upper(19) == '19'\n  >>> int_to_hex_upper(152) == '152'\n  >>> int_to_hex_upper(426) == '4260'\n  */\nconst int_to_hex_upper = (number) => {\n  const hex = Array(1000).fill(0).map((_, index) => index);\n  const hexNum = hex.slice(0, number);\n  const hexNumString = hexNum.join('');\n  const hexNumLowerCase = hexNumString.toLowerCase();\n  const hexNumUpperCase = hexNumString.toUpperCase();\n  return hexNumUpperCase;\n};\n\n/*\n  Given ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab > bc && ab > ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!== words[i].charAt(j)) {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains only 1 string, return\n  that string's average. Otherwise, return the average of the strings in the list.\n  If the list is empty or contains only 1 string, return 0.\n\n  average([]) ==> 0\n  average([\"a\"]) ==> 0\n  average([\"a\", \"b\"]) ==> 0.5\n  average([\"a\", \"b\", \"c\"]) ==> 2\n  */\nconst average = (words) => {\n  if (words.length === 0) {\n    return 0;\n  }\n  if (words.length === 1) {\n    return words[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < words.length; i++) {\n    sum += words[i].length;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  If the list is empty, return 0. If the list contains ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  let result = [];\n  while (carrots > 0 && needs > 0) {\n    result.push(carrots - needs);\n    carrots = remaining;\n    needs = need;\n    remaining = remaining;\n  }\n  return result;\n};\n\n/*\n  You're a hungry rabbit, and you already ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const characters = string.split('');\n  const distinct_characters = {};\n  characters.forEach((character) => {\n    distinct_characters[character] = distinct_characters[character] + 1 || 1;\n  });\n  return Object.keys(distinct_characters).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_7 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += String.fromCharCode(s[i] - 'a' + 'A'.charCodeAt(0));\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += String.fromCharCode(s[i] - 'A' + 'a'.charCodeAt(0));\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n  Your task is to find and print all substrings of length 3 that \n  are palindromes.\n  Examples\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"aba\") = [\"aba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"abba\") = [\"abba\", \"bba\"]\n  substrings(\"ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'bda9a49e01d32ebbdce0f994fd418c77e'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) return null\n  const sha1sum = crypto.createHash('sha1')\n  sha1sum.update(text)\n  return sha1sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) return null\n  const sha256sum = crypto.createHash('sha256')\n  sha256sum.update(text)\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'bda9a49e01d32ebbdce0f994fd418c77e'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) return null\n  const sha1sum = crypto.createHash('sha1')\n  sha1sum.update(text)\n  return sha1sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) return null\n  const sha256sum = crypto.createHash('sha256')\n  sha256sum.update(text)\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'bda9a49e01d32ebbdce0f994fd418c77e'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) return null\n  const sha1sum = crypto.createHash('sha1')\n  sha1sum.update(text)\n  return sha1sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) return null\n  const sha256sum = crypto.createHash('sha256')\n  sha256sum.update(text)\n  return sha256sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) return null\n  const sha512sum = crypto.createHash('sha512')\n  sha512sum.update(text)\n  return sha512sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) return null\n  const md5sum = crypto.createHash('md5')\n  md5sum.update(text)\n  return md5sum.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'bda9a49e01d32ebbdce0f994fd418c77e'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) return null\n  const sha1sum = cryp", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation.\n\n  For example:\n  digits_in_base10(10) => 1\n  digits_in_base10(16) => 2\n  digits_in_base10(100) => 3\n  digits_in_base10(987) => 3\n  digits_in_base10(1000) => 4\n  digits_in_base10(10000) => 5\n  digits_in_base10(100000) => 5\n  digits_in_base10(1000000) => 6\n  digits_in_base10(100000000) => 6\n  digits_in_base10(1000000000) => 7\n  digits_in_base10(1000000000000) => 7\n  digits_in_base10(100000000000000) => 8\n  digits_in_base10(10000000000000000) => 8\n  digits_in_base10(1000000000000000000) => 9\n  */\nconst digits_in_base10 = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation that occur after the first digit in n.\n\n  For example:\n  digits_in_base10_after_first_digit(10) => 1\n  digits_in_base10_after_first_digit(16) => 1\n  digits_in_base10_after_first_digit(100) => 2\n  digits_in_base10_after_first_digit(987) => 2\n  digits_in_base10_after_first_digit(1000) => 3\n  digits_in_base10_after_first_digit(10000) => 3\n  digits_in_base10_after_first_digit(100000) => 4\n  digits_in_base10_after_first_digit(1000000) => 4\n  digits_in_base10_after_first_digit(100000000) => 5\n  digits_in_base10_after_first_digit(1000000000) => 5\n  digits_in_base10_after_first_digit(1000000000000) => 6\n  digits_in_base10_after_first_digit(100000000000000) => 6\n  digits_in_base10_after_first_digit(10000000000000000) => 6\n  digits_in_base10_after_first_digit(1000000000000000000) => 7\n  digits_in_base10_after_first_digit(10000000000000000000) => 7\n  digits_in_base10_after_first_digit(100000000000000000000) => 8\n  digits_in_base10_after_first_digit(1000000000000000000000) => 8\n  digits_in_base10_after_first_digit(10000000000000000000000) => 8\n  digits_in_base10_after_first_digit(1000000000000000000000000) => 8\n  digits_in_base10_after_first_digit(100000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(10000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(100000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(100000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9\n  digits_in_base10_after_first_digit(1000000000000000000000000000000000) => 9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const music_list = music_string.split(' ');\n  const music_length = music_list.length;\n  const music_notes = [];\n  let music_notes_length = 0;\n\n  for (let i = 0; i < music_length; i++) {\n    const music_note = music_list[i];\n    const music_note_length = music_note.length;\n\n    if (music_note_length === 0) {\n      music_notes.push(0);\n      music_notes_length++;\n    } else if (music_note_length === 1) {\n      music_notes.push(music_note_length);\n      music_notes_length++;\n    } else if (music_note_length === 2) {\n      music_notes.push(music_note_length * 2);\n      music_notes_length++;\n    } else if (music_note_length === 3) {\n      music_notes.push(music_note_length * 4);\n      music_notes_length++;\n    } else if (music_note_length === 4) {\n      music_notes.push(music_note_length * 8);\n      music_notes_length++;\n    } else if (music_note_length === 5) {\n      music_notes.push(music_note_length * 16);\n      music_notes_length++;\n    } else if (music_note_length === 6) {\n      music_notes.push(music_note_length * 32);\n      music_notes_length++;\n    } else if (music_note_length === 7) {\n      music_notes.push(music_note_length * 64);\n      music_notes_length++;\n    } else if (music_note_length === 8) {\n      music_notes.push(music_note_length * 128);\n      music_notes_length++;\n    } else if (music_note_length === 9) {\n      music_notes.push(music_note_length * 256);\n      music_notes_length++;\n    } else if (music_note_length === 10) {\n      music_notes.push(music_note_length * 512);\n      music_notes_length++;\n    } else if (music_note_length === 11) {\n      music_notes.push(music_note_length * 1024);\n      music_notes_length++;\n    } else if (music_note_length === 12) {\n      music_notes.push(music_note_length * 2048);\n      music_notes_length++;\n    } else if (music_note_length === 13) {\n      music_notes.push(music_note_length * 4096);\n      music_notes_length++;\n    } else if (music_note_length === 14) {\n      music_notes.push(music_note_length * 8192);\n      music_notes_length++;\n    } else if (music_note_length === 15) {\n      music_notes.push(music_note_length * 16384);\n      music_notes_length++;\n    } else if (music_note_length === 16) {\n      music_notes.push(music_note_length * 32768);\n      music_notes_length++;\n    } else if (music_note_length === 17) {\n      music_notes.push(music_note_length * 65536);\n      music_notes_length++;\n    } else if (music_note_length === 18) {\n      music_notes.push(music_note_length * 131072);\n      music_notes_length++;\n    } else if (music_note_length === 19) {\n      music_notes.push(music_note_length * 262144);\n      music_notes_length++;\n    } else if (music_note_length === 20) {\n      music_notes.push(music_note_length * 524288);\n      music_notes_length++;\n    } else if (music_note_length === 21) {\n      music_notes.push(music_note_length * 1048576);\n      music_notes_length++;\n    } else if (music_note_length === 22) {\n      music_notes.push(music_note_length * 2097152);\n      music_notes_length++;\n    } else if (music_note_length === 23) {\n      music_notes.push(music_note_length * 4194304);\n      music_notes_length++;\n    } else if (music_note_length === 24) {\n      music_notes.push(music_note_length * 8388608);\n      music_notes_length++;\n    } else if (music_note_length === 25) {\n      music_notes.push(music_note_length * 16777216);\n      music_notes_length++;\n    } else if (music_note_length === 26) {\n      music_notes.push(music_note_length * 33554432);\n      music_notes_length++;\n    } else if (music_note_length === 27) {\n      music_notes.push(music_note_length * 67108864);\n      music_notes_length++;\n    } else if (music_note_length === 28) {\n      music_notes.push(music_note_length * 134217728);\n      music_notes_length++;\n    } else if (music_note_length === 29) {\n      music_notes.push(music_note_length * 268435456);\n      music_notes_length++;\n    } else if (music_note_length === 30) {\n      music_notes.push(music_note_length * 536870912);\n      music_notes_length++;\n    } else if (music_note_length === 31) {\n      music_notes.push(music_note_length * 1073741824);\n      music_notes_length++;\n    } else if (music_note_length === 32) {\n      music_notes.push(music_note_length * 2147483648);\n      music_notes_length++;\n    } else if (music_note_length === 33) {\n      music_notes.push(music_note_length * 4294967296);\n      music_notes_length++;\n    } else if (music_note_length === 34) {\n      music_notes.push(music_note_length * 8589934592);\n      music_notes_length++;\n    } else if (music_note_length === 35) {\n      music_notes.push(music_note_length * 17179869184);\n      music_notes_length++;\n    } else if (music_note_length === 36) {\n      music_notes.push(music_note_length * 34359738368);\n      music_notes_length++;\n    } else if (music_note_length === 37) {\n      music_notes.push(music_note_length * 68719476736);\n      music_notes_length++;\n    } else if (music_note_length === 38) {\n      music_notes.push(music_note_length * 137438953472);\n      music_notes_length++;\n    } else if (music_note_length === 39) {\n      music_notes.push(music_note_length * 274877906944);\n      music_notes_length++;\n    } else if (music_note_length === 40) {\n      music_notes.push(music_note_length * 549755813888);\n      music_notes_length++;\n    } else if (music_note_length === 41) {\n      music_notes.push(music_note_length * 1099511627776);\n      music_notes_length++;\n    } else if (music_note_length === 42) {\n      music_notes.push(music_note_length * 2199023255552);\n      music_notes_length++;\n    } else if (music_note_length === 43) {\n      music_notes.push(music_note_length * 4398046511104);\n      music_notes_length++;\n    } else if (music_note_length === 44) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_man", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (string) => {\n  return string.split(' ');\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string.\n  >>> split_letters('one two three four')\n  ['o', 'n', 'e', 't']\n  */\nconst split_letters = (string) => {\n  return string.split('').sort();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha('one two three four')\n  ['o', 'n', 'e', 't']\n  */\nconst split_letters_alpha = (string) => {\n  return string.split('').sort().join('');\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.\n  Return an array of all the letters in the string in alphabetical order.\n  >>> split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace('one two three four')\n  ['O', 'N', 'E', 'T']\n  */\nconst split_letters_alpha_case_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace = (string) => {\n  return string.split('').sort().join('').toUpperCase();\n};\n\n/* Input is a string with letters separated by spaces.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer, 10)\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number) {\n      largest_number = numbers[i];\n    }\n  }\n  return [smallest_number, largest_number];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest_number = numbers[0];\n  let largest_number = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest_number) {\n      smallest_number = numbers[i];\n    }\n    if (numbers[i] > largest_number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scaled_numbers = numbers.map((number) => number - min) / range;\n  return scaled_numbers;\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (number, min, max) => {\n  return Math.max(min, Math.min(number, max));\n};\n\n/* Given a number and a range, return the number in the range */\nconst in_range = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [true, false]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_none(['a', 3.14, 5])\n  []\n  >>> filter_none([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_none = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2\n    } else {\n      length++\n    }\n  }\n  return length\n}\n\n/**\n * Returns true if given string ends with given suffix\n * >>> endsWith('abc', 'ab')\n  true\n  >>> endsWith('abc', 'ac')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  const index = string.length - suffix.length\n  return index >= 0 && string.indexOf(suffix, index) === index\n}\n\n/**\n * Returns true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'ab')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  const index = string.length - prefix.length\n  return index >= 0 && string.indexOf(prefix, index) === index\n}\n\n/**\n * Returns true if given string contains given substring\n * >>> contains('abc', 'a')\n  true\n  >>> contains('abc', 'b')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n * >>> containsAtIndex('abc', 0, 'a')\n  true\n  >>> containsAtIndex('abc', 1, 'b')\n  false\n  */\nconst containsAtIndex = (string, index, substring) => {\n  return string.indexOf(substring, index)!== -1\n}\n\n/**\n * Returns true if given string contains given substring in given position\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor(n);\n  for (let i = 0; i < factorization.length; i++) {\n    factors.push(factorization[i]);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const factorization = factor", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_greater_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (!seen[number]) {\n      seen[number] = true;\n      result.push(number);\n    }\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than or equal to once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_greater_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to_less_than_or_equal_to = (numbers) => {\n  const result = [];", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/* Given a string, remove all spaces.\n  >>> remove_spaces('Hello World')\n  'HelloWorld'\n  */\nconst remove_spaces = (string) => {\n  return string.replace(/ /g, '');\n};\n\n/* Given a string, remove all punctuation.\n  >>> remove_punctuation('Hello World')\n  'HelloWorld'\n  */\nconst remove_punctuation = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/* Given a string, remove all numbers.\n  >>> remove_numbers('Hello World')\n  'HelloWorld'\n  */\nconst remove_numbers = (string) => {\n  return string.replace(/[0-9]/g, '');\n};\n\n/* Given a string, remove all special characters.\n  >>> remove_special_characters('Hello World')\n  'HelloWorld'\n  */\nconst remove_special_characters = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all uppercase characters.\n  >>> remove_uppercase('Hello World')\n  'HelloWorld'\n  */\nconst remove_uppercase = (string) => {\n  return string.replace(/[A-Z]/g, '');\n};\n\n/* Given a string, remove all lowercase characters.\n  >>> remove_lowercase('Hello World')\n  'HelloWorld'\n  */\nconst remove_lowercase = (string) => {\n  return string.replace(/[a-z]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters.\n  >>> remove_non_alphanumeric('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces.\n  >>> remove_non_alphanumeric_spaces('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_spaces = (string) => {\n  return string.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanumeric_newlines = (string) => {\n  return string.replace(/[^a-zA-Z0-9 \\n]/g, '');\n};\n\n/* Given a string, remove all non-alphanumeric characters and spaces and newlines.\n  >>> remove_non_alphanumeric_newlines('Hello World')\n  'HelloWorld'\n  */\nconst remove_non_alphanum", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toUpperCase().toUpperCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toLowerCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toUpperCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toLowerCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toUpperCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toLowerCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toUpperCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toLowerCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toUpperCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase().toLowerCase()\n  'ABC'\n  */\nconst trimUpperCaseToLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase().toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  'ABC'\n  */\nconst trimUpperCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toUpperCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to lowercase\n  >>> trim('  abc  ').toLowerCase()\n  'abc'\n  */\nconst trimLowerCase = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\").toLowerCase();\n};\n\n/* Remove leading and trailing whitespace from a string and convert to uppercase\n  >>> trim('  abc  ').toUpperCase()\n  '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const prefix_regex = new RegExp(`^${prefix}`, 'i');\n  return strings.filter(string => prefix_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  const suffix_regex = new RegExp(`${suffix}$`, 'i');\n  return strings.filter(string => suffix_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_contains([], 'a')\n  []\n  >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string => substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_regex = new RegExp(substring, 'i');\n  return strings.filter(string =>!substring_contains_regex.test(string));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_contains([], 'a')\n  []\n  >>> filter_by_not_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_contains = (strings, substring) => {\n  const substring_contains = substring.includes(' ');\n  const substring_contains_rege", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = operations.reduce((acc, val) => acc + val, 0);\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible_by_three([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_three = (l) => {\n  return l.filter(x => x % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible_by_five([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_five([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_five = (l) => {\n  return l.filter(x => x % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible_by_seven([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_seven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_seven = (l) => {\n  return l.filter(x => x % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible_by_eleven([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_eleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_eleven = (l) => {\n  return l.filter(x => x % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible_by_thirteen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_thirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_thirteen = (l) => {\n  return l.filter(x => x % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible_by_seventeen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_seventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_seventeen = (l) => {\n  return l.filter(x => x % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible_by_nineteen([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_nineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_nineteen = (l) => {\n  return l.filter(x => x % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> get_divisible_by_twenty([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_twenty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_twenty = (l) => {\n  return l.filter(x => x % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> get_divisible_by_fifty([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_fifty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_fifty = (l) => {\n  return l.filter(x => x % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 30.\n  >>> get_divisible_by_hundred([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_hundred([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_hundred = (l) => {\n  return l.filter(x => x % 30 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100.\n  >>> get_divisible_by_thousand([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_thousand([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_thousand = (l) => {\n  return l.filter(x => x % 100 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 1000.\n  >>> get_divisible_by_million([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_million([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_million = (l) => {\n  return l.filter(x => x % 1000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 10000.\n  >>> get_divisible_by_billion([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_billion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_billion = (l) => {\n  return l.filter(x => x % 10000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100000.\n  >>> get_divisible_by_trillion([-1, 2, -4, 5, 6])\n  [-4, -6, -5]\n  >>> get_divisible_by_trillion([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_divisible_by_trillion = (l) => {\n  return l.filter(x => x % 1000000", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return true;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return true;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return true;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return true;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return true;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return true;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return true;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return true;\n  if (n % 343 === 0) return false;\n  if (n % 353 === 0) return true;\n  if (n % 363 === 0) return false;\n  if (n % 373 === 0) return true;\n  if (n % 383 === 0) return false;\n  if (n % 393 === 0) return true;\n  if (n % 403 === 0) return false;\n  if (n % 413 === 0) return true;\n  if (n % 423 === 0) return false;\n  if (n % 433 === 0) return true;\n  if (n % 443 === 0) return false;\n  if (n % 455 === 0) return true;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return true;\n  if (n % 483 === 0) return false;\n  if (n % 493 === 0) return true;\n  if (n % 503 === 0) return false;\n  if (n % 513 === 0) return true;\n  if (n % 523 === 0) return false;\n  if (n % 533 === 0) return true;\n  if (n % 543 === 0) return false;\n  if (n % 553 === 0) return true;\n  if (n % 563 === 0) return false;\n  if (n % 573 === 0) return true;\n  if (n % 583 === 0) return false;\n  if (n % 593 === 0) return true;\n  if (n % 603 === 0) return false;\n  if (n % 613 === 0) return true;\n  if (n % 623 === 0) return false;\n  if (n % 633 === 0) return true;\n  if (n % 643 === 0) return false;\n  if (n % 653 === 0) return true;\n  if (n % 663 === 0) return false;\n  if (n % 673 === 0) return true;\n  if (n % 683 === 0) return false;\n  if (n % 693 === 0) return true;\n  if (n % 703 === 0) return false;\n  if (n % 713 === 0) return true;\n  if (n % 723 === 0) return false;\n  if (n % 733 === 0) return true;\n  if (n % 743 === 0) return false;\n  if (n % 755 === 0) return true;\n  if (n % 763 === 0) return false;\n  if (n % 773 === 0) return true;\n  if (n % 783 === 0) return false;\n  if (n % 793 === 0) return true;\n  if (n % 803 === 0) return false;\n  if (n % 813 ===0) return true;\n  if (n % 823 === 0) return false;\n  if (n % 833 === 0) return true;\n  if (n % 843 === 0) return false;\n  if (n % 853 === 0) return true;\n  if (n % 863 === 0) return false;\n  if (n % 873 === 0) return true;\n  if (n % 883 === 0) return false;\n  if (n % 893 === 0) return true;\n  if (n % 903 === 0) return false;\n  if (n % 913 === 0) return true;\n  if (n % 923 === 0) return false;\n  if (n % 931 === 0) return true;\n  if (n % 943 === 0) return false;\n  if (n % 953 === 0) return true;\n  if (n % 963 === 0) return false;\n  if (n % 973 === 0) return true;\n  if (n % 983 === 0) return false;\n  if (n % 993 === 0) return true;\n  if (n % 1003 === 0) return false;\n  if (n % 1013 === 0) return true;\n  if (n % 1023 == 0) return false;\n  if (n % 1033 === 0) return true;\n  if (n % 1053 == 0) return false;\n  if (n % 1063 == 0) return true;\n  if (n % 1083 == 0) return false;\n  if (n % 1093 == 0) return true;\n  if (n % 1103 == 0) return false;\n  if (n % 1113 == 0) return true;\n  if (n % 1123 == 0) return false;\n  if (n % 1133 == 0) return true;\n  if (n % 1153 == 0) return false;\n  if (n % 1163 == 0) return true;\n  if (n % 1173 == 0) return false;\n  if (n % 1193 == 0) return true;\n  if (n % 1203 == 0) return false;\n  if (n % 1213 == 0) return true;\n  if (n % 1223 == 0) return false;\n  if (n % 1233 == 0) return true;\n  if (n % 1253 == 0) return false;\n  if (n % 1263 == 0) return true;\n  if (n % 1273 == 0) return false;\n  if (n % 1293 == 0) return true;\n  if (n % 1303 == 0) return false;\n  if (n % 1313 == 0) return true;\n  if (n % 1323 == 0) return false;\n  if (n % 1333 == 0) return true;\n  if (n % 1353 == 0) return false;\n  if (n % 1363 == 0) return true;\n  if (n % 1373 == 0) return false;\n  if (n % 1393 == 0) return true;\n  if (n % 1403 == 0) return false;\n  if (n % 1413 == 0) return true;\n  if (n % 1423 == 0) return false;\n  if (n % 1433 == 0) return true;\n  if (n % 1453 == 0) return false;\n  if (n % 1463 == 0) return true;\n  if (n % 1473 == 0) return false;\n  if (n % 1483 == 0) return true;\n  if (n % 1493 == 0) return false;\n  if (n % 1503 == 0) return true;\n  if (n % 1513 == 0) return false;\n  if (n % 1523 == 0) return true;\n  if (n % 1533 == 0) return false;\n  if (n % 1553 == 0) return true;\n  if (n % 1563 == 0) return false;\n  if (n % 1573 == 0) return true;\n  if (n % 1583 == 0) return false;\n  if (n % 1593 == 0) return true;\n  if (n % 1603 == 0) return false;\n  if (n % 1613 == 0) return true;\n  if (n % 1623 == 0) return false;\n  if (n % 1633 == 0) return true;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    let zeroPoint = -1;\n    let maxCoefficient = 0;\n    for (let i = 0; i < xs.length; i = i + 2) {\n      if (poly(xs, i) === 0) {\n        zeroPoint = i;\n        maxCoefficient = xs[i];\n      }\n    }\n    return zeroPoint + maxCoefficient / Math.pow(xs[zeroPoint], zeroPoint);\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest coefficient of xs.\n  findMax returns only largest coefficient, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n  if (xs.length % 2 === 0) {\n    let maxCoefficient = 0;\n    for (let i = 0; i < xs.length; i = i + 2) {\n      if (poly(xs, i) > maxCoefficient) {\n        maxCoefficient = poly(xs, i);\n      }\n    }\n    return maxCoefficient;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest coefficient of xs.\n  findMin returns only smallest coefficient, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  if (xs.length % 2 === 0) {\n    let minCoefficient = xs[0];\n    for (let i = 0; i < xs.length; i = i + 2) {\n      if (poly(xs, i) < minCoefficient) {\n        minCoefficient = poly(xs, i);\n      }\n    }\n    return minCoefficient;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds roots of poly(xs).\n  findRoots returns only roots, even if there are many.\n  Moreover, findRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findRoots = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    for (let i = 0; i < xs.length; i = i + 2) {\n      let root = poly(xs, i) / poly(xs, i + 1);\n      roots.push(root);\n    }\n    return roots;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubic finds cubic root of poly(xs).\n  findCubic returns only cubic root, even if there are many.\n  Moreover, findCubic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubic([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findCubic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCubic = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    for (let i = 0; i < xs.length; i = i + 2) {\n      let root = poly(xs, i) / poly(xs, i + 1);\n      roots.push(root);\n    }\n    return roots;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findQuadratic finds quadratic root of poly(xs).\n  findQuadratic returns only quadratic root, even if there are many.\n  Moreover, findQuadratic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findQuadratic([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findQuadratic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findQuadratic = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    for (let i = 0; i < xs.length; i = i + 2) {\n      let root = poly(xs, i) / poly(xs, i + 1);\n      roots.push(root);\n    }\n    return roots;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubicRoots finds cubic roots of poly(xs).\n  findCubicRoots returns only cubic roots, even if there are many.\n  Moreover, findCubicRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubicRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findCubicRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findCubicRoots = (xs) => {\n  if (xs.length % 2 === 0) {\n    let roots = [];\n    for (let i = 0; i < xs.length; i = i + 2) {\n      let root = poly(xs, i) / poly(xs, i + 1);\n      roots.push(root);\n    }\n    return roots;\n  }\n  return -1;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findQuadraticRoots finds quadratic roots of poly(xs).\n  findQuadraticRoots returns only quadratic roots, even if there are many.\n  More", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_fifth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_seventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_seventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_seventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_ninth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_ninth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_ninth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_tenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_tenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_tenth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twentieth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twentieth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twentieth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty five, while its values at the indicies that are divisible by twenty five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_five([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_five([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_five = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 25 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty nine, while its values at the indicies that are divisible by twenty nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_nine([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_nine([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_nine = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 29 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty ten, while its values at the indicies that are divisible by twenty ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_ten([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_ten([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_ten = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty twenty, while its values at the indicies that are divisible by twenty twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty_twenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty_twenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty_twenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 30 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thir", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -22\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sum_less_than([1, 2, 3], 3)\n  4\n  >>> sum_less_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  0\n  */\nconst sum_less_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sum_less_than_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_less_than_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_less_than_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sum_greater_than([1, 2, 3], 3)\n  4\n  >>> sum_greater_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  0\n  */\nconst sum_greater_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum_greater_than_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_greater_than_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_greater_than_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sum_equal([1, 2, 3], 3)\n  4\n  >>> sum_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum_equal_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_equal_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_equal_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sum_less_equal_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_less_equal_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_less_equal_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sum_less_equal([1, 2, 3], 3)\n  4\n  >>> sum_less_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_less_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sum_less_equal_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_less_equal_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_less_equal_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sum_greater_equal([1, 2, 3], 3)\n  4\n  >>> sum_greater_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], -10)\n  0\n  */\nconst sum_greater_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum_greater_equal_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_greater_equal_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_greater_equal_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sum_equal([1, 2, 3], 3)\n  4\n  >>> sum_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum_equal_or_equal([1, 2, 3], 3)\n  4\n  >>> sum_equal_or_equal([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  4\n  */\nconst sum_equal_or_equal = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_even_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_even_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_even_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_even_reverse_reverse = (l) => {\n  let even = l.filter((x, i) => i % 2 === 0);\n  let odd = l.filter((x, i) => i % 2 === 1);\n  even.sort();\n  odd.sort();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic1 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of zero characters.\n  */\nconst encode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 0)\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic0 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const mean = mean(numbers);\n    return numbers.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst mean_squared_deviation = (numbers) => {\n  const mean = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const mean = mean(numbers);\n    return numbers.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) * deviation(numbers);\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Deviation\n  around the mean of this dataset.\n  Root Mean Squared Deviation is the square root of the mean squared deviation:\n  RMSE = sqrt(MSD)\n  >>> root_mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_deviation = (numbers) => {\n  const mean = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const mean = mean(numbers);\n    return numbers.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b, 0);\n  };\n  return Math.sqrt(deviation(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Percentile\n  around the mean of this dataset.\n  Mean Absolute Percentile is the average absolute difference between each\n  element and the median of this dataset:\n  MAP = average | x - x_median |\n  >>> mean_absolute_percentile([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_percentile = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Mean Squared Percentile\n  around the mean of this dataset.\n  Mean Squared Percentile is the average squared difference between each\n  element and the median of this dataset:\n  MP = average | x - x_median |^2\n  >>> mean_squared_percentile([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst mean_squared_percentile = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) * deviation(numbers);\n};\n\n/* For a given list of input numbers, calculate Root Mean Squared Percentile\n  around the mean of this dataset.\n  Root Mean Squared Percentile is the square root of the mean squared percentile:\n  RMSP = sqrt(MP)\n  >>> root_mean_squared_percentile([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_mean_squared_percentile = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return Math.sqrt(deviation(numbers));\n};\n\n/* For a given list of input numbers, calculate Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and the median of this dataset:\n  MAD = average | x - x_median |\n  >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median_absolute_deviation = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) / Math.sqrt(numbers.length);\n};\n\n/* For a given list of input numbers, calculate Median Squared Deviation\n  around the median of this dataset.\n  Median Squared Deviation is the average squared difference between each\n  element and the median of this dataset:\n  MSD = average | x - x_median |^2\n  >>> median_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst median_squared_deviation = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return deviation(numbers) * deviation(numbers);\n};\n\n/* For a given list of input numbers, calculate Root Median Squared Deviation\n  around the median of this dataset.\n  Root Median Squared Deviation is the square root of the median squared deviation:\n  RMSE = sqrt(MSD)\n  >>> root_median_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst root_median_squared_deviation = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b, 0);\n  };\n  return Math.sqrt(deviation(numbers));\n};\n\n/* For a given list of input numbers, calculate Median Absolute Percentile\n  around the median of this dataset.\n  Median Absolute Percentile is the average absolute difference between each\n  element and the median of this dataset:\n  MAP = average | x - x_median |\n  >>> median_absolute_percentile([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median_absolute_percentile = (numbers) => {\n  const median = (numbers) => numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((x) => Math.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum > 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  is_palindrome takes an integer as an input.\n  it returns true if the integer is a palindrome, and false otherwise.\n\n  >>> is_palindrome(121)\n  true\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(124)\n  true\n  >>> is_palindrome(125)\n  false\n  >>> is_palindrome(126)\n  true\n  >>> is_palindrome(127)\n  false\n  >>> is_palindrome(128)\n  true\n  >>> is_palindrome(129)\n  false\n  >>> is_palindrome(130)\n  true\n  >>> is_palindrome(131)\n  false\n  >>> is_palindrome(132)\n  true\n  >>> is_palindrome(133)\n  false\n  >>> is_palindrome(134)\n  true\n  >>> is_palindrome(135)\n  false\n  >>> is_palindrome(136)\n  true\n  >>> is_palindrome(137)\n  false\n  >>> is_palindrome(138)\n  true\n  >>> is_palindrome(139)\n  false\n  >>> is_palindrome(140)\n  true\n  >>> is_palindrome(141)\n  false\n  >>> is_palindrome(142)\n  true\n  >>> is_palindrome(143)\n  false\n  >>> is_palindrome(144)\n  true\n  >>> is_palindrome(145)\n  false\n  >>> is_palindrome(146)\n  true\n  >>> is_palindrome(147)\n  false\n  >>> is_palindrome(148)\n  true\n  >>> is_palindrome(149)\n  false\n  >>> is_palindrome(150)\n  true\n  >>> is_palindrome(151)\n  false\n  >>> is_palindrome(152)\n  true\n  >>> is_palindrome(153)\n  false\n  >>> is_palindrome(154)\n  true\n  >>> is_palindrome(155)\n  false\n  >>> is_palindrome(156)\n  true\n  >>> is_palindrome(157)\n  false\n  >>> is_palindrome(158)\n  true\n  >>> is_palindrome(159)\n  false\n  >>> is_palindrome(160)\n  true\n  >>> is_palindrome(161)\n  false\n  >>> is_palindrome(162)\n  true\n  >>> is_palindrome(163)\n  false\n  >>> is_palindrome(164)\n  true\n  >>> is_palindrome(165)\n  false\n  >>> is_palindrome(166)\n  true\n  >>> is_palindrome(167)\n  false\n  >>> is_palindrome(168)\n  true\n  >>> is_palindrome(169)\n  false\n  >>> is_palindrome(170)\n  true\n  >>> is_palindrome(171)\n  false\n  >>> is_palindrome(172)\n  true\n  >>> is_palindrome(173)\n  false\n  >>> is_palindrome(174)\n  true\n  >>> is_palindrome(175)\n  false\n  >>> is_palindrome(176)\n  true\n  >>> is_palindrome(177)\n  false\n  >>> is_palindrome(178)\n  true\n  >>> is_palindrome(179)\n  false\n  >>> is_palindrome(180)\n  true\n  >>> is_palindrome(181)\n  false\n  >>> is_palindrome(182)\n  true\n  >>> is_palindrome(183)\n  false\n  >>> is_palindrome(184)\n  true\n  >>> is_palindrome(185)\n  false\n  >>> is_palindrome(186)\n  true\n  >>> is_palindrome(187)\n  false\n  >>> is_palindrome(188)\n  true\n  >>> is_palindrome(189)\n  false\n  >>> is_palindrome(190)\n  true\n  >>> is_palindrome(191)\n  false\n  >>> is_palindrome(192)\n  true\n  >>> is_palindrome(193)\n  false\n  >>> is_palindrome(194)\n  true\n  >>> is_palindrome(195)\n  false\n  >>> is_palindrome(196)\n  true\n  >>> is_palindrome(197)\n  false\n  >>> is_palindrome(198)\n  true\n  >>> is_palindrome(199)\n  false\n  >>> is_palindrome(200)\n  true\n  >>> is_palindrome(201)\n  false\n  >>> is_palindrome(202)\n  true\n  >>> is_palindrome(203)\n  false\n  >>> is_palindrome(204)\n  true\n  >>> is_palindrome(205)\n  false\n  >>> is_palindrome(206)\n  true\n  >>> is_palindrome(207)\n  false\n  >>> is_palindrome(208)\n  true\n  >>> is_palindrome(209)\n  false\n  >>> is_palindrome(210)\n  true\n  >>> is_palindrome(211)\n  false\n  >>> is_palindrome(212)\n  true\n  >>> is_palindrome(213)\n  false\n  >>> is_palindrome(214)\n  true\n  >>> is_palindrome(215)\n  false\n  >>> is_palindrome(216)\n  true\n  >>> is_palindrome(217)\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_2 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_3 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_4 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_5 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_6 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_7 = (arr) => {\n  let collisions = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (car_collision(arr[i], arr[j])) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with specified step.\n  >>> incr_list_step([1, 2, 3], 2)\n  [3, 4, 5]\n  >>> incr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, step) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with specified step.\n  >>> decr_list_step([1, 2, 3], 2)\n  [2, 1, 3]\n  >>> decr_list_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list_step = (l, step) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with specified step and minimum value.\n  >>> incr_list_min_step([1, 2, 3], 2, 0)\n  [3, 4, 5]\n  >>> incr_list_min_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 0)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_min_step = (l, step, min) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  if (n < min) {\n    for (let i = min; i < l.length; i++) {\n      l[i] = l[i] - step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with specified step and minimum value.\n  >>> decr_list_min_step([1, 2, 3], 2, 0)\n  [2, 1, 3]\n  >>> decr_list_min_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 0)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list_min_step = (l, step, min) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  if (n < min) {\n    for (let i = min; i < l.length; i++) {\n      l[i] = l[i] + step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with specified step and maximum value.\n  >>> incr_list_max_step([1, 2, 3], 2, 100)\n  [3, 4, 5]\n  >>> incr_list_max_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_max_step = (l, step, max) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] - step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with specified step and maximum value.\n  >>> decr_list_max_step([1, 2, 3], 2, 100)\n  [2, 1, 3]\n  >>> decr_list_max_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list_max_step = (l, step, max) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] + step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with specified step and minimum value.\n  >>> incr_list_min_step([1, 2, 3], 2, 100)\n  [3, 4, 5]\n  >>> incr_list_min_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_min_step_max = (l, step, min, max) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  if (n < min) {\n    for (let i = min; i < l.length; i++) {\n      l[i] = l[i] - step;\n    }\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] + step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with specified step and minimum value.\n  >>> decr_list_min_step([1, 2, 3], 2, 100)\n  [2, 1, 3]\n  >>> decr_list_min_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list_min_step_max = (l, step, min, max) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  if (n < min) {\n    for (let i = min; i < l.length; i++) {\n      l[i] = l[i] - step;\n    }\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] + step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with specified step and maximum value.\n  >>> incr_list_max_step([1, 2, 3], 2, 100)\n  [3, 4, 5]\n  >>> incr_list_max_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_max_step_max = (l, step, max, min) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] - step;\n    }\n  }\n  if (n < min) {\n    for (let i = min; i < l.length; i++) {\n      l[i] = l[i] + step;\n    }\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with specified step and maximum value.\n  >>> decr_list_max_step([1, 2, 3], 2, 100)\n  [2, 1, 3]\n  >>> decr_list_max_step([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 100)\n  [5, 3, 6, 4, 3, 6, 9, 0, 122]\n  */\nconst decr_list_max_step_max = (l, step, max, min) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  if (n > max) {\n    for (let i = max; i > l.length; i--) {\n      l[i] = l[i] - step;\n    }\n  }\n  if (", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base > 10) {\n    res = change_base(res, base);\n  }\n  return res;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const str = x.toString();\n  const len = str.length;\n  let res = '';\n  let i = 0;\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += c + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  while (i < len) {\n    const c = str.charAt(i);\n    if (c >= '0' && c <= '9') {\n      res += '0' + str.charAt(++i);\n    } else {\n      res += c;\n    }\n  }\n  if (base ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area2 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area2 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area2 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area2 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area3 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area3 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area3 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area3 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area4 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area4 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area4 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area4 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area5 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area5 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area5 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area5 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area6 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area6 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area6 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area6 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area7 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area7 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area7 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area7 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area8 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area8 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area8 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h;\n};\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area8 = (a, h) => {\n  return a * h;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area9 = (a, h) => {\n  return a * (h / 2);\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area9 = (a, h) => {\n  return a", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 1\n  fib5(2) -> 1\n  fib5(3) -> 2\n  fib5(4) -> 2\n  fib5(5) -> 3\n  fib5(6) -> 3\n  fib5(7) -> 5\n  fib5(8) -> 5\n  fib5(9) -> 8\n  fib5(10) -> 8\n  fib5(11) -> 13\n  fib5(12) -> 13\n  fib5(13) -> 21\n  fib5(14) -> 21\n  fib5(15) -> 34\n  fib5(16) -> 34\n  fib5(17) -> 55\n  fib5(18) -> 55\n  fib5(19) -> 89\n  fib5(20) -> 89\n  fib5(21) -> 144\n  fib5(22) -> 144\n  fib5(23) -> 233\n  fib5(24) -> 233\n  fib5(25) -> 377\n  fib5(26) -> 377\n  fib5(27) -> 610\n  fib5(28) -> 610\n  fib5(29) -> 987\n  fib5(30) -> 987\n  fib5(31) -> 1597\n  fib5(32) -> 1597\n  fib5(33) -> 2584\n  fib5(34) -> 2584\n  fib5(35) -> 4181\n  fib5(36) -> 4181\n  fib5(37) -> 6765\n  fib5(38) -> 6765\n  fib5(39) -> 10946\n  fib5(40) -> 10946\n  fib5(41) -> 17711\n  fib5(42) -> 17711\n  fib5(43) -> 28657\n  fib5(44) -> 28657\n  fib5(45) -> 46368\n  fib5(46) -> 46368\n  fib5(47) -> 7014\n  fib5(48) -> 7014\n  fib5(49) -> 11343\n  fib5(50) -> 11343\n  fib5(51) -> 17719\n  fib5(52) -> 17719\n  fib5(53) -> 28657\n  fib5(54) -> 28657\n  fib5(55) -> 46368\n  fib5(56) -> 46368\n  fib5(57) -> 7014\n  fib5(58) -> 7014\n  fib5(59) -> 11343\n  fib5(60) -> 11343\n  fib5(61) -> 17719\n  fib5(62) -> 17719\n  fib5(63) -> 28657\n  fib5(64) -> 28657\n  fib5(65) -> 46368\n  fib5(66) -> 46368\n  fib5(67) -> 7014\n  fib5(68) -> 7014\n  fib5(69) -> 11343\n  fib5(70) -> 11343\n  fib5(71) -> 17719\n  fib5(72) -> 17719\n  fib5(73) -> 28657\n  fib5(74) -> 28657\n  fib5(75) -> 46368\n  fib5(76) -> 46368\n  fib5(77) -> 7014\n  fib5(78) -> 7014\n  fib5(79) -> 11343\n  fib5(80) -> 11343\n  fib5(81) -> 17719\n  fib5(82) -> 17719\n  fib5(83) -> 28657\n  fib5(84) -> 28657\n  fib5(85) -> 46368\n  fib5(86) -> 46368\n  fib5(87) -> 7014\n  fib5(88) -> 7014\n  fib5(89) -> 11343\n  fib5(90) -> 11343\n  fib5(91) -> 17719\n  fib5(92) -> 17719\n  fib5(93) -> 28657\n  fib5(94) -> 28657\n  fib5(95) -> 46368\n  fib5(96) -> 46368\n  fib5(97) -> 7014\n  fib5(98) -> 7014\n  fib5(99) -> 11343\n  fib5(100) -> 11343\n  fib5(101) -> 17719\n  fib5(102) -> 17719\n  fib5(103) -> 28657\n  fib5(104) -> 28657\n  fib5(105) -> 46368\n  fib5(106) -> 46368\n  fib5(107) -> 7014\n  fib5(108) -> 7014\n  fib5(109) -> 11343\n  fib5(110) -> 11343\n  fib5(111) -> 17719\n  fib5(112) -> 17719\n  fib5(113) -> 28657\n  fib5(114) -> 28657\n  fib5(115) -> 46368\n  fib5(116) -> 46368\n  fib5(117) -> 7014\n  fib5(118) -> 7014\n  fib5(119) -> 11343\n  fib5(120) -> 11343\n  fib5(121) -> 17719\n  fib5(122) -> 17719\n  fib5(123) -> 28657\n  fib5(124) -> 28657\n  fib5(125) -> 46368\n  fib5(126) -> 46368\n  fib5(127) -> 7014\n  fib5(128) -> 7014\n  fib5(129) -> 11343\n  fib5(130) -> 11343\n  fib5(131) -> 17719\n  fib5(132) -> 17719\n  fib5(133) -> 28657\n  fib5(134) -> 28657\n  fib5(135) -> 46368\n  fib5(136) -> 46368\n  fib5(137) -> 7014\n  fib5(138) -> 7014\n  fib5(139) -> 11343\n  fib5(140) -> 11343\n  fib5(141) -> 17719\n  fib5(142) -> 17719\n  fib5(143) -> 28657\n  fib5(144) -> 28657\n  fib5(145) -> 46368\n  fib5(146) -> 46368\n  fib5(147) -> 7014\n  fib5(148) -> 7014\n  fib5(149) -> 11343\n  fib5(150) -> 11343\n  fib5(151) -> 17719\n  fib5(152) -> 17719\n  fib5(153) -> 28657\n  fib5(154) -> 28657\n  fib5(155) -> 46368\n  fib5(156) -> 46368\n  fib5(157) -> 7014\n  fib5(158) -> 7014\n  fib5(159) -> 11343\n  fib5(160) -> 11343\n  fib5(161) -> 17719\n  fib5(162) -> 17719\n  fib5(163) -> 28657\n  fib5(164) -> 28657\n  fib5(165) -> ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let count = 0;\n  let median;\n  let temp;\n  while (count < mid) {\n    temp = l[count];\n    count++;\n    if (count === mid) {\n      median = temp;\n    }\n  }\n  return median;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    let val = l[i];\n    if (counts[val] === undefined) {\n      counts[val] = 1;\n    } else {\n      counts[val]++;\n    }\n    if (counts[val] > maxCount) {\n      maxCount = counts[val];\n      mode = val;\n    }\n  }\n  return mode;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  let mode;\n  let counts = {};\n  let maxCount = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Returns all palindromes found in given string\n  >>> get_palindromes('aba')\n  [ 'aba', 'aaab', 'aaaab', 'aaaabb', 'aaaabbb', 'aaaabbbc', 'aaaabbbcc', 'aaaabbbccd', 'aaaabbbccde', 'aaaabbbccdef', 'aaaabbbccdefg', 'aaaabbbccdefgh', 'aaaabbbccdefghi', 'aaaabbbccdefghij', 'aaaabbbccdefghijk', 'aaaabbbccdefghijkl', 'aaaabbbccdefghijklm', 'aaaabbbccdefghijklmn', 'aaaabbbccdefghijklmno', 'aaaabbbccdefghijklmnop', 'aaaabbbccdefghijklmnopq', 'aaaabbbccdefghijklmnopqr', 'aaaabbbccdefghijklmnopqrs', 'aaaabbbccdefghijklmnopqrst', 'aaaabbbccdefghijklmnopqrstu', 'aaaabbbccdefghijklmnopqrstuv', 'aaaabbbccdefghijklmnopqrstuvw', 'aaaabbbccdefghijklmnopqrstuvwx', 'aaaabbbccdefghijklmnopqrstuvwxy', 'aaaabbbccdefghijklmnopqrstuvwxyz', 'aaaabbbccdefghijklmnopqrstuvwxyza', 'aaaabbbccdefghijklmnopqrstuvwxyzab', 'aaaabbbccdefghijklmnopqrstuvwxyzabc', 'aaaabbbccdefghijklmnopqrstuvwxyzabcd', 'aaaabbbccdefghijklmnopqrstuvwxyzabcde', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdef', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefg', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefgh', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghi', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghij', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijk', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijkl', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklm', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmn', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmn', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmno', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnop', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopq', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqr', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrs', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstu', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuv', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvw', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzab', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabc', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcde', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdef', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefg', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefgh', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijkl', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklm', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmn', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmno', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnop', 'aaaabbbccdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopq', 'aaaabbbccdefghijklmnopqrstuv", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) throw new RangeError('modp() arg 2 must be non-negative')\n  if (p < 1) throw new RangeError('modp() arg 3 must be >= 1')\n  if (p === 0) return 1\n  if (p === 1) return n\n  if (p === 2) return n & 1\n  if (p === 3) return n & 2\n  if (p === 4) return n & 4\n  if (p === 5) return n & 8\n  if (p === 6) return n & 16\n  if (p === 7) return n & 32\n  if (p === 8) return n & 64\n  if (p === 9) return n & 128\n  if (p === 10) return n & 256\n  if (p === 11) return n & 512\n  if (p === 12) return n & 1024\n  if (p === 13) return n & 2048\n  if (p === 14) return n & 4096\n  if (p === 15) return n & 8192\n  if (p === 16) return n & 16384\n  if (p === 17) return n & 32768\n  if (p === 18) return n & 65536\n  if (p === 19) return n & 131072\n  if (p === 20) return n & 262144\n  if (p === 21) return n & 524288\n  if (p === 22) return n & 1048576\n  if (p === 23) return n & 2097152\n  if (p === 24) return n & 4194304\n  if (p === 25) return n & 8388608\n  if (p === 26) return n & 16777216\n  if (p === 27) return n & 33554432\n  if (p === 28) return n & 67108864\n  if (p === 29) return n & 134217728\n  if (p === 30) return n & 268435456\n  if (p === 31) return n & 536870912\n  if (p === 32) return n & 1073741824\n  if (p === 33) return n & 2147483648\n  if (p === 34) return n & 4294967296\n  if (p === 35) return n & 8589934592\n  if (p === 36) return n & 17179869184\n  if (p === 37) return n & 34359738368\n  if (p === 38) return n & 68719476736\n  if (p === 39) return n & 137438953472\n  if (p === 40) return n & 274877906944\n  if (p === 41) return n & 549755813888\n  if (p === 42) return n & 1099511627776\n  if (p === 43) return n & 2199023255552\n  if (p === 44) return n & 4398046511104\n  if (p === 45) return n & 8796093022208\n  if (p === 46) return n & 17592186044416\n  if (p === 47) return n & 35184372088832\n  if (p === 48) return n & 70368744177664\n  if (p === 49) return n & 140737488355328\n  if (p === 50) return n & 281474976710656\n  if (p === 51) return n & 562949953421312\n  if (p === 52) return n & 1125899906842624\n  if (p === 53) return n & 2251799813685248\n  if (p === 54) return n & 4503599627370496\n  if (p === 55) return n & 9007199254740992\n  if (p === 56) return n & 184467440737095516\n  if (p === 57) return n & 6710886400371936\n  if (p === 58) return n & 13421772799262448\n  if (p === 59) return n & 26843545600675964\n  if (p === 60) return n & 5368709120008096\n  if (p === 61) return n & 107374182400262144\n  if (p === 62) return n & 21474836480053728\n  if (p === 63) return n & 42949672960000\n  if (p === 64) return n & 85899345920000\n  if (p === 65) return n & 17179869184000\n  if (p === 66) return n & 3435973836800\n  if (p === 67) return n & 687194767360000\n  if (p === 68) return n & 137438953472000\n  if (p === 69) return n & 274877906944000\n  if (p === 70) return n & 5497558138880000\n  if (p === 71) return n & 1099511627776000\n  if (p === 72) return n & 2199023255552000\n  if (p === 73) return n & 4398046511104000\n  if (p === 74) return n & 8796093022208000\n  if (p === 75) return n & 17592186044416000\n  if (p === 76) return n & 35184372088832000\n  if (p === 77) return n & 70368744177664000\n  if (p === 78) return n & 14073748835532800\n  if (p === 79) return n & 281474976710656000\n  if (p === 80) return n & 562949953421312000\n  if (p === 81) return n & 1125899906842624000\n  if (p === 82) return n & 2251799813685248000\n  if (p === 83) return n & 4503599627370496000\n  if (p === 84) return n & 9007199254740992000\n  if (p === 85) return n & 184467440737095516000\n  if (p === 86) return n & 6710886400371936000\n  if (p === 87) return n & 13421772799262448000\n  if (p === 88) return n & 26843545600675964000\n  if (p === 89) return n & 5368709120008096000\n  if (p === 90) return n & 107374182400262144000\n  if (p === 91) return n & 21474836480053728000\n  if (p === 92) return n & 42949672960000\n  if (p === 93) return n & 85899345920000\n  if (p === 94) return n & 17179869184000\n  if (p === 95) return n & 3435973836800\n  if (p === 96) return n & 687194767360000\n  if (p === 97) return n & 137438953472000\n  if (p === 98) return n & 274877906944000\n  if (p === 99) return n & 5497558138880000\n  if (p === 100) return n & 1099511627776000\n  if (p === 101) return n & 2199023255552000\n  if (p === 102) return n & 4398046511104000\n  if (p === 103) return n & 8796093022208000\n  if (p === 104) return n & 17592186044416000\n  if (p === 105) return n & 35184372088832000\n  if (p === 106) return ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing one item repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the item.\n * @param {*} item The item to repeat.\n * @return {Array} A new list containing the repeated item.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, 4)\n * // [4, 4, 4]\n */\nconst repeat = (times, item) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(item);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatList = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatString = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatArray = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatObject = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatSet = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatMap = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatStringRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatArrayRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatObjectRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatSetRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to repeat the items.\n * @param {Array} list The items to repeat.\n * @return {Array} A new list containing the repeated items.\n * @example\n *\n * import { repeat } from 'fkit'\n * repeat(2, [1, 2, 3])\n * // [1, 1, 2, 2, 3, 3]\n */\nconst repeatMapRange = (times, list) => {\n  const result = [];\n  for (let i = 0; i < times; i++) {\n    result.push(...list);\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing the items in `list` repeated `times` times.\n *\n * @param {Number} times The number of times to ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift1 function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 6 in the alphabet.\n  */\nconst encode_shift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 6 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift6 function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 7 in the alphabet.\n  */\nconst encode_shift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 7 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift7 function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 4 in the alphabet.\n  */\nconst encode_shift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 4 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift4 function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift5 function. Returns decoded string.\n  */\nconst decodeShift", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) === -1) {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_spaces is a function that takes string and returns string without spaces.\n  >>> remove_spaces('')\n  ''\n  >>> remove_spaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_spaces('abcdef')\n  'abcdef'\n  >>> remove_spaces('aaaaa')\n  'aaaaa'\n  >>> remove_spaces('aaBAA')\n  'aaBAA'\n  >>> remove_spaces('zbcd')\n  'zbcd'\n  */\nconst remove_spaces = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_numbers_only is a function that takes string and returns string without numbers.\n  >>> remove_numbers_only('')\n  ''\n  >>> remove_numbers_only(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_numbers_only('abcdef')\n  'abcdef'\n  >>> remove_numbers_only('aaaaa')\n  'aaaaa'\n  >>> remove_numbers_only('aaBAA')\n  'aaBAA'\n  >>> remove_numbers_only('zbcd')\n  'zbcd'\n  */\nconst remove_numbers_only = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!== '0' && text[i]!== '1' && text[i]!== '2' && text[i]!== '3' && text[i]!== '4' && text[i]!== '5' && text[i]!== '6' && text[i]!== '7' && text[i]!== '8' && text[i]!== '9') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_special_chars is a function that takes string and returns string without special characters.\n  >>> remove_special_chars('')\n  ''\n  >>> remove_special_chars(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_special_chars('abcdef')\n  'abcdef'\n  >>> remove_special_chars('aaaaa')\n  'aaaaa'\n  >>> remove_special_chars('aaBAA')\n  'aaBAA'\n  >>> remove_special_chars('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!== '!' && text[i]!== '@' && text[i]!== '#' && text[i]!== '$' && text[i]!== '%' && text[i]!== '^' && text[i]!== '&' && text[i]!== '*' && text[i]!== '(' && text[i]!== ')' && text[i]!== '_' && text[i]!== '+' && text[i]!== '=' && text[i]!== '{' && text[i]!== '}' && text[i]!== '[' && text[i]!== ']' && text[i]!== '|' && text[i]!== '\\\\') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_special_chars_only is a function that takes string and returns string without special characters.\n  >>> remove_special_chars_only('')\n  ''\n  >>> remove_special_chars_only(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_special_chars_only('abcdef')\n  'abcdef'\n  >>> remove_special_chars_only('aaaaa')\n  'aaaaa'\n  >>> remove_special_chars_only('aaBAA')\n  'aaBAA'\n  >>> remove_special_chars_only('zbcd')\n  'zbcd'\n  */\nconst remove_special_chars_only = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!== '!' && text[i]!== '@' && text[i]!== '#' && text[i]!== '$' && text[i]!== '%' && text[i]!== '^' && text[i]!== '&' && text[i]!== '*' && text[i]!== '(' && text[i]!== ')' && text[i]!== '_' && text[i]!== '+' && text[i]!== '=' && text[i]!== '{' && text[i]!== '}' && text[i]!== '[' && text[i]!== ']' && text[i]!== '|' && text[i]!== '\\\\') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_all_special_chars is a function that takes string and returns string without special characters.\n  >>> remove_all_special_chars('')\n  ''\n  >>> remove_all_special_chars(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_all_special_chars('abcdef')\n  'abcdef'\n  >>> remove_all_special_chars('aaaaa')\n  'aaaaa'\n  >>> remove_all_special_chars('aaBAA')\n  'aaBAA'\n  >>> remove_all_special_chars('zbcd')\n  'zbcd'\n  */\nconst remove_all_special_chars = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!== '!' && text[i]!== '@' && text[i]!== '#' && text[i]!== '$' && text[i]!== '%' && text[i]!== '^' && text[i]!== '&' && text[i]!== '*' && text[i]!== '(' && text[i]!== ')' && text[i]!== '_' && text[i]!== '+' && text[i]!== '=' && text[i]!== '{' && text[i]!== '}' && text[i]!== '[' && text[i]!== ']' && text[i]!== '|' && text[i]!== '\\\\') {\n      newText += text[i];\n    }\n  }\n  return newText;\n};\n\n/*\n  remove_all_special_chars_only is a function that takes string and returns string without special characters.\n  >>> remove_all_special_chars_only('')\n  ''\n  >>> remove_all_special_chars_only(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_all_special_chars_only('abcdef')\n  'abcdef'\n  >>> remove_all_special_chars_only('aaaaa')\n  'aaaaa'\n  >>> remove_all_special_chars_only('aaBAA')\n  'aaBAA'\n  >>> remove_all_special_chars_only('zbcd')\n  'zbcd'\n  */\nconst remove_all_special_chars_only = (text) => {\n  let text = text.toLowerCase();\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!== '!' && text[i]!== '@' && text[i]!== '#' && text[i]!== '$' && text[i]!== '%' && text[i]!== '^' && text[i]!== '&' && text[i]!== '*' && text[i]!== '(' && text[i]!== ')' && text[i]!== '_' && text[i]!== '+' && text[i]!== '=' && text[i]!== '{' && text[i]!== '}' && text[i]!== '[' && text[i]!== ']' && text[i]!== '|' && text[i]!== '\\\\') {\n      newText += text[i];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 5)\n  false\n  */\nconst between_threshold = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_negative([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_negative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_positive([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_positive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_zero([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_zero = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_zero([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_zero = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_positive([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_positive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_negative([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_negative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_zero([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_zero = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_positive([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_positive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_negative([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_negative = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t && l[i] > t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold + delta.\n  >>> between_threshold_zero([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_zero([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_zero = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t - delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_positive([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 10)\n  true\n  >>> between_threshold_positive([1, 20, 4, 10], 5, 5)\n  true\n  */\nconst between_threshold_positive = (l, t, delta) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t + delta) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Return true if all numbers in the list l are between threshold and threshold - delta.\n  >>> between_threshold_negative([1, 2, 4, 10], 100, 5)\n  false\n  >>> between_threshold_negative([1, 20, 4, 10], 5, 10)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  3\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the remainder of x divided by y\n  >>> remainder(2, 3)\n  1\n  >>> remainder(5, 7)\n  3\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the sign of x\n  >>> sign(-3)\n  -1\n  >>> sign(3)\n  1\n  */\nconst sign = x => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*Get the floor of x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of x\n  >>> round(-3.5)\n  -3.5\n  >>> round(3.5)\n  3.5\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> trunc(-3.5)\n  -3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst trunc = x => {\n  return Math.trunc(x);\n};\n\n/*Get the floor of x\n  >>> round(3.5)\n  3\n  >>> trunc(3.5)\n  3\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the ceiling of x\n  >>> round(3.5)\n  3\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; ++i) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  5\n  >>> fib(2)\n  3\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.match(/<[/]?>/g);\n  const closing_brackets = brackets.match(/<[/]?>/g);\n  const opening_brackets_count = opening_brackets? opening_brackets.length : 0;\n  const closing_brackets_count = closing_brackets? closing_brackets.length : 0;\n  return opening_brackets_count === closing_brackets_count;\n};\n\n/**\n  Given a string, returns an array of all words in the string.\n\n  >>> split_words(\"the quick brown fox jumps over the lazy dog\")\n  [\"the\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n  */\nconst split_words = (string) => {\n  return string.match(/\\w+/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter.\n\n  >>> split_words_starting_with_capital_letters(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters = (string) => {\n  return string.match(/\\b[A-Z]\\w*/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by an apostrophe.\n\n  >>> split_words_starting_with_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter.\n\n  >>> split_words_starting_with_capital_letters_followed_by_capital_letters(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_capital_letters = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string) => {\n  return string.match(/\\b[A-Z]\\w*\\s[A-Z]\\w*'?\\b/g);\n};\n\n/**\n  Given a string, returns an array of all words in the string that start with a capital letter and are followed by a capital letter and an apostrophe.\n\n  >>> split_words_starting_with_capital_letters_followed_by_apostrophes(\"the quick brown fox jumps over the lazy dog\")\n  [\"Quick\", \"Brown\", \"Fox\", \"Jumps\", \"Over\", \"The\", \"Lazy\", \"Dog\"]\n  */\nconst split_words_starting_with_capital_letters_followed_by_apostrophes = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = null;\n  let curr = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < curr) {\n      return false;\n    }\n    if (l[i] > prev) {\n      return true;\n    }\n    prev = curr;\n    curr = l[i];\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0, -10, 1])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0, 0])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 0])\n  false\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])\n  true\n  >>> monotonic([4, 1, 0, -10, 1, 0, 2, 1])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  set1.forEach((item) => {\n    if (set2.has(item)) {\n      common.push(item);\n    }\n  });\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  2\n  >>> smallest_prime_factor(2048)\n  8\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors(13195)\n  4\n  >>> number_of_divisors(2048)\n  2\n  */\nconst number_of_divisors = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fast(13195)\n  4\n  >>> number_of_divisors_fast(2048)\n  2\n  */\nconst number_of_divisors_fast = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slow(13195)\n  4\n  >>> number_of_divisors_slow(2048)\n  2\n  */\nconst number_of_divisors_slow = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest(13195)\n  4\n  >>> number_of_divisors_fastest(2048)\n  2\n  */\nconst number_of_divisors_fastest = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest(13195)\n  4\n  >>> number_of_divisors_slowest(2048)\n  2\n  */\nconst number_of_divisors_slowest = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest_slow(13195)\n  4\n  >>> number_of_divisors_fastest_slow(2048)\n  2\n  */\nconst number_of_divisors_fastest_slow = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest_slow(13195)\n  4\n  >>> number_of_divisors_slowest_slow(2048)\n  2\n  */\nconst number_of_divisors_slowest_slow = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest_slow_fast(13195)\n  4\n  >>> number_of_divisors_fastest_slow_fast(2048)\n  2\n  */\nconst number_of_divisors_fastest_slow_fast = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest_slow_fast(13195)\n  4\n  >>> number_of_divisors_slowest_slow_fast(2048)\n  2\n  */\nconst number_of_divisors_slowest_slow_fast = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest_slow_slow(13195)\n  4\n  >>> number_of_divisors_fastest_slow_slow(2048)\n  2\n  */\nconst number_of_divisors_fastest_slow_slow = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest_slow_slow(13195)\n  4\n  >>> number_of_divisors_slowest_slow_slow(2048)\n  2\n  */\nconst number_of_divisors_slowest_slow_slow = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest_slow_fastest(13195)\n  4\n  >>> number_of_divisors_fastest_slow_fastest(2048)\n  2\n  */\nconst number_of_divisors_fastest_slow_fastest = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest_slow_fastest(13195)\n  4\n  >>> number_of_divisors_slowest_slow_fastest(2048)\n  2\n  */\nconst number_of_divisors_slowest_slow_fastest = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_fastest_slow_slowest(13195)\n  4\n  >>> number_of_divisors_fastest_slow_slowest(2048)\n  2\n  */\nconst number_of_divisors_fastest_slow_slowest = (num) => {\n  let divisors = 0;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      divisors++;\n    }\n  }\n  return divisors;\n};\n\n/*Return the number of divisors of n that are relatively prime to n.\n  >>> number_of_divisors_slowest_slow_slowest(13195)\n  4\n  >>> number_of_divisors_slowest_slo", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  let paren_depth = 0;\n  let paren_level = 0;\n  let paren_group = [];\n  let paren_group_level = 0;\n  let paren_group_length = 0;\n  let paren_group_char = '';\n  let paren_group_char_index = 0;\n  let paren_group_char_length = 0;\n  let paren_group_char_value = '';\n  let paren_group_char_last_char = '';\n  let paren_group_char_last_char_index = 0;\n  let paren_group_char_last_char_length = 0;\n  let paren_group_char_last_char_value = '';\n  let paren_group_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_length = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_value = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char = '';\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_last_char_index = 0;\n  let paren_group_char_last_char_last_char_last_char_last_char_last_char_last_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [];\n  let opening_brackets = 0;\n  let closing_brackets = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    const bracket = brackets[i];\n    if (bracket === \"(\") {\n      opening_brackets++;\n    } else if (bracket === \")\") {\n      closing_brackets++;\n    } else {\n      if (opening_brackets!== closing_brackets) {\n        return false;\n      }\n      opening_brackets = 0;\n      closing_brackets = 0;\n    }\n    stack.push(bracket);\n  }\n  return opening_brackets === closing_brackets;\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a string where each string is\n// separated by a single space. Spaces separate each string in the input\n// sequence.\nconst join_strings = (strings) => {\n  const joined = strings.join(\" \");\n  return joined.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n// Given a sequence of strings, return a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  return d;\n};\n\n/* Returns sum of all elements in an array.\n  >>> sum([1, 2, 3])\n  6\n  */\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\n/* Returns average of all elements in an array.\n  >>> average([1, 2, 3])\n  2\n  */\nconst average = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Returns median of all elements in an array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return (xs[n / 2 - 1] + xs[n / 2]) / 2;\n  }\n  return xs[n / 2];\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return xs[maxCountIndex];\n};\n\n/* Returns standard deviation of all elements in an array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Returns variance of all elements in an array.\n  >>> variance([1, 2, 3])\n  1.5811388300841898\n  */\nconst variance = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return variance;\n};\n\n/* Returns minimum of all elements in an array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs);\n};\n\n/* Returns maximum of all elements in an array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs);\n};\n\n/* Returns sum of squares of all elements in an array.\n  >>> sumOfSquares([1, 2, 3])\n  6\n  */\nconst sumOfSquares = (xs) => {\n  return xs.reduce((a, b) => a + Math.pow(b, 2), 0);\n};\n\n/* Returns mean of all elements in an array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Returns median of all elements in an array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return (xs[n / 2 - 1] + xs[n / 2]) / 2;\n  }\n  return xs[n / 2];\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return xs[maxCountIndex];\n};\n\n/* Returns standard deviation of all elements in an array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Returns variance of all elements in an array.\n  >>> variance([1, 2, 3])\n  1.5811388300841898\n  */\nconst variance = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return variance;\n};\n\n/* Returns minimum of all elements in an array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs);\n};\n\n/* Returns maximum of all elements in an array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs);\n};\n\n/* Returns sum of squares of all elements in an array.\n  >>> sumOfSquares([1, 2, 3])\n  6\n  */\nconst sumOfSquares = (xs) => {\n  return xs.reduce((a, b) => a + Math.pow(b, 2), 0);\n};\n\n/* Returns mean of all elements in an array.\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (xs) => {\n  return sum(xs) / xs.length;\n};\n\n/* Returns median of all elements in an array.\n  >>> median([1, 2, 3])\n  2\n  */\nconst median = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    return (xs[n / 2 - 1] + xs[n / 2]) / 2;\n  }\n  return xs[n / 2];\n};\n\n/* Returns mode of all elements in an array.\n  >>> mode([1, 2, 3])\n  2\n  */\nconst mode = (xs) => {\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  const maxCount = Math.max(...Object.values(counts));\n  const maxCountIndex = Object.entries(counts).findIndex(([, count]) => count === maxCount);\n  return xs[maxCountIndex];\n};\n\n/* Returns standard deviation of all elements in an array.\n  >>> std([1, 2, 3])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Returns variance of all elements in an array.\n  >>> variance([1, 2, 3])\n  1.5811388300841898\n  */\nconst variance = (xs) => {\n  const mean = xs.reduce((a, b) => a + b, 0) / xs.length;\n  const variance = xs.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / xs.length;\n  return variance;\n};\n\n/* Returns minimum of all elements in an array.\n  >>> min([1, 2, 3])\n  1\n  */\nconst min = (xs) => {\n  return Math.min.apply(null, xs);\n};\n\n/* Returns maximum of all elements in an array.\n  >>> max([1, 2, 3])\n  3\n  */\nconst max = (xs) => {\n  return Math.max.apply(null, xs);\n};\n\n/* Returns sum of squares of all elements in an array.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes in an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([4,5,6])\n  25\n  >>> squareSum([7,8,9])\n  49\n  >>> squareSum([10,11,12])\n  90\n  >>> squareSum([13,14,15])\n  141\n  >>> squareSum([16,17,18])\n  243\n  >>> squareSum([19,20,21])\n  429\n  >>> squareSum([22,23,24])\n  729\n  >>> squareSum([25,26,27])\n  1025\n  >>> squareSum([28,29,30])\n  1529\n  >>> squareSum([31,32,33])\n  2033\n  >>> squareSum([34,35,36])\n  3035\n  >>> squareSum([37,38,39])\n  4037\n  >>> squareSum([40,41,42])\n  5041\n  >>> squareSum([43,44,45])\n  6045\n  >>> squareSum([46,47,48])\n  7049\n  >>> squareSum([49,50,51])\n  8051\n  >>> squareSum([52,53,54])\n  9054\n  >>> squareSum([55,56,57])\n  10056\n  >>> squareSum([58,59,60])\n  11058\n  >>> squareSum([61,62,63])\n  12061\n  >>> squareSum([64,65,66])\n  13066\n  >>> squareSum([67,68,69])\n  14068\n  >>> squareSum([70,71,72])\n  15070\n  >>> squareSum([73,74,75])\n  16074\n  >>> squareSum([76,77,78])\n  17077\n  >>> squareSum([79,80,81])\n  18080\n  >>> squareSum([82,83,84])\n  19084\n  >>> squareSum([85,86,87])\n  20087\n  >>> squareSum([88,89,90])\n  21091\n  >>> squareSum([91,92,93])\n  22092\n  >>> squareSum([94,95,96])\n  23096\n  >>> squareSum([97,98,99])\n  24097\n  >>> squareSum([100,101,102])\n  25010\n  >>> squareSum([103,104,105])\n  26011\n  >>> squareSum([106,107,108])\n  27012\n  >>> squareSum([109,110,111])\n  28013\n  >>> squareSum([112,113,114])\n  29014\n  >>> squareSum([115,116,117])\n  30015\n  >>> squareSum([118,119,120])\n  31015\n  >>> squareSum([121,122,123])\n  32016\n  >>> squareSum([124,125,126])\n  33017\n  >>> squareSum([127,128,129])\n  34018\n  >>> squareSum([130,131,132])\n  35019\n  >>> squareSum([133,134,135])\n  36020\n  >>> squareSum([136,137,138])\n  37021\n  >>> squareSum([139,140,141])\n  38022\n  >>> squareSum([142,143,144])\n  39023\n  >>> squareSum([145,146,147])\n  40024\n  >>> squareSum([148,149,150])\n  41025\n  >>> squareSum([151,152,153])\n  42026\n  >>> squareSum([154,155,156])\n  43027\n  >>> squareSum([157,158,159])\n  44028\n  >>> squareSum([160,161,162])\n  45029\n  >>> squareSum([163,164,165])\n  46030\n  >>> squareSum([166,167,168])\n  47031\n  >>> squareSum([169,170,171])\n  48032\n  >>> squareSum([172,173,174])\n  49033\n  >>> squareSum([175,176,177])\n  50034\n  >>> squareSum([178,179,180])\n  51035\n  >>> squareSum([181,182,183])\n  52036\n  >>> squareSum([184,185,186])\n  53037\n  >>> squareSum([187,188,189])\n  54038\n  >>> squareSum([190,191,192])\n  55039\n  >>> squareSum([193,194,195])\n  56040\n  >>> squareSum([196,197,198])\n  57040\n  >>> squareSum([199,200,201])\n  58041\n  >>> squareSum([202,203,204])\n  59042\n  >>> squareSum([205,206,207])\n  60043\n  >>> squareSum([208,209,210])\n  61044\n  >>> squareSum([211,212,213])\n  62045\n  >>> squareSum([214,215,216])\n  63046\n  >>> squareSum([217,218,219])\n  64047\n  >>> squareSum([220,221,222])\n  65048\n  >>> squareSum([223,224,225])\n  66049\n  >>> squareSum([226,227,228])\n  67050\n  >>> squareSum([229,230,231])\n  68051\n  >>> squareSum([232,233,234])\n  69051\n  >>> squareSum([235,236,237])\n  70052\n  >>> squareSum([238,239,240])\n  71053\n  >>> squareSum([241,242,243])\n  72054\n  >>> squareSum([244,245,246])\n  73055\n  >>> squareSum([247,248,249])\n  74056\n  >>> squareSum([250,251,252])\n  75057\n  >>> squareSum([253,254,255])\n  76058\n  >>> squareSum([256,257,258])\n  77059\n  >>> squareSum([259,260,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_case.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_case which takes a string representing\n  a word as input and returns the number of vowels in the string with case\n  preserved.\n\n  Example:\n  >>> vowels_count_with_case(\"abcde\")\n  2\n  >>> vowels_count_with_case(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_case = (s) => {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = '';\n  let i;\n  for (i = shift - 1; i >= 0; i--) {\n    digits = digits[digits.length - 1] + digits[digits.length - 1 - i];\n  }\n  return digits;\n};\n\n/*\n  Convert a string to a number.\n  >>> to_number('12')\n  12\n  >>> to_number('12.3')\n  12.3\n  >>> to_number('12.34')\n  12.34\n  >>> to_number('12.345')\n  12.345\n  >>> to_number('12.3456')\n  12.3456\n  >>> to_number('12.34567')\n  12.34567\n  >>> to_number('12.345678e+2')\n  12.345678e+2\n  >>> to_number('12.3456789e-2')\n  12.3456789e-2\n  >>> to_number('12.3456789e-10')\n  12.3456789e-10\n  >>> to_number('12.3456789e-100')\n  12.3456789e-100\n  >>> to_number('12.3456789e-1000')\n  12.3456789e-1000\n  >>> to_number('12.3456789e-10000')\n  12.3456789e-10000\n  >>> to_number('12.3456789e-100000')\n  12.3456789e-100000\n  >>> to_number('12.3456789e-1000000')\n  12.3456789e-1000000\n  >>> to_number('12.3456789e-10000000')\n  12.3456789e-10000000\n  >>> to_number('12.3456789e-100000000')\n  12.3456789e-100000000\n  >>> to_number('12.3456789e-1000000000')\n  12.3456789e-1000000000\n  >>> to_number('12.3456789e-10000000000')\n  12.3456789e-10000000000\n  >>> to_number('12.3456789e-100000000000')\n  12.3456789e-100000000000\n  >>> to_number('12.3456789e-1000000000000')\n  12.3456789e-1000000000000\n  >>> to_number('12.3456789e-10000000000000')\n  12.3456789e-10000000000000\n  >>> to_number('12.3456789e-100000000000000')\n  12.3456789e-100000000000000\n  >>> to_number('12.3456789e-1000000000000000')\n  12.3456789e-1000000000000000\n  >>> to_number('12.3456789e-10000000000000000')\n  12.3456789e-10000000000000000\n  >>> to_number('12.3456789e-100000000000000000')\n  12.3456789e-100000000000000000\n  >>> to_number('12.3456789e-1000000000000000000')\n  12.3456789e-1000000000000000000\n  >>> to_number('12.3456789e-10000000000000000000')\n  12.3456789e-10000000000000000000\n  >>> to_number('12.3456789e-100000000000000000000')\n  12.3456789e-100000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000')\n  12.3456789e-1000000000000000000000\n  >>> to_number('12.3456789e-10000000000000000000000')\n  12.3456789e-10000000000000000000000\n  >>> to_number('12.3456789e-100000000000000000000000')\n  12.3456789e-100000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000')\n  12.3456789e-1000000000000000000000000\n  >>> to_number('12.3456789e-10000000000000000000000000')\n  12.3456789e-10000000000000000000000000\n  >>> to_number('12.3456789e-100000000000000000000000000')\n  12.3456789e-100000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000\n  >>> to_number('12.3456789e-10000000000000000000000000000')\n  12.3456789e-10000000000000000000000000000\n  >>> to_number('12.3456789e-100000000000000000000000000000')\n  12.3456789e-100000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000\n  >>> to_number('12.3456789e-10000000000000000000000000000000')\n  12.3456789e-10000000000000000000000000000000\n  >>> to_number('12.3456789e-100000000000000000000000000000000')\n  12.3456789e-100000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-1000000000000000000000000000000000')\n  12.3456789e-1000000000000000000000000000000000\n  >>> to_number('12.3456789e-100", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const [apples, oranges] = s.split(' and ');\n  const [apples_count, oranges_count] = apples.split(' ');\n  const [apples_count, oranges_count] = oranges.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_count.split(' ');\n  const [apples_count, oranges_count] = apples_count.split(' ');\n  const [apples_count, oranges_count] = oranges_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((item) => item % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const sortedEvenValues = evenValues.sort((a, b) => a - b);\n  const smallestEvenValue = sortedEvenValues[0];\n  const smallestIndex = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, smallestIndex];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd = (arr) => {\n  const oddValues = arr.filter((item) => item % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => a - b);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOdd };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex = (arr) => {\n  const oddValues = arr.filter((item) => item % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => a - b);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddValue = (arr) => {\n  const oddValues = arr.filter((item) => item % 2!== 0);\n  if (oddValues.length === 0) return [];\n  const sortedOddValues = oddValues.sort((a, b) => a - b);\n  const smallestOddValue = sortedOddValues[0];\n  const smallestIndex = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, smallestIndex];\n};\n\nexport { pluckOddValue };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let maxVal = -1;\n  let maxFreq = -1;\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val > 0) {\n      if (maxVal < 0 || maxVal > val) {\n        maxVal = val;\n        maxFreq = lst.length;\n      }\n    } else if (maxVal > 0) {\n      maxFreq = maxFreq - 1;\n    }\n  }\n  return maxVal > 0? maxVal : -1;\n};\n\n/*\n  You are given a list of integers representing a sequence of words. Write a function that returns the length of the longest word in the list.\n  Examples:\n      length([4, 1, 2, 2, 3, 1]) = 3\n      length([5, 5, 4, 4, 4]) = 4\n*/\nconst length = (lst) => {\n  let maxLen = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const val = lst[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let i = 0; i < str.length; i++) {\n    const val = str[i];\n    if (val > 0) {\n      maxLen = Math.max(maxLen, val);\n    }\n  }\n  return maxLen;\n};\n\n/*\n  You are given a string of lowercase letters. Write a function that returns the length of the longest word in the string.\n  Examples:\n      length(\"abracadabra\") = 12\n      length(\"abracadabrara\") = 15\n*/\nconst length = (str) => {\n  let maxLen = 0;\n  for (let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde', 'array']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(s =>!s.includes(substring));\n};\n\n/* Filter an input list of ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    sorted.push(lst[i]);\n  }\n  for (let i = lst.length - 1; i >= 0; i--) {\n    sorted.push(lst[i]);\n  }\n  return sorted;\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_lowercase(\"hello\") == \"hello\"\n  to_lowercase(\"HELLO\") == \"hello\"\n  to_lowercase(\"HELLO WORLD\") == \"hello world\"\n  to_lowercase(\"HELLO WORLD!\") == \"hello world!\"\n  to_lowercase(\"HELLO WORLD!!!\") == \"hello world!!!\"\n  */\nconst to_lowercase = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase + uppercase;\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_uppercase(\"hello\") == \"HELLO\"\n  to_uppercase(\"HELLO\") == \"HELLO\"\n  to_uppercase(\"HELLO WORLD\") == \"HELLO WORLD\"\n  to_uppercase(\"HELLO WORLD!\") == \"HELLO WORLD!\"\n  to_uppercase(\"HELLO WORLD!!!\") == \"HELLO WORLD!!!\"\n  */\nconst to_uppercase = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase + uppercase;\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_titlecase(\"hello\") == \"Hello World\"\n  to_titlecase(\"HELLO\") == \"Hello World\"\n  to_titlecase(\"HELLO WORLD\") == \"Hello World\"\n  to_titlecase(\"HELLO WORLD!\") == \"Hello World!\"\n  to_titlecase(\"HELLO WORLD!!!\") == \"Hello World!!!\"\n  */\nconst to_titlecase = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toUpperCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!!!\") == \"hello-world\"\n  */\nconst to_slug = (str) => {\n  const lowercase = str.toLowerCase();\n  const uppercase = str.toUpperCase();\n  return lowercase.charAt(0).toLowerCase() + lowercase.slice(1);\n};\n\n/*\n  Given a string, return string with every character in lowercase\n  and every character in uppercase.\n\n  Examples:\n  to_slug(\"hello\") == \"hello\"\n  to_slug(\"HELLO\") == \"hello\"\n  to_slug(\"HELLO WORLD\") == \"hello-world\"\n  to_slug(\"HELLO WORLD!\") == \"hello-world\"\n  to_slug(\"HEL", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a === 0 && b === 0 && c === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  return Math.abs(a * b * c) / Math.sqrt(a * a + b * b + c * c)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle rounded to 2 decimal points if the sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_circumference = (a, b, c, d) => {\n  if (a === 0 && b === 0 && c === 0 && d === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c + d * d) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.28\n  triangle_perimeter(1, 2, 10) == -1\n  */\nconst triangle_perimeter = (a, b, c, d) => {\n  if (a === 0 && b === 0 && c === 0 && d === 0) {\n    return 0\n  }\n  if (a === 0 || b === 0 || c === 0 || d === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b + c * c + d * d) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.28\n  triangle_perimeter(1, 2, 10) == -1\n  */\nconst triangle_area = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.abs(x * y * z) / Math.sqrt(x * x + y * y + z * z)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_circumference = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.sqrt(x * x + y * y + z * z) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_perimeter = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.sqrt(x * x + y * y + z * z) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.28\n  triangle_perimeter(1, 2, 10) == -1\n  */\nconst triangle_area = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.abs(x * y * z) / Math.sqrt(x * x + y * y + z * z)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_circumference = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.sqrt(x * x + y * y + z * z) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_perimeter = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.sqrt(x * x + y * y + z * z) / 2\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the area of the triangle if\n  the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_perimeter(3, 4, 5) == 6.28\n  triangle_perimeter(1, 2, 10) == -1\n  */\nconst triangle_area = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.abs(x * y * z) / Math.sqrt(x * x + y * y + z * z)\n}\n\n/*\n  Given the lengths of the sides of a triangle. Return the circumference of\n  the triangle if the sides form a valid triangle. Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_circumference(3, 4, 5) == 6.28\n  triangle_circumference(1, 2, 10) == -1\n  */\nconst triangle_circumference = (x, y, z) => {\n  if (x === 0 && y === 0 && z === 0) {\n    return 0\n  }\n  if (x === 0 || y === 0 || z === 0) {\n    return -1\n  }\n  return Math.sqrt(x * x + y * y + z * z) / 2\n}\n\n/*\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = q.reduce((acc, x) => acc + x, 0);\n  return maxSum < maxWeight;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will f", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[arr.length - 1 - i]) {\n      min = i;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly one element from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly two elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[1] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_2 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly three elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_3 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly four elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_4 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly five elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_5 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly six elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_6 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly seven elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_7 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly eight elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_8 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly nine elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_9 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly ten elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_10 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly eleven elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_11 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum value of arr that can be obtained\n  by removing exactly twelve elements from the array. For example, given arr = [1, 2, 3, 4],\n  the maximum value that can be removed is arr[3] - arr[2] = 2. Another example: given arr = [1, 2, 3],\n  the maximum value that can be removed is arr[1] - arr[0] = 1.\n  */\nconst max_value_12 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[arr.length - 1 - i]) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst2;\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case.\n\n  Examples\n  to_lower() ➞ ''\n  to_lower('hi') ➞ 'hi'\n  to_lower('Hi there') ➞ 'Hi there'\n  to_lower('HI THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n  to_lower('Hi THERE') ➞ 'Hi there'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that returns ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power(x, n / 2);\n  return is_simple_power(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_2 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_2(x, n / 2);\n  return is_simple_power_2(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_3 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_3(x, n / 2);\n  return is_simple_power_3(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_4 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_4(x, n / 2);\n  return is_simple_power_4(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_5 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_5(x, n / 2);\n  return is_simple_power_5(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_6 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_6(x, n / 2);\n  return is_simple_power_6(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_7 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_7(x, n / 2);\n  return is_simple_power_7(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_8 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_8(x, n / 2);\n  return is_simple_power_8(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_9 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_9(x, n / 2);\n  return is_simple_power_9(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power_10 = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return false;\n  if (n % 2 === 0) return is_simple_power_10(x, n / 2);\n  return is_simple_power_10(x * x, n / 2);\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return true;\n  if (a === 2) return true;\n  if (a === 3) return true;\n  if (a === 4) return true;\n  if (a === 5) return true;\n  if (a === 6) return true;\n  if (a === 7) return true;\n  if (a === 8) return true;\n  if (a === 9) return true;\n  if (a === 10) return true;\n  if (a === 11) return true;\n  if (a === 12) return true;\n  if (a === 13) return true;\n  if (a === 14) return true;\n  if (a === 15) return true;\n  if (a === 16) return true;\n  if (a === 17) return true;\n  if (a === 18) return true;\n  if (a === 19) return true;\n  if (a === 20) return true;\n  if (a === 21) return true;\n  if (a === 22) return true;\n  if (a === 23) return true;\n  if (a === 24) return true;\n  if (a === 25) return true;\n  if (a === 26) return true;\n  if (a === 27) return true;\n  if (a === 28) return true;\n  if (a === 29) return true;\n  if (a === 30) return true;\n  if (a === 31) return true;\n  if (a === 32) return true;\n  if (a === 33) return true;\n  if (a === 34) return true;\n  if (a === 35) return true;\n  if (a === 36) return true;\n  if (a === 37) return true;\n  if (a === 38) return true;\n  if (a === 39) return true;\n  if (a === 40) return true;\n  if (a === 41) return true;\n  if (a === 42) return true;\n  if (a === 43) return true;\n  if (a === 44) return true;\n  if (a === 45) return true;\n  if (a === 46) return true;\n  if (a === 47) return true;\n  if (a === 48) return true;\n  if (a === 49) return true;\n  if (a === 50) return true;\n  if (a === 51) return true;\n  if (a === 52) return true;\n  if (a === 53) return true;\n  if (a === 54) return true;\n  if (a === 55) return true;\n  if (a === 56) return true;\n  if (a === 57) return true;\n  if (a === 58) return true;\n  if (a === 59) return true;\n  if (a === 60) return true;\n  if (a === 61) return true;\n  if (a === 62) return true;\n  if (a === 63) return true;\n  if (a === 64) return true;\n  if (a === 65) return true;\n  if (a === 66) return true;\n  if (a === 67) return true;\n  if (a === 68) return true;\n  if (a === 69) return true;\n  if (a === 70) return true;\n  if (a === 71) return true;\n  if (a === 72) return true;\n  if (a === 73) return true;\n  if (a === 74) return true;\n  if (a === 75) return true;\n  if (a === 76) return true;\n  if (a === 77) return true;\n  if (a === 78) return true;\n  if (a === 79) return true;\n  if (a === 80) return true;\n  if (a === 81) return true;\n  if (a === 82) return true;\n  if (a === 83) return true;\n  if (a === 84) return true;\n  if (a === 85) return true;\n  if (a === 86) return true;\n  if (a === 87) return true;\n  if (a === 88) return true;\n  if (a === 89) return true;\n  if (a === 90) return true;\n  if (a === 91) return true;\n  if (a === 92) return true;\n  if (a === 93) return true;\n  if (a === 94) return true;\n  if (a === 95) return true;\n  if (a === 96) return true;\n  if (a === 97) return true;\n  if (a === 98) return true;\n  if (a === 99) return true;\n  if (a === 100) return true;\n  if (a === 101) return true;\n  if (a === 102) return true;\n  if (a === 103) return true;\n  if (a === 104) return true;\n  if (a === 105) return true;\n  if (a === 106) return true;\n  if (a === 107) return true;\n  if (a === 108) return true;\n  if (a === 109) return true;\n  if (a === 110) return true;\n  if (a === 111) return true;\n  if (a === 112) return true;\n  if (a === 113) return true;\n  if (a === 114) return true;\n  if (a === 115) return true;\n  if (a === 116) return true;\n  if (a === 117) return true;\n  if (a === 118) return true;\n  if (a === 119) return true;\n  if (a === 120) return true;\n  if (a === 121) return true;\n  if (a === 122) return true;\n  if (a === 123) return true;\n  if (a === 124) return true;\n  if (a === 125) return true;\n  if (a === 126) return true;\n  if (a === 127) return true;\n  if (a === 128) return true;\n  if (a === 129) return true;\n  if (a === 130) return true;\n  if (a === 131) return true;\n  if (a === 132) return true;\n  if (a === 133) return true;\n  if (a === 134) return true;\n  if (a === 135) return true;\n  if (a === 136) return true;\n  if (a === 137) return true;\n  if (a === 138) return true;\n  if (a === 139) return true;\n  if (a === 140) return true;\n  if (a === 141) return true;\n  if (a === 142) return true;\n  if (a === 143) return true;\n  if (a === 144) return true;\n  if (a === 145) return true;\n  if (a === 146) return true;\n  if (a === 147) return true;\n  if (a === 148) return true;\n  if (a === 149) return true;\n  if (a === 150) return true;\n  if (a === 151) return true;\n  if (a === 152) return true;\n  if (a === 153) return true;\n  if (a === 154) return true;\n  if (a === 155) return true;\n  if (a === 156) return true;\n  if (a === 157) return true;\n  if (a === 158) return true;\n  if (a === 159) return true;\n  if (a === 160) return true;\n  if (a === 161) return true;\n  if (a === 162) return true;\n  if (a === 163) return true;\n  if (a === 164) return true;\n  if (a === 165) return true;\n  if (a === 166) return true;\n  if (a === 167) return true;\n  if (a === 168) return true;\n  if (a === 169) return true;\n  if (a === 170) return true;\n  if (a === 171) return true;\n  if (a === 172) return true;\n  if (a === 173) return true;\n  if (a === 174) return true;\n  if (a === 175) return true;\n  if (a === 176) return true;\n  if (a === 177) return true;\n  if (a === 178) return true;\n  if (a === 179) return true;\n  if (a === 180) return true;\n  if (a === 181) return true;\n  if (a === 182) return true;\n  if (a === 183) return true;\n  if (a === 184) return true;\n  if (a === 185) return true;\n  if (a === 186) return true;\n  if (a === 187) return true;\n  if (a === 188) return true;\n  if (a === 189) return true;\n  if (a === 190) return true;\n  if (a === 191) return true;\n  if (a === 192) return true;\n  if (a === 193) return true;\n  if (a === 194) return true;\n  if (a === 195) return true;\n  if (a === 196) return true;\n  if (a === 197) return true;\n  if (a === 198) return true;\n  if (a === 199) return true;\n  if (a === ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let hex_num = 0;\n  let num_digits = num.length;\n  for (let i = 0; i < num_digits; i++) {\n    hex_num = hex_num + (num.charCodeAt(i) - 48) * Math.pow(16, num_digits - i - 1);\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key2 = (num) => {\n  let hex_num = 0;\n  let num_digits = num.length;\n  for (let i = 0; i < num_digits; i++) {\n    hex_num = hex_num + (num.charCodeAt(i) - 48) * Math.pow(16, num_digits - i - 1);\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key3 = (num) => {\n  let hex_num = 0;\n  let num_digits = num.length;\n  for (let i = 0; i < num_digits; i++) {\n    hex_num = hex_num + (num.charCodeAt(i) - 48) * Math.pow(16, num_digits - i - 1);\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key4 = (num) => {\n  let hex_num = 0;\n  let num_digits = num.length;\n  for (let i = 0; i < num_digits; i++) {\n    hex_num = hex_num + (num.charCodeAt(i) - 48) * Math.pow(16, num_digits - i - 1);\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key5 = (num) => {\n  let hex_num = 0;\n  let num_digits = num.length;\n  for (let i = 0; i < num_digits; i++) {\n    hex_num = hex_num + (num.charCodeAt(i) - 48) * Math.pow(16, num_digits - i - 1);\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = '';\n\n  for (let i = 0; i < decimal.length; i++) {\n    decimalString += decimal[i];\n  }\n\n  for (let i = 0; i < decimalString.length; i++) {\n    if (decimalString.charAt(i) === 1) {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n\n  return 'db' + binary + 'db';\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces.\n\n  Examples:\n  string_with_space(\"hello\")   # returns \"hello world\"\n  string_with_space(\"hello\")   # returns \"hello\"\n  string_with_space(\"\")        # returns \"\"\n  string_with_space(null)     # returns \"\"\n  */\nconst string_with_space = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' ');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by dashes.\n\n  Examples:\n  string_with_dashes(\"hello\")   # returns \"hello-world\"\n  string_with_dashes(\"hello\")   # returns \"hello\"\n  string_with_dashes(\"\")        # returns \"\"\n  string_with_dashes(null)     # returns \"\"\n  */\nconst string_with_dashes = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join('-');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by underscores.\n\n  Examples:\n  string_with_underscores(\"hello\")   # returns \"hello_world\"\n  string_with_underscores(\"hello\")   # returns \"hello\"\n  string_with_underscores(\"\")        # returns \"\"\n  string_with_underscores(null)     # returns \"\"\n  */\nconst string_with_underscores = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join('_');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes.\n\n  Examples:\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello-world\"\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores(\"\")        # returns \"\"\n  string_with_dashes_and_underscores(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and underscores.\n\n  Examples:\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello_world\"\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores(\"\")        # returns \"\"\n  string_with_dashes_and_underscores(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes and underscores.\n\n  Examples:\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello-world\"\n  string_with_dashes_and_underscores(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores(\"\")        # returns \"\"\n  string_with_dashes_and_underscores(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes and underscores and a space in between.\n\n  Examples:\n  string_with_dashes_and_underscores_and_space(\"hello\")   # returns \"hello world\"\n  string_with_dashes_and_underscores_and_space(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores_and_space(\"\")        # returns \"\"\n  string_with_dashes_and_underscores_and_space(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores_and_space = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_ ');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes and underscores and a space in between and a\n  space at the end.\n\n  Examples:\n  string_with_dashes_and_underscores_and_space_and_end(\"hello\")   # returns \"hello world\"\n  string_with_dashes_and_underscores_and_space_and_end(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores_and_space_and_end(\"\")        # returns \"\"\n  string_with_dashes_and_underscores_and_space_and_end(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores_and_space_and_end = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_ ');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes and underscores and a space in between and a\n  space at the end and a space at the beginning.\n\n  Examples:\n  string_with_dashes_and_underscores_and_space_and_end_and_beginning(\"hello\")   # returns \"hello world\"\n  string_with_dashes_and_underscores_and_space_and_end_and_beginning(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores_and_space_and_end_and_beginning(\"\")        # returns \"\"\n  string_with_dashes_and_underscores_and_space_and_end_and_beginning(null)     # returns \"\"\n  */\nconst string_with_dashes_and_underscores_and_space_and_end_and_beginning = (string) => {\n  if (string === null || string === undefined) {\n    return '';\n  }\n\n  return string.split('').join(' _ ').split(' ').join('-_ ');\n};\n\n/*\n  Write a function that takes a string and returns the string with all the characters in the\n  string separated by spaces and dashes and underscores and a space in between and a\n  space at the end and a space at the beginning, each character separated by a comma.\n\n  Examples:\n  string_with_dashes_and_underscores_and_space_and_end_and_comma_separated(\"hello\")   # returns \"hello world\"\n  string_with_dashes_and_underscores_and_space_and_end_and_comma_separated(\"hello\")   # returns \"hello\"\n  string_with_dashes_and_underscores_and_space_and_end_and_comma_separated(\"\")        # returns \"\"\n  string_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach((num) => {\n    sum += num;\n    product *= num;\n  });\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_recursive([])\n  (0, 1)\n  >>> sum_product_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product(numbers, numbers[0]);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative([])\n  (0, 1)\n  >>> sum_product_iterative([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product_iterative_recursive([])\n  (0, 1)\n  >>> sum_product_iterative_recursive([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product_iterative_recursive = (numbers) => {\n  if (numbers.length === 0) {\n    return [0, 0];\n  }\n  const [sum, product] = sum_product_iterative(numbers);\n  return [sum, product];\n};\n\n/* For a given ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== s[i + 1]) {\n      count++;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  is_alpha(a) => true\n  is_alpha(b) => false\n  is_alpha(ab) => false\n  is_alpha(abc) => true\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_alpha(abcde) => false\n  is_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let grades_sorted = grades.sort((a, b) => a - b);\n  let grades_length = grades_sorted.length;\n  let letter_grades = [];\n  let letter_grades_length = grades_length / 4;\n  for (let i = 0; i < grades_length; i++) {\n    let grade = grades_sorted[i];\n    if (grade >= 3.7) {\n      letter_grades.push('A+');\n    } else if (grade >= 3.3) {\n      letter_grades.push('A');\n    } else if (grade >= 3) {\n      letter_grades.push('A-');\n    } else if (grade >= 2.7) {\n      letter_grades.push('B+');\n    } else if (grade >= 2.3) {\n      letter_grades.push('B');\n    } else if (grade >= 2) {\n      letter_grades.push('B-');\n    } else if (grade >= 1.7) {\n      letter_grades.push('C+');\n    } else if (grade >= 1.3) {\n      letter_grades.push('C');\n    } else if (grade >= 1) {\n      letter_grades.push('C-');\n    } else if (grade >= 0.7) {\n      letter_grades.push('D+');\n    } else if (grade >= 0) {\n      letter_grades.push('D');\n    } else {\n      letter_grades.push('D-');\n    }\n  }\n  return letter_grades;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let grades_sorted = grades.sort((a, b) => a - b);\n  let grades_length = grades_sorted.length;\n  let letter_grades = [];\n  let letter_grades_length = grades_length / 4;\n  for (let i = 0; i < grades_length; i++) {\n    let grade = grades_sorted[i];\n    if (grade >= 3.7) {\n      letter_grades.push('A+');\n    } else if (grade >= 3.3) {\n      letter_grades.push('A');\n    } else if (grade >= 3) {\n      letter_grades.push('A-');\n    } else if (grade >= 2.7) {\n      letter_grades.push('B+');\n    } else if (grade >= 2.3) {\n      letter_grades.push('B');\n    } else if (grade >= 2) {\n      letter_grades.push('B-');\n    } else if (grade >= 1.7) {\n      letter_grades.push('C+');\n    } else if (grade >= 1.3) {\n      letter_grades.push('C');\n    } else if (grade >= 1) {\n      letter_grades.push('C-');\n    } else if (grade >= 0.7) {\n      letter_grades.push('D+');\n    } else if (grade >= 0) {\n      letter_grades.push('D');\n    } else {\n      letter_grades.push('D-');\n    }\n  }\n  return letter_grades;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let grades_sorted = grades.sort((a, b) => a - b);\n  let grades_length = grades_sorted.length;\n  let letter_grades = [];\n  let letter_grades_length = grades_length / 4;\n  for (let i = 0; i < grades_length; i++) {\n    let grade = grades_sorted[i];\n    if (grade >= 3.7) {\n      letter_grades.push('A+');\n    } else if (grade >= 3.3) {\n      letter_grades.push('A');\n    } else if (grade >= 3) {\n      letter_grades.push('A-');\n    } else if (grade >= 2.7) {\n      letter_grades.push('B+');\n    } else if (grade >= 2.3) {\n      letter_grades.push('B');\n    } else if (grade >= 2) {\n      letter_grades.push('B-');\n    } else if (grade >= 1.7) {\n      letter_grades.push('C+');\n    } else if (grade >= 1.3) {\n      letter_grades.push('C');\n    } else if (grade >= 1) {\n      letter_grades.push('C-');\n    } else if (grade >= 0.7) {\n      letter_grades.push('D+');\n    } else if (grade >= 0) {\n      letter_grades.push('D');\n    } else {\n      letter_grades.push('D-');\n    }\n  }\n  return letter_grades;\n};\n\n/*\n  Write a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let grades_sorted = grades.sort((a, b) => a - b);\n  let grades_length = grades_sorted.length;\n  let letter_grades = [];\n  let letter_grades_length = grades_length / 4;\n  for (let i = 0; i < grades_length; i++) {\n    let grade = grades_sorted[i];\n    if (grade >= 3.7) {\n      letter_grades.push('A+');\n    } else if (grade >= 3.3) {\n      letter_grades.push('A');\n    } else if (grade >= 3) {\n      letter_grades.push('A-');\n    } else if (grade >= 2.7) {\n      letter_grades.push('B+');\n    } else if (grade >= 2.3) {\n      letter_grades.push('B');", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i + 1)) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters or false otherwise\n  Examples\n  letters_only('Hello') == true\n  letters_only('abcdcba') == false\n  letters_only('kittens') == false\n  letters_only('orange') == false\n  */\nconst letters_only = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbers_only('Hello') == true\n  numbers_only('abcdcba') == false\n  numbers_only('kittens') == false\n  numbers_only('orange') == false\n  */\nconst numbers_only = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/\\d/g)) {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercase_letters('Hello') == true\n  uppercase_letters('abcdcba') == false\n  uppercase_letters('kittens') == false\n  uppercase_letters('orange') == false\n  */\nconst uppercase_letters = (string) => {\n  let upper = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      upper = false;\n      break;\n    }\n  }\n  return upper;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercase_letters('Hello') == true\n  lowercase_letters('abcdcba') == false\n  lowercase_letters('kittens') == false\n  lowercase_letters('orange') == false\n  */\nconst lowercase_letters = (string) => {\n  let lower = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toLowerCase()) {\n      lower = false;\n      break;\n    }\n  }\n  return lower;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols_only('Hello') == true\n  symbols_only('abcdcba') == false\n  symbols_only('kittens') == false\n  symbols_only('orange') == false\n  */\nconst symbols_only = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[!@#$%^&*()_+={}[\\]|\\\\;:'\",<.>?]/)) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only punctuation or false otherwise\n  Examples\n  punctuation('Hello') == true\n  punctuation('abcdcba') == false\n  punctuation('kittens') == false\n  punctuation('orange') == false\n  */\nconst punctuation = (string) => {\n  let punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[!@#$%^&*()_+={}[\\]|\\\\;:'\",<.>?]/)) {\n      punctuation = false;\n      break;\n    }\n  }\n  return punctuation;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == false\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[ \\t\\n\\r]+/g)) {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only only uppercase letters or false otherwise\n  Examples\n  uppercase_letters('Hello') == true\n  uppercase_letters('abcdcba') == false\n  uppercase_letters('kittens') == false\n  uppercase_letters('orange') == false\n  */\nconst uppercase_letters = (string) => {\n  let upper = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toUpperCase()) {\n      upper = false;\n      break;\n    }\n  }\n  return upper;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercase_letters('Hello') == true\n  lowercase_letters('abcdcba') == false\n  lowercase_letters('kittens') == false\n  lowercase_letters('orange') == false\n  */\nconst lowercase_letters = (string) => {\n  let lower = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).toLowerCase()) {\n      lower = false;\n      break;\n    }\n  }\n  return lower;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols_only('Hello') == true\n  symbols_only('abcdcba') == false\n  symbols_only('kittens') == false\n  symbols_only('orange') == false\n  */\nconst symbols_only = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[!@#$%^&*()_+={}[\\]|\\\\;:'\",<.>?]/)) {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only punctuation or false otherwise\n  Examples\n  punctuation('Hello') == true\n  punctuation('abcdcba') == false\n  punctuation('kittens') == false\n  punctuation('orange') == false\n  */\nconst punctuation = (string) => {\n  let punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[!@#$%^&*()_+={}[\\]|\\\\;:'\",<.>?]/)) {\n      punctuation = false;\n      break;\n    }\n  }\n  return punctuation;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces('Hello') == true\n  spaces('abcdcba') == false\n  spaces('kittens') == false\n  spaces('orange') == false\n  */\nconst spaces = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i)!== string.charAt(i).match(/[ \\t\\n\\r]+/g)) {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_2 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_3 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_4 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_5 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_6 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_7 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_8 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_9 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_10 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_11 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_12 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_13 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_14 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_15 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_16 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_17 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_18 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_19 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_20 = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N) {\n    sum += N % 2;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 7]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4, 7]\n  */\nconst removeOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst removeOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'Wrdllo!!!'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffleDesc = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s.charAt(i);\n    if (char ==='') {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(s.charCodeAt(i) + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  });\n  res.sort((a, b) => a[0] - b[0]);\n  res.sort((a, b) => a[1] - b[1]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 0), (2, 1), (1, 4), (2, 4)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n  */\nconst get_col = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      col++;\n      row = 0;\n    } else {\n      row++;\n    }\n  });\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => a[0] - b[0]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 0), (2, 1), (1, 4), (2, 4)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      col++;\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  });\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => a[0] - b[0]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 0), (2, 1), (1, 4), (2, 4)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      col++;\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  });\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => a[0] - b[0]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 0), (2, 1), (1, 4), (2, 4)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      col++;\n      row++;\n      col = 0;\n    } else {\n      col++;\n    }\n  });\n  res.sort((a, b) => a[1] - b[1]);\n  res.sort((a, b) => a[0] - b[0]);\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in descending order.\n  Also, sort coordinates of the row by columns in ascending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (2, 0), (2, 1), (1, 4), (2, 4)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 2), (2, 3)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  let row = 0;\n  let col = 0;\n  lst.forEach((item, i) => {\n    if (item === x) {\n      res.push([row, col]);\n      col++;\n      row++;\n      col = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 1) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_odd([]) => []\n  * sort_array_odd([5]) => [5]\n  * sort_array_odd([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_odd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_odd = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 1) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_even([]) => []\n  * sort_array_even([5]) => [5]\n  * sort_array_even([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_even([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_even = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_odd_and_even([]) => []\n  * sort_array_odd_and_even([5]) => [5]\n  * sort_array_odd_and_even([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_odd_and_even([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_odd_and_even = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 1) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_odd_and_even_and_even([]) => []\n  * sort_array_odd_and_even_and_even([5]) => [5]\n  * sort_array_odd_and_even_and_even([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_odd_and_even_and_even([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_odd_and_even_and_even = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 1) {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_odd_and_even_and_odd([]) => []\n  * sort_array_odd_and_even_and_odd([5]) => [5]\n  * sort_array_odd_and_even_and_odd([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_odd_and_even_and_odd([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_odd_and_even_and_odd = (array) => {\n  const len = array.length;\n  if (len <= 0) {\n    return array;\n  }\n  const firstIndex = array[0];\n  const lastIndex = array[len - 1];\n  const firstIndexSum = firstIndex + lastIndex;\n  const lastIndexSum = firstIndex - lastIndex;\n  if (firstIndexSum % 2 === 0) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array_odd_and_even_and_odd_and_even([]) => []\n  * sort_array_odd_and_even_and_odd_and_even([5]) => [5]\n  * sort_array_odd_and_even_and_odd_and_even([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array_odd_and_even_and_odd_and_even([2, 4, 3, ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = alphabet.split('')\n  let newAlphabet2 = alphabet.split('')\n  newAlphabet2.reverse()\n  newAlphabet2.forEach((letter, i) => {\n    newAlphabet[i] = newAlphabet2[newAlphabet2.length - i - 1]\n  })\n  let newAlphabet3 = newAlphabet.join('')\n  let newAlphabet4 = newAlphabet3.split('')\n  newAlphabet4.forEach((letter, i) => {\n    newAlphabet4[i] = newAlphabet3[newAlphabet3.length - i - 1]\n  })\n  let newAlphabet5 = newAlphabet4.join('')\n  let newAlphabet6 = newAlphabet5.split('')\n  newAlphabet6.forEach((letter, i) => {\n    newAlphabet6[i] = newAlphabet5[newAlphabet5.length - i - 1]\n  })\n  let newAlphabet7 = newAlphabet6.join('')\n  let newAlphabet8 = newAlphabet7.split('')\n  newAlphabet8.forEach((letter, i) => {\n    newAlphabet8[i] = newAlphabet7[newAlphabet7.length - i - 1]\n  })\n  let newAlphabet9 = newAlphabet8.join('')\n  let newAlphabet10 = newAlphabet9.split('')\n  newAlphabet10.forEach((letter, i) => {\n    newAlphabet10[i] = newAlphabet9[newAlphabet9.length - i - 1]\n  })\n  let newAlphabet11 = newAlphabet10.join('')\n  let newAlphabet12 = newAlphabet11.split('')\n  newAlphabet12.forEach((letter, i) => {\n    newAlphabet12[i] = newAlphabet11[newAlphabet11.length - i - 1]\n  })\n  let newAlphabet13 = newAlphabet12.join('')\n  let newAlphabet14 = newAlphabet13.split('')\n  newAlphabet14.forEach((letter, i) => {\n    newAlphabet14[i] = newAlphabet13[newAlphabet13.length - i - 1]\n  })\n  let newAlphabet15 = newAlphabet14.join('')\n  let newAlphabet16 = newAlphabet15.split('')\n  newAlphabet16.forEach((letter, i) => {\n    newAlphabet16[i] = newAlphabet15[newAlphabet15.length - i - 1]\n  })\n  let newAlphabet17 = newAlphabet16.join('')\n  let newAlphabet18 = newAlphabet17.split('')\n  newAlphabet18.forEach((letter, i) => {\n    newAlphabet18[i] = newAlphabet17[newAlphabet17.length - i - 1]\n  })\n  let newAlphabet19 = newAlphabet18.join('')\n  let newAlphabet20 = newAlphabet19.split('')\n  newAlphabet20.forEach((letter, i) => {\n    newAlphabet20[i] = newAlphabet19[newAlphabet19.length - i - 1]\n  })\n  let newAlphabet21 = newAlphabet20.join('')\n  let newAlphabet22 = newAlphabet21.split('')\n  newAlphabet22.forEach((letter, i) => {\n    newAlphabet22[i] = newAlphabet21[newAlphabet21.length - i - 1]\n  })\n  let newAlphabet23 = newAlphabet22.join('')\n  let newAlphabet24 = newAlphabet23.split('')\n  newAlphabet24.forEach((letter, i) => {\n    newAlphabet24[i] = newAlphabet23[newAlphabet23.length - i - 1]\n  })\n  let newAlphabet25 = newAlphabet24.join('')\n  let newAlphabet26 = newAlphabet25.split('')\n  newAlphabet26.forEach((letter, i) => {\n    newAlphabet26[i] = newAlphabet25[newAlphabet25.length - i - 1]\n  })\n  let newAlphabet27 = newAlphabet26.join('')\n  let newAlphabet28 = newAlphabet27.split('')\n  newAlphabet28.forEach((letter, i) => {\n    newAlphabet28[i] = newAlphabet27[newAlphabet27.length - i - 1]\n  })\n  let newAlphabet29 = newAlphabet28.join('')\n  let newAlphabet30 = newAlphabet29.split('')\n  newAlphabet30.forEach((letter, i) => {\n    newAlphabet30[i] = newAlphabet29[newAlphabet29.length - i - 1]\n  })\n  let newAlphabet31 = newAlphabet30.join('')\n  let newAlphabet32 = newAlphabet31.split('')\n  newAlphabet32.forEach((letter, i) => {\n    newAlphabet32[i] = newAlphabet31[newAlphabet31.length - i - 1]\n  })\n  let newAlphabet33 = newAlphabet32.join('')\n  let newAlphabet34 = newAlphabet33.split('')\n  newAlphabet34.forEach((letter, i) => {\n    newAlphabet34[i] = newAlphabet33[newAlphabet33.length - i - 1]\n  })\n  let newAlphabet35 = newAlphabet34.join('')\n  let newAlphabet36 = newAlphabet35.split('')\n  newAlphabet36.forEach((letter, i) => {\n    newAlphabet36[i] = newAlphabet35[newAlphabet35.length - i - 1]\n  })\n  let newAlphabet37 = newAlphabet36.join('')\n  let newAlphabet38 = newAlphabet37.split('')\n  newAlphabet38.forEach((letter, i) => {\n    newAlphabet38[i] = newAlphabet37[newAlphabet37.length - i - 1]\n  })\n  let newAlphabet39 = newAlphabet38.join('')\n  let newAlphabet40 = newAlphabet39.split('')\n  newAlphabet40.forEach((letter, i) => {\n    newAlphabet40[i] = newAlphabet39[newAlphabet39.length - i - 1]\n  })\n  let newAlphabet41 = newAlphabet40.join('')\n  let newAlphabet42 = newAlphabet41.split('')\n  newAlphabet42.forEach((letter, i) => {\n    newAlphabet42[i] = newAlphabet41[newAlphabet41.length - i - 1]\n  })\n  let newAlphabet43 = newAlphabet42.join('')\n  let newAlphabet44 = newAlphabet43.split('')\n  newAlphabet44.forEach((letter, i) => {\n    newAlphabet44[i] = newAlphabet43[newAlphabet43.length - i - 1]\n  })\n  let newAlphabet45 = newAlphabet44.join('')\n  let newAlphabet46 = newAlphabet45.split('')\n  newAlphabet46.forEach((letter, i) => {\n    newAlphabet46[i] = newAlphabet45[newAlphabet45.length - i - 1]\n  })\n  let newAlphabet47 = newAlphabet46.join('')\n  let newAlphabet48 = newAlphabet47.split('')\n  newAlphabet48.forEach((letter, i) => {\n    newAlphabet48[i] = newAlphabet47[newAlphabet47.length - i - 1]\n  })\n  let newAlphabet49 = newAlphabet48.join('')\n  let newAlphabet50 = newAlphabet49.split('')\n  newAlphabet50.forEach((letter, i) => {\n    newAlphabet50[i] = newAlphabet49[newAlphabet49.length - i - 1]\n  })\n  let newAlphabet51 = newAlphabet50.join('')\n  let newAlphabet52 = newAlphabet51.split('')\n  newAlphabet52.forEach((letter, i) => {\n    newAlphabet", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let max = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (max === null || max < numbers[i]) {\n      max = numbers[i];\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rolling_min = (numbers) => {\n  const result = [];\n  let min = null;\n  for (let i = 0; i < numbers.length; i++) {\n    if (min === null || min > numbers[i]) {\n      min = numbers[i];\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rolling_sum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_average = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063]\n  */\nconst rolling_std = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - average, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - average, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let median = null;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (count === 0) {\n      median = numbers[i];\n      count++;\n    } else {\n      if (numbers[i] < median) {\n        median = numbers[i];\n        count++;\n      } else if (numbers[i] === median) {\n        count++;\n      }\n    }\n    result.push(median);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const result = [];\n  let mode = null;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (mode === null || mode > numbers[i]) {\n      mode = numbers[i];\n      maxCount = 1;\n    } else if (mode === numbers[i]) {\n      maxCount++;\n    }\n    result.push(mode);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - average, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063, 1.2909944487358063]\n  */\nconst rolling_std = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - average, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424, 2.1213203435596424]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    count++;\n  }\n  const average = sum / count;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(Math.pow(numbers[i] - average, 2));\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let median = null;\n  let count = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (count === 0) {\n      median = numbers[i];\n      count++;\n    } else {\n      if (numbers[i] < median) {\n        median = numbers[i];\n        count++;\n      } else if (numbers[i] === median) {\n        count++;\n      }\n    }\n    result.push(median);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rolling_mode", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted[1] || null;\n};\n\n// Tests\nconsole.log(next_smallest([1, 2, 3, 4, 5])); // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])); // 2\nconsole.log(next_smallest([])); // null\nconsole.log(next_smallest([1, 1])); // null\nconsole.log(next_smallest([2, 1])); // null\nconsole.log(next_smallest([2, 2])); // null\nconsole.log(next_smallest([2, 1, 1])); // null\nconsole.log(next_smallest([2, 1, 2])); // null\nconsole.log(next_smallest([2, 1, 3])); // null\nconsole.log(next_smallest([2, 1, 4])); // null\nconsole.log(next_smallest([2, 1, 5])); // null\nconsole.log(next_smallest([2, 1, 6])); // null\nconsole.log(next_smallest([2, 1, 7])); // null\nconsole.log(next_smallest([2, 1, 8])); // null\nconsole.log(next_smallest([2, 1, 9])); // null\nconsole.log(next_smallest([2, 1, 10])); // null\nconsole.log(next_smallest([2, 1, 11])); // null\nconsole.log(next_smallest([2, 1, 12])); // null\nconsole.log(next_smallest([2, 1, 13])); // null\nconsole.log(next_smallest([2, 1, 14])); // null\nconsole.log(next_smallest([2, 1, 15])); // null\nconsole.log(next_smallest([2, 1, 16])); // null\nconsole.log(next_smallest([2, 1, 17])); // null\nconsole.log(next_smallest([2, 1, 18])); // null\nconsole.log(next_smallest([2, 1, 19])); // null\nconsole.log(next_smallest([2, 1, 20])); // null\nconsole.log(next_smallest([2, 1, 21])); // null\nconsole.log(next_smallest([2, 1, 22])); // null\nconsole.log(next_smallest([2, 1, 23])); // null\nconsole.log(next_smallest([2, 1, 24])); // null\nconsole.log(next_smallest([2, 1, 25])); // null\nconsole.log(next_smallest([2, 1, 26])); // null\nconsole.log(next_smallest([2, 1, 27])); // null\nconsole.log(next_smallest([2, 1, 28])); // null\nconsole.log(next_smallest([2, 1, 29])); // null\nconsole.log(next_smallest([2, 1, 30])); // null\nconsole.log(next_smallest([2, 1, 31])); // null\nconsole.log(next_smallest([2, 1, 32])); // null\nconsole.log(next_smallest([2, 1, 33])); // null\nconsole.log(next_smallest([2, 1, 34])); // null\nconsole.log(next_smallest([2, 1, 35])); // null\nconsole.log(next_smallest([2, 1, 36])); // null\nconsole.log(next_smallest([2, 1, 37])); // null\nconsole.log(next_smallest([2, 1, 38])); // null\nconsole.log(next_smallest([2, 1, 39])); // null\nconsole.log(next_smallest([2, 1, 40])); // null\nconsole.log(next_smallest([2, 1, 41])); // null\nconsole.log(next_smallest([2, 1, 42])); // null\nconsole.log(next_smallest([2, 1, 43])); // null\nconsole.log(next_smallest([2, 1, 44])); // null\nconsole.log(next_smallest([2, 1, 45])); // null\nconsole.log(next_smallest([2, 1, 46])); // null\nconsole.log(next_smallest([2, 1, 47])); // null\nconsole.log(next_smallest([2, 1, 48])); // null\nconsole.log(next_smallest([2, 1, 49])); // null\nconsole.log(next_smallest([2, 1, 50])); // null\nconsole.log(next_smallest([2, 1, 51])); // null\nconsole.log(next_smallest([2, 1, 52])); // null\nconsole.log(next_smallest([2, 1, 53])); // null\nconsole.log(next_smallest([2, 1, 54])); // null\nconsole.log(next_smallest([2, 1, 55])); // null\nconsole.log(next_smallest([2, 1, 56])); // null\nconsole.log(next_smallest([2, 1, 57])); // null\nconsole.log(next_smallest([2, 1, 58])); // null\nconsole.log(next_smallest([2, 1, 59])); // null\nconsole.log(next_smallest([2, 1, 60])); // null\nconsole.log(next_smallest([2, 1, 61])); // null\nconsole.log(next_smallest([2, 1, 62])); // null\nconsole.log(next_smallest([2, 1, 63])); // null\nconsole.log(next_smallest([2, 1, 64])); // null\nconsole.log(next_smallest([2, 1, 65])); // null\nconsole.log(next_smallest([2, 1, 66])); // null\nconsole.log(next_smallest([2, 1, 67])); // null\nconsole.log(next_smallest([2, 1, 68])); // null\nconsole.log(next_smallest([2, 1, 69])); // null\nconsole.log(next_smallest([2, 1, 70])); // null\nconsole.log(next_smallest([2, 1, 71])); // null\nconsole.log(next_smallest([2, 1, 72])); // null\nconsole.log(next_smallest([2, 1, 73])); // null\nconsole.log(next_smallest([2, 1, 74])); // null\nconsole.log(next_smallest([2, 1, 75])); // null\nconsole.log(next_smallest([2, 1, 76])); // null\nconsole.log(next_smallest([2, 1, 77])); // null\nconsole.log(next_smallest([2, 1, 78])); // null\nconsole.log(next_smallest([2, 1, 79])); // null\nconsole.log(next_smallest([2, 1, 80])); // null\nconsole.log(next_smallest([2, 1, 81])); // null\nconsole.log(next_smallest([2, 1, 82])); // null\nconsole.log(next_smallest([2, 1, 83])); // null\nconsole.log(next_smallest([2, 1, 84])); // null\nconsole.log(next_smallest([2, 1, 85])); // null\nconsole.log(next_smallest([2, 1, 86])); // null\nconsole.log(next_smallest([2, 1, 87])); // null\nconsole.log(next_smallest([2, 1, 88])); // null\nconsole.log(next_smallest([2, 1, 89])); // null\nconsole.log(next_smallest([2, 1, 90])); // null\nconsole.log(next_smallest([2, 1, 91])); // null\nconsole.log(next_smallest([2, 1, 92])); // null\nconsole.log(next_smallest([2, 1, 93])); // null\nconsole.log(next_smallest([2, 1, 94])); // null\nconsole.log(next_smallest([2, 1, 95])); // null\nconsole.log(next_smallest([2, 1, 96])); // null\nconsole.log(next_smallest([2, 1, 97])); // null\nconsole.log(next_smallest([2, 1, 98])); // null\nconsole.log(next_smallest([2, 1, 99])); // null\nconsole.log(next_smallest([2, 1, 100])); // null\nconsole.log(next_smallest([2, 1, 101])); // null\nconsole.log(next_smallest([2, 1, 102])); // null\nconsole.log(next_smallest([2, 1, 103])); // null\nconsole.log(next_smallest([2, 1, 104])); // null\nconsole.log(next_smallest([2, 1, 105])); // null\nconsole.log(next_smallest([2, 1, 106])); // null\nconsole.log(next_smallest([2, 1, 107])); // null\nconsole.log(next_smallest([2, 1, 108])); // null\nconsole.log(next_smallest([2, 1, 109])); // null\nconsole.log(next_smallest([2, 1, 110])); // null\nconsole.log(next_smallest([2, 1, 111])); // null\nconsole.log(next_smallest([2, 1, 112])); // null\nconsole.log(next_smallest([2, 1, 113])); // null\nconsole.log(next_smallest([2, 1, 114])); // null\nconsole.log(next_smallest([2, 1, 115])); // null\nconsole.log(next_smallest([2, 1, 116])); // null\nconsole.log(next_smallest([2, 1, 117])); // null\nconsole.log(next_smallest([2, 1, 118])); // null\nconsole.log(next_smallest([2, 1, 119])); // null\nconsole.log(next_smallest([2, 1, 120])); // null\nconsole.log(next_smallest([2, 1, 121])); // null\nconsole.log(next_smallest([2, 1, 122])); // null\nconsole.log(next_smallest([2, 1, 123])); // null\nconsole.log(next_smallest([2, 1, 124])); // null\nconsole.log(next_smallest([2, 1, 125])); // null\nconsole.log(next_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let boredom = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      boredom++\n    }\n  }\n  return boredom\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. A sadness is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sad(\"Hello world\")\n  0\n  >>> is_sad(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sad = (S) => {\n  let sadness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'U') {\n      sadness++\n    }\n  }\n  return sadness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') {\n      anger++\n    }\n  }\n  return anger\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"F\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'F') {\n      fear++\n    }\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"D\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'D') {\n      disgust++\n    }\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of contempt. An contempt is a sentence that starts with the word \"C\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_contempt(\"Hello world\")\n  0\n  >>> is_contempt(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_contempt = (S) => {\n  let contempt = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'C') {\n      contempt++\n    }\n  }\n  return contempt\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of neuroticism. An neuroticism is a sentence that starts with the word \"N\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_neuroticism(\"Hello world\")\n  0\n  >>> is_neuroticism(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_neuroticism = (S) => {\n  let neuroticism = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'N') {\n      neuroticism++\n    }\n  }\n  return neuroticism\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of neutral. An neutral is a sentence that starts with the word \"N\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_neutral(\"Hello world\")\n  0\n  >>> is_neutral(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_neutral = (S) => {\n  let neutral = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'N') {\n      neutral++\n    }\n  }\n  return neutral\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of trust. An trust is a sentence that starts with the word \"T\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_trust(\"Hello world\")\n  0\n  >>> is_trust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_trust = (S) => {\n  let trust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'T') {\n      trust++\n    }\n  }\n  return trust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"D\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'D') {\n      disgust++\n    }\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') {\n      anger++\n    }\n  }\n  return anger\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_int(x-1, y-1, z-1) || any_int(x-1, y, z-1) || any_int(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_float(x-1, y-1, z-1) || any_float(x-1, y, z-1) || any_float(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_string = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_string(x-1, y-1, z-1) || any_string(x-1, y, z-1) || any_string(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_bool = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_bool(x-1, y-1, z-1) || any_bool(x-1, y, z-1) || any_bool(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_date = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_date(x-1, y-1, z-1) || any_date(x-1, y, z-1) || any_date(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_array(x-1, y-1, z-1) || any_array(x-1, y, z-1) || any_array(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_object(x-1, y-1, z-1) || any_object(x-1, y, z-1) || any_object(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_any_type = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (y === z) return true\n  if (x === 0 || y === 0 || z === 0) return false\n  return any_any_type(x-1, y-1, z-1) || any_any_type(x-1, y, z-1) || any_any_type(x-1, y-1, z)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_any_type2 = (...args) => {\n  if (args.length === 0) return false\n  return any_any_type2(...args)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_any_type3 = (...args) => {\n  if (args.length === 0) return false\n  return any_any_type3(...args)\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are non-integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      newMessage = newMessage.replace(letter, nextLetter)\n    }\n  }\n  \n  return newMessage\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const nextLetter = message[i + 1]\n    \n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let prime = primeFactors(lst[i]).length;\n    if (prime > largestPrime) {\n      largestPrime = prime;\n    }\n    sum += prime;\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([3, 2, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work for the case `[3, 2, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]`\n<|/ c |>\n<| c |>\nIt does work for the example I gave. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nThe example you gave doesn't work for the case `[3, 2, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]`\n<|/ c |>\n<| c |>\nIt does work for the example I gave. Can you give an example where it doesn't work?\n<|/ c |>\n<| c |>\nIt doesn't work for `[3, 2, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]`\n<|/ c |>\n<| a tags=javascript,primes |>\n<code>\nfunction primeFactors(n) {\n  var factors = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  return factors;\n}\n\nfunction largestPrimeFactor(n) {\n  var factors = primeFactors(n);\n  var largestPrimeFactor = factors[factors.length - 1];\n  for (var i = factors.length - 2; i >= 0; i--) {\n    if (factors[i] > largestPrimeFactor) {\n      largestPrimeFactor = factors[i];\n    }\n  }\n  return largestPrimeFactor;\n}\n\nfunction sumOfDigits(n) {\n  var sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n /= 10;\n  }\n  return sum;\n}\n\nfunction largestPrimeSum(n) {\n  var largestPrimeFactor = largestPrimeFactor(n);\n  var sumOfDigits = sumOfDigits(largestPrimeFactor);\n  return sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sumOfDigits;\n}\n\nfunction largestPrimeSumOfDigits(n) {\n  var largestPrimeSum = largestPrimeSum(n);\n  var sumOfDigits = sumOfDigits(n);\n  return largestPrimeSum + sum", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_special_chars = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_special_chars_with_spaces = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_special_chars_with_spaces_with_special_chars = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_special_chars_with_spaces_with_special_chars_with_spaces = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_special_chars_with_spaces_with_special_chars_with_spaces_with_special_chars = (dict) => {\n  if(Object.keys(dict).length === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toLowerCase()!== dict[key]) {\n        return false;\n      }\n    }\n    if(typeof dict[key] === \"string\") {\n      if(dict[key].toUpperCase()!== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let primes = [];\n  for (let i = 2; i <= n; i++) {\n    if (primes.includes(i)) {\n      continue;\n    }\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        primes.push(i);\n        break;\n      }\n    }\n  }\n  return primes;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the squares of the integers\n  in the array.\n  for example:\n  square_of_array([2,3,4]) => [4,9,16]\n  square_of_array([2,3,5,7]) => [27,49,81]\n  square_of_array([]) => []\n  square_of_array([1]) => []\n  square_of_array([2,3]) => [4,9]\n  square_of_array([2,3,5,7]) => [27,49,81,121]\n  */\nconst square_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers in the array.\n  for example:\n  sum_of_array([2,3,4]) => 6\n  sum_of_array([2,3,5,7]) => 15\n  sum_of_array([]) => 0\n  sum_of_array([1]) => 1\n  sum_of_array([2,3]) => 6\n  sum_of_array([2,3,5,7]) => 15\n  */\nconst sum_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the integers in the array.\n  for example:\n  product_of_array([2,3,4]) => 24\n  product_of_array([2,3,5,7]) => 1525\n  product_of_array([]) => 0\n  product_of_array([1]) => 1\n  product_of_array([2,3]) => 6\n  product_of_array([2,3,5,7]) => 1525\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the squares of the integers\n  in the array.\n  for example:\n  square_of_product_of_array([2,3,4]) => [8,27,64]\n  square_of_product_of_array([2,3,5,7]) => [27,49,81,121]\n  square_of_product_of_array([]) => []\n  square_of_product_of_array([1]) => []\n  square_of_product_of_array([2,3]) => [8,27]\n  square_of_product_of_array([2,3,5,7]) => [27,49,81,121]\n  */\nconst square_of_product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i] * arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the integers in the array.\n  for example:\n  sum_of_product_of_array([2,3,4]) => 24\n  sum_of_product_of_array([2,3,5,7]) => 1525\n  sum_of_product_of_array([]) => 0\n  sum_of_product_of_array([1]) => 1\n  sum_of_product_of_array([2,3]) => 24\n  sum_of_product_of_array([2,3,5,7]) => 1525\n  */\nconst sum_of_product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the squares of the integers\n  in the array.\n  for example:\n  square_of_sum_of_product_of_array([2,3,4]) => [8,27,64]\n  square_of_sum_of_product_of_array([2,3,5,7]) => [27,49,81,121]\n  square_of_sum_of_product_of_array([]) => []\n  square_of_sum_of_product_of_array([1]) => []\n  square_of_sum_of_product_of_array([2,3]) => [8,27]\n  square_of_sum_of_product_of_array([2,3,5,7]) => [27,49,81,121]\n  */\nconst square_of_sum_of_product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i] * arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the squares of the integers\n  in the array.\n  for example:\n  square_of_sum_of_array([2,3,4]) => [4,9,16]\n  square_of_sum_of_array([2,3,5,7]) => [27,49,81]\n  square_of_sum_of_array([]) => []\n  square_of_sum_of_array([1]) => []\n  square_of_sum_of_array([2,3]) => [4,9]\n  square_of_sum_of_array([2,3,5,7]) => [27,49,81,121]\n  */\nconst square_of_sum_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the sum of the integers in the array.\n  for example:\n  sum_of_sum_of_array([2,3,4]) => 6\n  sum_of_sum_of_array([2,3,5,7]) => 15\n  sum_of_sum_of_array([]) => 0\n  sum_of_sum_of_array([1]) => 1\n  sum_of_sum_of_array([2,3]) => 6\n  sum_of_sum_of_array([2,3,5,7]) => 15\n  */\nconst sum_of_sum_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the integers in the array.\n  for example:\n  product_of_sum_of_array([2,3,4]) => 24\n  product_of_sum_of_array([2,3,5,7]) => 1525\n  product_of_sum_of_array([]) => 0\n  product_of_sum_of_array([1]) => 1\n  product_of_sum_of_array([2,3]) => 24\n  product_of_sum_of_array([2,3,5,7]) => 1525\n  */\nconst product_of_sum_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the product of the squares of the integers\n  in the array.\n  for example:\n  square_of_product_of_sum_of_array([2,3,4]) => [8,27,64]\n  square_of_product_of_sum_of_array([2,3,5,7]) => [27,49,81,121]\n  square_of_product_of_sum_of_array([]) => []\n  square_of_product_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a + b - multiply(a % 10, b % 10);\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a + b + multiply(a % 10, b % 10);\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return 20.\n  */\nconst subtract = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a - b + multiply(a % 10, b % 10);\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 4.\n  divide(19, 28) should return 3.\n  divide(2020, 1851) should return 0.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a / b;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return 4.\n  remainder(19, 28) should return 3.\n  remainder(2020, 1851) should return 0.\n  remainder(14,-15) should return 0.\n  */\nconst remainder = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return a % b;\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits rounded down.\n  Assume the input is always valid.\n  Examples:\n  floor(148, 412) should return 4.\n  floor(19, 28) should return 3.\n  floor(2020, 1851) should return 0.\n  floor(14,-15) should return 0.\n  */\nconst floor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits rounded up.\n  Assume the input is always valid.\n  Examples:\n  ceil(148, 412) should return 4.\n  ceil(19, 28) should return 3.\n  ceil(2020, 1851) should return 0.\n  ceil(14,-15) should return 0.\n  */\nconst ceil = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.ceil(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded down.\n  Assume the input is always valid.\n  Examples:\n  trunc(148, 412) should return 4.\n  trunc(19, 28) should return 3.\n  trunc(2020, 1851) should return 0.\n  trunc(14,-15) should return 0.\n  */\nconst trunc = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded up.\n  Assume the input is always valid.\n  Examples:\n  trunc(148, 412) should return 4.\n  trunc(19, 28) should return 3.\n  trunc(2020, 1851) should return 0.\n  trunc(14,-15) should return 0.\n  */\nconst truncUp = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.ceil(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded down.\n  Assume the input is always valid.\n  Examples:\n  truncDown(148, 412) should return 4.\n  truncDown(19, 28) should return 3.\n  truncDown(2020, 1851) should return 0.\n  truncDown(14,-15) should return 0.\n  */\nconst truncDown = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded up.\n  Assume the input is always valid.\n  Examples:\n  truncUp(148, 412) should return 4.\n  truncUp(19, 28) should return 3.\n  truncUp(2020, 1851) should return 0.\n  truncUp(14,-15) should return 0.\n  */\nconst truncUp = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.ceil(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded down.\n  Assume the input is always valid.\n  Examples:\n  truncDown(148, 412) should return 4.\n  truncDown(19, 28) should return 3.\n  truncDown(2020, 1851) should return 0.\n  truncDown(14,-15) should return 0.\n  */\nconst truncDown = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded up.\n  Assume the input is always valid.\n  Examples:\n  truncUp(148, 412) should return 4.\n  truncUp(19, 28) should return 3.\n  truncUp(2020, 1851) should return 0.\n  truncUp(14,-15) should return 0.\n  */\nconst truncUp = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.ceil(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded down.\n  Assume the input is always valid.\n  Examples:\n  truncDown(148, 412) should return 4.\n  truncDown(19, 28) should return 3.\n  truncDown(2020, 1851) should return 0.\n  truncDown(14,-15) should return 0.\n  */\nconst truncDown = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  return Math.floor(a / b);\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits rounded up.\n  Assume the input is always valid.\n  Examples:\n  truncUp(148, 412) should return 4.\n  truncUp(19, 28) ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits('aBCdEf') returns 3\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space('a b c') returns 2\n  count_space('a b c') returns 0\n  count_space('a b c') returns 0\n  */\nconst count_space = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  count_upper_odd('aBCdEf') returns 1\n  count_upper_odd('abcdefg') returns 0\n  count_upper_odd('dBBE') returns 0\n  */\nconst count_upper_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  count_lower_odd('aBCdEf') returns 1\n  count_lower_odd('abcdefg') returns 0\n  count_lower_odd('dBBE') returns 0\n  */\nconst count_lower_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  count_digits_odd('aBCdEf') returns 3\n  count_digits_odd('abcdefg') returns 0\n  count_digits_odd('dBBE') returns 0\n  */\nconst count_digits_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in odd indices.\n  \n  For example:\n  count_space_odd('a b c') returns 2\n  count_space_odd('a b c') returns 0\n  count_space_odd('a b c') returns 0\n  */\nconst count_space_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in even indices.\n  \n  For example:\n  count_upper_even('aBCdEf') returns 1\n  count_upper_even('abcdefg') returns 0\n  count_upper_even('dBBE') returns 0\n  */\nconst count_upper_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in even indices.\n  \n  For example:\n  count_lower_even('aBCdEf') returns 1\n  count_lower_even('abcdefg') returns 0\n  count_lower_even('dBBE') returns 0\n  */\nconst count_lower_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits_even('aBCdEf') returns 3\n  count_digits_even('abcdefg') returns 0\n  count_digits_even('dBBE') returns 0\n  */\nconst count_digits_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_space_even('a b c') returns 2\n  count_space_even('a b c') returns 0\n  count_space_even('a b c') returns 0\n  */\nconst count_space_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in odd indices.\n  \n  For example:\n  count_upper_odd('aBCdEf') returns 1\n  count_upper_odd('abcdefg') returns 0\n  count_upper_odd('dBBE') returns 0\n  */\nconst count_upper_odd_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in odd indices.\n  \n  For example:\n  count_lower_odd('aBCdEf') returns 1\n  count_lower_odd('abcdefg') returns 0\n  count_lower_odd('dBBE') returns 0\n  */\nconst count_lower_odd_even = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in odd indices.\n  \n  For example:\n  count_digits_odd('aBCdEf') returns 3\n  count_digits_odd('abcdefg') returns 0\n  count_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_decimal(\"10\")\n  10\n  >>> closest_decimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_decimal(\"14.5\") should\n  return 15.3 and closest_decimal(\"-14.5\") should return -15.3\n  */\nconst closest_decimal = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
