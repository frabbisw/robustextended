{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent_no_consecutive = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent_no_consecutive = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements and no other elements.\n * Note: This is not the same as array.unique(), because array.unique() only removes consecutive duplicates\n * while this one removes consecutive duplicates and adjacent duplicates.\n * >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  true\n  >>> has_only_unique_elements([1, 1, 1, 2, 2, 3])\n  false\n  */\nconst has_only_unique_elements_no_duplicates_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent_no_consecutive_no_adjacent_no_consecutive = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = false;\n  let closed_paren_group = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group = true;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group = true;\n    } else if (char ==='' && open_brace_count === closed_paren_count) {\n      groups.push(paren_string.slice(0, i));\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char ==='' && open_brace_count > closed_paren_count) {\n      open_brace_count--;\n    } else if (char ==='' && open_brace_count < closed_paren_count) {\n      closed_paren_count--;\n    }\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = false;\n  let closed_paren_group = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group = true;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group = true;\n    } else if (char ==='' && open_brace_count === closed_paren_count) {\n      groups.push(paren_string.slice(0, i));\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char ==='' && open_brace_count > closed_paren_count) {\n      open_brace_count--;\n    } else if (char ==='' && open_brace_count < closed_paren_count) {\n      closed_paren_count--;\n    }\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = false;\n  let closed_paren_group = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group = true;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group = true;\n    } else if (char ==='' && open_brace_count === closed_paren_count) {\n      groups.push(paren_string.slice(0, i));\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char ==='' && open_brace_count > closed_paren_count) {\n      open_brace_count--;\n    } else if (char ==='' && open_brace_count < closed_paren_count) {\n      closed_paren_count--;\n    }\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = false;\n  let closed_paren_group = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group = true;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group = true;\n    } else if (char ==='' && open_brace_count === closed_paren_count) {\n      groups.push(paren_string.slice(0, i));\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char ==='' && open_brace_count > closed_paren_count) {\n      open_brace_count--;\n    } else if (char ==='' && open_brace_count < closed_paren_count) {\n      closed_paren_count--;\n    }\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let open_brace_count = 0;\n  let closed_paren_count = 0;\n  let open_brace_group = false;\n  let closed_paren_group = false;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      open_brace_group = true;\n    } else if (char === ')') {\n      closed_paren_count++;\n      closed_paren_group = true;\n    } else if (char ==='' && open_brace_count === closed_paren_count) {\n      groups.push(paren_string.slice(0, i));\n      open_brace_count = 0;\n      closed_paren_count = 0;\n    } else if (char ==='' && open_brace_count > closed_paren_count) {\n      open_brace_count--;\n    } else if (char ==='' && open_brace_count < closed_paren_count) {\n      closed_paren_count--;\n    }\n  }\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');\n  return string + postfix;\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = string.split('').reverse().join('');", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      arr.push(i);\n    } else {\n      arr.push(n - i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().filter(Boolean);\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_reverse_reverse_reverse_reverse = (s) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choose_num(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 13\n  choose_num(13, 12) = -1\n  */\nconst choose_num_odd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  return choose_num_odd(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_odd = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_odd(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return choose_num_range_even(x - 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (m / 2);\n  const binary = `${avg}`.padStart(m, '0');\n  return binary;\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const avg = n + (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2!== 0) {\n      result.push(digit);\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        result.push(digit);\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          result.push(digit);\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            result.push(digit);\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              result.push(digit);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              if (digit % 2!== 0) {\n                result.push(digit);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              if (digit % 2!== 0) {\n                if (digit % 2!== 0) {\n                  result.push(digit);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              if (digit % 2!== 0) {\n                if (digit % 2!== 0) {\n                  if (digit % 2!== 0) {\n                    result.push(digit);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result.sort();\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_odd_odd_odd_odd_odd_odd_odd_odd = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (digit % 2 === 0) {\n      if (digit % 2!== 0) {\n        if (digit % 2!== 0) {\n          if (digit % 2!== 0) {\n            if (digit % 2!== 0) {\n              if (digit % 2 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(arr[arr.length - i - 1]);\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name2 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name3 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name4 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name5 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name6 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name7 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name8 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name9 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name10 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name11 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name12 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name13 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name14 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n    }\n  }\n  \n  return result.reverse();\n};\n\nconst by_name15 = (arr) => {\n  let result = [];\n  \n  if(arr.length === 0){\n    return [];\n  }\n  \n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] >= 1 && arr[i] <= 9){\n      result.push(\"One\", \"Two", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n// TESTS\nconst tests = [\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: factorials(5) },\n  { name: 'factorials', expected: f(5), actual: ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = [];\n  const oddPalindromes = [];\n  for (let i = 1; i <= n; i++) {\n    const evenPalindrome = i.toString().split('').reverse().join('');\n    const oddPalindrome = i.toString().split('').reverse().join('');\n    if (evenPalindrome === oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    } else if (evenPalindrome!== oddPalindrome) {\n      evenPalindromes.push(i);\n      oddPalindromes.push(i);\n    }\n  }\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      count += Math.abs(arr[i]);\n    } else {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++){\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n    count++;\n  }\n  \n  if(count === 0){\n    flag = false;\n  }\n  \n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find out whether it is possible\n  to sort it in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  sort_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  sort_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst sort_one_ball = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++){\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n  }\n  \n  if(arr.length === 0){\n    flag = false;\n  }\n  \n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find out whether it is possible\n  to sort it in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  sort_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  sort_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst sort_one_ball = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++){\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n  }\n  \n  if(arr.length === 0){\n    flag = false;\n  }\n  \n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find out whether it is possible\n  to sort it in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  sort_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  sort_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst sort_one_ball = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++){\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n  }\n  \n  if(arr.length === 0){\n    flag = false;\n  }\n  \n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find out whether it is possible\n  to sort it in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to sort the array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  sort_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  sort_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst sort_one_ball = (arr) => {\n  let n = arr.length;\n  let flag = true;\n  let temp;\n  \n  for(let i = 1; i < n; i++){\n    temp = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = temp;\n  }\n  \n  if(arr.length === 0){\n    flag = false;\n  }\n  \n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find out whether it is possible\n  to sort it in non-decreasing order using only right shift operations.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '001')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '001')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '111'\n  */\nconst string_not = (a) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ 1);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('000', '001')\n  '111'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '001')\n  '111'\n  */\nconst string_and = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '001')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '111'\n  */\nconst string_not = (a) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ 1);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('000', '001')\n  '111'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '001')\n  '111'\n  */\nconst string_and = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '001')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '111'\n  */\nconst string_not = (a) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ 1);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('000', '001')\n  '111'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '001')\n  '111'\n  */\nconst string_and = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '001')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '111'\n  */\nconst string_not = (a) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ 1);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('000', '001')\n  '111'\n  */\nconst string_xor = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '001')\n  '111'\n  */\nconst string_and = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '001')\n  '111'\n  */\nconst string_or = (a, b) => {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only odd numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  \n}\n\n/*In this problem, you will implement a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[letter] = count\n    } else {\n      histogram[letter] += count\n    }\n  })\n  return histogram\n}\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {}\n  let words = test.split(' ')\n  words.forEach((word) => {\n    let letter = word[0]\n    let count = word.length\n    if (histogram[letter] == null) {\n      histogram[", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let reverse = s.split(\"\").reverse().join(\"\");\n  let result = reverse.split(\"\").filter(char => char === c).join(\"\");\n  return [result, result === reverse];\n};\n\n/*Task\n  You are given a string s and a number k. You have to find all the substrings of length k that appear in s.\n  You should return a list containing all the substrings.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be [ 'abcabc', 'bcabc' ]\n  For s = \"bbbbb\", k = 1  the result should be [ 'b' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke', 'ke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]\n  For s = \"pwwkew\", k = 3  the result should be [ 'wke' ]\n  For s = \"pwwkew\", k = 1  the result should be [ 'w' ]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"1\") {\n        odd_count++;\n      }\n    }\n  }\n  return [odd_count, \"the number of odd elements \" + odd_count + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] === \"0\") {\n        even_count++;\n      }\n    }\n  }\n  return [even_count, \"the number of even elements \" + even_count + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the sum of the digits in the\n  string i of the input.\" where all the i's should be replaced by the sum\n  of the digits in the i'th string of the input.\n\n  >>> sum_digits(['1234567'])\n  [\"the sum of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> sum_digits(['3',\"11111111\"])\n  [\"the sum of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the sum of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst sum_digits = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      sum += parseInt(str[j]);\n    }\n  }\n  return [sum, \"the sum of the digits \" + sum + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the\n  string i of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> product_digits(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> product_digits(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst product_digits = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      product *= parseInt(str[j]);\n    }\n  }\n  return [product, \"the product of the digits \" + product + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> product_digits_2(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> product_digits_2(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst product_digits_2 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      product *= parseInt(str[j]);\n    }\n  }\n  return [product, \"the product of the digits \" + product + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> product_digits_3(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> product_digits_3(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst product_digits_3 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      product *= parseInt(str[j]);\n    }\n  }\n  return [product, \"the product of the digits \" + product + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> product_digits_4(['1234567'])\n  [\"the product of the digits 4n the str4ng 4 of the 4nput.\"]\n  >>> product_digits_4(['3',\"11111111\"])\n  [\"the product of the digits 1n the str1ng 1 of the 1nput.\",\n   \"the product of the digits 8n the str8ng 8 of the 8nput.\"]\n  */\nconst product_digits_4 = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    for (let j = 0; j < str.length; j++) {\n      product *= parseInt(str[j]);\n    }\n  }\n  return [product, \"the product of the digits \" + product + \" of the \" + lst.length + \" \" + lst.join(\"\") + \".\"];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the product of the digits in the i'th\n  string of the input.\" where all the i's should be replaced by the product\n  of the digits in the i'th string of the input.\n\n  >>> product_digits_5(['1234567'])", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 6\n  max_sub_array_sum([-1, -2, -3]) == 3\n  */\nconst max_sub_array_sum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all positive integers in nums.\n  Example\n  positive_sum([2, 3, 4, 1, 2, 4]) == 10\n  positive_sum([-1, -2, -3]) == 6\n  */\nconst positive_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all negative integers in nums.\n  Example\n  negative_sum([2, 3, 4, 1, 2, 4]) == -6\n  negative_sum([-1, -2, -3]) == 3\n  */\nconst negative_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even-valued numbers in nums.\n  Example\n  even_sum([2, 3, 4, 1, 2, 4]) == 6\n  even_sum([-1, -2, -3]) == 3\n  */\nconst even_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd-valued numbers in nums.\n  Example\n  odd_sum([2, 3, 4, 1, 2, 4]) == 3\n  odd_sum([-1, -2, -3]) == -6\n  */\nconst odd_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2!== 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 3.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 6\n  divisible_sum([-1, -2, -3]) == 3\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 3 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 5.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 5 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 7.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 7 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 11.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 11 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 15.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 15 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 17.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 17 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 19.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 19 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 21.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 21 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 23.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 23 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 25.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 25 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible by 27.\n  Example\n  divisible_sum([2, 3, 4, 1, 2, 4]) == 3\n  divisible_sum([-1, -2, -3]) == -6\n  */\nconst divisible_sum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 27 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all integers in nums that are divisible ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    const n = grid.length;\n    const m = grid[0].length;\n    const bucket = new Array(capacity).fill(0);\n    \n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                bucket[grid[i][j]] += 1;\n            }\n        }\n    }\n    \n    let count = 0;\n    for (let i = 0; i < bucket.length; i++) {\n        if (bucket[i] === 0) {\n            count += 1;\n        }\n    }\n    \n    return count;\n};\n\nconst max_fill_test = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = 6;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_2 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = 5;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_3 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = 0;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_4 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_5 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_6 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_7 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_8 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_9 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_10 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_11 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_12 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_13 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_14 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_15 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_16 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_17 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_18 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_19 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_20 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_21 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_22 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_23 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_24 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_25 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_26 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_27 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill test result:', actual);\n    console.assert(actual === expected);\n};\n\nconst max_fill_test_28 = (grid, capacity) => {\n    const actual = max_fill(grid, capacity);\n    const expected = -1;\n    \n    console.log('Max fill ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests\nconst tests = [\n  { name:'sort_array', test: sort_array },\n];\n\n// Run tests\ntests.forEach((test) => {\n  console.log(`\\n${test.name}`);\n  console.log(test.test(sort_array([1, 5, 2, 3, 4]));\n  console.log(test.test(sort_array([-2, -3, -4, -5, -6]));\n  console.log(test.test(sort_array([1, 0, 2, 3, 4]));\n});</code>\n<|/ a tags=javascript,sorting |>\n<| c |>\nThis doesn't work if the array is `[1, 1, 2, 1]`\n<|/ c |>\n<| c |>\nIt works. `[1, 1, 2, 1]` returns `[1, 2, 1, 1]`\n<|/ c |>\n<| c |>\nYes, it works. But it also returns `[1, 2, 1, 1]` for `[1, 1, 2, 1]`\n<|/ c |>\n<| c |>\nYes, it works. But it also returns `[1, 2, 1, 1]` for `[1, 1, 2, 1]`\n<|/ c |>\n<| c |>\nYes, it works. But it also returns `[1, 2, 1, 1]` for `[1, 1, 2, 1]`\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests\nconst tests = [\n  { name:'sort_array', test: sort_array },\n];\n\n// Run tests\ntests.forEach((test) => {\n  console.log(`\\n${test.name}`);\n  console.log(test.test(sort_array([1, 5, 2, 3, 4]));\n  console.log(test.test(sort_array([-2, -3, -4, -5, -6]));\n  console.log(test.test(sort_array([1, 0, 2, 3, 4]));\n});</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=1 |>\n<code>\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests\nconst tests = [\n  { name:'sort_array', test: sort_array },\n];\n\n// Run tests\ntests.forEach((test) => {\n  console.log(`\\n${test.name}`);\n  console.log(test.test(sort_array([1, 5, 2, 3, 4]));\n  console.log(test.test(sort_array([-2, -3, -4, -5, -6]));\n  console.log(test.test(sort_array([1, 0, 2, 3, 4]));\n});</code>\n<|/ a tags=javascript,sorting |>\n<| a dscore=0 |>\n<code>\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests\nconst tests = [\n  { name:'sort_array', test: sort_array },\n];\n\n// Run tests\ntests.forEach((test) => {\n  console.log(`\\n${test.name}`);\n  console.log(test.test(sort_array([1, 5, 2, 3, 4]));\n  console.log(test.test(sort_array([-2, -3, -4, -5, -6]));\n  console.log(test.test(sort_array([1, 0, 2, 3, 4]));\n});</code>\n<|/ a tags=javascript,sorting |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,sorting |>\n<code>\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests\nconst tests = [\n  { name:'sort_array', test: sort_array },\n];\n\n// Run tests\ntests.forEach((test) => {\n  console.log(`\\n${test.name}`);\n  console.log(test.test(sort_array([1, 5, 2, 3, 4]));\n  console.log(test.test(sort_array([-2, -3, -4, -5, -6]));\n  console.log(test.test(sort_array([1, 0, 2, 3, 4]));\n});</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation of what your code does and how it solves the problem of the question. Answers with an explanation are usually more helpful and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=javascript,sorting |>\n<code>\nconst sort_array = (arr) => {\n  const len = arr.length;\n  if (len < 2) return arr;\n  const ones = arr.filter((x) => x === 1);\n  const dec = ones.length? ones.length - 1 : 0;\n  const sorted = arr.sort((a, b) => {\n    if (a === 1 && b === 0) return -1;\n    if (a === 0 && b === 1) return 1;\n    if (a === 0) return 0;\n    if (b === 0) return 0;\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return dec;\n  });\n  return sorted;\n};\n\n// Tests", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(0, i + 1));\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(0, i + 1));\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(0, i + 1));\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(0, i + 1));\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(0, i + 1));\n    }\n  }\n  \n  return words;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let words = [];\n  \n  if(s.length === 0) {\n    return words;\n  }\n  \n  for(let i = 0; i < s.length; i++) {\n    let letter = s[i];\n    \n    if(letter ==='' || letter === '\\n') {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === -1) {\n      continue;\n    }\n    \n    if(s.indexOf(letter, i + 1) === s.length - 1) {\n      words.push(s.substr(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = [];\n  let vowelsIndexCount = 0;\n  let vowelsIndexCount2 = 0;\n  let vowelsIndexCount3 = 0;\n  let vowelsIndexCount4 = 0;\n  let vowelsIndexCount5 = 0;\n  let vowelsIndexCount6 = 0;\n  let vowelsIndexCount7 = 0;\n  let vowelsIndexCount8 = 0;\n  let vowelsIndexCount9 = 0;\n  let vowelsIndexCount10 = 0;\n  let vowelsIndexCount11 = 0;\n  let vowelsIndexCount12 = 0;\n  let vowelsIndexCount13 = 0;\n  let vowelsIndexCount14 = 0;\n  let vowelsIndexCount15 = 0;\n  let vowelsIndexCount16 = 0;\n  let vowelsIndexCount17 = 0;\n  let vowelsIndexCount18 = 0;\n  let vowelsIndexCount19 = 0;\n  let vowelsIndexCount20 = 0;\n  let vowelsIndexCount21 = 0;\n  let vowelsIndexCount22 = 0;\n  let vowelsIndexCount23 = 0;\n  let vowelsIndexCount24 = 0;\n  let vowelsIndexCount25 = 0;\n  let vowelsIndexCount26 = 0;\n  let vowelsIndexCount27 = 0;\n  let vowelsIndexCount28 = 0;\n  let vowelsIndexCount29 = 0;\n  let vowelsIndexCount30 = 0;\n  let vowelsIndexCount31 = 0;\n  let vowelsIndexCount32 = 0;\n  let vowelsIndexCount33 = 0;\n  let vowelsIndexCount34 = 0;\n  let vowelsIndexCount35 = 0;\n  let vowelsIndexCount36 = 0;\n  let vowelsIndexCount37 = 0;\n  let vowelsIndexCount38 = 0;\n  let vowelsIndexCount39 = 0;\n  let vowelsIndexCount40 = 0;\n  let vowelsIndexCount41 = 0;\n  let vowelsIndexCount42 = 0;\n  let vowelsIndexCount43 = 0;\n  let vowelsIndexCount44 = 0;\n  let vowelsIndexCount45 = 0;\n  let vowelsIndexCount46 = 0;\n  let vowelsIndexCount47 = 0;\n  let vowelsIndexCount48 = 0;\n  let vowelsIndexCount49 = 0;\n  let vowelsIndexCount50 = 0;\n  let vowelsIndexCount51 = 0;\n  let vowelsIndexCount52 = 0;\n  let vowelsIndexCount53 = 0;\n  let vowelsIndexCount54 = 0;\n  let vowelsIndexCount55 = 0;\n  let vowelsIndexCount56 = 0;\n  let vowelsIndexCount57 = 0;\n  let vowelsIndexCount58 = 0;\n  let vowelsIndexCount59 = 0;\n  let vowelsIndexCount60 = 0;\n  let vowelsIndexCount61 = 0;\n  let vowelsIndexCount62 = 0;\n  let vowelsIndexCount63 = 0;\n  let vowelsIndexCount64 = 0;\n  let vowelsIndexCount65 = 0;\n  let vowelsIndexCount66 = 0;\n  let vowelsIndexCount67 = 0;\n  let vowelsIndexCount68 = 0;\n  let vowelsIndexCount69 = 0;\n  let vowelsIndexCount70 = 0;\n  let vowelsIndexCount71 = 0;\n  let vowelsIndexCount72 = 0;\n  let vowelsIndexCount73 = 0;\n  let vowelsIndexCount74 = 0;\n  let vowelsIndexCount75 = 0;\n  let vowelsIndexCount76 = 0;\n  let vowelsIndexCount77 = 0;\n  let vowelsIndexCount78 = 0;\n  let vowelsIndexCount79 = 0;\n  let vowelsIndexCount80 = 0;\n  let vowelsIndexCount81 = 0;\n  let vowelsIndexCount82 = 0;\n  let vowelsIndexCount83 = 0;\n  let vowelsIndexCount84 = 0;\n  let vowelsIndexCount85 = 0;\n  let vowelsIndexCount86 = 0;\n  let vowelsIndexCount87 = 0;\n  let vowelsIndexCount88 = 0;\n  let vowelsIndexCount89 = 0;\n  let vowelsIndexCount90 = 0;\n  let vowelsIndexCount91 = 0;\n  let vowelsIndexCount92 = 0;\n  let vowelsIndexCount93 = 0;\n  let vowelsIndexCount94 = 0;\n  let vowelsIndexCount95 = 0;\n  let vowelsIndexCount96 = 0;\n  let vowelsIndexCount97 = 0;\n  let vowelsIndexCount98 = 0;\n  let vowelsIndexCount99 = 0;\n  let vowelsIndexCount100 = 0;\n  let vowelsIndexCount101 = 0;\n  let vowelsIndexCount102 = 0;\n  let vowelsIndexCount103 = 0;\n  let vowelsIndexCount104 = 0;\n  let vowelsIndexCount105 = 0;\n  let vowelsIndexCount106 = 0;\n  let vowelsIndexCount107 = 0;\n  let vowelsIndexCount108 = 0;\n  let vowelsIndexCount109 = 0;\n  let vowelsIndexCount110 = 0;\n  let vowelsIndexCount111 = 0;\n  let vowelsIndexCount112 = 0;\n  let vowelsIndexCount113 = 0;\n  let vowelsIndexCount114 = 0;\n  let vowelsIndexCount115 = 0;\n  let vowelsIndexCount116 = 0;\n  let vowelsIndexCount117 = 0;\n  let vowelsIndexCount118 = 0;\n  let vowelsIndexCount119 = 0;\n  let vowelsIndexCount120 = 0;\n  let vowelsIndexCount121 = 0;\n  let vowelsIndexCount122 = 0;\n  let vowelsIndexCount123 = 0;\n  let vowelsIndexCount124 = 0;\n  let vowelsIndexCount125 = 0;\n  let vowelsIndexCount126 = 0;\n  let vowelsIndexCount127 = 0;\n  let vowelsIndexCount128 = 0;\n  let vowelsIndexCount129 = 0;\n  let vowelsIndexCount130 = 0;\n  let vowelsIndexCount131 = 0;\n  let vowelsIndexCount132 = 0;\n  let vowelsIndexCount133 = 0;\n  let vowelsIndexCount134 = 0;\n  let vowelsIndexCount135 = 0;\n  let vowelsIndexCount136 = 0;\n  let vowelsIndexCount137 = 0;\n  let vowelsIndexCount138 = 0;\n  let vowelsIndexCount139 = 0;\n  let vowelsIndexCount140 = 0;\n  let vowelsIndexCount141 = 0;\n  let vowelsIndexCount142 = 0;\n  let vowelsIndexCount143 = 0;\n  let vowelsIndexCount144 = 0;\n  let vowelsIndexCount145 = 0;\n  let vowelsIndexCount146 = 0;\n  let vowelsIndexCount147 = 0;\n  let vowelsIndexCount148 = 0;\n  let vowelsIndexCount149 = 0;\n  let vowelsIndexCount150 = 0;\n  let vowelsIndexCount151 = 0;\n  let vowelsIndexCount152 = 0;\n  let vowelsIndexCount153 = 0;\n  let vowelsIndexCount154 = 0;\n  let vowelsIndexCount155 = 0;\n  let vowelsIndexCount156 = 0;\n  let vowelsIndexCount157 = 0;\n  let vowelsIndexCount158 = 0;\n  let vowelsIndexCount159 = 0;\n  let vowelsIndexCount160 = 0;\n  let vowelsIndexCount161 = 0;\n  let vowelsIndexCount162 = 0;\n  let vowelsIndexCount163 = 0;\n  let vowelsIndexCount164 = 0;\n  let vowelsIndexCount165 = 0;\n  let vowelsIndexCount166 = 0;\n  let vowelsIndexCount167 = 0;\n  let vowelsIndexCount168 = 0;\n  let vowelsIndexCount169 = 0;\n  let vowelsIndexCount170 = 0;\n  let vowelsIndexCount171 = 0;\n  let vowelsIndexCount172 = 0;\n  let ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'No'\n  */\nconst match_parens = (lst, str) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'No'\n  */\nconst match_parens = (lst, str) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'No'\n  */\nconst match_parens = (lst, str) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'No'\n  */\nconst match_parens = (lst, str) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'Yes'\n  match_parens('(())', '(()()()()()()()())') == 'No'\n  */\nconst match_parens = (lst, str) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(i);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top === i) {\n        return 'Yes';\n      }\n    }\n  }\n  return 'No';\n};\n\n/* You are given a string S and a string T, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to find out if there is a way to concatenate the two strings\n  such that they will produce a substring T of S.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens('(())', '()') == 'Yes'\n  match_parens('(())', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.reduce((longest, str) => {\n    return str.length > longest.length? str : longest\n  }, '')\n}\n\n/**\n * Given a string, return the first character of the string\n * If no string given, return null\n * >>> first('a')\n  'a'\n  >>> first('')\n  null\n  */\nconst first = (str) => {\n  return str? str[0] : null\n}\n\n/**\n * Given a string, return the last character of the string\n * If no string given, return null\n * >>> last('a')\n  'a'\n  >>> last('')\n  null\n  */\nconst last = (str) => {\n  return str? str[str.length - 1] : null\n}\n\n/**\n * Given a string, return the string without the first character\n * If no string given, return null\n * >>> removeFirst('a')\n  'a'\n  >>> removeFirst('')\n  null\n  */\nconst removeFirst = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string without the last character\n * If no string given, return null\n * >>> removeLast('a')\n  'a'\n  >>> removeLast('')\n  null\n  */\nconst removeLast = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first character removed\n * If no string given, return null\n * >>> removeFirst('a')\n  'a'\n  >>> removeFirst('')\n  null\n  */\nconst removeFirstChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the last character removed\n * If no string given, return null\n * >>> removeLast('a')\n  'a'\n  >>> removeLast('')\n  null\n  */\nconst removeLastChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstChar('a')\n  'a'\n  >>> removeFirstChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastChar('a')\n  'a'\n  >>> removeLastChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirstChar('a')\n  'a'\n  >>> removeLastAndFirstChar('')\n  null\n  */\nconst removeLastAndFirstChar = (str) => {\n  return str? str.slice(0, -1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeFirstAndLastChar('a')\n  'a'\n  >>> removeFirstAndLastChar('')\n  null\n  */\nconst removeFirstAndLastChar = (str) => {\n  return str? str.slice(1) : null\n}\n\n/**\n * Given a string, return the string with the first and last characters removed\n * If no string given, return null\n * >>> removeLastAndFirst", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const result = [];\n  const max = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (max[i] < arr[i]) {\n      max[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(max[i]);\n    }\n  }\n  return result;\n};\n\nexport { maximum, maximumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  const result = [];\n  const min = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (min[i] > arr[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (min[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(min[i]);\n    }\n  }\n  return result;\n};\n\nexport { minimum, minimumSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst largest = (arr, k) => {\n  const result = [];\n  const max = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (max[i] < arr[i]) {\n      max[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(max[i]);\n    }\n  }\n  return result;\n};\n\nexport { largest, largestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, 4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst smallest = (arr, k) => {\n  const result = [];\n  const min = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (min[i] > arr[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (min[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(min[i]);\n    }\n  }\n  return result;\n};\n\nexport { smallest, smallestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and smallest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 2\n      Output: [-1, -2, -1]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargest = (arr, k) => {\n  const result = [];\n  const max = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (max[i] < arr[i]) {\n      max[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(max[i]);\n    }\n  }\n  return result;\n};\n\nexport { kthLargest, kthLargestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k smallest and largest numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 2\n      Output: [-1, -2, -1]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthSmallest = (arr, k) => {\n  const result = [];\n  const min = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (min[i] > arr[i]) {\n      min[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (min[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(min[i]);\n    }\n  }\n  return result;\n};\n\nexport { kthSmallest, kthSmallestSorted };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the k largest and smallest numbers in arr in descending order.\n\n  Example 1:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 2\n      Output: [-1, -2, -1]\n\n  Example 2:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -1]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst kthLargestDescending = (arr, k) => {\n  const result = [];\n  const max = new Array(k).fill(0);\n  for (let i = 0; i < arr.length; i++) {\n    if (max[i] < arr[i]) {\n      max[i] = arr[i];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    if (max[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(max[i]);\n    }\n  }\n  return result;\n};\n\nexport { kthLargestDescend", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that do not appear in that list. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(i) === -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> [13, 24]\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(i)!== -1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly once. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [8]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i]) === i) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly twice. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly thrice. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly four times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly five times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly six times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4 && lst.indexOf(lst[i])!== i + 5) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly seven times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4 && lst.indexOf(lst[i])!== i + 5 && lst.indexOf(lst[i])!== i + 6) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly eight times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, 8, 7, 1]\n  solution([3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3]\n  solution([30, 13, 24, 321]) ==> []\n  */\nconst solution = (lst) => {\n  let newList = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst.indexOf(lst[i])!== i && lst.indexOf(lst[i])!== i + 1 && lst.indexOf(lst[i])!== i + 2 && lst.indexOf(lst[i])!== i + 3 && lst.indexOf(lst[i])!== i + 4 && lst.indexOf(lst[i])!== i + 5 && lst.indexOf(lst[i])!== i + 6 && lst.indexOf(lst[i])!== i + 7) {\n      newList.push(lst[i]);\n    }\n  }\n  return newList;\n};\n\n/*Given a non-empty list of integers, return a new list containing only the elements that appear in that list exactly nine times. \n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> [5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 2\n      Output: [7,15]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(k).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 3\n      Output: [7,15,21]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 4\n      Output: [7,15,21,27]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 5\n      Output: [7,15,21,27,33,41]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 6\n      Output: [7,15,21,27,33,41,49]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).filter((el) => el > 9).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 7\n      Output: [7,15,21,27,33,41,49,55]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).filter((el) => el > 9).filter((el) => el < 100).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 8\n      Output: [7,15,21,27,33,41,49,55,61]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter_with_filter_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).filter((el) => el > 9).filter((el) => el < 100).filter((el) => el > 99).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 9\n      Output: [7,15,21,27,33,41,49,55,61,67]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter_with_filter_with_filter_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).filter((el) => el > 9).filter((el) => el < 100).filter((el) => el > 99).filter((el) => el < 1000).reduce((acc, curr) => acc + curr, sum);\n};\n\n/*\n  Given a non-empty array of integers arr, return a new array\n  consisting of the sum of the elements in the array, except the\n  first k elements.\n\n  Example:\n\n      Input: arr = [1,2,3,4,5,6,7], k = 10\n      Output: [7,15,21,27,33,41,49,55,61,67,73]\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst sum_except_first_k_with_filter_with_filter_with_filter_with_filter_with_filter_with_filter_with_filter = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return arr.slice(0, k).filter((el) => el > 0).filter((el) => el < 10).filter((el) => el > 9).filter((el) => el < 100).filter((el) => el > 99).filter((el) => el < 1000).filter((el) => el > 999).reduce((acc, curr) => ac", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let prev_term = 1\n  let next_term = 1\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n  }\n\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev_term = 1\n  let next_term = 1\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      even_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n  }\n\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev_term = 1\n  let next_term = 1\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      even_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n  }\n\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_list = []\n  let prev_term = 1\n  let next_term = 1\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      even_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n  }\n\n  return even_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_list = []\n  let prev_term = 1\n  let next_term = 1\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      odd_list.push(prev_term)\n      prev_term = next_term\n      next_term = prev_term * 2 + 1\n    } else {\n      odd_list.push(next_term)\n      prev_term = next_term\n      next_term = prev_term * 3 + 1\n    }\n  }\n\n  return odd_list\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  let dateArray = date.split('-');\n  if(dateArray.length!== 3){\n    return false;\n  }\n  if(dateArray[0].length < 1 || dateArray[0].length > 2){\n    return false;\n  }\n  if(dateArray[1].length < 1 || dateArray[1].length > 2){\n    return false;\n  }\n  if(dateArray[2].length < 1 || dateArray[2].length > 4){\n    return false;\n  }\n  if(dateArray[0] > 12 || dateArray[0] < 1){\n    return false;\n  }\n  if(dateArray[1] > 12 || dateArray[1] < 1){\n    return false;\n  }\n  if(dateArray[2] > 31 || dateArray[2] < 1){\n    return false;\n  }\n  if(dateArray[1] === dateArray[2]){\n    if(dateArray[0] > dateArray[2]){\n      return false;\n    }\n  }\n  return true;\n}\n\n/*You have to write a function which returns the number of days between two dates. \n  If the dates are invalid then return -1.\n  If the dates are valid then return the number of days.\n  \n  For example: \n  days_between('03-11-2000', '15-01-2012') => 29\n\n  days_between('04-0-2040', '06-04-2020') => 29\n\n  days_between('06/04/2020', '06/04/2020') => 0\n  */\nconst days_between = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if(dateArray1.length!== 3){\n    return -1;\n  }\n  if(dateArray2.length!== 3){\n    return -1;\n  }\n  if(dateArray1[0] > 12 || dateArray1[0] < 1){\n    return -1;\n  }\n  if(dateArray1[1] > 12 || dateArray1[1] < 1){\n    return -1;\n  }\n  if(dateArray1[2] > 31 || dateArray1[2] < 1){\n    return -1;\n  }\n  if(dateArray2[0] > 12 || dateArray2[0] < 1){\n    return -1;\n  }\n  if(dateArray2[1] > 12 || dateArray2[1] < 1){\n    return -1;\n  }\n  if(dateArray2[2] > 31 || dateArray2[2] < 1){\n    return -1;\n  }\n  if(dateArray1[1] === dateArray2[1] && dateArray1[0] === dateArray2[0]){\n    if(dateArray1[2] > dateArray2[2]){\n      return -1;\n    }\n  }\n  return dateArray1[2] - dateArray2[2];\n}\n\n/*You have to write a function which returns the number of months between two dates. \n  If the dates are invalid then return -1.\n  If the dates are valid then return the number of months.\n  \n  For example: \n  months_between('03-11-2000', '15-01-2012') => 12\n\n  months_between('04-0-2040', '06-04-2020') => 12\n\n  months_between('06/04/2020', '06/04/2020') => 0\n  */\nconst months_between = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if(dateArray1.length!== 3){\n    return -1;\n  }\n  if(dateArray2.length!== 3){\n    return -1;\n  }\n  if(dateArray1[0] > 12 || dateArray1[0] < 1){\n    return -1;\n  }\n  if(dateArray1[1] > 12 || dateArray1[1] < 1){\n    return -1;\n  }\n  if(dateArray1[2] > 31 || dateArray1[2] < 1){\n    return -1;\n  }\n  if(dateArray2[0] > 12 || dateArray2[0] < 1){\n    return -1;\n  }\n  if(dateArray2[1] > 12 || dateArray2[1] < 1){\n    return -1;\n  }\n  if(dateArray2[2] > 31 || dateArray2[2] < 1){\n    return -1;\n  }\n  if(dateArray1[1] === dateArray2[1] && dateArray1[0] === dateArray2[0]){\n    if(dateArray1[2] > dateArray2[2]){\n      return -1;\n    }\n  }\n  return dateArray1[1] - dateArray2[1];\n}\n\n/*You have to write a function which returns the number of years between two dates. \n  If the dates are invalid then return -1.\n  If the dates are valid then return the number of years.\n  \n  For example: \n  years_between('03-11-2000', '15-01-2012') => 12\n\n  years_between('04-0-2040', '06-04-2020') => 12\n\n  years_between('06/04/2020', '06/04/2020') => 0\n  */\nconst years_between = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if(dateArray1.length!== 3){\n    return -1;\n  }\n  if(dateArray2.length!== 3){\n    return -1;\n  }\n  if(dateArray1[0] > 12 || dateArray1[0] < 1){\n    return -1;\n  }\n  if(dateArray1[1] > 12 || dateArray1[1] < 1){\n    return -1;\n  }\n  if(dateArray1[2] > 31 || dateArray1[2] < 1){\n    return -1;\n  }\n  if(dateArray2[0] > 12 || dateArray2[0] < 1){\n    return -1;\n  }\n  if(dateArray2[1] > 12 || dateArray2[1] < 1){\n    return -1;\n  }\n  if(dateArray2[2] > 31 || dateArray2[2] < 1){\n    return -1;\n  }\n  if(dateArray1[1] === dateArray2[1] && dateArray1[0] === dateArray2[0]){\n    if(dateArray1[2] > dateArray2[2]){\n      return -1;\n    }\n  }\n  return dateArray1[2] - dateArray2[2];\n}\n\n/*You have to write a function which returns the number of days between two dates. \n  If the dates are invalid then return -1.\n  If the dates are valid then return the number of days.\n  \n  For example: \n  days_between('03-11-2000', '15-01-2012') => 29\n\n  days_between('04-0-2040', '06-04-2020') => 29\n\n  days_between('06/04/2020', '06/04/2020') => 0\n  */\nconst days_between = (date1, date2) => {\n  let dateArray1 = date1.split('-');\n  let dateArray2 = date2.split('-');\n  if(dateArray1.length!== 3){\n    return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_2 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_3 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_4 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_5 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_6 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_7 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_8 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_9 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_10 = (txt) => {\n  const words = txt.trim().split(/\\s+/);\n  return words.filter(word => word);\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_word", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted_desc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted_desc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted_desc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_asc([5]) ➞ false\n  is_sorted_asc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_asc([1, 3, 2, 4, 5]) ➞ false\n  is_sorted_asc([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted_asc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted_asc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted_asc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_asc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted_desc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  const sorted = [...new Set(lst)].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted_desc([5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted_desc([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted_desc([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted_desc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 2, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted_desc([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start\n  if (length === 0) {\n    return \"NO\"\n  }\n  if (length == 1) {\n    return \"YES\"\n  }\n  if (length == 2) {\n    if (start1 <= start2 && end1 >= end2) {\n      return \"YES\"\n    }\n    return \"NO\"\n  }\n  if (length == 3) {\n    if (start1 <= start2 && end1 >= end2) {\n      if (start1 <= start2 && end1 <= end2) {\n        return \"YES\"\n      }\n    }\n    return \"NO\"\n  }\n  if (length == 4) {\n    if (start1 <= start2 && end1 >= end2) {\n      if (start1 <= start2 && end1 <= end2) {\n        if (start1 <= start2 && end1 <= end2) {\n          if (start1 <= start2 && end1 <= end2) {\n            if (start1 <= start2 && end1 <= end2) {\n              if (start1 <= start2 && end1 <= end2) {\n                if (start1 <= start2 && end1 <= end2) {\n                  if (start1 <= start2 && end1 <= end2) {\n                    if (start1 <= start2 && end1 <= end2) {\n                      if (start1 <= start2 && end1 <= end2) {\n                        if (start1 <= start2 && end1 <= end2) {\n                          if (start1 <= start2 && end1 <= end2) {\n                            if (start1 <= start2 && end1 <= end2) {\n                              if (start1 <= start2 && end1 <= end2) {\n                                if (start1 <= start2 && end1 <= end2) {\n                                  if (start1 <= start2 && end1 <= end2) {\n                                    if (start1 <= start2 && end1 <= end2) {\n                                      if (start1 <= start2 && end1 <= end2) {\n                                        if (start1 <= start2 && end1 <= end2) {\n                                          if (start1 <= start2 && end1 <= end2) {\n                                            if (start1 <= start2 && end1 <= end2) {\n                                              if (start1 <= start2 && end1 <= end2) {\n                                                if (start1 <= start2 && end1 <= end2) {\n                                                  if (start1 <= start2 && end1 <= end2) {\n                                                    if (start1 <= start2 && end1 <= end2) {\n                                                      if (start1 <= start2 && end1 <= end2) {\n                                                        if (start1 <= start2 && end1 <= end2) {\n                                                          if (start1 <= start2 && end1 <= end2) {\n                                                            if (start1 <= start2 && end1 <= end2) {\n                                                              if (start1 <= start2 && end1 <= end2) {\n                                                                if (start1 <= start2 && end1 <= end2) {\n                                                                  if (start1 <= start2 && end1 <= end2) {\n                                                                    if (start1 <= start2 && end1 <= end2) {\n                                                                      if (start1 <= start2 && end1 <= end2) {\n                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                            if (start1 <= start2 && end1 <= end2) {\n                                                                              if (start1 <= start2 && end1 <= end2) {\n                                                                                if (start1 <= start2 && end1 <= end2) {\n                                                                                  if (start1 <= start2 && end1 <= end2) {\n                                                                                    if (start1 <= start2 && end1 <= end2) {\n                                                                                      if (start1 <= start2 && end1 <= end2) {\n                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                            if (start1 <= start2 && end1 <= end2) {\n                                                                                              if (start1 <= start2 && end1 <= end2) {\n                                                                                                if (start1 <= start2 && end1 <= end2) {\n                                                                                                  if (start1 <= start2 && end1 <= end2) {\n                                                                                                    if (start1 <= start2 && end1 <= end2) {\n                                                                                                      if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start1 <= start2 && end1 <= end2) {\n                                                                                                          if (start1 <= start2 && end1 <= end2) {\n                                                                                                        if (start", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) return null\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(i)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const dfs = (i, j) => {\n    if (visited[i] === false && visited[j] === false) {\n      M[i] = Math.min([M[i], M[j]]);\n      visited[i] = true;\n      visited[j] = true;\n      ans.push(grid[i][j]);\n      dfs(i - 1, j);\n      dfs(i + 1, j);\n      dfs(i, j - 1);\n      dfs(i, j + 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[i] === M[j]) {\n        dfs(i, j);\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the maximum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the maximum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [9, 8, 7]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [9]\n  */\nconst max_path = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const dfs = (i, j) => {\n    if (visited[i] === false && visited[j] === false) {\n      M[i] = Math.max([M[i], M[j]]);\n      visited[i] = true;\n      visited[j] = true;\n      ans.push(grid[i][j]);\n      dfs(i - 1, j);\n      dfs(i + 1, j);\n      dfs(i, j - 1);\n      dfs(i, j + 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[i] === M[j]) {\n        dfs(i, j);\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path_2 = (grid, k) => {\n  const N = grid.length;\n  const M = new Array(N).fill(0);\n  const visited = new Array(N).fill(false);\n  const ans = [];\n  const dfs = (i, j) => {\n    if (visited[i] === false && visited[j] === false) {\n      M[i] = Math.min([M[i], M[j]]);\n      visited[i] = true;\n      visited[j] = true;\n      ans.push(grid[i][j]);\n      dfs(i - 1, j);\n      dfs(i + 1, j);\n      dfs(i, j - 1);\n      dfs(i, j + 1);\n    }\n  };\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      if (M[i] === M[j]) {\n        dfs(i, j);\n      }\n    }\n  }\n  return ans;\n};\n\n/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the maximum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) return a;\n  return greatest_common_divisor(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> least_common_multiple(6, 4)\n  24\n  >>> least_common_multiple(6, 12)\n  48\n  */\nconst least_common_multiple = (a, b) => {\n  if (b === 0) return a;\n  return least_common_multiple(b, a % b);\n};\n\n/* Return the least common multiple of two integers a and b\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    for (let i = 2; i <= n; i++) {\n      arr.push((i + 1) + (n / 2));\n    }\n  } else {\n    for (let i = 3; i <= n; i++) {\n      arr.push((i - 1) + (n - 1) + (i + 1));\n    }\n  }\n  return arr;\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  Fibonacci number.\n  Examples:\n  fib(3) = 1\n  fib(5) = 5\n  fib(10) = 55\n  fib(13) = 13\n  fib(20) = 6765\n  fib(100) = 6765\n*/\nconst fib = (n) => {\n  let arr = [];\n  arr.push(1);\n  if (n === 1) {\n    return arr[0];\n  }\n  arr.push(1);\n  if (n === 2) {\n    return arr[1];\n  }\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2]);\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime = (n) => {\n  let arr = [];\n  arr.push(2);\n  if (n === 2) {\n    return arr[0];\n  }\n  for (let i = 3; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  return arr[n];\n};\n\n/*\n  Write a function that takes a positive integer number n and returns the nth \n  prime number.\n  Examples:\n  prime(3) = 2\n  prime(5) = 3\n  prime(10) = 11\n  prime(13) = 13\n  prime(20) = 23\n  prime(100) = 99\n*/\nconst prime", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i -= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i -= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the odd digits multiplied by the \n  number of times each digit appears in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 4\n  digits(235) == 10\n  */\nconst digitSumOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigitsOfDigits = (num) => {\n  let sum = 0;\n  for (let i = num; i > 0; i -= 2) {\n    sum += digitSumOfDigitsOfDigitsOfDigits(i);\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by the \n  number of times each digit appears in the number.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const brackets = string.match(/\\[.*?\\]/g);\n  return brackets!== null;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') �", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum_numbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_squares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_squares_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_squares_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares_numbers_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 36\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 0\n  */\nconst product_numbers_squares_numbers_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_letter = last_char.match(/[a-z]/i);\n  return!is_letter;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a digit, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_digit = last_char.match(/[0-9]/);\n  return!is_digit;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_space = last_char.match(/\\s/);\n  return!is_space;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a symbol, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_symbol(\"apple pie\") ➞ false\n  check_if_last_char_is_a_symbol(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_symbol(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_symbol(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_symbol = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_symbol = last_char.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/);\n  return!is_symbol;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_punctuation(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_punctuation = last_char.match(/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/);\n  return!is_punctuation;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit, or space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_word = last_char.match(/[a-z0-9 ]/i);\n  return!is_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit, or space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_word = last_char.match(/[a-z0-9 ]/i);\n  return!is_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit, or space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_word = last_char.match(/[a-z0-9 ]/i);\n  return!is_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit, or space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_word = last_char.match(/[a-z0-9 ]/i);\n  return!is_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit, or space, and false otherwise.\n  Examples:\n  check_if_last_char_is_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_word = last_char.match(/[a-z0-9 ]/i);\n  return!is_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let maxIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 1\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let minIndex = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*Create a function which returns the index of the first occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let firstIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[0]) {\n      firstIndex = i;\n    }\n  }\n  return firstIndex;\n};\n\n/*Create a function which returns the index of the last occurrence of\n  the element in the given array. If there is no such element then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 5\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let lastIndex = -1;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === arr[arr.length - 1]) {\n      lastIndex = i;\n    }\n  }\n  return lastIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let diff = arr[i] - arr[0];\n    if (diff < closestDiff) {\n      closestIndex = i;\n      closestDiff = diff;\n    }\n  }\n  return closestIndex;\n};\n\n/*Create a function which returns the index of the element in the given\n  array which is closest to the given number. If there is no such element\n  then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let closestIndex = -1;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < arr.length; i++) {\n    let ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.max(...negative), Math.min(...positive);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (1, null)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter(x => x > 0);\n  const negative = lst.filter(x => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    return Math.min(...positive), Math.max(...negative);\n  }\n  return null;\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return null\n  if (b === undefined) return null\n  if (a === \"\") return null\n  if (b === \"\") return null\n  if (a === \".\") return null\n  if (b === \".\") return null\n  if (a === \",\") return null\n  if (b === \",\") return null\n  if (a === \".0\") return null\n  if (b === \".0\") return null\n  if (a === \".1\") return null\n  if (b === \".1\") return null\n  if (a === \".2\") return null\n  if (b === \".2\") return null\n  if (a === \".3\") return null\n  if (b === \".3\") return null\n  if (a === \".4\") return null\n  if (b === \".4\") return null\n  if (a === \".5\") return null\n  if (b === \".5\") return null\n  if (a === \".6\") return null\n  if (b === \".6\") return null\n  if (a === \".7\") return null\n  if (b === \".7\") return null\n  if (a === \".8\") return null\n  if (b === \".8\") return null\n  if (a === \".9\") return null\n  if (b === \".9\") return null\n  if (a === \"0\") return null\n  if (b === \"0\") return null\n  if (a === \"1\") return null\n  if (b === \"1\") return null\n  if (a === \"2\") return null\n  if (b === \"2\") return null\n  if (a === \"3\") return null\n  if (b === \"3\") return null\n  if (a === \"4\") return null\n  if (b === \"4\") return null\n  if (a === \"5\") return null\n  if (b === \"5\") return null\n  if (a === \"6\") return null\n  if (b === \"6\") return null\n  if (a === \"7\") return null\n  if (b === \"7\") return null\n  if (a === \"8\") return null\n  if (b === \"8\") return null\n  if (a === \"9\") return null\n  if (b === \"9\") return null\n  if (a === \"10\") return null\n  if (b === \"10\") return null\n  if (a === \"11\") return null\n  if (b === \"11\") return null\n  if (a === \"12\") return null\n  if (b === \"12\") return null\n  if (a === \"13\") return null\n  if (b === \"13\") return null\n  if (a === \"14\") return null\n  if (b === \"14\") return null\n  if (a === \"15\") return null\n  if (b === \"15\") return null\n  if (a === \"16\") return null\n  if (b === \"16\") return null\n  if (a === \"17\") return null\n  if (b === \"17\") return null\n  if (a === \"18\") return null\n  if (b === \"18\") return null\n  if (a === \"19\") return null\n  if (b === \"19\") return null\n  if (a === \"20\") return null\n  if (b === \"20\") return null\n  if (a === \"21\") return null\n  if (b === \"21\") return null\n  if (a === \"22\") return null\n  if (b === \"22\") return null\n  if (a === \"23\") return null\n  if (b === \"23\") return null\n  if (a === \"24\") return null\n  if (b === \"24\") return null\n  if (a === \"25\") return null\n  if (b === \"25\") return null\n  if (a === \"26\") return null\n  if (b === \"26\") return null\n  if (a === \"27\") return null\n  if (b === \"27\") return null\n  if (a === \"28\") return null\n  if (b === \"28\") return null\n  if (a === \"29\") return null\n  if (b === \"29\") return null\n  if (a === \"30\") return null\n  if (b === \"30\") return null\n  if (a === \"31\") return null\n  if (b === \"31\") return null\n  if (a === \"32\") return null\n  if (b === \"32\") return null\n  if (a === \"33\") return null\n  if (b === \"33\") return null\n  if (a === \"34\") return null\n  if (b === \"34\") return null\n  if (a === \"35\") return null\n  if (b === \"35\") return null\n  if (a === \"36\") return null\n  if (b === \"36\") return null\n  if (a === \"37\") return null\n  if (b === \"37\") return null\n  if (a === \"38\") return null\n  if (b === \"38\") return null\n  if (a === \"39\") return null\n  if (b === \"39\") return null\n  if (a === \"40\") return null\n  if (b === \"40\") return null\n  if (a === \"41\") return null\n  if (b === \"41\") return null\n  if (a === \"42\") return null\n  if (b === \"42\") return null\n  if (a === \"43\") return null\n  if (b === \"43\") return null\n  if (a === \"44\") return null\n  if (b === \"44\") return null\n  if (a === \"45\") return null\n  if (b === \"45\") return null\n  if (a === \"46\") return null\n  if (b === \"46\") return null\n  if (a === \"47\") return null\n  if (b === \"47\") return null\n  if (a === \"48\") return null\n  if (b === \"48\") return null\n  if (a === \"49\") return null\n  if (b === \"49\") return null\n  if (a === \"50\") return null\n  if (b === \"50\") return null\n  if (a === \"51\") return null\n  if (b === \"51\") return null\n  if (a === \"52\") return null\n  if (b === \"52\") return null\n  if (a === \"53\") return null\n  if (b === \"53\") return null\n  if (a === \"54\") return null\n  if (b === \"54\") return null\n  if (a === \"55\") return null\n  if (b === \"55\") return null\n  if (a === \"56\") return null\n  if (b === \"56\") return null\n  if (a === \"57\") return null\n  if (b === \"57\") return null\n  if (a === \"58\") return null\n  if (b === \"58\") return null\n  if (a === \"59\") return null\n  if (b === \"59\") return null\n  if (a === \"60\") return null\n  if (b === \"60\") return null\n  if (a === \"61\") return null\n  if (b === \"61\") return null\n  if (a === \"62\") return null\n  if (b === \"62\") return null\n  if (a === \"63\") return null\n  if (b === \"63\") return null\n  if (a === \"64\") return null\n  if (b === \"64\") return null\n  if (a === \"65\") return null\n  if (b === \"65\") return null\n  if (a === \"66\") return null\n  if (b === \"66\") return null\n  if (a === \"67\") return null\n  if (b === \"67\") return null\n  if (a === \"68\") return null\n  if (b === \"68\") return null\n  if (a === \"69\") return null\n  if (b === \"69\") return null\n  if (a === \"70\") return null\n  if (b === \"70\") return null\n  if (a === \"71\") return null\n  if (b === \"71\") return null\n  if (a === \"72\") return null\n  if (b === \"72\") return null", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === 0);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 1 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_negative_odd(4) == false\n  is_equal_to_sum_negative_odd(6) == false\n  is_equal_to_sum_negative_odd(8) == true\n  */\nconst is_equal_to_sum_negative_odd = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 1 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  is_equal_to_sum_positive(4) == false\n  is_equal_to_sum_positive(6) == false\n  is_equal_to_sum_positive(8) == true\n  */\nconst is_equal_to_sum_positive = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_positive_even(4) == false\n  is_equal_to_sum_positive_even(6) == false\n  is_equal_to_sum_positive_even(8) == true\n  */\nconst is_equal_to_sum_positive_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_positive_odd(4) == false\n  is_equal_to_sum_positive_odd(6) == false\n  is_equal_to_sum_positive_odd(8) == true\n  */\nconst is_equal_to_sum_positive_odd = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 1 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_negative_odd(4) == false\n  is_equal_to_sum_negative_odd(6) == false\n  is_equal_to_sum_negative_odd(8) == true\n  */\nconst is_equal_to_sum_negative_odd = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 1 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive numbers\n  Example\n  is_equal_to_sum_positive(4) == false\n  is_equal_to_sum_positive(6) == false\n  is_equal_to_sum_positive(8) == true\n  */\nconst is_equal_to_sum_positive = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_positive_even(4) == false\n  is_equal_to_sum_positive_even(6) == false\n  is_equal_to_sum_positive_even(8) == true\n  */\nconst is_equal_to_sum_positive_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_positive_odd(4) == false\n  is_equal_to_sum_positive_odd(6) == false\n  is_equal_to_sum_positive_odd(8) == true\n  */\nconst is_equal_to_sum_positive_odd = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 1 && arr[i] % 2 === 1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative numbers\n  Example\n  is_equal_to_sum_negative(4) == false\n  is_equal_to_sum_negative(6) == false\n  is_equal_to_sum_negative(8) == true\n  */\nconst is_equal_to_sum_negative = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_negative_even(4) == false\n  is_equal_to_sum_negative_even(6) == false\n  is_equal_to_sum_negative_even(8) == true\n  */\nconst is_equal_to_sum_negative_even = (n) => {\n  const arr = [...Array(n).keys()];\n  return arr.every((i) => i % 2 === 0 && arr[i] % 2 === -1);\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  Given a number n, return the factorial of n!\n  For example:\n  >>> factorial(5)\n  120\n*/\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      prefixes.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  prefixes.push(current);\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  let current = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    const char = string[i];\n    if (char === current) {\n      suffixes.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  suffixes.push(current);\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let current = '';\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === current) {\n      substrings.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  substrings.push(current);\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, '_')\n}\n\n/*\n  Given a string text, remove all punctuation from it\n  \n  remove_punctuation(\"Example!\") == \"Example\"\n  remove_punctuation(\"Example?!\") == \"Example\"\n  remove_punctuation(\"Example.\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"Example:\") == \"Example\"\n  remove_punctuation(\"Example;\") == \"Example\"\n  remove_punctuation(\"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let file_name = file_name.toLowerCase();\n  let file_name = file_name.replace(/\\./g, '');\n  let file_name = file_name.replace(/^\\./, '');\n  let file_name = file_name.replace(/[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\.[^a-zA-Z0-9\\.]/g, '');\n  let file_name = file_name.replace(/\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\.\\./g, '');\n  let file_name = file_name.replace(/\\.\\.\\.", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the entry whose \n  value is greatest among all entries in the list. The function will not change the entries in the list whose values are \n  not greatest among all entries in the list. The function shall then return the index of the entry whose value is greatest among \n  all entries in the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 10\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should be 20\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100] the output should be 100\n  */\nconst max_index = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the entry whose \n  value is smallest among all entries in the list. The function will not change the entries in the list whose values are \n  not smallest among all entries in the list. The function shall then return the index of the entry whose value is smallest among \n  all entries in the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100] the output should be 100\n  */\nconst min_index = (lst) => {\n  let min = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the entry whose \n  value is closest to the average of all entries in the list. The function will not change the entries in the list whose values are \n  not closest to the average of all entries in the list. The function shall then return the index of the entry whose value is closest \n  to the average of all entries in the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should be 0\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100] the output should be 100\n  */\nconst average_index = (lst) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    count++;\n  }\n  return sum / count;\n};\n\n/*\n  This function will take a list of integers. For all entries in the list, the function will return the index of the entry whose \n  value is closest to the median of all entries in the list. The function will not change the entries in the list whose values are \n  not closest to the median of all entries in the list. The function shall then return the index of the entry whose value is closest \n  to the median of all entries in the list. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10] the output should be 5\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20] the output should be 5\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100] the output should be 10\n  */\nconst median_index = (lst) => {\n  let median = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > lst[median]) {\n      median = lst[i];\n    }\n    ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len)) {\n      continue;\n    }\n    for (let j = len; j <= Math.sqrt(len); j++) {\n      if (primes.includes(j)) {\n        continue;\n      }\n      if (isPrime(j)) {\n        primes.push(j);\n      }\n    }\n  }\n  return arr.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const arr = sentence.split(\" \");\n  const primes = [];\n  for (let i = 0; i < arr.length; i++) {\n    const str = arr[i];\n    const len = str.length;\n    if (primes.includes(len", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // Your code here\n}\n\n// Test cases\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\nconsole.log(simplify(\"1/5\", \"1/2\"));\nconsole.log(simplify(\"1/5\", \"1/3\"));\nconsole.log(simplify(\"1/5\", \"1/4\"));\nconsole.log(simplify(\"1/5\", \"1/5\"));\nconsole.log(simplify(\"1/5\", \"1/6\"));\nconsole.log(simplify(\"1/5\", \"1/7\"));\nconsole.log(simplify(\"1/5\", \"1/8\"));\nconsole.log(simplify(\"1/5\", \"1/9\"));\nconsole.log(simplify(\"1/5\", \"1/10\"));\nconsole.log(simplify(\"1/5\", \"1/11\"));\nconsole.log(simplify(\"1/5\", \"1/12\"));\nconsole.log(simplify(\"1/5\", \"1/13\"));\nconsole.log(simplify(\"1/5\", \"1/14\"));\nconsole.log(simplify(\"1/5\", \"1/15\"));\nconsole.log(simplify(\"1/5\", \"1/16\"));\nconsole.log(simplify(\"1/5\", \"1/17\"));\nconsole.log(simplify(\"1/5\", \"1/18\"));\nconsole.log(simplify(\"1/5\", \"1/19\"));\nconsole.log(simplify(\"1/5\", \"1/20\"));\nconsole.log(simplify(\"1/5\", \"1/21\"));\nconsole.log(simplify(\"1/5\", \"1/22\"));\nconsole.log(simplify(\"1/5\", \"1/23\"));\nconsole.log(simplify(\"1/5\", \"1/24\"));\nconsole.log(simplify(\"1/5\", \"1/25\"));\nconsole.log(simplify(\"1/5\", \"1/26\"));\nconsole.log(simplify(\"1/5\", \"1/27\"));\nconsole.log(simplify(\"1/5\", \"1/28\"));\nconsole.log(simplify(\"1/5\", \"1/29\"));\nconsole.log(simplify(\"1/5\", \"1/30\"));\nconsole.log(simplify(\"1/5\", \"1/31\"));\nconsole.log(simplify(\"1/5\", \"1/32\"));\nconsole.log(simplify(\"1/5\", \"1/33\"));\nconsole.log(simplify(\"1/5\", \"1/34\"));\nconsole.log(simplify(\"1/5\", \"1/35\"));\nconsole.log(simplify(\"1/5\", \"1/36\"));\nconsole.log(simplify(\"1/5\", \"1/37\"));\nconsole.log(simplify(\"1/5\", \"1/38\"));\nconsole.log(simplify(\"1/5\", \"1/39\"));\nconsole.log(simplify(\"1/5\", \"1/40\"));\nconsole.log(simplify(\"1/5\", \"1/41\"));\nconsole.log(simplify(\"1/5\", \"1/42\"));\nconsole.log(simplify(\"1/5\", \"1/43\"));\nconsole.log(simplify(\"1/5\", \"1/44\"));\nconsole.log(simplify(\"1/5\", \"1/45\"));\nconsole.log(simplify(\"1/5\", \"1/46\"));\nconsole.log(simplify(\"1/5\", \"1/47\"));\nconsole.log(simplify(\"1/5\", \"1/48\"));\nconsole.log(simplify(\"1/5\", \"1/49\"));\nconsole.log(simplify(\"1/5\", \"1/50\"));\nconsole.log(simplify(\"1/5\", \"1/51\"));\nconsole.log(simplify(\"1/5\", \"1/52\"));\nconsole.log(simplify(\"1/5\", \"1/53\"));\nconsole.log(simplify(\"1/5\", \"1/54\"));\nconsole.log(simplify(\"1/5\", \"1/55\"));\nconsole.log(simplify(\"1/5\", \"1/56\"));\nconsole.log(simplify(\"1/5\", \"1/57\"));\nconsole.log(simplify(\"1/5\", \"1/58\"));\nconsole.log(simplify(\"1/5\", \"1/59\"));\nconsole.log(simplify(\"1/5\", \"1/60\"));\nconsole.log(simplify(\"1/5\", \"1/61\"));\nconsole.log(simplify(\"1/5\", \"1/62\"));\nconsole.log(simplify(\"1/5\", \"1/63\"));\nconsole.log(simplify(\"1/5\", \"1/64\"));\nconsole.log(simplify(\"1/5\", \"1/65\"));\nconsole.log(simplify(\"1/5\", \"1/66\"));\nconsole.log(simplify(\"1/5\", \"1/67\"));\nconsole.log(simplify(\"1/5\", \"1/68\"));\nconsole.log(simplify(\"1/5\", \"1/69\"));\nconsole.log(simplify(\"1/5\", \"1/70\"));\nconsole.log(simplify(\"1/5\", \"1/71\"));\nconsole.log(simplify(\"1/5\", \"1/72\"));\nconsole.log(simplify(\"1/5\", \"1/73\"));\nconsole.log(simplify(\"1/5\", \"1/74\"));\nconsole.log(simplify(\"1/5\", \"1/75\"));\nconsole.log(simplify(\"1/5\", \"1/76\"));\nconsole.log(simplify(\"1/5\", \"1/77\"));\nconsole.log(simplify(\"1/5\", \"1/78\"));\nconsole.log(simplify(\"1/5\", \"1/79\"));\nconsole.log(simplify(\"1/5\", \"1/80\"));\nconsole.log(simplify(\"1/5\", \"1/81\"));\nconsole.log(simplify(\"1/5\", \"1/82\"));\nconsole.log(simplify(\"1/5\", \"1/83\"));\nconsole.log(simplify(\"1/5\", \"1/84\"));\nconsole.log(simplify(\"1/5\", \"1/85\"));\nconsole.log(simplify(\"1/5\", \"1/86\"));\nconsole.log(simplify(\"1/5\", \"1/87\"));\nconsole.log(simplify(\"1/5\", \"1/88\"));\nconsole.log(simplify(\"1/5\", \"1/89\"));\nconsole.log(simplify(\"1/5\", \"1/90\"));\nconsole.log(simplify(\"1/5\", \"1/91\"));\nconsole.log(simplify(\"1/5\", \"1/92\"));\nconsole.log(simplify(\"1/5\", \"1/93\"));\nconsole.log(simplify(\"1/5\", \"1/94\"));\nconsole.log(simplify(\"1/5\", \"1/95\"));\nconsole.log(simplify(\"1/5\", \"1/96\"));\nconsole.log(simplify(\"1/5\", \"1/97\"));\nconsole.log(simplify(\"1/5\", \"1/98\"));\nconsole.log(simplify(\"1/5\", \"1/99\"));\nconsole.log(simplify(\"1/5\", \"1/100\"));\nconsole.log(simplify(\"1/5\", \"1/101\"));\nconsole.log(simplify(\"1/5\", \"1/102\"));\nconsole.log(simplify(\"1/5\", \"1/103\"));\nconsole.log(simplify(\"1/5\", \"1/104\"));\nconsole.log(simplify(\"1/5\", \"1/105\"));\nconsole.log(simplify(\"1/5\", \"1/106\"));\nconsole.log(simplify(\"1/5\", \"1/107\"));\nconsole.log(simplify(\"1/5\", \"1/108\"));\nconsole.log(simplify(\"1/5\", \"1/109\"));\nconsole.log(simplify(\"1/5\", \"1/110\"));\nconsole.log(simplify(\"1/5\", \"1/111\"));\nconsole.log(simplify(\"1/5\", \"1/112\"));\nconsole.log(simplify(\"1/5\", \"1/113\"));\nconsole.log(simplify(\"1/5\", \"1/114\"));\nconsole.log(simplify(\"1/5\", \"1/115\"));\nconsole.log(simplify(\"1/5\", \"1/116\"));\nconsole.log(simplify(\"1/5\", \"1/117\"));\nconsole.log(simplify(\"1/5\", \"1/118\"));\nconsole.log(simplify(\"1/5\", \"1/119\"));\nconsole.log(simplify(\"1/5\", \"1/120\"));\nconsole.log(simplify(\"1/5\", \"1/121\"));\nconsole.log(simplify(\"1/5\", \"1/122\"));\nconsole.log(simplify(\"1/5\", \"1/123\"));\nconsole.log(simplify(\"1/5\", \"1/124\"));\nconsole.log(simplify(\"1/5\", \"1/125\"));\nconsole.log(simplify(\"1/5\", \"1/126\"));\nconsole.log(simplify(\"1/5\", \"1/127\"));\nconsole.log(simplify(\"1/5\", \"1/128\"));\nconsole.log(simplify(\"1/5\", \"1/129\"));\nconsole.log(simplify(\"1/5\", \"1/130\"));\nconsole.log(simplify(\"1/5\", \"1/131\"));\nconsole.log(simplify(\"1/5\", \"1/132\"));\nconsole.log(simplify(\"1/5\", \"1/133\"));\nconsole.log(simplify(\"1/5\", \"1/134\"));\nconsole.log(simplify(\"1/5\", \"1/135\"));\nconsole.log(simplify(\"1/5\", \"1/136\"));\nconsole.log(simplify(\"1/5\", \"1/137\"));\nconsole.log(simplify(\"1/5", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - aSum - bSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n  }\n  const digits = nums.map(n => parseInt(n.toString(), 10));\n  const sums = digits.reduce((sum, digit) => sum + digit, 0);\n  return nums.sort((a, b) => {\n    const aSum = parseInt(a.toString(), 10);\n    const bSum = parseInt(b.toString(), 10);\n    return sums - bSum - aSum;\n  });\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-12, -11, -1, 1, 11]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const len = nums.length;\n  if (len === 0) {\n    return [];\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_2 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_3 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_4 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_5 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_6 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_7 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_8 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_9 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_10 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_11 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10!== 1) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_12 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {\n    if (num > 10 && num % 2 === 1 && num % 10 === 0) {\n      count++;\n    }\n  });\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst special_filter_13 = (nums) => {\n  let count = 0;\n  nums.forEach((num) => {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            for (let k = 1; k <= n; k++) {\n                if (i + j + k === n && a[i + j] === a[j + k] && a[i + k] === a[k + i]) {\n                    a[i + j] += a[k + i];\n                }\n            }\n        }\n    }\n    return a.filter((x) => x % 3 === 0).length;\n};\n\n/*\n  You are given an integer array nums, in which each element represents the number of \n  seconds since the midnight on Jan 1, 1970 (midnight on Jan 1, 1970, 00:00:00 UTC). \n  Write a function to calculate the number of leap years between Jan 1, 1970 and Jan 1, \n  2020.\n\n  Example :\n      Input: nums = [15645, 15646, 15647, 15648, 15649, 15650]\n      Output: 4\n      Explanation: \n      Jan 1, 1970 is 1 day and 1 hour after midnight. \n      Jan 1, 1980 is 1 day and 1 hour after midnight. \n      Jan 1, 1990 is 1 day and 1 hour after midnight. \n      Jan 1, 2000 is 1 day and 1 hour after midnight. \n      Jan 1, 2010 is 1 day and 1 hour after midnight. \n      Jan 1, 2020 is 1 day and 1 hour after midnight. \n      Jan 1, 2030 is 1 day and 1 hour after midnight. \n      Jan 1, 2040 is 1 day and 1 hour after midnight. \n      Jan 1, 2050 is 1 day and 1 hour after midnight. \n      Jan 1, 2060 is 1 day and 1 hour after midnight. \n      Jan 1, 2070 is 1 day and 1 hour after midnight. \n      Jan 1, 2080 is 1 day and 1 hour after midnight. \n      Jan 1, 2090 is 1 day and 1 hour after midnight. \n      Jan 1, 2100 is 1 day and 1 hour after midnight. \n      Jan 1, 2110 is 1 day and 1 hour after midnight. \n      Jan 1, 2120 is 1 day and 1 hour after midnight. \n      Jan 1, 2130 is 1 day and 1 hour after midnight. \n      Jan 1, 2140 is 1 day and 1 hour after midnight. \n      Jan 1, 2150 is 1 day and 1 hour after midnight. \n      Jan 1, 2160 is 1 day and 1 hour after midnight. \n      Jan 1, 2170 is 1 day and 1 hour after midnight. \n      Jan 1, 2180 is 1 day and 1 hour after midnight. \n      Jan 1, 2190 is 1 day and 1 hour after midnight. \n      Jan 1, 2200 is 1 day and 1 hour after midnight. \n      Jan 1, 2210 is 1 day and 1 hour after midnight. \n      Jan 1, 2220 is 1 day and 1 hour after midnight. \n      Jan 1, 2230 is 1 day and 1 hour after midnight. \n      Jan 1, 2240 is 1 day and 1 hour after midnight. \n      Jan 1, 2250 is 1 day and 1 hour after midnight. \n      Jan 1, 2260 is 1 day and 1 hour after midnight. \n      Jan 1, 2270 is 1 day and 1 hour after midnight. \n      Jan 1, 2280 is 1 day and 1 hour after midnight. \n      Jan 1, 2290 is 1 day and 1 hour after midnight. \n      Jan 1, 2300 is 1 day and 1 hour after midnight. \n      Jan 1, 2310 is 1 day and 1 hour after midnight. \n      Jan 1, 2320 is 1 day and 1 hour after midnight. \n      Jan 1, 2330 is 1 day and 1 hour after midnight. \n      Jan 1, 2340 is 1 day and 1 hour after midnight. \n      Jan 1, 2350 is 1 day and 1 hour after midnight. \n      Jan 1, 2360 is 1 day and 1 hour after midnight. \n      Jan 1, 2370 is 1 day and 1 hour after midnight. \n      Jan 1, 2380 is 1 day and 1 hour after midnight. \n      Jan 1, 2390 is 1 day and 1 hour after midnight. \n      Jan 1, 2400 is 1 day and 1 hour after midnight. \n      Jan 1, 2410 is 1 day and 1 hour after midnight. \n      Jan 1, 2420 is 1 day and 1 hour after midnight. \n      Jan 1, 2430 is 1 day and 1 hour after midnight. \n      Jan 1, 2440 is 1 day and 1 hour after midnight. \n      Jan 1, 2450 is 1 day and 1 hour after midnight. \n      Jan 1, 2460 is 1 day and 1 hour after midnight. \n      Jan 1, 2470 is 1 day and 1 hour after midnight. \n      Jan 1, 2480 is 1 day and 1 hour after midnight. \n      Jan 1, 2490 is 1 day and 1 hour after midnight. \n      Jan 1, 2500 is 1 day and 1 hour after midnight. \n      Jan 1, 2510 is 1 day and 1 hour after midnight. \n      Jan 1, 2520 is 1 day and 1 hour after midnight. \n      Jan 1, 2530 is 1 day and 1 hour after midnight. \n      Jan 1, 2540 is 1 day and 1 hour after midnight. \n      Jan 1, 2550 is 1 day and 1 hour after midnight. \n      Jan 1, 2560 is 1 day and 1 hour after midnight. \n      Jan 1, 2570 is 1 day and 1 hour after midnight. \n      Jan 1, 2580 is 1 day and 1 hour after midnight. \n      Jan 1, 2590 is 1 day and 1 hour after midnight. \n      Jan 1, 2600 is 1 day and 1 hour after midnight. \n      Jan 1, 2610 is 1 day and 1 hour after midnight. \n      Jan 1, 2620 is 1 day and 1 hour after midnight. \n      Jan 1, 2630 is 1 day and 1 hour after midnight. \n      Jan 1, 2640 is 1 day and 1 hour after midnight. \n      Jan 1, 2650 is 1 day and 1 hour after midnight. \n      Jan 1, 2660 is 1 day and 1 hour after midnight. \n      Jan 1, 2670 is 1 day and 1 hour after midnight. \n      Jan 1, 2680 is 1 day and 1 hour after midnight. \n      Jan 1, 2690 is 1 day and 1 hour after midnight. \n      Jan 1, 2700 is 1 day and 1 hour after midnight. \n      Jan 1, 2710 is 1 day and 1 hour after midnight. \n      Jan 1, 2720 is 1 day and 1 hour after midnight. \n      Jan 1, 2730 is 1 day and 1 hour after midnight. ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\",\n  ];\n  const orbits = planets.map(planet => {\n    const planetOrbits = planets.map(planet2 => {\n      const distance = planetOrbitDistance(planet, planet2);\n      return distance;\n    });\n    const sortedOrbits = planetOrbits.sort((a, b) => a - b);\n    return sortedOrbits;\n  });\n  const planetsBetween = orbits.filter(orbit => orbit.includes(planet1));\n  const planetsBetween2 = orbits.filter(orbit => orbit.includes(planet2));\n  const planetsBetween3 = planetsBetween2.filter(planetsBetween2 =>!planetsBetween2.includes(planet1));\n  const planetsBetween4 = planetsBetween3.filter(planetsBetween3 =>!planetsBetween3.includes(planet2));\n  const planetsBetween5 = planetsBetween4.filter(planetsBetween4 =>!planetsBetween4.includes(planet1));\n  const planetsBetween6 = planetsBetween5.filter(planetsBetween5 =>!planetsBetween5.includes(planet2));\n  const planetsBetween7 = planetsBetween6.filter(planetsBetween6 =>!planetsBetween6.includes(planet1));\n  const planetsBetween8 = planetsBetween7.filter(planetsBetween7 =>!planetsBetween7.includes(planet2));\n  const planetsBetween9 = planetsBetween8.filter(planetsBetween8 =>!planetsBetween8.includes(planet1));\n  const planetsBetween10 = planetsBetween9.filter(planetsBetween9 =>!planetsBetween9.includes(planet2));\n  const planetsBetween11 = planetsBetween10.filter(planetsBetween10 =>!planetsBetween10.includes(planet1));\n  const planetsBetween12 = planetsBetween11.filter(planetsBetween11 =>!planetsBetween11.includes(planet2));\n  const planetsBetween13 = planetsBetween12.filter(planetsBetween12 =>!planetsBetween12.includes(planet1));\n  const planetsBetween14 = planetsBetween13.filter(planetsBetween13 =>!planetsBetween13.includes(planet2));\n  const planetsBetween15 = planetsBetween14.filter(planetsBetween14 =>!planetsBetween14.includes(planet1));\n  const planetsBetween16 = planetsBetween15.filter(planetsBetween15 =>!planetsBetween15.includes(planet2));\n  const planetsBetween17 = planetsBetween16.filter(planetsBetween16 =>!planetsBetween16.includes(planet1));\n  const planetsBetween18 = planetsBetween17.filter(planetsBetween17 =>!planetsBetween17.includes(planet2));\n  const planetsBetween19 = planetsBetween18.filter(planetsBetween18 =>!planetsBetween18.includes(planet1));\n  const planetsBetween20 = planetsBetween19.filter(planetsBetween19 =>!planetsBetween19.includes(planet2));\n  const planetsBetween21 = planetsBetween20.filter(planetsBetween20 =>!planetsBetween20.includes(planet1));\n  const planetsBetween22 = planetsBetween21.filter(planetsBetween21 =>!planetsBetween21.includes(planet2));\n  const planetsBetween23 = planetsBetween22.filter(planetsBetween22 =>!planetsBetween22.includes(planet1));\n  const planetsBetween24 = planetsBetween23.filter(planetsBetween23 =>!planetsBetween23.includes(planet2));\n  const planetsBetween25 = planetsBetween24.filter(planetsBetween24 =>!planetsBetween24.includes(planet1));\n  const planetsBetween26 = planetsBetween25.filter(planetsBetween25 =>!planetsBetween25.includes(planet2));\n  const planetsBetween27 = planetsBetween26.filter(planetsBetween26 =>!planetsBetween26.includes(planet1));\n  const planetsBetween28 = planetsBetween27.filter(planetsBetween27 =>!planetsBetween27.includes(planet2));\n  const planetsBetween29 = planetsBetween28.filter(planetsBetween28 =>!planetsBetween28.includes(planet1));\n  const planetsBetween30 = planetsBetween29.filter(planetsBetween29 =>!planetsBetween29.includes(planet2));\n  const planetsBetween31 = planetsBetween30.filter(planetsBetween30 =>!planetsBetween30.includes(planet1));\n  const planetsBetween32 = planetsBetween31.filter(planetsBetween31 =>!planetsBetween31.includes(planet2));\n  const planetsBetween33 = planetsBetween32.filter(planetsBetween32 =>!planetsBetween32.includes(planet1));\n  const planetsBetween34 = planetsBetween33.filter(planetsBetween33 =>!planetsBetween33.includes(planet2));\n  const planetsBetween35 = planetsBetween34.filter(planetsBetween34 =>!planetsBetween34.includes(planet1));\n  const planetsBetween36 = planetsBetween35.filter(planetsBetween35 =>!planetsBetween35.includes(planet2));\n  const planetsBetween37 = planetsBetween36.filter(planetsBetween36 =>!planetsBetween36.includes(planet1));\n  const planetsBetween38 = planetsBetween37.filter(planetsBetween37 =>!planetsBetween37.includes(planet2));\n  const planetsBetween39 = planetsBetween38.filter(planetsBetween38 =>!planetsBetween38.includes(planet1));\n  const planetsBetween40 = planetsBetween39.filter(planetsBetween39 => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_max = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_min = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_avg = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_median = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_mode = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n      sorted.push(item);\n    } else {\n      let temp = sorted[index];\n      sorted[index] = item;\n      sorted[index + 1] = temp;\n    }\n  }\n  return sorted;\n};\n\n/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    let item = lst[i];\n    let index = sorted.indexOf(item);\n    if (index === -1) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start_and_middle = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start_and_middle_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator + s + separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start_and_middle_and_end_and_start = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator + s + separator + s + separator + s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start_and_middle_and_end_and_start_and_middle = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s += i;\n    if (i < n - 1) {\n      s += separator;\n    }\n  }\n  return separator + s + separator + s + separator + s + separator + s + separator + s + separator + s + separator;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_with_separator_at_start_and_end_and_middle_and_end_and_start_and_middle_and_start_and_middle_and_end_and_start_and_middle_and_end = (n, separator) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the product of the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      product *= lst[i];\n    }\n  }\n  return product;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return an empty list.\n  */\nconst double_the_difference = (lst) => {\n  let odd_numbers = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!= 0) {\n      odd_numbers.push(lst[i]);\n    }\n  }\n  return odd_numbers;\n};\n\n/* Given a list of numbers, return a list of all the numbers in the list\n  that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your clarification.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your clarification.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a tags=javascript |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this isn't what I'm looking for. I'm looking for a way to compare the two arrays and return an array of the same length as `guess` with the values `0` or `1` depending on if the guess was correct or not. I've edited my question to make it more clear.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let strongest = -1;\n  let strongest_extension = '';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const cap = extension[0].toUpperCase();\n    const sm = extension[0].toLowerCase();\n    const strength = cap.length - sm.length;\n    if (strength > strongest) {\n      strongest = strength;\n      strongest_extension = extension;\n    }\n  }\n  return `${class_name}.${strongest_extension}`;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that takes a string and returns the number of times each character\n  appears in the string. For example, the string 'abcabc' would return {'a':3, 'b':2, 'c':2}.\n  You can assume that the string contains only lowercase letters.\n*/\nconst count_chars = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char] += 1;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return chars;\n};\n\n/*\n  Write a function that ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n      bSubStr = true;\n    }\n  }\n  return aSubStr === bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n      bSubStr = true;\n    }\n  }\n  return aSubStr === bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n      bSubStr = true;\n    }\n  }\n  return aSubStr === bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n      bSubStr = true;\n    }\n  }\n  return aSubStr === bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => true\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => true\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  let aArr = a.split('');\n  let bArr = b.split('');\n  let aLen = aArr.length;\n  let bLen = bArr.length;\n  let aIndex = 0;\n  let bIndex = 0;\n  let aSubStr = false;\n  let bSubStr = false;\n  while (aIndex < aLen && bIndex < bLen) {\n    if (aArr[aIndex] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n    } else if (aArr[aIndex] === bArr[bIndex + 1]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else if (aArr[aIndex + 1] === bArr[bIndex]) {\n      aIndex++;\n      bIndex++;\n      aSubStr = true;\n    } else {\n      bIndex++;\n      bSubStr = true;\n    }\n  }\n  return aSubStr === bSubStr;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_2 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_3 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_4 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_5 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_6 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_7 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_8 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_9 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_10 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_11 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_12 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_13 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count_14 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  return roman? roman.toLowerCase() : '';\n};\n\n/*\n  Given a roman numeral, convert it to an integer.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> mini_roman_to_int( 'xix' ) == 19\n  >>> mini_roman_to_int( 'clii' ) == 152\n  >>> mini_roman_to_int( 'cdxxvi' ) == 426\n  */\nconst mini_roman_to_int = (roman) => {\n  const roman_numeral = roman_numeral_map[roman];\n  return roman_numeral? roman_numeral_map[roman] : -1;\n};\n\n/*\n  Given a positive integer, divide it by another positive integer and return the remainder.\n  Restrictions: 0 <= num2 <= num1 <= 1000\n\n  Examples:\n  >>> int_to_roman(19) == 'xix'\n  >>> int_to_roman(152) == 'cdxxvi'\n  >>> int_to_roman(193) == 'cvix'\n  >>> int_to_roman(153) == 'cvdxxi'\n  >>> int_to_roman(154) == 'cvdxvi'\n  >>> int_to_roman(155) == 'xvi'\n  >>> int_to_roman(156) == 'xix'\n  >>> int_to_roman(157) == 'xvi'\n  >>> int_to_roman(158) == 'vi'\n  >>> int_to_roman(159) == 'vix'\n  >>> int_to_roman(160) == 'ix'\n  >>> int_to_roman(161) == 'ix'\n  >>> int_to_roman(162) == 'vi'\n  >>> int_to_roman(163) == 'vi'\n  >>> int_to_roman(164) == 'vi'\n  >>> int_to_roman(165) == 'vi'\n  >>> int_to_roman(166) == 'vi'\n  >>> int_to_roman(167) == 'vi'\n  >>> int_to_roman(168) == 'vi'\n  >>> int_to_roman(169) == 'vi'\n  >>> int_to_roman(170) == 'vi'\n  >>> int_to_roman(171) == 'vi'\n  >>> int_to_roman(172) == 'vi'\n  >>> int_to_roman(173) == 'vi'\n  >>> int_to_roman(174) == 'vi'\n  >>> int_to_roman(175) == 'vi'\n  >>> int_to_roman(176) == 'vi'\n  >>> int_to_roman(177) == 'vi'\n  >>> int_to_roman(178) == 'vi'\n  >>> int_to_roman(179) == 'vi'\n  >>> int_to_roman(180) == 'vi'\n  >>> int_to_roman(181) == 'vi'\n  >>> int_to_roman(182) == 'vi'\n  >>> int_to_roman(183) == 'vi'\n  >>> int_to_roman(184) == 'vi'\n  >>> int_to_roman(185) == 'vi'\n  >>> int_to_roman(186) == 'vi'\n  >>> int_to_roman(187) == 'vi'\n  >>> int_to_roman(188) == 'vi'\n  >>> int_to_roman(189) == 'vi'\n  >>> int_to_roman(190) == 'vi'\n  >>> int_to_roman(191) == 'vi'\n  >>> int_to_roman(192) == 'vi'\n  >>> int_to_roman(193) == 'vi'\n  >>> int_to_roman(194) == 'vi'\n  >>> int_to_roman(195) == 'vi'\n  >>> int_to_roman(196) == 'vi'\n  >>> int_to_roman(197) == 'vi'\n  >>> int_to_roman(198) == 'vi'\n  >>> int_to_roman(199) == 'vi'\n  >>> int_to_roman(200) == 'vi'\n  >>> int_to_roman(201) == 'vi'\n  >>> int_to_roman(202) == 'vi'\n  >>> int_to_roman(203) == 'vi'\n  >>> int_to_roman(204) == 'vi'\n  >>> int_to_roman(205) == 'vi'\n  >>> int_to_roman(206) == 'vi'\n  >>> int_to_roman(207) == 'vi'\n  >>> int_to_roman(208) == 'vi'\n  >>> int_to_roman(209) == 'vi'\n  >>> int_to_roman(210) == 'vi'\n  >>> int_to_roman(211) == 'vi'\n  >>> int_to_roman(212) == 'vi'\n  >>> int_to_roman(213) == 'vi'\n  >>> int_to_roman(214) == 'vi'\n  >>> int_to_roman(215) == 'vi'\n  >>> int_to_roman(216) == 'vi'\n  >>> int_to_roman(217) == 'vi'\n  >>> int_to_roman(218) == 'vi'\n  >>> int_to_roman(219) == 'vi'\n  >>> int_to_roman(220) == 'vi'\n  >>> int_to_roman(221) == 'vi'\n  >>> int_to_roman(222) == 'vi'\n  >>> int_to_roman(223) == 'vi'\n  >>> int_to_roman(224) == 'vi'\n  >>> int_to_roman(225) == 'vi'\n  >>> int_to_roman(226) == 'vi'\n  >>> int_to_roman(227) == 'vi'\n  >>> int_to_roman(228) == 'vi'\n  >>> int_to_roman(229) == 'vi'\n  >>> int_to_roman(230) == 'vi'\n  >>> int_to_roman(231) == 'vi'\n  >>> int_to_roman(232) == 'vi'\n  >>> int_to_roman(233) == 'vi'\n  >>> int_to_roman(234) == 'vi'\n  >>> int_to_roman(235) == 'vi'\n  >>> int_to_roman(236) == 'vi'\n  >>> int_to_roman(237) == 'vi'\n  >>> int_to_roman(238) == 'vi'\n  >>> int_to_roman(239) == 'vi'\n  >>> int_to_roman(240) == 'vi'\n  >>> int_to_roman(241) == 'vi'\n  >>> int_to_roman(242) == 'vi'\n  >>> int_to_roman(243) == 'vi'\n  >>> int_to_roman(244) == 'vi'\n  >>> int_to_roman(245) == 'vi'\n  >>> int_to_roman(246) == 'vi'\n  >>> int_to_roman(247) == 'vi'\n  >>> int_to_roman(248) == 'vi'\n  >>> int_to_roman(249) == 'vi'\n  >>> int_to_roman(250) == 'vi'\n  >>> int_to_roman(251) == 'vi'\n  >>> int_to_roman(252) == '", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * b;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && bc == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  side", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = word;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  let minCount = 0;\n  let minWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWord = word;\n    }\n  }\n  return minWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return them all in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_all = (words) => {\n  let minCount = 0;\n  let minWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWords = [word];\n    } else if (count === minCount) {\n      minWords.push(word);\n    }\n  }\n  return minWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return them all in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst find_all_max = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords = [word];\n    } else if (count === maxCount) {\n      maxWords.push(word);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return them all in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_all_min = (words) => {\n  let minCount = 0;\n  let minWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWords = [word];\n    } else if (count === minCount) {\n      minWords.push(word);\n    }\n  }\n  return minWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return them all in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_all_min = (words) => {\n  let minCount = 0;\n  let minWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = count;\n      minWords = [word];\n    } else if (count === minCount) {\n      minWords.push(word);\n    }\n  }\n  return minWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return them all in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst find_all_max = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords = [word];\n    } else if (count === maxCount) {\n      maxWords.push(word);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return them all in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst find_all_max = (words) => {\n  let maxCount = 0;\n  let maxWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count > maxCount) {\n      maxCount = count;\n      maxWords = [word];\n    } else if (count === maxCount) {\n      maxWords.push(word);\n    }\n  }\n  return maxWords;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return all words with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return them all in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"string\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"game\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_all_min = (words) => {\n  let minCount = 0;\n  let minWords = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = countUniqueChars(word);\n    if (count < minCount) {\n      minCount = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  const [eaten, left] = eat(number - need, remaining, need);\n  return [eaten + need, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  const [eaten, left] = eat(number - need, remaining, need);\n  return [eaten + need, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  const [eaten, left] = eat(number - need, remaining, need);\n  return [eaten + need, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  const [eaten, left] = eat(number - need, remaining, need);\n  return [eaten + need, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining];\n  }\n  const [eaten, left] = eat(number - need, remaining, need);\n  return [eaten + need, left];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === char.toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_7 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let newS = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= \"a\" && s[i] <= \"z\") {\n      newS += s[i].toUpperCase();\n    } else if (s[i] >= \"A\" && s[i] <= \"Z\") {\n      newS += s[i].toLowerCase();\n    } else {\n      newS += s[i];\n    }\n  }\n  return newS;\n};\n\n/*You are given a string s.\n  Your task is to find out how many times each letter appears in the string.\n  You can assume that all letters are lowercase.\n  You can assume that all letters are distinct.\n  Examples\n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  count(\"aba\") = 2 \n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037a6e'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_ripemd160('Hello world') == '8eb208f7e05d987a9b044a8e98c6b087f15a0bfc'\n  */\nconst string_to_ripemd160 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('ripemd160');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037a6e'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha512');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its ripemd160 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_ripemd160('Hello world') == '8eb208f7e05d987a9b044a8e98c6b087f15a0bfc'\n  */\nconst string_to_ripemd160 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('ripemd160');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '0c60c80f961f0e71f3a9b524af6012062fe037a6e'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha1');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') return null;\n  const hash = crypto.createHash('sha256');\n  hash.update(text);\n  return hash.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of its digits.\n\n  For example:\n  number_digits(12) => 3\n  number_digits(121) => 4\n  number_digits(1234) => 5\n  number_digits(12345) => 5\n  number_digits(123456) => 5\n  number_digits(1234567) => 6\n  number_digits(12345678) => 7\n  number_digits(123456789) => 8\n  number_digits(1234567890) => 9\n  number_digits(12345678901) => 10\n  number_digits(123456789012) => 10\n  number_digits(1234567890123) => 10\n  number_digits(12345678901234) => 10\n  number_digits(123456789012345) => 10\n  number_digits(1234567890123456) => 10\n  number_digits(12345678901234567) => 10\n  number_digits(123456789012345678) => 10\n  number_digits(1234567890123456789) => 10\n  */\nconst number_digits = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of the digits of n.\n\n  For example:\n  sum_digits(12) => 3\n  sum_digits(121) => 4\n  sum_digits(1234) => 5\n  sum_digits(12345) => 5\n  sum_digits(123456) => 5\n  sum_digits(1234567) => 6\n  sum_digits(12345678) => 7\n  sum_digits(123456789) => 8\n  sum_digits(1234567890) => 9\n  sum_digits(12345678901) => 10\n  sum_digits(123456789012) => 10\n  sum_digits(1234567890123) => 10\n  sum_digits(12345678901234) => 10\n  sum_digits(123456789012345) => 10\n  sum_digits(1234567890123456) => 10\n  sum_digits(12345678901234567) => 10\n  sum_digits(123456789012345678) => 10\n  sum_digits(1234567890123456789) => 10\n  */\nconst sum_digits = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*\n  Return the sum of the digits of the number formed by concatenating the\n  given list of integers into a single string.\n\n  For example:\n  concatenate_digits([1, 2]) => 123\n  concatenate_digits([1, 2, 3]) => 1234\n  concatenate_digits([1, 2, 3, 4]) => 123454\n  concatenate_digits([1, 2, 3, 4, 5]) => 12345\n  concatenate_digits([1, 2, 3, 4, 5, 6]) => 123456\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7]) => 1234567\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8]) => 12345678\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 123456789\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 1234567890\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 12345678901\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 123456789012\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => 1234567890123\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => 12345678901234\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => 123456789012345\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => 1234567890123456\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) => 12345678901234567\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) => 123456789012345678\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) => 1234567890123456789\n  */\nconst concatenate_digits = digits => {\n  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i];\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of its digits.\n\n  For example:\n  number_digits(12) => 3\n  number_digits(121) => 4\n  number_digits(1234) => 5\n  number_digits(12345) => 5\n  number_digits(123456) => 5\n  number_digits(1234567) => 6\n  number_digits(12345678) => 7\n  number_digits(123456789) => 8\n  number_digits(1234567890) => 9\n  number_digits(12345678901) => 10\n  number_digits(123456789012) => 10\n  number_digits(1234567890123) => 10\n  number_digits(12345678901234) => 10\n  number_digits(123456789012345) => 10\n  number_digits(1234567890123456) => 10\n  number_digits(12345678901234567) => 10\n  number_digits(123456789012345678) => 10\n  number_digits(1234567890123456789) => 10\n  */\nconst number_digits = n => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result;\n};\n\n/*\n  Return the sum of the digits of the number formed by concatenating the\n  given list of integers into a single string.\n\n  For example:\n  concatenate_digits([1, 2]) => 123\n  concatenate_digits([1, 2, 3]) => 1234\n  concatenate_digits([1, 2, 3, 4]) => 123454\n  concatenate_digits([1, 2, 3, 4, 5]) => 12345\n  concatenate_digits([1, 2, 3, 4, 5, 6]) => 123456\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7]) => 1234567\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8]) => 12345678\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) => 123456789\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 1234567890\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 12345678901\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 123456789012\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => 1234567890123\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) => 12345678901234\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) => 123456789012345\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) => 1234567890123456\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) => 12345678901234567\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) => 123456789012345678\n  concatenate_digits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) => 1234567890123456789\n  */\nconst concatenate_digits = digits => {\n  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    result += digits[i];\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the sum of the digits of n.\n\n  For example:\n  sum_digits(12) => 3\n  sum_digits(121) => 4\n  sum_digits(1234) => 5\n  sum_digits(12345) => 5\n  sum_digits(123456) => 5\n  sum_digits(1234567) => 6\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  // Your code here\n};\n\n// === Part Two ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in beats.\nconst parse_music_name = (music_string) => {\n  // Your code here\n};\n\n// === Part Three ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec = (music_string) => {\n  // Your code here\n};\n\n// === Part Four ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Five ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Six ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Seven ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Eight ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Nine ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Ten ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Eleventh ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Twelfth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Thirteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Fourteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Fifteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Sixteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Seventeenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Eighteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Nineteenth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in seconds.\nconst parse_music_name_sec_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms = (music_string) => {\n  // Your code here\n};\n\n// === Part Twentieth ===\n// Complete the function below that takes in a musical note string and returns the note name and the duration\n// of the note in milliseconds.\nconst parse_music_name_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_ms_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_man", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Given a string, return a string with all characters in lowercase.\n  >>> to_lowercase('hello world')\n  'hello world'\n  */\nconst to_lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* Given a string, return a string with all characters in uppercase.\n  >>> to_uppercase('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase.\n  >>> to_uppercase_and_lowercase('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_lowercase = (string) => {\n  return string.toUpperCase() + string.toLowerCase();\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between.\n  >>> to_uppercase_and_numbers('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase();\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces.\n  >>> to_uppercase_and_numbers_spaces('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes.\n  >>> to_uppercase_and_numbers_spaces_dashes('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '. ';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces and dashes.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'' + '-';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces and dashes and dots.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'' + '-' + '. ';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces and dashes and dots and slashes.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'' + '-' + '.'+ '/';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces and dashes and dots and slashes and colons.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes_colons('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes_colons = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'' + '-' + '.'+ '/' + ':';\n};\n\n/* Given a string, return a string with all characters in uppercase and lowercase and numbers in between and spaces and dashes and dots and slashes and colons and spaces and dashes and dots and slashes and colons and spaces.\n  >>> to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes_colons_spaces('hello world')\n  'HELLO WORLD'\n  */\nconst to_uppercase_and_numbers_spaces_dashes_dots_slashes_colons_spaces_dashes_dots_slashes_colons_spaces = (string) => {\n  return string.toUpperCase() +'' + string.toLowerCase() +'' + '-' + '.'+ '/' + ':' +'' + '-", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3)\n  0\n  */\nconst truncate_number_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3)\n  0\n  */\nconst truncate_number_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_int_int_int_int = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseInt(integer) + parseInt(decimal)\n}\n\n/* Given a positive integer number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number_int(3.5)\n  0.5\n  */\nconst truncate_number_int_int_int_int_int_int_int_int_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/**\n * Given a number and a set of numbers, return the number that is closest to the given number.\n * If the given number is in the set of numbers, return the number itself.\n * If the given number is not in the set of numbers, return the first number in the set of numbers.\n * If no numbers are in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of numbers, return 0.\n * If no number is in the set of number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = (range == 0)? 0 : (1 / range);\n  return numbers.map((n) => n * scale);\n};\n\n/**\n * Given a number and a range, return a number in the range that is the closest to that number\n * but less than (or equal to) the number itself.\n * >>> get_close_to(1.0, 0.8)\n  1.0\n  >>> get_close_to(1.0, 0.6)\n  0.8\n  >>> get_close_to(1.0, 0.2)\n  1.0\n  >>> get_close_to(1.0, 0.0)\n  1.0\n  >>> get_close_to(1.0, -0.2)\n  1.0\n  >>> get_close_to(1.0, -0.6)\n  0.8\n  >>> get_close_to(1.0, -0.8)\n  1.0\n  >>> get_close_to(1.0, -1.0)\n  1.0\n  >>> get_close_to(1.0, -1.2)\n  1.0\n  >>> get_close_to(1.0, -1.4)\n  1.0\n  >>> get_close_to(1.0, -1.6)\n  1.0\n  >>> get_close_to(1.0, -1.8)\n  1.0\n  >>> get_close_to(1.0, -2.0)\n  1.0\n  >>> get_close_to(1.0, -2.2)\n  1.0\n  >>> get_close_to(1.0, -2.4)\n  1.0\n  >>> get_close_to(1.0, -2.6)\n  1.0\n  >>> get_close_to(1.0, -2.8)\n  1.0\n  >>> get_close_to(1.0, -3.0)\n  1.0\n  >>> get_close_to(1.0, -3.2)\n  1.0\n  >>> get_close_to(1.0, -3.4)\n  1.0\n  >>> get_close_to(1.0, -3.6)\n  1.0\n  >>> get_close_to(1.0, -3.8)\n  1.0\n  >>> get_close_to(1.0, -4.0)\n  1.0\n  >>> get_close_to(1.0, -4.2)\n  1.0\n  >>> get_close_to(1.0, -4.4)\n  1.0\n  >>> get_close_to(1.0, -4.6)\n  1.0\n  >>> get_close_to(1.0, -4.8)\n  1.0\n  >>> get_close_to(1.0, -5.0)\n  1.0\n  >>> get_close_to(1.0, -5.2)\n  1.0\n  >>> get_close_to(1.0, -5.4)\n  1.0\n  >>> get_close_to(1.0, -5.6)\n  1.0\n  >>> get_close_to(1.0, -5.8)\n  1.0\n  >>> get_close_to(1.0, -6.0)\n  1.0\n  >>> get_close_to(1.0, -6.2)\n  1.0\n  >>> get_close_to(1.0, -6.4)\n  1.0\n  >>> get_close_to(1.0, -6.6)\n  1.0\n  >>> get_close_to(1.0, -6.8)\n  1.0\n  >>> get_close_to(1.0, -7.0)\n  1.0\n  >>> get_close_to(1.0, -7.2)\n  1.0\n  >>> get_close_to(1.0, -7.4)\n  1.0\n  >>> get_close_to(1.0, -7.6)\n  1.0\n  >>> get_close_to(1.0, -7.8)\n  1.0\n  >>> get_close_to(1.0, -8.0)\n  1.0\n  >>> get_close_to(1.0, -8.2)\n  1.0\n  >>> get_close_to(1.0, -8.4)\n  1.0\n  >>> get_close_to(1.0, -8.6)\n  1.0\n  >>> get_close_to(1.0, -8.8)\n  1.0\n  >>> get_close_to(1.0, -9.0)\n  1.0\n  >>> get_close_to(1.0, -9.2)\n  1.0\n  >>> get_close_to(1.0, -9.4)\n  1.0\n  >>> get_close_to(1.0, -9.6)\n  1.0\n  >>> get_close_to(1.0, -9.8)\n  1.0\n  >>> get_close_to(1.0, -10.0)\n  1.0\n  >>> get_close_to(1.0, -10.2)\n  1.0\n  >>> get_close_to(1.0, -10.4)\n  1.0\n  >>> get_close_to(1.0, -10.6)\n  1.0\n  >>> get_close_to(1.0, -10.8)\n  1.0\n  >>> get_close_to(1.0, -11.0)\n  1.0\n  >>> get_close_to(1.0, -11.2)\n  1.0\n  >>> get_close_to(1.0, -11.4)\n  1.0\n  >>> get_close_to(1.0, -11.6)\n  1.0\n  >>> get_close_to(1.0, -11.8)\n  1.0\n  >>> get_close_to(1.0, -12.0)\n  1.0\n  >>> get_close_to(1.0, -12.2)\n  1.0\n  >>> get_close_to(1.0, -12.4)\n  1.0\n  >>> get_close_to(1.0, -12.6)\n  1.0\n  >>> get_close_to(1.0, -12.8)\n  1.0\n  >>> get_close_to(1.0, -13.0)\n  1.0\n  >>> get_close_to(1.0, -13.2)\n  1.0\n  >>> get_close_to(1.0, -13.4)\n  1.0\n  >>> get_close_to(1.0, -13.6)\n  1.0\n  >>> get_close_to(1.0, -13.8)\n  1.0\n  >>> get_close_to(1.0, -14.0)\n  1.0\n  >>> get_close_to(1.0, -14.2)\n  1.0\n  >>> get_close_to(1.0, -14.4)\n  1.0\n  >>> get_close_to(1.0, -14.6)\n  1.0\n  >>> get_close_to(1.0, -14.8)\n  1.0\n  >>> get_close_to(1.0, -15.0)\n  1.0\n  >>> get_close_to(1.0, -15.2)\n  1.0\n  >>> get_close_to(1.0, -15.4)\n  1.0\n  >>> get_close_to(1.0, -15.6)\n  1.0\n  >>> get_close_to(1.0, -15.8)\n  1.0\n  >>> get_close_to(1.0, -16.0)\n  1.0\n  >>> get_close_to(1.0, -16.2)\n  1.0\n  >>> get_close_to(1.0, -16.4)\n  1.0\n  >>> get_close_to(1.0, -16.6)\n  1.0\n  >>> get_close_to(1.0, -16.8)\n  1.0\n  >>> get_close_to(1.0, -17.0)\n  1.0\n  >>> get_close_to(1.0, -17.2)\n  1.0\n  >>> get_close_to(1.0, -17.4)\n  1.0\n  >>> get_close_to(1.0, -17.6)\n  1.0\n  >>> get_close_to(1.0, -17.8)\n  1.0\n  >>> get_close_to(1.0, -18.0)\n  1.0\n  >>> get_close_to(1.0, -18.2)\n  1.0\n  >>> get_close_to(1.0, -18.4)\n  1.0\n  >>> get_close_to(1.0, -18.6)\n  1.0\n  >>> get_close_to(1.0, -18.8)\n  1.0\n  >>> get_close_to(1.0, -19.0)\n  1.0\n  >>> get_close_to(1.0, -19.2)\n  1.0\n  >>> get_close_to(1.0, -19.4)\n  1.0\n  >>> get_close_to(1.0, -19.6)\n  1.0\n  >>> get_close_to(1.0, -19.8)\n  1.0\n  >>> get_close_to(1.0, -20.0)\n  1.0\n  >>> get_close_to(1.0, -20.2)\n  1.0\n  >>> get_close_to(1.0, -20.4)\n  1.0\n  >>> get_close_to(1.0, -20.6)\n  1.0\n  >>> get_close_to(1.0, -20.8)\n  1.0\n  >>> get_close_to(1.0, -21.0)\n  1.0\n  >>> get_close_to(1.0, -21.2)\n  1.0\n  >>> get_close_to(1.0, -21.4)\n  1.0\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0]\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [true, false]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [false, true, false]\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_nones(['a', 3.14, 5])\n  []\n  >>> filter_nones([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filter_nones = (values) => {\n  return values.filter(value => value === null);\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filter_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length += string.charCodeAt(i);\n  }\n  return length;\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex = (index, string) => {\n  return string.substr(index);\n};\n\n/* Return string from given index\n  >>> strFromIndex(0, 'abc')\n  'a'\n  >>> strFromIndex(1, 'abc')\n  'b'\n  >>> strFromIndex(2, 'abc')\n  'c'\n  */\nconst strFromIndex", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let max_divisor = 1;\n  let max_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor = i;\n      max_divisor_p = i;\n    }\n  }\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = 1;\n  let min_divisor_p = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor = i;\n      min_divisor_p = i;\n    }\n  }\n  return min_divisor;\n};\n\n/* Given a number n, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n!== 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twice\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_twice = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than three times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_three_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than five times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_five_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than six times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_six_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 5)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than seven times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_seven_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 5)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 6)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than eight times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_eight_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 5)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 6)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 7)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than nine times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_nine_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 5)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 6)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 7)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 8)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than ten times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_ten_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 1)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 2)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 3)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 4)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 5)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 6)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 7)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 8)) {\n      continue;\n    }\n    if (seen.has(numbers[i] - 9)) {\n      continue;\n    }\n    seen.add(numbers[i]);\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than twenty times\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 2]\n  */\nconst remove_duplicates_less_than_twenty_times = (numbers) => {\n  const seen = new Set();\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.has(numbers[i])) {\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_2 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_3 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_4 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_5 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_6 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_7 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_8 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_9 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_10 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_11 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_12 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_13 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_14 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_15 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_16 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_17 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_18 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_19 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_20 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_21 = (string) => {\n  return string\n   .toLowerCase()\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/* Given a string, return a new string with every character in lowercase and uppercase.\n  >>> flip_case('hello')\n  'HELLO'\n  */\nconst flip_case_string_22 = (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((string, stringToAppend) => {\n    return string + stringToAppend;\n  }, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> remove('a', 'abca')\n  'b'\n  >>> remove('a', 'abcabc')\n  'b'\n  >>> remove('a', 'abcabcabc')\n  'b'\n  */\nconst remove = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  >>> removeAll('a', 'abcabcabc')\n  'abcabc'\n  */\nconst removeAll = (string, stringToRemove) => {\n  return string.replace(stringToRemove, '');\n};\n\n/* Remove all occurrences of a string from a string\n  >>> removeAll('a', 'abca')\n  'b'\n  >>> removeAll('a', 'abcabc')\n  'abca'\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const prefix_regex = new RegExp(`^${prefix}`, 'i');\n  return strings.filter(s => prefix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  const suffix_regex = new RegExp(`${suffix}$`, 'i');\n  return strings.filter(s => suffix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const substring_matches_regex = new RegExp(substring, 'i');\n  return strings.filter(s => substring_matches_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  even numbers in it */\nconst even_numbers = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  odd numbers in it */\nconst odd_numbers = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 1) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 3 in it */\nconst divisible_by_three = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 5 in it */\nconst divisible_by_five = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 5 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 7 in it */\nconst divisible_by_seven = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 7 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 11 in it */\nconst divisible_by_eleven = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 13 in it */\nconst divisible_by_thirteen = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 13 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 17 in it */\nconst divisible_by_seventeen = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 17 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 19 in it */\nconst divisible_by_nineteen = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 19 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 23 in it */\nconst divisible_by_twenty = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 23 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 29 in it */\nconst divisible_by_thirty = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 29 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 31 in it */\nconst divisible_by_thirtyone = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 31 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 35 in it */\nconst divisible_by_thirtyfive = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 35 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 37 in it */\nconst divisible_by_thirtyseven = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 37 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 41 in it */\nconst divisible_by_thirtynine = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 41 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 45 in it */\nconst divisible_by_thirtyfive = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 45 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 47 in it */\nconst divisible_by_thirtyseven = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 47 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 51 in it */\nconst divisible_by_thirtynine = (numbers) => {\n  const newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 51 === 0) {\n      newNumbers.push(numbers[i]);\n    }\n  }\n  return newNumbers;\n};\n\n/* Your task is to implement a function that will take a list of integers and return a new list with all\n  numbers that are divisible by 55 in it */\nconst divisible_by_thirtyfive = (numbers) => {\n  const newNumbers = [];\n  for (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_negative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*Return only even numbers in the list.\n  >>> get_even([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, 0, 123, -1, -10]\n  */\nconst get_even = (l) => {\n  return l.filter((x) => x % 2 === 0);\n};\n\n/*Return only odd numbers in the list.\n  >>> get_odd([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_odd = (l) => {\n  return l.filter((x) => x % 2!== 0);\n};\n\n/*Return only numbers in the list that are divisible by 3.\n  >>> get_divisible_by_three([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_three([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_three = (l) => {\n  return l.filter((x) => x % 3 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 5.\n  >>> get_divisible_by_five([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_five([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_five = (l) => {\n  return l.filter((x) => x % 5 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 7.\n  >>> get_divisible_by_seven([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_seven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_seven = (l) => {\n  return l.filter((x) => x % 7 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 11.\n  >>> get_divisible_by_eleven([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_eleven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_eleven = (l) => {\n  return l.filter((x) => x % 11 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 13.\n  >>> get_divisible_by_thirteen([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_thirteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_thirteen = (l) => {\n  return l.filter((x) => x % 13 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 17.\n  >>> get_divisible_by_seventeen([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_seventeen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_seventeen = (l) => {\n  return l.filter((x) => x % 17 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 19.\n  >>> get_divisible_by_nineteen([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_nineteen([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_nineteen = (l) => {\n  return l.filter((x) => x % 19 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 21.\n  >>> get_divisible_by_twenty([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_twenty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_twenty = (l) => {\n  return l.filter((x) => x % 21 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 25.\n  >>> get_divisible_by_fifty([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_fifty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_fifty = (l) => {\n  return l.filter((x) => x % 25 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 30.\n  >>> get_divisible_by_hundred([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_hundred([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_hundred = (l) => {\n  return l.filter((x) => x % 30 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 100.\n  >>> get_divisible_by_thousand([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_thousand([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_thousand = (l) => {\n  return l.filter((x) => x % 100 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 1000.\n  >>> get_divisible_by_million([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_divisible_by_million([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 9, 123, -1, -10]\n  */\nconst get_divisible_by_million = (l) => {\n  return l.filter((x) => x % 1000 === 0);\n};\n\n/*Return only numbers in the list that are divisible by 10000.\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return true;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return true;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return true;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return true;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return true;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return true;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n % 63 === 0) {\n    return true;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return true;\n  }\n  if (n % 93 === 0) {\n    return false;\n  }\n  if (n % 103 === 0) {\n    return true;\n  }\n  if (n % 113 === 0) {\n    return false;\n  }\n  if (n % 123 === 0) {\n    return true;\n  }\n  if (n % 133 === 0) {\n    return true;\n  }\n  if (n % 137 === 0) {\n    return false;\n  }\n  if (n % 143 === 0) {\n    return true;\n  }\n  if (n % 147 === 0) {\n    return false;\n  }\n  if (n % 153 === 0) {\n    return true;\n  }\n  if (n % 157 === 0) {\n    return false;\n  }\n  if (n % 163 === 0) {\n    return true;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return true;\n  }\n  if (n % 177 === 0) {\n    return false;\n  }\n  if (n % 183 === 0) {\n    return true;\n  }\n  if (n % 187 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return true;\n  }\n  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 203 === 0) {\n    return true;\n  }\n  if (n % 207 === 0) {\n    return false;\n  }\n  if (n % 211 === 1) {\n    return true;\n  }\n  if (n % 213 === 1) {\n    return false;\n  }\n  if (n % 215 === 1) {\n    return true;\n  }\n  if (n % 217 === 1) {\n    return false;\n  }\n  if (n % 223 === 1) {\n    return true;\n  }\n  if (n % 227 === 1) {\n    return false;\n  }\n  if (n % 233 === 1) {\n    return true;\n  }\n  if (n % 237 === 1) {\n    return false;\n  }\n  if (n % 243 === 1) {\n    return true;\n  }\n  if (n % 247 === 1) {\n    return false;\n  }\n  if (n % 253 === 1) {\n    return true;\n  }\n  if (n % 257 === 1) {\n    return false;\n  }\n  if (n % 263 === 1) {\n    return true;\n  }\n  if (n % 267 === 1) {\n    return false;\n  }\n  if (n % 273 === 1) {\n    return true;\n  }\n  if (n % 277 === 1) {\n    return false;\n  }\n  if (n % 283 === 1) {\n    return true;\n  }\n  if (n % 287 === 1) {\n    return false;\n  }\n  if (n % 293 === 1) {\n    return true;\n  }\n  if (n % 297 === 1) {\n    return false;\n  }\n  if (n % 303 === 1) {\n    return true;\n  }\n  if (n % 307 === 1) {\n    return false;\n  }\n  if (n % 313 === 1) {\n    return true;\n  }\n  if (n % 317 === 1) {\n    return false;\n  }\n  if (n % 323 === 1) {\n    return true;\n  }\n  if (n % 327 === 1) {\n    return false;\n  }\n  if (n % 333 === 1) {\n    return true;\n  }\n  if (n % 337 === 1) {\n    return false;\n  }\n  if (n % 343 === 1) {\n    return true;\n  }\n  if (n % 347 === 1) {\n    return false;\n  }\n  if (n % 353 === 1) {\n    return true;\n  }\n  if (n % 357 === 1) {\n    return false;\n  }\n  if (n % 363 === 1) {\n    return true;\n  }\n  if (n % 367 === 1) {\n    return false;\n  }\n  if (n % 373 === 1) {\n    return true;\n  }\n  if (n % 377 === 1) {\n    return false;\n  }\n  if (n % 383 === 1) {\n    return true;\n  }\n  if (n % 387 === 1) {\n    return false;\n  }\n  if (n % 393 === 1) {\n    return true;\n  }\n  if (n % 397 === 1) {\n    return false;\n  }\n  if (n % 403 === 1) {\n    return true;\n  }\n  if (n % 407 === 1) {\n    return false;\n  }\n  if (n % 413 === 1) {\n    return true;\n  }\n  if (n % 417 === 1) {\n    return false;\n  }\n  if (n % 423 === 1) {\n    return true;\n  }\n  if (n % 427 === 1) {\n    return false;\n  }\n  if (n % 433 === 1) {\n    return true;\n  }\n  if (n % 437 === 1) {\n    return false;\n  }\n  if (n % 443 === 1) {\n    return true;\n  }\n  if (n % 447 === 1) {\n    return false;\n  }\n  if (n % 453 === 1) {\n    return true;\n  }\n  if (n % 457 === 1) {\n    return false;\n  }\n  if (n % 463 === 1) {\n    return true;\n  }\n  if (n % 467 === 1) {\n    return false;\n  }\n  if (n % 473 === 1) {\n    return true;\n  }\n  if (n % 477 === 1) {\n    return false;\n  }\n  if (n % 483 === 1) {\n    return true;\n  }\n  if (n % 487 === 1) {\n    return false;\n  }\n  if (n % 493 === 1) {\n    return true;\n  }\n  if (n % 497 === 1) {\n    return false;\n  }\n  if (n % 503 === 1) {\n    return true;\n  }\n  if (n % 507 === 1) {\n    return false;\n  }\n  if (n % 513 === 1) {\n    return true;\n  }\n  if (n % 517!== 1) {\n    return false;\n  }\n  if (n % 523 === 1) {\n    return true;\n  }\n  if (n % 527 === 1) {\n    return false;\n  }\n  if (n % 533 === 1) {\n    return true;\n  }\n  if (n % 537 === 1) {\n    return false;\n  }\n  if (n % 543 === 1) {\n    return true;\n  }\n  if (n % 547 === 1) {\n    return false;\n  }\n  if (n % 553 === 1) {\n    return true;\n  }\n  if (n % 557 === 1) {\n    return false;\n  }\n  if (n % 563 === 1) {\n    return true;\n  }\n  if (n % 567 === 1) {\n    return false;\n  }\n  if (n % 573 === 1) {\n    return true;\n  }\n  if (n % 577 === 1) {\n    return false;\n  }\n  if (n % 583 === 1) {\n    return true;\n  }\n  if (n % 587 === 1) {\n    return false;\n  }\n  if (n % 593 === 1) {\n    return true;\n  }\n  if (n % 597 === 1) {\n    return false;\n  }\n  if (n % 603 === 1) {\n    return true;\n  }\n  if (n % 607 === 1) {\n    return false;\n  }\n  if (n % 613 === 1) {\n    return true;\n  }\n  if (n % 617 === 1) {\n    return false;\n  }\n  if (n % 623 === 1) {\n    return true;\n  }\n  if (n % 627 === 1) {\n    return false;\n  }\n  if (n % 631 === 1) {\n    return true;\n  }\n  if (n % 637 === 1) {\n    return false;\n  }\n  if (n % 643 === 1) {\n    return true;\n  }\n  if (n % 647 === 1) {\n    return false;\n  }\n  if (n % 653 === 1) {\n    return true;\n  }\n  if (n % 657 === 1) {\n    return false;\n  }\n  if (n % 663 === 1) {\n    return true;\n  }\n  if (n % 667 === 1) {\n    return false;\n  }\n  if (n % 673 === 1) {\n    return true;\n  }\n  if (n % 677 === 1) {\n    return false;\n  }\n  if (n % 683 === 1) {\n    return true;\n  }\n  if (n % 687 === 1) {\n    return false;\n  }\n  if (n % 693 === 1) {\n    return true;\n  }\n  if (n % 697 === 1) {\n    return false;\n  }\n  if (n % 70", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let z2 = 0;\n  let z3 = 0;\n  let z4 = 0;\n  let z5 = 0;\n  let z6 = 0;\n  let z7 = 0;\n  let z8 = 0;\n  let z9 = 0;\n  let z10 = 0;\n  let z11 = 0;\n  let z12 = 0;\n  let z13 = 0;\n  let z14 = 0;\n  let z15 = 0;\n  let z16 = 0;\n  let z17 = 0;\n  let z18 = 0;\n  let z19 = 0;\n  let z20 = 0;\n  let z21 = 0;\n  let z22 = 0;\n  let z23 = 0;\n  let z24 = 0;\n  let z25 = 0;\n  let z26 = 0;\n  let z27 = 0;\n  let z28 = 0;\n  let z29 = 0;\n  let z30 = 0;\n  let z31 = 0;\n  let z32 = 0;\n  let z33 = 0;\n  let z34 = 0;\n  let z35 = 0;\n  let z36 = 0;\n  let z37 = 0;\n  let z38 = 0;\n  let z39 = 0;\n  let z40 = 0;\n  let z41 = 0;\n  let z42 = 0;\n  let z43 = 0;\n  let z44 = 0;\n  let z45 = 0;\n  let z46 = 0;\n  let z47 = 0;\n  let z48 = 0;\n  let z49 = 0;\n  let z50 = 0;\n  let z51 = 0;\n  let z52 = 0;\n  let z53 = 0;\n  let z54 = 0;\n  let z55 = 0;\n  let z56 = 0;\n  let z57 = 0;\n  let z58 = 0;\n  let z59 = 0;\n  let z60 = 0;\n  let z61 = 0;\n  let z62 = 0;\n  let z63 = 0;\n  let z64 = 0;\n  let z65 = 0;\n  let z66 = 0;\n  let z67 = 0;\n  let z68 = 0;\n  let z69 = 0;\n  let z70 = 0;\n  let z71 = 0;\n  let z72 = 0;\n  let z73 = 0;\n  let z74 = 0;\n  let z75 = 0;\n  let z76 = 0;\n  let z77 = 0;\n  let z78 = 0;\n  let z79 = 0;\n  let z80 = 0;\n  let z81 = 0;\n  let z82 = 0;\n  let z83 = 0;\n  let z84 = 0;\n  let z85 = 0;\n  let z86 = 0;\n  let z87 = 0;\n  let z88 = 0;\n  let z89 = 0;\n  let z90 = 0;\n  let z91 = 0;\n  let z92 = 0;\n  let z93 = 0;\n  let z94 = 0;\n  let z95 = 0;\n  let z96 = 0;\n  let z97 = 0;\n  let z98 = 0;\n  let z99 = 0;\n  let z100 = 0;\n  let z101 = 0;\n  let z102 = 0;\n  let z103 = 0;\n  let z104 = 0;\n  let z105 = 0;\n  let z106 = 0;\n  let z107 = 0;\n  let z108 = 0;\n  let z109 = 0;\n  let z110 = 0;\n  let z111 = 0;\n  let z112 = 0;\n  let z113 = 0;\n  let z114 = 0;\n  let z115 = 0;\n  let z116 = 0;\n  let z117 = 0;\n  let z118 = 0;\n  let z119 = 0;\n  let z120 = 0;\n  let z121 = 0;\n  let z122 = 0;\n  let z123 = 0;\n  let z124 = 0;\n  let z125 = 0;\n  let z126 = 0;\n  let z127 = 0;\n  let z128 = 0;\n  let z129 = 0;\n  let z130 = 0;\n  let z131 = 0;\n  let z132 = 0;\n  let z133 = 0;\n  let z134 = 0;\n  let z135 = 0;\n  let z136 = 0;\n  let z137 = 0;\n  let z138 = 0;\n  let z139 = 0;\n  let z140 = 0;\n  let z141 = 0;\n  let z142 = 0;\n  let z143 = 0;\n  let z144 = 0;\n  let z145 = 0;\n  let z146 = 0;\n  let z147 = 0;\n  let z148 = 0;\n  let z149 = 0;\n  let z150 = 0;\n  let z151 = 0;\n  let z152 = 0;\n  let z153 = 0;\n  let z154 = 0;\n  let z155 = 0;\n  let z156 = 0;\n  let z157 = 0;\n  let z158 = 0;\n  let z159 = 0;\n  let z160 = 0;\n  let z161 = 0;\n  let z162 = 0;\n  let z163 = 0;\n  let z164 = 0;\n  let z165 = 0;\n  let z166 = 0;\n  let z167 = 0;\n  let z168 = 0;\n  let z169 = 0;\n  let z170 = 0;\n  let z171 = 0;\n  let z172 = 0;\n  let z173 = 0;\n  let z174 = 0;\n  let z175 = 0;\n  let z176 = 0;\n  let z177 = 0;\n  let z178 = 0;\n  let z179 = 0;\n  let z180 = 0;\n  let z181 = 0;\n  let z182 = 0;\n  let z183 = 0;\n  let z184 = 0;\n  let z185 = 0;\n  let z186 = 0;\n  let z187 = 0;\n  let z188 = 0;\n  let z189 = 0;\n  let z190 = 0;\n  let z191 = 0;\n  let z192 = 0;\n  let z193 = 0;\n  let z194 = 0;\n  let z195 = 0;\n  let z196 = 0;\n  let z197 = 0;\n  let z198 = 0;\n  let z199 = 0;\n  let z200 = 0;\n  let z201 = 0;\n  let z202 = 0;\n  let z203 = 0;\n  let z204 = 0;\n  let z205 = 0;\n  let z206 = 0;\n  let z207 = 0;\n  let z208 = 0;\n  let z209 = 0;\n  let z210 = 0;\n  let z211 = 0;\n  let z212 = 0;\n  let z213 = 0;\n  let z214 = 0;\n  let z215 = 0;\n  let z216 = 0;\n  let z217 = 0;\n  let z218 = 0;\n  let z219 = 0;\n  let z220 = 0;\n  let z221 = 0;\n  let z222 = 0;\n  let z223 = 0;\n  let z224 = 0;\n  let z225 = 0;\n  let z226 = 0;\n  let z227 = 0;\n  let z228 = 0;\n  let z229 = 0;\n  let z230 = 0;\n  let z231 = 0;\n  let z232 = 0;\n  let z233 = 0;\n  let z234 = 0;\n  let z235 = 0;\n  let z236 = 0;\n  let z237 = 0;\n  let z238 = 0;\n  let z239 = 0;\n  let z240 = 0;\n  let z241 = 0;\n  let z242 = 0;\n  let z243 = 0;\n  let z244 = 0;\n  let z245 = 0;\n  let z246 = 0;\n  let z247 = 0;\n  let z248 = 0;\n  let z249 = 0;\n  let z250 = 0;\n  let z251 = 0;\n  let z252 = 0;\n  let z253 = 0;\n  let z254 = 0;\n  let z255 = 0;\n  let z256 = 0;\n  let z257 = 0;\n  let z258 = 0;\n  let z259 = 0;\n  let z260 = 0;\n  let z261 = 0;\n  let z262 = 0;\n  let z263 = 0;\n  let z264 = 0;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l1[i]);\n    } else {\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_fifth = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l1[i]);\n    } else {\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_seventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_seventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_seventh = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l1[i]);\n    } else {\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_ninth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_ninth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_ninth = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l1[i]);\n    } else {\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twentieth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twentieth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twentieth = (l) => {\n  const l1 = l.slice();\n  const l2 = [];\n  for (let i = 0; i < l1.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l1[i]);\n    } else {\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(l1[i]);\n      l2.push(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue\n    }\n    u[l[i]] = 1\n  }\n  return Object.keys(u).sort().map(k => +k)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort()\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sort = (l) => {\n  return l.sort((a, b) => {\n    return a - b\n  })\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortNumber = (a, b) => {\n  return a - b\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortString)\n  ['0', '1', '2', '3', '5', '5', '9', '123']\n*/\nconst sortString = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortBoolean = (a, b) => {\n  return a === b? 0 : a? 1 : -1\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortDate = (a, b) => {\n  return a - b\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObject = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArray = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeysValuesKeysValuesKeys = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortObjectKeysValuesKeysValuesKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, 123].sort(sortNumber)\n  [0, 1, 2, 3, 5, 3, 5, 9, 123]\n*/\nconst sortArrayKeysValuesKeysValuesKeysValuesKeysValuesKeysValues = (a, b) => {\n  return a.localeCompare(b)\n}\n\n/*\n  >>> [5, 3, 5, 2, 3, 3, 9, 0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of squares of all elements in the list.\n  >>> sum_squares([1, 2, 3])\n  6\n  >>> sum_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_squares = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of cubes of all elements in the list.\n  >>> sum_cubes([1, 2, 3])\n  6\n  >>> sum_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_cubes = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i] * l[i];\n  }\n  return sum;\n};\n\n/*Return sum of all elements in list divided by length of list.\n  >>> average([1, 2, 3])\n  1.5\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -7.5\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  let mid = Math.floor(l.length / 2);\n  if (l.length % 2 === 0) {\n    return l[mid];\n  } else {\n    return ((l[mid] + l[mid]) / 2);\n  }\n};\n\n/*Return mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode([1, 2, 3])\n  1\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio([1, 2, 3])\n  1\n  >>> mode_ratio([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio_ratio([1, 2, 3])\n  1\n  >>> mode_ratio_ratio([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio_ratio_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio_ratio([1, 2, 3])\n  1\n  >>> mode_ratio_ratio([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio_ratio_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio_ratio_ratio([1, 2, 3])\n  1\n  >>> mode_ratio_ratio_ratio([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio_ratio_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio_ratio_ratio([1, 2, 3])\n  1\n  >>> mode_ratio_ratio_ratio([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode_ratio_ratio_ratio = (l) => {\n  let modes = [];\n  let maxCount = 0;\n  let maxCountIndex = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === maxCount) {\n      modes[maxCountIndex] = l[i];\n      maxCountIndex++;\n    } else {\n      maxCount = l[i];\n      maxCountIndex = i;\n    }\n  }\n  return modes / l.length;\n};\n\n/*Return mode of all elements in the list divided by length of list.\n  >>> mode_ratio_ratio_ratio([1, 2, 3])\n  1\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [5, 6, 3, 4]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).reverse().sort()\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of one character.\n  */\nconst encode_cyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encode_cyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encode_cyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, i + 4));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encode_cyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decode_cyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, i + 5));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encode_cyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false otherwise.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n === 0 || n === 1) {\n    return true;\n  }\n  if (prime_fib(n) === n) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  is_palindrome returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome(1)\n  True\n  >>> is_palindrome(2)\n  False\n  >>> is_palindrome(3)\n  False\n  >>> is_palindrome(4)\n  True\n  >>> is_palindrome(5)\n  False\n  */\nconst is_palindrome = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative(1)\n  True\n  >>> is_palindrome_iterative(2)\n  False\n  >>> is_palindrome_iterative(3)\n  False\n  >>> is_palindrome_iterative(4)\n  True\n  >>> is_palindrome_iterative(5)\n  False\n  */\nconst is_palindrome_iterative = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_2 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_2(1)\n  True\n  >>> is_palindrome_iterative_2(2)\n  False\n  >>> is_palindrome_iterative_2(3)\n  False\n  >>> is_palindrome_iterative_2(4)\n  True\n  >>> is_palindrome_iterative_2(5)\n  False\n  */\nconst is_palindrome_iterative_2 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_3 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_3(1)\n  True\n  >>> is_palindrome_iterative_3(2)\n  False\n  >>> is_palindrome_iterative_3(3)\n  False\n  >>> is_palindrome_iterative_3(4)\n  True\n  >>> is_palindrome_iterative_3(5)\n  False\n  */\nconst is_palindrome_iterative_3 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_4 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_4(1)\n  True\n  >>> is_palindrome_iterative_4(2)\n  False\n  >>> is_palindrome_iterative_4(3)\n  False\n  >>> is_palindrome_iterative_4(4)\n  True\n  >>> is_palindrome_iterative_4(5)\n  False\n  */\nconst is_palindrome_iterative_4 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_5 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_5(1)\n  True\n  >>> is_palindrome_iterative_5(2)\n  False\n  >>> is_palindrome_iterative_5(3)\n  False\n  >>> is_palindrome_iterative_5(4)\n  True\n  >>> is_palindrome_iterative_5(5)\n  False\n  */\nconst is_palindrome_iterative_5 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_6 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_6(1)\n  True\n  >>> is_palindrome_iterative_6(2)\n  False\n  >>> is_palindrome_iterative_6(3)\n  False\n  >>> is_palindrome_iterative_6(4)\n  True\n  >>> is_palindrome_iterative_6(5)\n  False\n  */\nconst is_palindrome_iterative_6 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_7 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_7(1)\n  True\n  >>> is_palindrome_iterative_7(2)\n  False\n  >>> is_palindrome_iterative_7(3)\n  False\n  >>> is_palindrome_iterative_7(4)\n  True\n  >>> is_palindrome_iterative_7(5)\n  False\n  */\nconst is_palindrome_iterative_7 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_8 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_8(1)\n  True\n  >>> is_palindrome_iterative_8(2)\n  False\n  >>> is_palindrome_iterative_8(3)\n  False\n  >>> is_palindrome_iterative_8(4)\n  True\n  >>> is_palindrome_iterative_8(5)\n  False\n  */\nconst is_palindrome_iterative_8 = (n) => {\n  let reversed_number = \"\";\n  for (let i = n; i >= 0; i--) {\n    reversed_number += i;\n  }\n  return reversed_number === n;\n};\n\n/*\n  is_palindrome_iterative_9 returns true if n is a palindrome number and false otherwise.\n  >>> is_palindrome_iterative_9(1)\n  True\n  >>> is_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = (numbers) => {\n    const sum = numbers.reduce((sum, number) => sum + number, 0);\n    return sum / numbers.length;\n  };\n\n  const deviation = (numbers) => {\n    const mean = mean(numbers);\n    return numbers.map((number) => Math.pow(number - mean, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / mean(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    const middle = Math.floor(numbers_sorted.length / 2);\n    return numbers_sorted[middle];\n  };\n\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((number) => Math.pow(number - median, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / median(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    return numbers_sorted[0];\n  };\n\n  const deviation = (numbers) => {\n    const mode = mode(numbers);\n    return numbers.map((number) => Math.pow(number - mode, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / mode(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median_mode = (numbers) => {\n  const median = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    const middle = Math.floor(numbers_sorted.length / 2);\n    return numbers_sorted[middle];\n  };\n\n  const mode = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    return numbers_sorted[0];\n  };\n\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    const mode = mode(numbers);\n    return numbers.map((number) => Math.pow(number - median, 2)).reduce((sum, number) => sum + number, 0) +\n      numbers.map((number) => Math.pow(number - mode, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / median(numbers) / mode(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    const middle = Math.floor(numbers_sorted.length / 2);\n    return numbers_sorted[middle];\n  };\n\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((number) => Math.pow(number - median, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / median(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    return numbers_sorted[0];\n  };\n\n  const deviation = (numbers) => {\n    const mode = mode(numbers);\n    return numbers.map((number) => Math.pow(number - mode, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / mode(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median_mode = (numbers) => {\n  const median = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    const middle = Math.floor(numbers_sorted.length / 2);\n    return numbers_sorted[middle];\n  };\n\n  const mode = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    return numbers_sorted[0];\n  };\n\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    const mode = mode(numbers);\n    return numbers.map((number) => Math.pow(number - median, 2)).reduce((sum, number) => sum + number, 0) +\n      numbers.map((number) => Math.pow(number - mode, 2)).reduce((sum, number) => sum + number, 0);\n  };\n\n  return deviation(numbers) / median(numbers) / mode(numbers);\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const numbers_sorted = numbers.sort((a, b) => a - b);\n    const middle = Math.floor(numbers_sorted.length / 2);\n    return numbers_sorted[middle];\n  };\n\n  const deviation = (numbers) => {\n    const median = median(numbers);\n    return numbers.map((number) => Math.pow(number - median, 2)).reduce((sum, number) => ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const n = l.length;\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += l[i];\n    if (sum === 0) return true;\n  }\n  return false;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> is_permutation([1, 2, 3, 0])\n  false\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n  true\n  >>> is_permutation([4, 3, 6, 5])\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_7 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_collision(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_8 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mul_list([1, 2, 3])\n  [2, 4, 6]\n  >>> mul_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55]\n  */\nconst mul_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n *= 2;\n    l[i] = l[i] * 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div_list([1, 2, 3])\n  [1, 2, 1]\n  >>> div_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5]\n  */\nconst div_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n /= 2;\n    l[i] = l[i] / 2;\n  }\n  return l;\n};\n\n/*Return list with elements divide", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  is_palindrome takes an integer as an input.\n  it returns true if the integer is a palindrome, and false otherwise.\n  >>> is_palindrome(121)\n  true\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(124)\n  true\n  >>> is_palindrome(125)\n  false\n  >>> is_palindrome(126)\n  true\n  >>> is_palindrome(127)\n  false\n  >>> is_palindrome(128)\n  true\n  >>> is_palindrome(129)\n  false\n  >>> is_palindrome(130)\n  true\n  >>> is_palindrome(131)\n  false\n  >>> is_palindrome(132)\n  true\n  >>> is_palindrome(133)\n  false\n  >>> is_palindrome(134)\n  true\n  >>> is_palindrome(135)\n  false\n  >>> is_palindrome(136)\n  true\n  >>> is_palindrome(137)\n  false\n  >>> is_palindrome(138)\n  true\n  >>> is_palindrome(139)\n  false\n  >>> is_palindrome(140)\n  true\n  >>> is_palindrome(141)\n  false\n  >>> is_palindrome(142)\n  true\n  >>> is_palindrome(143)\n  false\n  >>> is_palindrome(144)\n  true\n  >>> is_palindrome(145)\n  false\n  >>> is_palindrome(146)\n  true\n  >>> is_palindrome(147)\n  false\n  >>> is_palindrome(148)\n  true\n  >>> is_palindrome(149)\n  false\n  >>> is_palindrome(150)\n  true\n  >>> is_palindrome(151)\n  false\n  >>> is_palindrome(152)\n  true\n  >>> is_palindrome(153)\n  false\n  >>> is_palindrome(154)\n  true\n  >>> is_palindrome(155)\n  false\n  >>> is_palindrome(156)\n  true\n  >>> is_palindrome(157)\n  false\n  >>> is_palindrome(158)\n  true\n  >>> is_palindrome(159)\n  false\n  >>> is_palindrome(160)\n  true\n  >>> is_palindrome(161)\n  false\n  >>> is_palindrome(162)\n  true\n  >>> is_palindrome(163)\n  false\n  >>> is_palindrome(164)\n  true\n  >>> is_palindrome(165)\n  false\n  >>> is_palindrome(166)\n  true\n  >>> is_palindrome(167)\n  false\n  >>> is_palindrome(168)\n  true\n  >>> is_palindrome(169)\n  false\n  >>> is_palindrome(170)\n  true\n  >>> is_palindrome(171)\n  false\n  >>> is_palindrome(172)\n  true\n  >>> is_palindrome(173)\n  false\n  >>> is_palindrome(174)\n  true\n  >>> is_palindrome(175)\n  false\n  >>> is_palindrome(176)\n  true\n  >>> is_palindrome(177)\n  false\n  >>> is_palindrome(178)\n  true\n  >>> is_palindrome(179)\n  false\n  >>> is_palindrome(180)\n  true\n  >>> is_palindrome(181)\n  false\n  >>> is_palindrome(182)\n  true\n  >>> is_palindrome(183)\n  false\n  >>> is_palindrome(184)\n  true\n  >>> is_palindrome(185)\n  false\n  >>> is_palindrome(186)\n  true\n  >>> is_palindrome(187)\n  false\n  >>> is_palindrome(188)\n  true\n  >>> is_palindrome(189)\n  false\n  >>> is_palindrome(190)\n  true\n  >>> is_palindrome(191)\n  false\n  >>> is_palindrome(192)\n  true\n  >>> is_palindrome(193)\n  false\n  >>> is_palindrome(194)\n  true\n  >>> is_palindrome(195)\n  false\n  >>> is_palindrome(196)\n  true\n  >>> is_palindrome(197)\n  false\n  >>> is_palindrome(198)\n  true\n  >>> is_palindrome(199)\n  false\n  >>> is_palindrome(200)\n  true\n  >>> is_palindrome(201)\n  false\n  >>> is_palindrome(202)\n  true\n  >>> is_palindrome(203)\n  false\n  >>> is_palindrome(204)\n  true\n  >>> is_palindrome(205)\n  false\n  >>> is_palindrome(206)\n  true\n  >>> is_palindrome(207)\n  false\n  >>> is_palindrome(208)\n  true\n  >>> is_palindrome(209)\n  false\n  >>> is_palindrome(210)\n  true\n  >>> is_palindrome(211)\n  false\n  >>> is_palindrome(212)\n  true\n  >>> is_palindrome(213)\n  false\n  >>> is_palindrome(214)\n  true\n  >>> is_palindrome(215)\n  false\n  >>> is_palindrome(216)\n  true\n  >>> is_palindrome(217)\n  false", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let res = ''\n  let i = 0\n  while (i < x.length) {\n    res += x.charAt(i) * Math.pow(base, i)\n    i++\n  }\n  return res\n}\n\n/*\n  Convert a string to an integer in base 10.\n  >>> to_base('100', 10)\n  100\n  >>> to_base('100', 2)\n  100\n  >>> to_base('100', 1)\n  10\n  >>> to_base('100', -1)\n  100\n  >>> to_base('100', -2)\n  100\n  >>> to_base('100', -3)\n  100\n  >>> to_base('100', -4)\n  100\n  >>> to_base('100', -5)\n  100\n  >>> to_base('100', -6)\n  100\n  >>> to_base('100', -7)\n  100\n  >>> to_base('100', -8)\n  100\n  >>> to_base('100', -9)\n  100\n  >>> to_base('100', -10)\n  100\n  >>> to_base('100', -11)\n  100\n  >>> to_base('100', -12)\n  100\n  >>> to_base('100', -13)\n  100\n  >>> to_base('100', -14)\n  100\n  >>> to_base('100', -15)\n  100\n  >>> to_base('100', -16)\n  100\n  >>> to_base('100', -17)\n  100\n  >>> to_base('100', -18)\n  100\n  >>> to_base('100', -19)\n  100\n  >>> to_base('100', -20)\n  100\n  >>> to_base('100', -21)\n  100\n  >>> to_base('100', -22)\n  100\n  >>> to_base('100', -23)\n  100\n  >>> to_base('100', -24)\n  100\n  >>> to_base('100', -25)\n  100\n  >>> to_base('100', -26)\n  100\n  >>> to_base('100', -27)\n  100\n  >>> to_base('100', -28)\n  100\n  >>> to_base('100', -29)\n  100\n  >>> to_base('100', -30)\n  100\n  >>> to_base('100', -31)\n  100\n  >>> to_base('100', -32)\n  100\n  >>> to_base('100', -33)\n  100\n  >>> to_base('100', -34)\n  100\n  >>> to_base('100', -35)\n  100\n  >>> to_base('100', -36)\n  100\n  >>> to_base('100', -37)\n  100\n  >>> to_base('100', -38)\n  100\n  >>> to_base('100', -39)\n  100\n  >>> to_base('100', -40)\n  100\n  >>> to_base('100', -41)\n  100\n  >>> to_base('100', -42)\n  100\n  >>> to_base('100', -43)\n  100\n  >>> to_base('100', -44)\n  100\n  >>> to_base('100', -45)\n  100\n  >>> to_base('100', -46)\n  100\n  >>> to_base('100', -47)\n  100\n  >>> to_base('100', -48)\n  100\n  >>> to_base('100', -49)\n  100\n  >>> to_base('100', -50)\n  100\n  >>> to_base('100', -51)\n  100\n  >>> to_base('100', -52)\n  100\n  >>> to_base('100', -53)\n  100\n  >>> to_base('100', -54)\n  100\n  >>> to_base('100', -55)\n  100\n  >>> to_base('100', -56)\n  100\n  >>> to_base('100', -57)\n  100\n  >>> to_base('100', -58)\n  100\n  >>> to_base('100', -59)\n  100\n  >>> to_base('100', -60)\n  100\n  >>> to_base('100', -61)\n  100\n  >>> to_base('100', -99)\n  100\n  >>> to_base('100', -100)\n  100\n  >>> to_base('100', -101)\n  100\n  >>> to_base('100', -102)\n  100\n  >>> to_base('100', -103)\n  100\n  >>> to_base('100', -104)\n  100\n  >>> to_base('100', -105)\n  100\n  >>> to_base('100', -106)\n  100\n  >>> to_base('100', -107)\n  100\n  >>> to_base('100', -108)\n  100\n  >>> to_base('100', -109)\n  100\n  >>> to_base('100', -110)\n  100\n  >>> to_base('100', -111)\n  100\n  >>> to_base('100', -112)\n  100\n  >>> to_base('100', -113)\n  100\n  >>> to_base('100', -114)\n  100\n  >>> to_base('100', -115)\n  100\n  >>> to_base('100', -116)\n  100\n  >>> to_base('100', -117)\n  100\n  >>> to_base('100', -118)\n  100\n  >>> to_base('100', -119)\n  100\n  >>> to_base('100', -120)\n  100\n  >>> to_base('100', -121)\n  100\n  >>> to_base('100', -122)\n  100\n  >>> to_base('100', -123)\n  100\n  >>> to_base('100', -124)\n  100\n  >>> to_base('100', -125)\n  100\n  >>> to_base('100', -126)\n  100\n  >>> to_base('100', -127)\n  100\n  >>> to_base('100', -128)\n  100\n  >>> to_base('100', -129)\n  100\n  >>> to_base('100', -200)\n  100\n  >>> to_base('100', -201)\n  100\n  >>> to_base('100', -202)\n  100\n  >>> to_base('100', -203)\n  100\n  >>> to_base('100', -204)\n  100\n  >>> to_base('100', -205)\n  100\n  >>> to_base('100', -206)\n  100\n  >>> to_base('100', -207)\n  100\n  >>> to_base('100', -208)\n  100\n  >>> to_base('100', -209)\n  100\n  >>> to_base('100', -210)\n  100\n  >>> to_base('100', -211)\n  100\n  >>> to_base('100', -2", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * h;\n};\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a diamond.\n  >>> diamond_area(5, 3)\n  7.5\n  */\nconst diamond_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a pentagon.\n  >>> pentagon_area(5, 3)\n  7.5\n  */\nconst pentagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a hexagon.\n  >>> hexagon_area(5, 3)\n  7.5\n  */\nconst hexagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a heptagon.\n  >>> heptagon_area(5, 3)\n  7.5\n  */\nconst heptagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a octagon.\n  >>> octagon_area(5, 3)\n  7.5\n  */\nconst octagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a nonagon.\n  >>> nonagon_area(5, 3)\n  7.5\n  */\nconst nonagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagon_area(5, 3)\n  7.5\n  */\nconst decagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a undecagon.\n  >>> undecagon_area(5, 3)\n  7.5\n  */\nconst undecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagon_area(5, 3)\n  7.5\n  */\nconst dodecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a tetragon.\n  >>> tetragon_area(5, 3)\n  7.5\n  */\nconst tetragon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a pentadecagon.\n  >>> pentadecagon_area(5, 3)\n  7.5\n  */\nconst pentadecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a hexadecagon.\n  >>> hexadecagon_area(5, 3)\n  7.5\n  */\nconst hexadecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagon_area(5, 3)\n  7.5\n  */\nconst heptadecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagon_area(5, 3)\n  7.5\n  */\nconst octadecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagon_area(5, 3)\n  7.5\n  */\nconst nonadecagon_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a decagon.\n  >>> decagon5_area(5, 3)\n  7.5\n  */\nconst decagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a undecagon.\n  >>> undecagon5_area(5, 3)\n  7.5\n  */\nconst undecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a dodecagon.\n  >>> dodecagon5_area(5, 3)\n  7.5\n  */\nconst dodecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a tetragon.\n  >>> tetragon5_area(5, 3)\n  7.5\n  */\nconst tetragon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a pentadecagon.\n  >>> pentadecagon5_area(5, 3)\n  7.5\n  */\nconst pentadecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a hexadecagon.\n  >>> hexadecagon5_area(5, 3)\n  7.5\n  */\nconst hexadecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a heptadecagon.\n  >>> heptadecagon5_area(5, 3)\n  7.5\n  */\nconst heptadecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a octadecagon.\n  >>> octadecagon5_area(5, 3)\n  7.5\n  */\nconst octadecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.PI * h;\n};\n\n/*Given length of a side and high return area for a nonadecagon.\n  >>> nonadecagon5_area(5, 3)\n  7.5\n  */\nconst nonadecagon5_area = (a, h) => {\n  return a * Math.sqrt(3) / 2 * Math.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*The Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibonacci(0) -> 0\n  fibonacci(1) -> 1\n  fibonacci(n) -> fibonacci(n-1) + fibonacci(n-2).\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.  Do not use recursion.\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[len / 2];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxItem = item;\n    }\n  }\n  return maxItem;\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  let maxCount = 0;\n  let maxItem;\n  for (let i = 0; i < sorted.length; i++) {\n    const item = sorted[i];\n    const count = sorted.filter(x => x === item).length;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_2 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_3 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_4 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_5 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_6 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_7 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_8 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_9 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_10 = (text) => {\n  const text = text.toLowerCase();\n  const reversed = text.split('').reverse().join('');\n  return text === reversed.replace(/\\s/g, '');\n};\n\n/*\n  Checks if given string is a palindrome with spaces removed\n  >>> is_palindrome_with_spaces_removed('')\n  true\n  >>> is_palindrome_with_spaces_removed('aba')\n  true\n  >>> is_palindrome_with_spaces_removed('aaaaa')\n  true\n  >>> is_palindrome_with_spaces_removed('zbcd')\n  false\n  */\nconst is_palindrome_with_spaces_removed_11 = (text) => {", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n >= p) {\n    return n - p;\n  }\n  return n % p;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n  const result = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < numbers.length) {\n    if (j === delimeter) {\n      result.push(numbers[i]);\n      i++;\n      j = 0;\n    } else {\n      result.push(numbers[i]);\n      j++;\n    }\n\n    i++;\n  }\n\n  return result;\n};\n\n/**\n * Returns a list containing all but the first `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to omit\n * @return {Array}\n * @example\n * const result = arrays.drop([1, 2, 3, 4], 2);\n * console.log(result);\n * > [1, 3]\n */\nconst drop = (list, n) => {\n  return list.slice(n);\n};\n\n/**\n * Returns a list containing all but the last `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to omit\n * @return {Array}\n * @example\n * const result = arrays.dropRight([1, 2, 3, 4], 2);\n * console.log(result);\n * > [2, 4]\n */\nconst dropRight = (list, n) => {\n  return list.slice(0, -n);\n};\n\n/**\n * Returns a list containing all but the first `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to omit\n * @return {Array}\n * @example\n * const result = arrays.dropRightWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [2, 4]\n */\nconst dropRightWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return dropRight(list, rightIndex + 1);\n};\n\n/**\n * Returns a list containing all but the last `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to omit\n * @return {Array}\n * @example\n * const result = arrays.dropWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [1, 2]\n */\nconst dropWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return drop(list, rightIndex + 1);\n};\n\n/**\n * Returns a list containing the first `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.first([1, 2, 3, 4], 2);\n * console.log(result);\n * > [1, 2]\n */\nconst first = (list, n) => {\n  return list.slice(0, n);\n};\n\n/**\n * Returns a list containing the last `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.last([1, 2, 3, 4], 2);\n * console.log(result);\n * > [3, 4]\n */\nconst last = (list, n) => {\n  return list.slice(-n);\n};\n\n/**\n * Returns a list containing the first `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.take([1, 2, 3, 4], 2);\n * console.log(result);\n * > [1, 2]\n */\nconst take = (list, n) => {\n  return list.slice(0, n);\n};\n\n/**\n * Returns a list containing the last `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeRight([1, 2, 3, 4], 2);\n * console.log(result);\n * > [3, 4]\n */\nconst takeRight = (list, n) => {\n  return list.slice(-n);\n};\n\n/**\n * Returns a list containing the first `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeRightWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [3, 4]\n */\nconst takeRightWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return takeRight(list, rightIndex + 1);\n};\n\n/**\n * Returns a list containing the last `n` elements of the given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [1, 2]\n */\nconst takeWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return take(list, rightIndex + 1);\n};\n\n/**\n * Returns a list containing the first `n` elements of an array\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.take([1, 2, 3, 4], 2);\n * console.log(result);\n * > [1, 2]\n */\nconst takeFrom = (list, n) => {\n  return take(list, n);\n};\n\n/**\n * Returns a list containing the last `n` elements of an array\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeRight([1, 2, 3, 4], 2);\n * console.log(result);\n * > [3, 4]\n */\nconst takeFromRight = (list, n) => {\n  return takeRight(list, n);\n};\n\n/**\n * Returns a list containing the first `n` elements of an array\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeRightWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [3, 4]\n */\nconst takeFromRightWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return takeRightWhile(list, predicate);\n};\n\n/**\n * Returns a list containing the last `n` elements of an array\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.takeWhile([1, 2, 3, 4], i => i < 3);\n * console.log(result);\n * > [1, 2]\n */\nconst takeFromWhile = (list, predicate) => {\n  let rightIndex = list.length - 1;\n  while (rightIndex > 0 && predicate(list[rightIndex])) {\n    rightIndex--;\n  }\n\n  return takeWhile(list, predicate);\n};\n\n/**\n * Returns a list containing the first `n` elements of a given list\n *\n * @param {Array} list The list to extract elements from\n * @param {Number} n The number of elements to take\n * @return {Array}\n * @example\n * const result = arrays.take([1, 2, 3, 4], 2);\n * console.log(result);\n * > [1, 2]\n */\nconst takeFromList = (list, n) => {\n  return takeFrom(list, n);\n};\n\n/**\n * Returns a list containing the last `n` elements of a given list\n *\n * @param {Array} list The list to extract elements from\n * @param {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift4 function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift5 function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift6 function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift7 function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift8 function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift9 function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift10 function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift11 function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  is_palindrome is a function that takes string and returns true if string is a palindrome.\n  >>> is_palindrome('')\n  False\n  >>> is_palindrome('abc')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palindrome('abba')\n  True\n  >>> is_palin", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal_threshold([1, 2, 4, 10], 100)\n  true\n  >>> equal_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst equal_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold([1, 2, 4, 10], 100, 100)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_inclusive([1, 2, 4, 10], 100, 100)\n  true\n  >>> between_threshold_inclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_inclusive = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_exclusive([1, 2, 4, 10], 100, 100)\n  false\n  >>> between_threshold_exclusive([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_exclusive = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t || l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([1, 2, 4, 10], 100, 100)\n  true\n  >>> between_threshold_strict([1, 20, 4, 10], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t && l[i] < t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t and threshold t2.\n  >>> between_threshold_strict([], 100, 100)\n  true\n  >>> between_threshold_strict([], 5, 10)\n  true\n  */\nconst between_threshold_strict = (l, t, t2) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.6)\n  4\n  >>> round(3.8)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(9)\n  3\n  >>> sqrt(8)\n  2\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the logarithm of number x\n  >>> log(10)\n  2\n  >>> log(100)\n  4\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*Get the natural logarithm of number x\n  >>> ln(-10)\n  -10\n  >>> ln(10)\n  2\n  */\nconst ln = x => {\n  return Math.log(x);\n};\n\n/*Get the exponential of number x\n  >>> exp(10)\n  100\n  >>> exp(100)\n  1000\n  */\nconst exp = x => {\n  return Math.exp(x);\n};\n\n/*Get the natural exponential of number x\n  >>> expn(-10)\n  -10\n  >>> expn(10)\n  2\n  */\nconst expn = x => {\n  return Math.exp(x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  >>> log10(100)\n  2\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(10)\n  1\n  >>> log2(100)\n  2\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the base 10 exponential of number x\n  >>> exp10(10)\n  100\n  >>> exp10(100)\n  1000\n  */\nconst exp10 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 2 exponential of number x\n  >>> exp2(10)\n  1\n  >>> exp2(100)\n  2\n  */\nconst exp2 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  >>> log10(100)\n  2\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(10)\n  1\n  >>> log2(100)\n  2\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the base 10 exponential of number x\n  >>> exp10(10)\n  100\n  >>> exp10(100)\n  1000\n  */\nconst exp10 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 2 exponential of number x\n  >>> exp2(10)\n  1\n  >>> exp2(100)\n  2\n  */\nconst exp2 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  >>> log10(100)\n  2\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(10)\n  1\n  >>> log2(100)\n  2\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the base 10 exponential of number x\n  >>> exp10(10)\n  100\n  >>> exp10(100)\n  1000\n  */\nconst exp10 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 2 exponential of number x\n  >>> exp2(10)\n  1\n  >>> exp2(100)\n  2\n  */\nconst exp2 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  >>> log10(100)\n  2\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(10)\n  1\n  >>> log2(100)\n  2\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the base 10 exponential of number x\n  >>> exp10(10)\n  100\n  >>> exp10(100)\n  1000\n  */\nconst exp10 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 2 exponential of number x\n  >>> exp2(10)\n  1\n  >>> exp2(100)\n  2\n  */\nconst exp2 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  >>> log10(100)\n  2\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.log(10);\n};\n\n/*Get the base 2 logarithm of number x\n  >>> log2(10)\n  1\n  >>> log2(100)\n  2\n  */\nconst log2 = x => {\n  return Math.log(x) / Math.log(2);\n};\n\n/*Get the base 10 exponential of number x\n  >>> exp10(10)\n  100\n  >>> exp10(100)\n  1000\n  */\nconst exp10 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 2 exponential of number x\n  >>> exp2(10)\n  1\n  >>> exp2(100)\n  2\n  */\nconst exp2 = x => {\n  return Math.exp(x) / Math.pow(10, x);\n};\n\n/*Get the base 10 logarithm of number x\n  >>> log10(10)\n  0\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib2 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib3 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib4 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib5 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib6 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib7 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib8 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib9 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib10 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib11 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib12 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib13 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  10\n  >>> fib(4)\n  8\n  >>> fib(3)\n  7\n  >>> fib(2)\n  5\n  >>> fib(1)\n  1\n*/\nconst fib14 = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [];\n  let opening_brackets = 0;\n  let closing_brackets = 0;\n  for (let i = 0; i < brackets.length; ++i) {\n    const bracket = brackets[i];\n    if (bracket === \"<\") {\n      stack.push(bracket);\n      ++opening_brackets;\n    } else if (bracket === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top!== bracket) {\n        return false;\n      }\n      ++closing_brackets;\n    } else {\n      if (stack.length > 0 &&\n          (stack[stack.length - 1]!== \"<\" || opening > closing)) {\n        return false;\n      }\n      stack.push(bracket);\n      ++opening_brackets;\n    }\n  }\n  if (stack.length > 0 &&\n      (stack[stack.length - 1]!== \"<\" || opening > closing)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * Given a DOM node, get the parent DOM node if any, or null.\n */\nconst get_parent_node = (node) => {\n  const parent_node = node.parentNode;\n  if (parent_node === null || parent_node === undefined) {\n    return null;\n  }\n  return parent_node;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_node = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.nodeName;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_node = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.nodeName;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_text = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.textContent;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_text = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.textContent;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_html = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.innerHTML;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_html = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.innerHTML;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_attribute = (node, attribute) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.getAttribute(attribute);\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_attribute = (node, attribute) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.getAttribute(attribute);\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_property = (node, property) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling[property];\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_property = (node, property) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling[property];\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_text = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.textContent;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_text = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.textContent;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_html = (node) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.innerHTML;\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_html = (node) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.innerHTML;\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_attribute = (node, attribute) => {\n  const next_sibling = node.nextSibling;\n  if (next_sibling === null || next_sibling === undefined) {\n    return null;\n  }\n  return next_sibling.getAttribute(attribute);\n};\n\n/**\n * Given a DOM node, get the previous sibling DOM node if any, or null.\n */\nconst get_previous_sibling_attribute = (node, attribute) => {\n  const previous_sibling = node.previousSibling;\n  if (previous_sibling === null || previous_sibling === undefined) {\n    return null;\n  }\n  return previous_sibling.getAttribute(attribute);\n};\n\n/**\n * Given a DOM node, get the next sibling DOM node if any, or null.\n */\nconst get_next_sibling_property = (node, property", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false\n    }\n    prev = l[i]\n  }\n  return true\n}\n\n/*\n  >>> isSubsetOf([1,2,3], [1,2,3])\n  true\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,3])\n  false\n  >>> isSubsetOf([1,2,3], [1,4])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,3], [1,2])\n  false\n  >>> isSubsetOf([1,2,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < Math.min(set1.size, set2.size); i++) {\n    if (set1.has(i) && set2.has(i)) {\n      common.push(i);\n    }\n  }\n  return common;\n};\n\n/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  2\n  >>> smallest_prime_factor(2048)\n  8\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n && n % i === 0) {\n    i += 1;\n  }\n  return i;\n};\n\n/*Return the number of divisors of n that are relatively prime to m.\n  >>> number_of_divisors(4, 2)\n  1\n  >>> number_of_divisors(4, 3)\n  2\n  >>> number_of_divisors(4, 4)\n  1\n  >>> number_of_divisors(4, 5)\n  0\n  >>> number_of_divisors(4, 6)\n  0\n  >>> number_of_divisors(4, 7)\n  1\n  */\nconst number_of_divisors = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are less than n.\n  >>> number_of_divisors_less_than(4, 2)\n  1\n  >>> number_of_divisors_less_than(4, 3)\n  2\n  >>> number_of_divisors_less_than(4, 4)\n  1\n  >>> number_of_divisors_less_than(4, 5)\n  0\n  >>> number_of_divisors_less_than(4, 6)\n  0\n  >>> number_of_divisors_less_than(4, 7)\n  1\n  */\nconst number_of_divisors_less_than = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are less than or equal to n.\n  >>> number_of_divisors_less_than_or_equal_to(4, 2)\n  1\n  >>> number_of_divisors_less_than_or_equal_to(4, 3)\n  2\n  >>> number_of_divisors_less_than_or_equal_to(4, 4)\n  1\n  >>> number_of_divisors_less_than_or_equal_to(4, 5)\n  0\n  >>> number_of_divisors_less_than_or_equal_to(4, 6)\n  0\n  >>> number_of_divisors_less_than_or_equal_to(4, 7)\n  1\n  */\nconst number_of_divisors_less_than_or_equal_to = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are greater than n.\n  >>> number_of_divisors_greater_than(4, 2)\n  0\n  >>> number_of_divisors_greater_than(4, 3)\n  1\n  >>> number_of_divisors_greater_than(4, 4)\n  1\n  >>> number_of_divisors_greater_than(4, 5)\n  1\n  >>> number_of_divisors_greater_than(4, 6)\n  1\n  >>> number_of_divisors_greater_than(4, 7)\n  1\n  */\nconst number_of_divisors_greater_than = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are greater than or equal to n.\n  >>> number_of_divisors_greater_than_or_equal_to(4, 2)\n  0\n  >>> number_of_divisors_greater_than_or_equal_to(4, 3)\n  1\n  >>> number_of_divisors_greater_than_or_equal_to(4, 4)\n  1\n  >>> number_of_divisors_greater_than_or_equal_to(4, 5)\n  1\n  >>> number_of_divisors_greater_than_or_equal_to(4, 6)\n  1\n  >>> number_of_divisors_greater_than_or_equal_to(4, 7)\n  1\n  */\nconst number_of_divisors_greater_than_or_equal_to = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are equal to n.\n  >>> number_of_divisors_equal_to(4, 2)\n  1\n  >>> number_of_divisors_equal_to(4, 3)\n  1\n  >>> number_of_divisors_equal_to(4, 4)\n  1\n  >>> number_of_divisors_equal_to(4, 5)\n  1\n  >>> number_of_divisors_equal_to(4, 6)\n  1\n  >>> number_of_divisors_equal_to(4, 7)\n  1\n  */\nconst number_of_divisors_equal_to = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are equal to or less than n.\n  >>> number_of_divisors_equal_or_less_than(4, 2)\n  1\n  >>> number_of_divisors_equal_or_less_than(4, 3)\n  1\n  >>> number_of_divisors_equal_or_less_than(4, 4)\n  1\n  >>> number_of_divisors_equal_or_less_than(4, 5)\n  1\n  >>> number_of_divisors_equal_or_less_than(4, 6)\n  1\n  >>> number_of_divisors_equal_or_less_than(4, 7)\n  1\n  */\nconst number_of_divisors_equal_or_less_than = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are equal to or less than or equal to n.\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 2)\n  1\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 3)\n  1\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 4)\n  1\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 5)\n  1\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 6)\n  1\n  >>> number_of_divisors_equal_or_less_than_or_equal_to(4, 7)\n  1\n  */\nconst number_of_divisors_equal_or_less_than_or_equal_to = (m, n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (m % i === 0) {\n      count += 1;\n      if (m / i === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*Return the number of divisors of n that are relatively prime to m and are greater than n.\n  >>> number_of_divisors_greater_than(4, 2)\n  0\n  >>> number_of_divisors_greater_than(4, 3)\n  1", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n  let paren_level_max = 0;\n  let paren_level_max_index = 0;\n  let paren_level_max_count = 0;\n  let paren_level_max_string = '';\n  let paren_level_max_string_index = 0;\n  let paren_level_max_string_length = 0;\n  let paren_level_max_string_char_count = 0;\n  let paren_level_max_string_char_index = 0;\n  let paren_level_max_string_char_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_max_string_char_count_index = 0;\n  let paren_level_max_string_char_count_length = 0;\n  let paren_level_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_iterative(30)\n  465\n  >>> sum_to_n_iterative(100)\n  5050\n  >>> sum_to_n_iterative(5)\n  15\n  >>> sum_to_n_iterative(10)\n  55\n  >>> sum_to_n_iterative(1)\n  1\n  */\nconst sum_to_n_iterative = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i += 1) {\n    const bracket = brackets[i];\n    if (bracket === '(') {\n      stack.push(bracket);\n    } else if (bracket === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const opening = stack.pop();\n      if (opening!== bracket) {\n        return false;\n      }\n    }\n  }\n  return!stack.length;\n};\n\n/**\n * Given a string, returns a new string with all instances of non-alphanumeric\n * characters replaced by underscores.\n */\nconst slugify = (str) => {\n  return str\n   .replace(/[^\\w\\s-]/g, '')\n   .replace(/ +/g, '_')\n   .toLowerCase();\n};\n\n/**\n * Converts a string into all lowercase letters.\n */\nconst to_lowercase = (str) => {\n  return str.toLowerCase();\n};\n\n/**\n * Converts a string into all uppercase letters.\n */\nconst to_uppercase = (str) => {\n  return str.toUpperCase();\n};\n\n/**\n * Converts a string into all digits.\n */\nconst to_digits = (str) => {\n  return str.replace(/[^\\d]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters.\n */\nconst to_alphanumeric = (str) => {\n  return str.replace(/[^a-zA-Z0-9]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or spaces.\n */\nconst to_alphanumeric_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9 ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes.\n */\nconst to_alphanumeric_dashes = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or underscores.\n */\nconst to_alphanumeric_underscores = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\_]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or spaces.\n */\nconst to_alphanumeric_dashes_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or underscores or spaces.\n */\nconst to_alphanumeric_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores.\n */\nconst to_alphanumeric_dashes_underscores = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9\\-\\_\\ ]/g, '');\n};\n\n/**\n * Converts a string into all alphanumeric characters or dashes or underscores or spaces.\n */\nconst to_alphanumeric_dashes_underscores_spaces = (str) => {\n  return str.replace(/[^a-zA-Z0-9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) {\n    return [];\n  }\n  const n = xs.length;\n  const d = new Array(n);\n  for (let i = 0; i < n; i++) {\n    d[i] = xs[i + 1];\n  }\n  for (let i = n - 2; i >= 0; i--) {\n    d[i] = d[i + 1] * xs[i];\n  }\n  return d;\n};\n\n/* Return sum of all elements in array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return xs.reduce((acc, x) => acc + x, 0);\n};\n\n/* Return product of all elements in array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  if (xs.length === 0) {\n    return 1;\n  }\n  return xs.reduce((acc, x) => acc * x, 1);\n};\n\n/* Return mean of all elements in array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.6666666666666665\n  */\nconst mean = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mid = Math.floor(xs.length / 2);\n  if (xs.length % 2 === 0) {\n    return xs[mid];\n  }\n  return xs[mid - 1] + xs[mid];\n};\n\n/* Return mode of all elements in array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  let maxCount = 0;\n  let maxItem;\n  for (let x in counts) {\n    if (counts[x] > maxCount) {\n      maxCount = counts[x];\n      maxItem = x;\n    }\n  }\n  return maxItem;\n};\n\n/* Return standard deviation of all elements in array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return variance;\n};\n\n/* Return standard deviation of all elements in array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst stdDeviation = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Return minimum of all elements in array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return xs.reduce((acc, x) => Math.min(acc, x), 0);\n};\n\n/* Return maximum of all elements in array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return xs.reduce((acc, x) => Math.max(acc, x), 0);\n};\n\n/* Return sum of all elements in array.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return xs.reduce((acc, x) => acc + x, 0);\n};\n\n/* Return product of all elements in array.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (xs) => {\n  if (xs.length === 0) {\n    return 1;\n  }\n  return xs.reduce((acc, x) => acc * x, 1);\n};\n\n/* Return mean of all elements in array.\n  >>> mean([1, 2, 3, 4, 5])\n  2.6666666666666665\n  */\nconst mean = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return sum(xs) / xs.length;\n};\n\n/* Return median of all elements in array.\n  >>> median([1, 2, 3, 4, 5])\n  2\n  */\nconst median = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mid = Math.floor(xs.length / 2);\n  if (xs.length % 2 === 0) {\n    return xs[mid];\n  }\n  return xs[mid - 1] + xs[mid];\n};\n\n/* Return mode of all elements in array.\n  >>> mode([1, 2, 3, 4, 5])\n  1\n  */\nconst mode = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const counts = {};\n  for (let i = 0; i < xs.length; i++) {\n    const x = xs[i];\n    if (counts[x]) {\n      counts[x]++;\n    } else {\n      counts[x] = 1;\n    }\n  }\n  let maxCount = 0;\n  let maxItem;\n  for (let x in counts) {\n    if (counts[x] > maxCount) {\n      maxCount = counts[x];\n      maxItem = x;\n    }\n  }\n  return maxItem;\n};\n\n/* Return standard deviation of all elements in array.\n  >>> std([1, 2, 3, 4, 5])\n  1.5811388300841898\n  */\nconst std = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Return variance of all elements in array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst variance = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return variance;\n};\n\n/* Return standard deviation of all elements in array.\n  >>> variance([1, 2, 3, 4, 5])\n  5.166666666666666\n  */\nconst stdDeviation = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  const mean = xs.reduce((acc, x) => acc + x, 0) / xs.length;\n  const variance = xs.reduce((acc, x) => acc + Math.pow((x - mean), 2), 0) / xs.length;\n  return Math.sqrt(variance);\n};\n\n/* Return minimum of all elements in array.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }\n  return xs.reduce((acc, x) => Math.min(acc, x), 0);\n};\n\n/* Return maximum of all elements in array.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (xs) => {\n  if (xs.length === 0) {\n    return 0;\n  }", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3])\n  6\n  >>> squareSum([1,4,9])\n  25\n  >>> squareSum([1,4,9,16])\n  490\n  >>> squareSum([1,4,9,16,25])\n  490\n  >>> squareSum([1,4,9,16,25,36])\n  490\n  >>> squareSum([1,4,9,16,25,36,49])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890,959])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890,959,1028])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890,959,1028,1095])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890,959,1028,1095,1154])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557,612,673,728,775,832,890,959,1028,1095,1154,1221])\n  490\n  >>> squareSum([1,4,9,16,25,36,49,64,81,100,121,144,169,196,225,250,289,324,361,410,455,502,557", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = x.toString().split('');\n  if (shift > digits.length) return digits.reverse().join('');\n  else return digits.slice(shift, digits.length).join('');\n};\n\n/*\n  Given a binary string x, convert it to an integer. Return NaN if the\n  input is not a binary string.\n  >>> binary_to_int(1111)\n  5\n  >>> binary_to_int(\"1111\")\n  5\n  >>> binary_to_int(\"1110\")\n  NaN\n  >>> binary_to_int(\"1110\", 2)\n  NaN\n  >>> binary_to_int(\"1110\", 3)\n  NaN\n  >>> binary_to_int(\"1110\", 4)\n  NaN\n  >>> binary_to_int(\"1110\", 5)\n  NaN\n  >>> binary_to_int(\"1110\", 6)\n  NaN\n  >>> binary_to_int(\"1110\", 7)\n  NaN\n  >>> binary_to_int(\"1110\", 8)\n  NaN\n  >>> binary_to_int(\"1110\", 9)\n  NaN\n  >>> binary_to_int(\"1110\", 10)\n  NaN\n  >>> binary_to_int(\"1110\", 11)\n  NaN\n  >>> binary_to_int(\"1110\", 12)\n  NaN\n  >>> binary_to_int(\"1110\", 13)\n  NaN\n  >>> binary_to_int(\"1110\", 14)\n  NaN\n  >>> binary_to_int(\"1110\", 15)\n  NaN\n  >>> binary_to_int(\"1110\", 16)\n  NaN\n  >>> binary_to_int(\"1110\", 17)\n  NaN\n  >>> binary_to_int(\"1110\", 18)\n  NaN\n  >>> binary_to_int(\"1110\", 19)\n  NaN\n  >>> binary_to_int(\"1110\", 20)\n  NaN\n  >>> binary_to_int(\"1110\", 21)\n  NaN\n  >>> binary_to_int(\"1110\", 22)\n  NaN\n  >>> binary_to_int(\"1110\", 23)\n  NaN\n  >>> binary_to_int(\"1110\", 24)\n  NaN\n  >>> binary_to_int(\"1110\", 25)\n  NaN\n  >>> binary_to_int(\"1110\", 26)\n  NaN\n  >>> binary_to_int(\"1110\", 27)\n  NaN\n  >>> binary_to_int(\"1110\", 28)\n  NaN\n  >>> binary_to_int(\"1110\", 29)\n  NaN\n  >>> binary_to_int(\"1110\", 30)\n  NaN\n  >>> binary_to_int(\"1110\", 31)\n  NaN\n  >>> binary_to_int(\"1110\", 32)\n  NaN\n  >>> binary_to_int(\"1110\", 33)\n  NaN\n  >>> binary_to_int(\"1110\", 34)\n  NaN\n  >>> binary_to_int(\"1110\", 35)\n  NaN\n  >>> binary_to_int(\"1110\", 36)\n  NaN\n  >>> binary_to_int(\"1110\", 37)\n  NaN\n  >>> binary_to_int(\"1110\", 38)\n  NaN\n  >>> binary_to_int(\"1110\", 39)\n  NaN\n  >>> binary_to_int(\"1110\", 40)\n  NaN\n  >>> binary_to_int(\"1110\", 41)\n  NaN\n  >>> binary_to_int(\"1110\", 42)\n  NaN\n  >>> binary_to_int(\"1110\", 43)\n  NaN\n  >>> binary_to_int(\"1110\", 44)\n  NaN\n  >>> binary_to_int(\"1110\", 45)\n  NaN\n  >>> binary_to_int(\"1110\", 46)\n  NaN\n  >>> binary_to_int(\"1110\", 47)\n  NaN\n  >>> binary_to_int(\"1110\", 48)\n  NaN\n  >>> binary_to_int(\"1110\", 49)\n  NaN\n  >>> binary_to_int(\"1110\", 50)\n  NaN\n  >>> binary_to_int(\"1110\", 51)\n  NaN\n  >>> binary_to_int(\"1110\", 52)\n  NaN\n  >>> binary_to_int(\"1110\", 53)\n  NaN\n  >>> binary_to_int(\"1110\", 54)\n  NaN\n  >>> binary_to_int(\"1110\", 55)\n  NaN\n  >>> binary_to_int(\"1110\", 56)\n  NaN\n  >>> binary_to_int(\"1110\", 57)\n  NaN\n  >>> binary_to_int(\"1110\", 58)\n  NaN\n  >>> binary_to_int(\"1110\", 59)\n  NaN\n  >>> binary_to_int(\"1110\", 60)\n  NaN\n  >>> binary_to_int(\"1110\", 61)\n  NaN\n  >>> binary_to_int(\"1110\", 62)\n  NaN\n  >>> binary_to_int(\"1110\", 63)\n  NaN\n  >>> binary_to_int(\"1110\", 64)\n  NaN\n  >>> binary_to_int(\"1110\", 65)\n  NaN\n  >>> binary_to_int(\"1110\", 66)\n  NaN\n  >>> binary_to_int(\"1110\", 67)\n  NaN\n  >>> binary_to_int(\"1110\", 68)\n  NaN\n  >>> binary_to_int(\"1110\", 69)\n  NaN\n  >>> binary_to_int(\"1110\", 70)\n  NaN\n  >>> binary_to_int(\"1110\", 71)\n  NaN\n  >>> binary_to_int(\"1110\", 72)\n  NaN\n  >>> binary_to_int(\"1110\", 73)\n  NaN\n  >>> binary_to_int(\"1110\", 74)\n  NaN\n  >>> binary_to_int(\"1110\", 75)\n  NaN\n  >>> binary_to_int(\"1110\", 76)\n  NaN\n  >>> binary_to_int(\"1110\", 77)\n  NaN\n  >>> binary_to_int(\"1110\", 78)\n  NaN\n  >>> binary_to_int(\"1110\", 79)\n  NaN\n  >>> binary_to_int(\"1110\", 80)\n  NaN\n  >>> binary_to_int(\"1110\", 81)\n  NaN\n  >>> binary_to_int(\"1110\", 82)\n  NaN\n  >>> binary_to_int(\"1110\", 83)\n  NaN\n  >>> binary_to_int(\"1110\", 84)\n  NaN\n  >>> binary_to_int(\"1110\", 85)\n  NaN\n  >>> binary_to_int(\"1110\", 86)\n  NaN\n  >>> binary_to_int(\"1110\", 87)\n  NaN\n  >>> binary_to_int(\"1110\", 88)\n  NaN\n  >>> binary_to_int(\"1110\", 89)\n  NaN\n  >>> binary_to_int(\"1110\", 90)\n  NaN\n  >>> binary_to_int(\"1110\", 91)\n  NaN\n  >>> binary_to_int(\"1110\", 92)\n  NaN\n  >>> binary_to_int(\"1110\", 93)\n  NaN\n  >>> binary_to_int(\"1110\", 94)\n  NaN\n  >>> binary_to_int(\"1110\", ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code - 65;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 97 && code <= 122) {\n      sum += code - 97;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit_digit = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit_digit_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit_digit_digit = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum_digit_digit_digit_digit_lower = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"ab", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n  let fruits = Number(s.split(\" \")[2]);\n  let mangos = n - apples - oranges;\n  return mangos;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = Number(s.split(\" \")[0]);\n  let oranges = Number(s.split(\" \")[1]);\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenNodes = arr.filter((n) => n % 2 === 0);\n  if (evenNodes.length === 0) return [];\n  const smallestEven = evenNodes.reduce((a, b) => Math.min(a, b));\n  const index = evenNodes.indexOf(smallestEven);\n  return [smallestEven, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdds = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) return [];\n  const smallestOdd = oddNodes.reduce((a, b) => Math.min(a, b));\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOdds };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) return [];\n  const smallestOdd = oddNodes.reduce((a, b) => Math.min(a, b));\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOddsIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex2 = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) return [];\n  const smallestOdd = oddNodes.reduce((a, b) => Math.min(a, b));\n  const index = oddNodes.indexOf(smallestOdd);\n  return [smallestOdd, index];\n};\n\nexport { pluckOddsIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddsIndex3 = (arr) => {\n  const oddNodes = arr.filter((n) => n % 2 === 1);\n  if (oddNodes.length === 0) return [];\n  const smallestOdd = oddNodes.reduce((a, b) => Math.min(a, b));\n  const index = oddNodes.indexOf(smalle", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let maxFreq = -1\n  let maxVal = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > maxVal) {\n      maxVal = lst[i]\n      maxFreq = i\n    }\n  }\n  return maxFreq >= maxVal? maxVal : -1\n}\n\n/*\n  You are given a list of integers and a number k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleByK([2, 7, 11, 15], 0) == []\n      divisibleByK([2, 7, 11, 15], 2) == [7, 11, 15]\n  */\nconst divisibleByK = (lst, k) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % k === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result.sort()\n}\n\n/*\n  You are given a list of integers and an integer k. Find all elements in the list whose value is divisible by k.\n  Return them in sorted order.\n  Examples:\n      divisibleByK([2, 7, 11, 15], 3) == [7, 11]\n      divisibleByK([2, 7, 11, 15], 5) == []\n      divisibleBy", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const filtered_strings = [];\n  for (const string of strings) {\n    if (!string.includes(substring)) {\n      filtered_strings.push(string);\n    }\n  }\n  return filtered_strings;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted = [...lst];\n  sorted.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) return str;\n  return reverse(str.slice(1)) + str.charAt(0);\n};\n\n/*\n  Given a string, return it in reverse order.\n  Reverse order is when you start with the last character,\n  then the first character, then second last character,\n  then second last character, and so on.\n\n  Examples:\n  reverse(\"hello\") == \"olleh\"\n  reverse(\"hello\") == \"hello\"\n  reverse(\"hello\") == \"hello\"\n  reverse([]) == []\n  */\nconst reverse = (str) => {\n  if (str.length === 0) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const area_a = Math.abs(a * b + c * c);\n  const area_b = Math.abs(a * c - b * b);\n  const area_c = Math.abs(b * c - a * a);\n  return area_a > area_b && a_a > area_c? area_a : -1;\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const isPalindromic = q.reduce((acc, val) => acc && val === val[val.length - 1]);\n  const isBalanced = q.reduce((acc, val) => acc && val === val[val.length - 1], true);\n\n  if (isPalindromic && isBalanced) {\n    const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n    return sumOfElements <= maxWeight;\n  }\n\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const isPalindromic = q.reduce((acc, val) => acc && val === val[val.length - 1]);\n  const isBalanced = q.reduce((acc, val) => acc && val === val[val.length - 1], true);\n\n  if (isPalindromic && isBalanced) {\n    const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n    return sumOfElements <= maxWeight;\n  }\n\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const isPalindromic = q.reduce((acc, val) => acc && val === val[val.length - 1]);\n  const isBalanced = q.reduce((acc, val) => acc && val === val[val.length - 1], true);\n\n  if (isPalindromic && isBalanced) {\n    const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n    return sumOfElements <= maxWeight;\n  }\n\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const isPalindromic = q.reduce((acc, val) => acc && val === val[val.length - 1]);\n  const isBalanced = q.reduce((acc, val) => acc && val === val[val.length - 1], true);\n\n  if (isPalindromic && isBalanced) {\n    const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n    return sumOfElements <= maxWeight;\n  }\n\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const maxWeight = w;\n  const maxSum = w;\n  const isPalindromic = q.reduce((acc, val) => acc && val === val[val.length - 1]);\n  const isBalanced = q.reduce((acc, val) => acc && val === val[val.length - 1], true);\n\n  if (isPalindromic && isBalanced) {\n    const sumOfElements = q.reduce((acc, val) => acc + val, 0);\n    return sumOfElements <= maxWeight;\n  }\n\n  return false;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        min = Math.min(min, j - i);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1\n  }\n  return lst1.filter((_, i) => lst2.indexOf(_) < i)\n}\n\n/*\n  Write a function that accepts a string and returns the string with all the chars reversed.\n\n  Examples\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n  reverse('hello') ➞ 'olleh'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = a % 100;\n  if (a === 0) return false;\n  else if (a === 1) return true;\n  else if (a === 2) return true;\n  else if (a === 3) return true;\n  else if (a === 5) return true;\n  else if (a === 7) return true;\n  else if (a === 11) return true;\n  else if (a === 13) return true;\n  else if (a === 17) return true;\n  else if (a === 19) return true;\n  else if (a === 23) return true;\n  else if (a === 29) return true;\n  else if (a === 31) return true;\n  else if (a === 37) return true;\n  else if (a === 41) return true;\n  else if (a === 43) return true;\n  else if (a === 47) return true;\n  else if (a === 53) return true;\n  else if (a === 59) return true;\n  else if (a === 61) return true;\n  else if (a === 67) return true;\n  else if (a === 71) return true;\n  else if (a === 73) return true;\n  else if (a === 79) return true;\n  else if (a === 83) return true;\n  else if (a === 89) return true;\n  else if (a === 97) return true;\n  else return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = a % 100;\n  if (a === 0) return false;\n  else if (a === 1) return true;\n  else if (a === 2) return true;\n  else if (a === 3) return true;\n  else if (a === 5) return true;\n  else if (a === 7) return true;\n  else if (a === 11) return true;\n  else if (a === 13) return true;\n  else if (a === 17) return true;\n  else if (a === 19) return true;\n  else if (a === 23) return true;\n  else if (a === 29) return true;\n  else if (a === 31) return true;\n  else if (a === 37) return true;\n  else if (a === 41) return true;\n  else if (a === 43) return true;\n  else if (a === 47) return true;\n  else if (a === 53) return true;\n  else if (a === 59) return true;\n  else if (a === 61) return true;\n  else if (a === 67) return true;\n  else if (a === 71) return true;\n  else if (a === 73) return true;\n  else if (a === 79) return true;\n  else if (a === 83) return true;\n  else if (a === 89) return true;\n  else if (a === 97) return true;\n  else return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = a % 100;\n  if (a === 0) return false;\n  else if (a === 1) return true;\n  else if (a === 2) return true;\n  else if (a === 3) return true;\n  else if (a === 5) return true;\n  else if (a === 7) return true;\n  else if (a === 11) return true;\n  else if (a === 13) return true;\n  else if (a === 17) return true;\n  else if (a === 19) return true;\n  else if (a === 23) return true;\n  else if (a === 29) return true;\n  else if (a === 31) return true;\n  else if (a === 37) return true;\n  else if (a === 41) return true;\n  else if (a === 43) return true;\n  else if (a === 47) return true;\n  else if (a === 53) return true;\n  else if (a === 59) return true;\n  else if (a === 61) return true;\n  else if (a === 67) return true;\n  else if (a === 71) return true;\n  else if (a === 73) return true;\n  else if (a === 79) return true;\n  else if (a === 83) return true;\n  else if (a === 89) return true;\n  else if (a === 97) return true;\n  else return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = a % 100;\n  if (a === 0) return false;\n  else if (a === 1) return true;\n  else if (a === 2) return true;\n  else if (a === 3) return true;\n  else if (a === 5) return true;\n  else if (a === 7) return true;\n  else if (a === 11) return true;\n  else if (a === 13) return true;\n  else if (a === 17) return true;\n  else if (a === 19) return true;\n  else if (a === 23) return true;\n  else if (a === 29) return true;\n  else if (a === 31) return true;\n  else if (a === 37) return true;\n  else if (a === 41) return true;\n  else if (a === 43) return true;\n  else if (a === 47) return true;\n  else if (a === 53) return true;\n  else if (a === 59) return true;\n  else if (a === 61) return true;\n  else if (a === 67) return true;\n  else if (a === 71) return true;\n  else if (a === 73) return true;\n  else if (a === 79) return true;\n  else if (a === 83) return true;\n  else if (a === 89) return true;\n  else if (a === 97) return true;\n  else return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = a % 100;\n  if (a === 0) return false;\n  else if (a === 1) return true;\n  else if (a === 2) return true;\n  else if (a === 3) return true;\n  else if (a === 5) return true;\n  else if (a === 7) return true;\n  else if (a === 11) return true;\n  else if (a === 13) return true;\n  else if (a === 17) return true;\n  else if (a === 19) return true;\n  else if (a === 23) return true;\n  else if (a === 29) return true;\n  else if (a === 31) return true;\n  else if (a === 37) return true;\n  else if (a === 41) return true;\n  else if (a === 43) return true;\n  else if (a === 47) return true;\n  else if (a === 53) return true;\n  else if (a === 59) return true;\n  else if (a === 61) return true;\n  else if (a === 67) return true;\n  else if (a === 71) return true;\n  else if (a === 73) return true;\n  else if (a === 79) return true;\n  else if (a === 83) return true;\n  else if (a === 89) return true;\n  else if (a === 97) return true;\n  else return false;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  a = ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return false;\n  if (n % 32 === 0) return false;\n  if (n % 64 === 0) return false;\n  if (n % 128 === 0) return false;\n  if (n % 256 === 0) return false;\n  if (n % 512 === 0) return false;\n  if (n % 1024 === 0) return false;\n  if (n % 2048 === 0) return false;\n  if (n % 4096 === 0) return false;\n  if (n % 8192 === 0) return false;\n  if (n % 16384 === 0) return false;\n  if (n % 32768 === 0) return false;\n  if (n % 65536 === 0) return false;\n  if (n % 131072 === 0) return false;\n  if (n % 262144 === 0) return false;\n  if (n % 524288 === 0) return false;\n  if (n % 1048576 === 0) return false;\n  if (n % 2097152 === 0) return false;\n  if (n % 4194304 === 0) return false;\n  if (n % 8388608 === 0) return false;\n  if (n % 16777216 === 0) return false;\n  if (n % 33554432 === 0) return false;\n  if (n % 67108864 === 0) return false;\n  if (n % 134217728 === 0) return false;\n  if (n % 268435456 === 0) return false;\n  if (n % 536870912 === 0) return false;\n  if (n % 1073741824 === 0) return false;\n  if (n % -2147483648 === 0) return false;\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a power of 2 and\n  false in other cases.\n  x is a power of 2 if 2**int=x\n  For example:\n  is_power_of_2(1) => true\n  is_power_of_2(2) => true\n  is_power_of_2(3) => true\n  is_power_of_2(4) => false\n  is_power_of_2(5) => false\n  is_power_of_2(6) => false\n  is_power_of_2(7) => false\n  is_power_of_2(8) => true\n  is_power_of_2(9) => true\n  is_power_of_2(10) => true\n  is_power_of_2(11) => false\n  is_power_of_2(12) => false\n  is_power_of_2(13) => false\n  is_power_of_2(14) => false\n  is_power_of_2(15) => false\n  is_power_of_2(16) => false\n  is_power_of_2(17) => false\n  is_power_of_2(18) => false\n  is_power_of_2(19) => false\n  is_power_of_2(20) => false\n  is_power_of_2(21) => false\n  is_power_of_2(22) => false\n  is_power_of_2(23) => false\n  is_power_of_2(24) => false\n  is_power_of_2(25) => false\n  is_power_of_2(26) => false\n  is_power_of_2(27) => false\n  is_power_of_2(28) => false\n  is_power_of_2(29) => false\n  is_power_of_2(30) => false\n  is_power_of_2(31) => false\n  is_power_of_2(32) => false\n  is_power_of_2(33) => false\n  is_power_of_2(34) => false\n  is_power_of_2(35) => false\n  is_power_of_2(36) => false\n  is_power_of_2(37) => false\n  is_power_of_2(38) => false\n  is_power_of_2(39) => false\n  is_power_of_2(40) => false\n  is_power_of_2(41) => false\n  is_power_of_2(42) => false\n  is_power_of_2(43) => false\n  is_power_of_2(44) => false\n  is_power_of_2(45) => false\n  is_power_of_2(46) => false\n  is_power_of_2(47) => false\n  is_power_of_2(48) => false\n  is_power_of_2(49) => false\n  is_power_of_2(50) => false\n  is_power_of_2(51) => false\n  is_power_of_2(52) => false\n  is_power_of_2(53) => false\n  is_power_of_2(54) => false\n  is_power_of_2(55) => false\n  is_power_of_2(56) => false\n  is_power_of_2(57) => false\n  is_power_of_2(58) => false\n  is_power_of_2(59) => false\n  is_power_of_2(60) => false\n  is_power_of_2(61) => false\n  is_power_of_2(62) => false\n  is_power_of_2(63) => false\n  is_power_of_2(64) => false\n  is_power_of_2(65) => false\n  is_power_of_2(66) => false\n  is_power_of_2(67) => false\n  is_power_of_2(68) => false\n  is_power_of_2(69) => false\n  is_power_of_2(70) => false\n  is_power_of_2(71) => false\n  is_power_of_2(72) => false\n  is_power_of_2(73) => false\n  is_power_of_2(74) => false\n  is_power_of_2(75) => false\n  is_power_of_2(76) => false\n  is_power_of_2(77) => false\n  is_power_of_2(78) => false\n  is_power_of_2(79) => false\n  is_power_of_2(80) => false\n  is_power_of_2(81) => false\n  is_power_of_2(82) => false\n  is_power_of_2(83) => false\n  is_power_of_2(84) => false\n  is_power_of_2(85) => false\n  is_power_of_2(86) => false\n  is_power_of_2(87) => false\n  is_power_of_2(88) => false\n  is_power_of_2(89) => false\n  is_power_of_2(90) => false\n  is_power_of_2(91) => false\n  is_power_of_2(92) => false\n  is_power_of_2(93) => false\n  is_power_of_2(94) => false\n  is_power_of_2(95) => false\n  is_power_of_2(96) => false\n  is_power_of_2(97) => false\n  is_power_of_2(98) => false\n  is_power_of_2(99) => false\n  is_power_of_2(100) => false\n  is_power_of_2(101) => false\n  is_power_of_2(102) => false\n  is_power_of_2(103) => false\n  is_power_of_2(104) => false\n  is_power_of_2(105) => false\n  is_power_of_2(106) => false\n  is_power_of_2(107) => false\n  is_power_of_2(108) => false\n  is_power_of_2(109) => false\n  is_power_of_2(110) => false\n  is_power_of_2(111) => false\n  is_power_of_2(112) => false\n  is_power_of_2(113) => false\n  is_power_of_2(114) => false\n  is_power_of_2(115) => false\n  is_power_of_2(116) => false\n  is_power_of_2(117) => false\n  is_power_of_2(118) => false\n  is_power_of_2(119) => false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 1!== 0) return false\n  if (a === 1) return true\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a === 4) return true\n  if (a === 5) return true\n  if (a === 6) return true\n  if (a === 7) return true\n  if (a === 8) return true\n  if (a === 9) return true\n  if (a === 10) return true\n  if (a === 11) return true\n  if (a === 12) return true\n  if (a === 13) return true\n  if (a === 14) return true\n  if (a === 15) return true\n  if (a === 16) return true\n  if (a === 17) return true\n  if (a === 18) return true\n  if (a === 19) return true\n  if (a === 20) return true\n  if (a === 21) return true\n  if (a === 22) return true\n  if (a === 23) return true\n  if (a === 24) return true\n  if (a === 25) return true\n  if (a === 26) return true\n  if (a === 27) return true\n  if (a === 28) return true\n  if (a === 29) return true\n  if (a === 30) return true\n  if (a === 31) return true\n  if (a === 32) return true\n  if (a === 33) return true\n  if (a === 34) return true\n  if (a === 35) return true\n  if (a === 36) return true\n  if (a === 37) return true\n  if (a === 38) return true\n  if (a === 39) return true\n  if (a === 40) return true\n  if (a === 41) return true\n  if (a === 42) return true\n  if (a === 43) return true\n  if (a === 44) return true\n  if (a === 45) return true\n  if (a === 46) return true\n  if (a === 47) return true\n  if (a === 48) return true\n  if (a === 49) return true\n  if (a === 50) return true\n  if (a === 51) return true\n  if (a === 52) return true\n  if (a === 53) return true\n  if (a === 54) return true\n  if (a === 55) return true\n  if (a === 56) return true\n  if (a === 57) return true\n  if (a === 58) return true\n  if (a === 59) return true\n  if (a === 60) return true\n  if (a === 61) return true\n  if (a === 62) return true\n  if (a === 63) return true\n  if (a === 64) return true\n  if (a === 65) return true\n  if (a === 66) return true\n  if (a === 67) return true\n  if (a === 68) return true\n  if (a === 69) return true\n  if (a === 70) return true\n  if (a === 71) return true\n  if (a === 72) return true\n  if (a === 73) return true\n  if (a === 74) return true\n  if (a === 75) return true\n  if (a === 76) return true\n  if (a === 77) return true\n  if (a === 78) return true\n  if (a === 79) return true\n  if (a === 80) return true\n  if (a === 81) return true\n  if (a === 82) return true\n  if (a === 83) return true\n  if (a === 84) return true\n  if (a === 85) return true\n  if (a === 86) return true\n  if (a === 87) return true\n  if (a === 88) return true\n  if (a === 89) return true\n  if (a === 90) return true\n  if (a === 91) return true\n  if (a === 92) return true\n  if (a === 93) return true\n  if (a === 94) return true\n  if (a === 95) return true\n  if (a === 96) return true\n  if (a === 97) return true\n  if (a === 98) return true\n  if (a === 99) return true\n  if (a === 100) return true\n  if (a === 101) return true\n  if (a === 102) return true\n  if (a === 103) return true\n  if (a === 104) return true\n  if (a === 105) return true\n  if (a === 106) return true\n  if (a === 107) return true\n  if (a === 108) return true\n  if (a === 109) return true\n  if (a === 110) return true\n  if (a === 111) return true\n  if (a === 112) return true\n  if (a === 113) return true\n  if (a === 114) return true\n  if (a === 115) return true\n  if (a === 116) return true\n  if (a === 117) return true\n  if (a === 118) return true\n  if (a === 119) return true\n  if (a === 120) return true\n  if (a === 121) return true\n  if (a === 122) return true\n  if (a === 123) return true\n  if (a === 124) return true\n  if (a === 125) return true\n  if (a === 126) return true\n  if (a === 127) return true\n  if (a === 128) return true\n  if (a === 129) return true\n  if (a === 130) return true\n  if (a === 131) return true\n  if (a === 132) return true\n  if (a === 133) return true\n  if (a === 134) return true\n  if (a === 135) return true\n  if (a === 136) return true\n  if (a === 137) return true\n  if (a === 138) return true\n  if (a === 139) return true\n  if (a === 140) return true\n  if (a === 141) return true\n  if (a === 142) return true\n  if (a === 143) return true\n  if (a === 144) return true\n  if (a === 145) return true\n  if (a === 146) return true\n  if (a === 147) return true\n  if (a === 148) return true\n  if (a === 149) return true\n  if (a === 150) return true\n  if (a === 151) return true\n  if (a === 152) return true\n  if (a === 153) return true\n  if (a === 154) return true\n  if (a === 155) return true\n  if (a === 156) return true\n  if (a === 157) return true\n  if (a === 158) return true\n  if (a === 159) return true\n  if (a === 160) return true\n  if (a === 161) return true\n  if (a === 162) return true\n  if (a === 163) return true\n  if (a === 164) return true\n  if (a === 165) return true\n  if (a === 166) return true\n  if (a === 167) return true\n  if (a === 168) return true\n  if (a === 169) return true\n  if (a === 170) return true\n  if (a === 171) return true\n  if (a === 172) return true\n  if (a === 173) return true\n  if (a === 174) return true\n  if (a === 175) return true\n  if (a === 176) return true\n  if (a === 177) return true\n  if (a === 178) return true\n  if (a === 179) return true\n  if (a === 180) return true\n  if (a === 181) return true\n  if (a === 182) return true\n  if (a === 183) return true\n  if (a === 184) return true\n  if (a === 185) return true\n  if (a === 186) return true\n  if (a === 187) return true\n  if (a === 188) return true\n  if (a === 189) return true\n  if (a === 190) return true\n  if (a === 191) return true\n  if (a === 192) return true\n  if (a === 193) return true\n  if (a === 194) return true\n  if (a === 195) return true\n  if (a === 196) return true\n  if (a === 197) return true\n  if (a === 198) return true\n  if (a === 199) return true\n  if (", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let hex_num;\n  num = num.toUpperCase();\n  hex_num = num.split(\"\");\n  hex_num.forEach((hex) => {\n    if (hex === \"A\" || hex === \"B\" || hex === \"C\" || hex === \"D\" || hex === \"E\" || hex === \"F\") {\n      hex_num.splice(hex_num.indexOf(hex), 1);\n    }\n  });\n  hex_num = hex_num.join(\"\");\n  let prime_count = 0;\n  for (let i = 2; i <= hex_num.length; i++) {\n    if (hex_num.includes(i)) {\n      prime_count++;\n    }\n  }\n  return prime_count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key2 = (num) => {\n  let hex_num;\n  num = num.toUpperCase();\n  hex_num = num.split(\"\");\n  hex_num.forEach((hex) => {\n    if (hex === \"A\" || hex === \"B\" || hex === \"C\" || hex === \"D\" || hex === \"E\" || hex === \"F\") {\n      hex_num.splice(hex_num.indexOf(hex), 1);\n    }\n  });\n  hex_num = hex_num.join(\"\");\n  let prime_count = 0;\n  for (let i = 2; i <= hex_num.length; i++) {\n    if (hex_num.includes(i)) {\n      prime_count++;\n    }\n  }\n  return prime_count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key3 = (num) => {\n  let hex_num;\n  num = num.toUpperCase();\n  hex_num = num.split(\"\");\n  hex_num.forEach((hex) => {\n    if (hex === \"A\" || hex === \"B\" || hex === \"C\" || hex === \"D\" || hex === \"E\" || hex === \"F\") {\n      hex_num.splice(hex_num.indexOf(hex), 1);\n    }\n  });\n  hex_num = hex_num.join(\"\");\n  let prime_count = 0;\n  for (let i = 2; i <= hex_num.length; i++) {\n    if (hex_num.includes(i)) {\n      prime_count++;\n    }\n  }\n  return prime_count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key4 = (num) => {\n  let hex_num;\n  num = num.toUpperCase();\n  hex_num = num.split(\"\");\n  hex_num.forEach((hex) => {\n    if (hex === \"A\" || hex === \"B\" || hex === \"C\" || hex === \"D\" || hex === \"E\" || hex === \"F\") {\n      hex_num.splice(hex_num.indexOf(hex), 1);\n    }\n  });\n  hex_num = hex_num.join(\"\");\n  let prime_count = 0;\n  for (let i = 2; i <= hex_num.length; i++) {\n    if (hex_num.includes(i)) {\n      prime_count++;\n    }\n  }\n  return prime_count;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimalString = decimal.toString();\n  for (let i = 0; i < decimalString.length; i++) {\n    binary += decimalString[i] == '1'? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  Write a function that takes a string and returns the string with each letter capitalized.\n  If the string length is less than or equal to 1, the function should return an empty string.\n  If the string length is greater than 1, the function should capitalize the first letter of the\n  first word in the string, and capitalize the rest of the letters in the string.\n\n  Examples:\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello\")   # returns \"Hello\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"hello world\")   # returns \"Hello World\"\n  capitalize_first_word(\"\")   # returns \"\"\n  */\nconst capitalize_first_word = (string) => {\n  if (string.length <= 1) {\n    return '';\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n\n  return [sum, product];\n};\n\n/* Given a list of integers, return the sum of the squares of the integers in the list.\n  >>> sum_squares([1, 2, 3, 4])\n  25\n  */\nconst sum_squares = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * numbers[i];\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the product of the integers in the list.\n  >>> product_of([1, 2, 3, 4])\n  24\n  */\nconst product_of = (numbers) => {\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n\n  return product;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 3.\n  >>> sum_of_divisible_by_three([1, 2, 3, 4])\n  6\n  */\nconst sum_of_divisible_by_three = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 3 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 5.\n  >>> sum_of_divisible_by_five([1, 2, 3, 4])\n  10\n  */\nconst sum_of_divisible_by_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 5 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 7.\n  >>> sum_of_divisible_by_seven([1, 2, 3, 4])\n  14\n  */\nconst sum_of_divisible_by_seven = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 7 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 11.\n  >>> sum_of_divisible_by_eleven([1, 2, 3, 4])\n  18\n  */\nconst sum_of_divisible_by_eleven = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 11 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 15.\n  >>> sum_of_divisible_by_fifteen([1, 2, 3, 4])\n  22\n  */\nconst sum_of_divisible_by_fifteen = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 15 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 17.\n  >>> sum_of_divisible_by_seventeen([1, 2, 3, 4])\n  26\n  */\nconst sum_of_divisible_by_seventeen = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 17 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 21.\n  >>> sum_of_divisible_by_twenty([1, 2, 3, 4])\n  28\n  */\nconst sum_of_divisible_by_twenty = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 21 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 25.\n  >>> sum_of_divisible_by_twenty_five([1, 2, 3, 4])\n  30\n  */\nconst sum_of_divisible_by_twenty_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 25 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 31.\n  >>> sum_of_divisible_by_thirty([1, 2, 3, 4])\n  34\n  */\nconst sum_of_divisible_by_thirty = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 31 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 35.\n  >>> sum_of_divisible_by_thirty_five([1, 2, 3, 4])\n  36\n  */\nconst sum_of_divisible_by_thirty_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 35 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 40.\n  >>> sum_of_divisible_by_forty([1, 2, 3, 4])\n  42\n  */\nconst sum_of_divisible_by_forty = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 40 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 45.\n  >>> sum_of_divisible_by_forty_five([1, 2, 3, 4])\n  46\n  */\nconst sum_of_divisible_by_forty_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 45 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 50.\n  >>> sum_of_divisible_by_fifty([1, 2, 3, 4])\n  52\n  */\nconst sum_of_divisible_by_fifty = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 50 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 55.\n  >>> sum_of_divisible_by_fifty_five([1, 2, 3, 4])\n  56\n  */\nconst sum_of_divisible_by_fifty_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 55 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 60.\n  >>> sum_of_divisible_by_sixty([1, 2, 3, 4])\n  62\n  */\nconst sum_of_divisible_by_sixty = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 60 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the sum of the integers in the list that are divisible by 65.\n  >>> sum_of_divisible_by_sixty_five([1, 2, 3, 4])\n  66\n  */\nconst sum_of_divisible_by_sixty_five = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 65 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/* Given a list of integers, return the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) {\n      count += 1;\n    }\n  }\n  return count >= 3 && count % 3 === 0;\n};\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  Return true if it contains only letters a-z and false otherwise.\n  For example:\n  is_alpha(a) => true\n  is_alpha(b) => false\n  is_alpha(ab) => false\n  is_alpha(abc) => true\n  is_alpha(abz) => false\n  is_alpha(abcde) => false\n  is_alpha(abcdez) => false\n  is_alpha(abcdezx) => false\n  is_alpha(abcdezxc) => false\n  is_alpha(abcdezxcdef) => false\n  is_alpha(abcdezxcdefg) => false\n  is_alpha(abcdezxcdefgh) => false\n  is_alpha(abcdezxcdefghi) => false\n  is_alpha(abcdezxcdefghij) => false\n  is_alpha(abcdezxcdefghijk) => false\n  is_alpha(abcdezxcdefghijkl) => false\n  is_alpha(abcdezxcdefghijklm) => false\n  is_alpha(abcdezxcdefghijklmn) => false\n  is_alpha(abcdezxcdefghijklmno) => false\n  is_alpha(abcdezxcdefghijklmnop) => false\n  is_alpha(abcdezxcdefghijklmnopq) => false\n  is_alpha(abcdezxcdefghijklmnopqr) => false\n  is_alpha(abcdezxcdefghijklmnopqrs) => false\n  is_alpha(abcdezxcdefghijklmnopqrst) => false\n  is_alpha(abcdezxcdefghijklmnopqrstu) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuv) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvw) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwx) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxy) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyz) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyza) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzab) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabc) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcd) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcde) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdez) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezx) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxc) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcd) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcde) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdef) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefg) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefgh) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghi) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghij) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijk) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijkl) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklm) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmno) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnop) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopq) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqr) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrs) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrst) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrstu) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrstuv) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrstuvw) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghijklmnopqrstuvwx) => false\n  is_alpha(abcdezxcdefghijklmnopqrstuvwxyzabcdezxcdefghij", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let result = '';\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] < 3.0) {\n      result += 'D-';\n    } else if (grades[i] < 3.7) {\n      result += 'C-';\n    } else if (grades[i] < 4.0) {\n      result += 'B-';\n    } else if (grades[i] < 4.7) {\n      result += 'B-';\n    } else if (grades[i] < 5.0) {\n      result += 'B-';\n    } else if (grades[i] < 5.7) {\n      result += 'B-';\n    } else if (grades[i] < 6.0) {\n      result += 'B-';\n    } else if (grades[i] < 6.7) {\n      result += 'B-';\n    } else if (grades[i] < 7.0) {\n      result += 'B-';\n    } else if (grades[i] < 7.7) {\n      result += 'B-';\n    } else if (grades[i] < 8.0) {\n      result += 'B-';\n    } else if (grades[i] < 8.7) {\n      result += 'B-';\n    } else if (grades[i] < 9.0) {\n      result += 'B-';\n    } else if (grades[i] < 9.7) {\n      result += 'B-';\n    } else if (grades[i] < 10.0) {\n      result += 'B-';\n    } else if (grades[i] < 10.7) {\n      result += 'B-';\n    } else if (grades[i] < 11.0) {\n      result += 'B-';\n    } else if (grades[i] < 11.7) {\n      result += 'B-';\n    } else if (grades[i] < 12.0) {\n      result += 'B-';\n    } else if (grades[i] < 12.7) {\n      result += 'B-';\n    } else if (grades[i] < 13.0) {\n      result += 'B-';\n    } else if (grades[i] < 13.7) {\n      result += 'B-';\n    } else if (grades[i] < 14.0) {\n      result += 'B-';\n    } else if (grades[i] < 14.7) {\n      result += 'B-';\n    } else if (grades[i] < 15.0) {\n      result += 'B-';\n    } else if (grades[i] < 15.7) {\n      result += 'B-';\n    } else if (grades[i] < 16.0) {\n      result += 'B-';\n    } else if (grades[i] < 16.7) {\n      result += 'B-';\n    } else if (grades[i] < 17.0) {\n      result += 'B-';\n    } else if (grades[i] < 17.7) {\n      result += 'B-';\n    } else if (grades[i] < 18.0) {\n      result += 'B-';\n    } else if (grades[i] < 18.7) {\n      result += 'B-';\n    } else if (grades[i] < 19.0) {\n      result += 'B-';\n    } else if (grades[i] < 19.7) {\n      result += 'B-';\n    } else if (grades[i] < 20.0) {\n      result += 'B-';\n    } else if (grades[i] < 20.7) {\n      result += 'B-';\n    } else if (grades[i] < 21.0) {\n      result += 'B-';\n    } else if (grades[i] < 21.7) {\n      result += 'B-';\n    } else if (grades[i] < 22.0) {\n      result += 'B-';\n    } else if (grades[i] < 22.7) {\n      result += 'B-';\n    } else if (grades[i] < 23.0) {\n      result += 'B-';\n    } else if (grades[i] < 23.7) {\n      result += 'B-';\n    } else if (grades[i] < 24.0) {\n      result += 'B-';\n    } else if (grades[i] < 24.7) {\n      result += 'B-';\n    } else if (grades[i] < 25.0) {\n      result += 'B-';\n    } else if (grades[i] < 25.7) {\n      result += 'B-';\n    } else if (grades[i] < 26.0) {\n      result += 'B-';\n    } else if (grades[i] < 26.7) {\n      result += 'B-';\n    } else if (grades[i] < 27.0) {\n      result += 'B-';\n    } else if (grades[i] < 27.7) {\n      result += 'B-';\n    } else if (grades[i] < 28.0) {\n      result += 'B-';\n    } else if (grades[i] < 28.7) {\n      result += 'B-';\n    } else if (grades[i] < 29.0) {\n      result += 'B-';\n    } else if (grades[i] < 29.7) {\n      result += 'B-';\n    } else if (grades[i] < 30.0) {\n      result += 'B-';\n    } else if (grades[i] < 30.7) {\n      result += 'B-';\n    } else if (grades[i] < 31.0) {\n      result += 'B-';\n    } else if (grades[i] < 31.7) {\n      result += 'B-';\n    } else if (grades[i] < 32.0) {\n      result += 'B-';\n    } else if (grades[i] < 32.7) {\n      result += 'B-';\n    } else if (grades[i] < 33.0) {\n      result += 'B-';\n    } else if (grades[i] < 33.7) {\n      result += 'B-';\n    } else if (grades[i] < 34.0) {\n      result += 'B-';\n    } else if (grades[i] < 34.7) {\n      result += 'B-';\n    } else if (grades[i] < 35.0) {\n      result += 'B-';\n    } else if (grades[i] < 35.7) {\n      result += 'B-';\n    } else if (grades[i] < 36.0) {\n      result += 'B-';\n    } else if (grades[i] < 36.7) {\n      result += 'B-';\n    } else if (grades[i] < 37.0) {\n      result += 'B-';\n    } else if (grades[i] < 37.7) {\n      result += 'B-';\n    } else if (grades[i] < 38.0) {\n      result += 'B-';\n    } else if (grades[i] < 38.7) {\n      result += 'B-';\n    } else if (grades[i] < 39.0) {\n      result += 'B-';\n    } else if (grades[i] < 39.7) {\n      result += 'B-';\n    } else if (grades[i] < 40.0) {\n      result += 'B-';\n    } else if (grades[i] < 40.7) {\n      result += 'B-';\n    } else if (grades[i] < 41.0) {\n      result += 'B-';\n    } else if (grades[i] < 41.7) {\n      result += 'B-';\n    } else if (grades[i] < 42.0) {\n      result += 'B-';\n    } else if (grades[i] < 42.7) {\n      result += 'B-';\n    } else if (grades[i] < 43.0) {\n      result += 'B-';\n    } else if (grades[i] < 43.7) {\n      result += 'B-';\n    } else if (grades[i] < 44.0) {\n      result += 'B-';\n    } else if (grades[i] < 44.7) {\n      result += 'B-';\n    } else if (grades[i] < 45.0) {\n      result += 'B-';\n    } else if (grades[i] < 45.7) {\n      result += 'B-';\n    } else if (grades[i] < 46.0) {\n      result += 'B-';\n    } else if (grades[i] < 46.7) {\n      result += 'B-';\n    } else if (grades[i] < 47.0) {\n      result += 'B-';\n    } else if (grades[i] < 47.7) {\n      result += 'B-';\n    } else if (grades[i] < 48.0) {\n      result += 'B-';\n    } else if (grades[i] < 48.7) {\n      result += 'B-';\n    } else if (grades[i] < 49.0) {\n      result += 'B-';\n    } else if (grades[i] < 49.7) {\n      result += 'B-';\n    } else if (grades[i] < 50.0) {\n      result ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '1') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters or false otherwise\n  Examples\n  letters_only('Hello') == true\n  letters_only('abcdcba') == true\n  letters_only('kittens') == false\n  letters_only('orange') == false\n  */\nconst letters_only = (string) => {\n  let letters = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== 'e' && string[i]!== 'E' && string[i]!== 'i' && string[i]!== 'I' && string[i]!== 'o' && string[i]!== 'O' && string[i]!== 'u' && string[i]!== 'U') {\n      letters = false;\n      break;\n    }\n  }\n  return letters;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only numbers or false otherwise\n  Examples\n  numbers_only('Hello') == true\n  numbers_only('abcdcba') == true\n  numbers_only('kittens') == false\n  numbers_only('orange') == false\n  */\nconst numbers_only = (string) => {\n  let numbers = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0' && string[i]!== '1' && string[i]!== '2' && string[i]!== '3' && string[i]!== '4' && string[i]!== '5' && string[i]!== '6' && string[i]!== '7' && string[i]!== '8' && string[i]!== '9') {\n      numbers = false;\n      break;\n    }\n  }\n  return numbers;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only uppercase letters or false otherwise\n  Examples\n  uppercase_letters('Hello') == true\n  uppercase_letters('abcdcba') == true\n  uppercase_letters('kittens') == false\n  uppercase_letters('orange') == false\n  */\nconst uppercase_letters = (string) => {\n  let upper = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'A' && string[i]!== 'a' && string[i]!== 'E' && string[i]!== 'e' && string[i]!== 'I' && string[i]!== 'i' && string[i]!== 'O' && string[i]!== 'o' && string[i]!== 'U' && string[i]!== 'u') {\n      upper = false;\n      break;\n    }\n  }\n  return upper;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only lowercase letters or false otherwise\n  Examples\n  lowercase_letters('Hello') == true\n  lowercase_letters('abcdcba') == true\n  lowercase_letters('kittens') == false\n  lowercase_letters('orange') == false\n  */\nconst lowercase_letters = (string) => {\n  let lower = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== 'e' && string[i]!== 'E' && string[i]!== 'i' && string[i]!== 'I' && string[i]!== 'o' && string[i]!== 'O' && string[i]!== 'u' && string[i]!== 'U') {\n      lower = false;\n      break;\n    }\n  }\n  return lower;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only spaces or false otherwise\n  Examples\n  spaces_only('Hello') == true\n  spaces_only('abcdcba') == true\n  spaces_only('kittens') == false\n  spaces_only('orange') == false\n  */\nconst spaces_only = (string) => {\n  let spaces = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!=='') {\n      spaces = false;\n      break;\n    }\n  }\n  return spaces;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only symbols or false otherwise\n  Examples\n  symbols_only('Hello') == true\n  symbols_only('abcdcba') == true\n  symbols_only('kittens') == false\n  symbols_only('orange') == false\n  */\nconst symbols_only = (string) => {\n  let symbols = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '!' && string[i]!== '@' && string[i]!== '#' && string[i]!== '$' && string[i]!== '%' && string[i]!== '^' && string[i]!== '&' && string[i]!== '*' && string[i]!== '(' && string[i]!== ')' && string[i]!== '_' && string[i]!== '+' && string[i]!== '=' && string[i]!== '{' && string[i]!== '}' && string[i]!== '[' && string[i]!== ']' && string[i]!== '|' && string[i]!== '\\\\' && string[i]!== '~' && string[i]!== '`') {\n      symbols = false;\n      break;\n    }\n  }\n  return symbols;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only punctuation or false otherwise\n  Examples\n  punctuation_only('Hello') == true\n  punctuation_only('abcdcba') == true\n  punctuation_only('kittens') == false\n  punctuation_only('orange') == false\n  */\nconst punctuation_only = (string) => {\n  let punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '.' && string[i]!== '!' && string[i]!== '?' && string[i]!== ';' && string[i]!== ':' && string[i]!== '\"' && string[i]!== '\\'' && string[i]!== '(' && string[i]!== ')' && string[i]!== '-' && string[i]!== '_' && string[i]!== '*' && string[i]!== '+' && string[i]!== '=' && string[i]!== '{' && string[i]!== '}' && string[i]!== '[' && string[i]!== ']' && string[i]!== '|' && string[i]!== '\\\\' && string[i]!== '~' && string[i]!== '`') {\n      punctuation = false;\n      break;\n    }\n  }\n  return punctuation;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters, numbers, spaces, symbols and punctuation or false\n  otherwise\n  Examples\n  letters_numbers_spaces_symbols_punctuation('Hello') == true\n  letters_numbers_spaces_symbols_punctuation('abcdcba') == true\n  letters_numbers_spaces_symbols_punctuation('kittens') == false\n  letters_numbers_spaces_symbols_punctuation('orange') == false\n  */\nconst letters_numbers_spaces_symbols_punctuation = (string) => {\n  let letters_numbers_spaces_symbols_punctuation = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== 'a' && string[i]!== 'A' && string[i]!== 'e' && string[i]!== 'E' && string[i]!== 'i' && string[i]!== 'I' && string[i]!== 'o' && string[i]!== 'O' && string[i]!== 'u' && string[i]!== 'U' && string[i]!== '0' && string[i]!== '1' && string[i]!== '2' && string[i]!== '3' && string[i]!== '4' && string[i]!== '5' && string[i]!== '6' && string[i]!== '7' && string[i]!== '8' && string[i]!== '9' && string[i]!== '.' && string[i]!== '!' && string[i]!== '?' && string[i]!== ';' && string[i]!== ':' && string[i]!== '\"' && string[i]!== '\\'' && string[i]!== '(' && string[i]!== ')' && string[i]!== '-' && string[i]!== '_' && string[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_zero_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst ends_one_starts = (n) => {\n  let count = 0;\n  for (let i = n; i >= 1; i--) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  for (let i = 0; i <= n; i++) {\n    if (i === ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = \"\";\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += String.fromCharCode(sum % 2);\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> [4, 6, 7]\n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the even elements that are at odd indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [2, 4]\n  */\nconst remove = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the odd elements that are at even indices..\n\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 7]\n  */\nconst removeOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2]\n  */\nconst removeEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeLessThan = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThan = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are divisible by some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeDivide = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are not divisible by some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeNotDivide = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than or equal to some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeLessThanOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than or equal to some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThanOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are divisible by some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeDivideOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are not divisible by some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeNotDivideOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % val!== 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are less than some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 3) ==> [4, 2, 6, 7]\n  */\nconst removeLessThanOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] <= val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are greater than some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeGreaterThanOrEqual = (lst, val) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= val) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. remove all the elements that are equal to some value val.\n\n\n  Examples:\n      remove([4, 2, 6, 7], 7) ==> [4, 2, 6, 7]\n  */\nconst removeEqual = (", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue + 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!!'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!!'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_dec = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    const asciiValue = char.charCodeAt(0);\n    if (asciiValue > 96 && asciiValue < 123) {\n      newString += char;\n    } else {\n      newString += String.fromCharCode(asciiValue - 32);\n    }\n  }\n  return newString;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const res = [];\n  const rows = lst.reduce((acc, cur) => {\n    const row = cur.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    acc.push(row);\n    return acc;\n  }, []);\n  const rows = rows.sort((a, b) => a[0] - b[0]);\n  const rows = rows.sort((a, b) => b[1] - a[1]);\n  rows.forEach((row, i) => {\n    const cols = row.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    cols.sort((a, b) => b[0] - a[0]);\n    cols.sort((a, b) => b[1] - a[1]);\n    cols.forEach((col, j) => {\n      if (j === x) {\n        res.push([i, col]);\n      }\n    });\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_col = (lst, x) => {\n  const res = [];\n  const cols = lst.reduce((acc, cur) => {\n    const col = cur.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    acc.push(col);\n    return acc;\n  }, []);\n  const cols = cols.sort((a, b) => a[1] - b[1]);\n  const cols = cols.sort((a, b) => b[0] - a[0]);\n  cols.forEach((col, i) => {\n    if (i === x) {\n      res.push([0, col]);\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  const diag = lst.reduce((acc, cur) => {\n    const diag = cur.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    acc.push(diag);\n    return acc;\n  }, []);\n  const diag = diag.sort((a, b) => a[1] - b[1]);\n  const diag = diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach((diag, j) => {\n    if (j === x) {\n      res.push([0, diag]);\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  const diag = lst.reduce((acc, cur) => {\n    const diag = cur.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    acc.push(diag);\n    return acc;\n  }, []);\n  const diag = diag.sort((a, b) => a[1] - b[1]);\n  const diag = diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach((diag, j) => {\n    if (j === x) {\n      res.push([0, diag]);\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const res = [];\n  const diag = lst.reduce((acc, cur) => {\n    const diag = cur.reduce((acc, cur) => {\n      acc.push(cur);\n      return acc;\n    }, []);\n    acc.push(diag);\n    return acc;\n  }, []);\n  const diag = diag.sort((a, b) => a[1] - b[1]);\n  const diag = diag.sort((a, b) => b[0] - a[0]);\n  diag.forEach((diag, j) => {\n    if (j === x) {\n      res.push([0, diag]);\n    }\n  });\n  return res;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sum = 0;\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n  }\n  if (sum % 2 === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a, b) => b - a);\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 2)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return newString\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) - 2)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 2)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) - 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) - 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) - 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) - 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and\n  returns a string rotated 13 places. \n  For example:\n  rot13('hi') returns 'nkr'\n  rot13('asdfghjkl') returns 'gkz'\n  rot13('gf') returns 'zf'\n  rot13('et') returns 'vz'\n  */\nconst rot13 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let newAlphabet = ''\n  for (let i = 0; i < alphabet.length; i++) {\n    newAlphabet += alphabet.charAt(alphabet.indexOf(alphabet[i]) + 13)\n  }\n  let newString = ''\n  for (let i = 0; i < s.length; i++) {\n    newString += newAlphabet.charAt(alphabet.indexOf(s.charAt(i)) + 13)\n  }\n  return newString\n}\n\n/*Create a function rot13 that takes a string as an argument and", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  let max_so_far = numbers[0];\n  let max_so_far_i = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_so_far) {\n      max_so_far = numbers[i];\n      max_so_far_i = i;\n    }\n  }\n  return numbers.slice(0, max_so_far_i + 1);\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_min = (numbers) => {\n  let min_so_far = numbers[0];\n  let min_so_far_i = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min_so_far) {\n      min_so_far = numbers[i];\n      min_so_far_i = i;\n    }\n  }\n  return numbers.slice(0, min_so_far_i + 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 6]\n  */\nconst rolling_sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2.5]\n  */\nconst rolling_average = (numbers) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  average = sum / numbers.length;\n  return average;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_std([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.4142135623730951]\n  */\nconst rolling_std = (numbers) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  average = sum / numbers.length;\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.pow(numbers[i] - average, 2);\n  }\n  deviation = Math.sqrt(deviation / numbers.length);\n  return deviation;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 1.2903225806451613]\n  */\nconst rolling_variance = (numbers) => {\n  let sum = 0;\n  let average = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  average = sum / numbers.length;\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.pow(numbers[i] - average, 2);\n  }\n  deviation = Math.sqrt(deviation / numbers.length);\n  return deviation;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_median = (numbers) => {\n  let median = 0;\n  let median_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < median) {\n      median = numbers[i];\n      median_index = i;\n    }\n  }\n  return numbers.slice(0, median_index + 1);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_mode = (numbers) => {\n  let modes = [];\n  let modes_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let current_mode = numbers[i];\n    let current_mode_index = 0;\n    for (let j = 0; j < modes_index; j++) {\n      if (numbers[j] === current_mode) {\n        current_mode_index++;\n      }\n    }\n    if (current_mode_index > modes_index) {\n      modes_index = current_mode_index;\n      modes = [current_mode];\n    }\n  }\n  return modes;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_median = (numbers) => {\n  let median = 0;\n  let median_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < median) {\n      median = numbers[i];\n      median_index = i;\n    }\n  }\n  return numbers.slice(0, median_index + 1);\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_mode = (numbers) => {\n  let modes = [];\n  let modes_index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    let current_mode = numbers[i];\n    let current_mode_index = 0;\n    for (let j = 0; j < modes_index; j++) {\n      if (numbers[j] === current_mode) {\n        current_mode_index++;\n      }\n    }\n    if (current_mode_index > modes_index) {\n      modes_index = current_mode_index;\n      modes = [current_mode];\n    }\n  }\n  return modes;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_min = (numbers) => {\n  let min_so_far = numbers[0];\n  let min_so_far_i = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min_so_far) {\n      min_so_far = numbers[i];\n      min_so_far_i = i;\n    }\n  }\n  return numbers.slice(0, min_so_far_i + 1);\n};\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_max = (numbers) => {\n  let max_so_far = numbers[0];\n  let max_so_far_i = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_so_far) {\n      max_so_far = numbers[i];\n      max_so_far_i = i;\n    }\n  }\n  return numbers.slice(0, max_so_far_i + 1);\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 2]\n  */\nconst rolling_min = (numbers) => {\n  let min_so_far = numbers[0];\n  let min_so_far_i = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min_so_far) {\n      min_so_far = numbers[i];\n      min_so_far_i = i;\n    }\n  }\n  return numbers.slice(0, min_so_far_i + 1);\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 6]\n  */\nconst rolling_sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length < 2) return null;\n  const [smallest, secondSmallest] = lst;\n  return secondSmallest;\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, 3, 1]) --> false\n  duplicates([]) --> false\n  duplicates([1, 1]) --> true\n*/\nconst duplicates = (lst) => {\n  if (lst.length === 0) return false;\n  const [first,...rest] = lst;\n  return rest.every(item => item === first);\n};\n\n/*\n  You are given a list of integers. Write a function that returns true if and only if the list contains no duplicates.\n  \n  duplicates([1, 1, 2, 3]) --> true\n  duplicates([1, 2, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are floats.\n  Returns false in any other cases.\n  Examples\n  any_float(5, 2, 7) ➞ true\n  any_float(3, 2, 2) ➞ false\n  any_float(3, -2, 1) ➞ true\n  any_float(3.6, -2.2, 2) ➞ false\n  */\nconst any_float = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are decimals.\n  Returns false in any other cases.\n  Examples\n  any_decimal(5, 2, 7) ➞ true\n  any_decimal(3, 2, 2) ➞ false\n  any_decimal(3, -2, 1) ➞ true\n  any_decimal(3.6, -2.2, 2) ➞ false\n  */\nconst any_decimal = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are strings.\n  Returns false in any other cases.\n  Examples\n  any_string('5', '2', '7') ➞ true\n  any_string('3', '2', '2') ➞ false\n  any_string('3', '-2', '1') ➞ true\n  any_string('3.6', '-2.2', '2') ➞ false\n  */\nconst any_string = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are booleans.\n  Returns false in any other cases.\n  Examples\n  any_boolean(5, 2, 7) ➞ true\n  any_boolean(3, 2, 2) ➞ false\n  any_boolean(3, -2, 1) ➞ true\n  any_boolean(3.6, -2.2, 2) ➞ false\n  */\nconst any_boolean = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are arrays.\n  Returns false in any other cases.\n  Examples\n  any_array(5, 2, 7) ➞ true\n  any_array(3, 2, 2) ➞ false\n  any_array(3, -2, 1) ➞ true\n  any_array(3.6, -2.2, 2) ➞ false\n  */\nconst any_array = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are objects.\n  Returns false in any other cases.\n  Examples\n  any_object(5, 2, 7) ➞ true\n  any_object(3, 2, 2) ➞ false\n  any_object(3, -2, 1) ➞ true\n  any_object(3.6, -2.2, 2) ➞ false\n  */\nconst any_object = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are null.\n  Returns false in any other cases.\n  Examples\n  any_null(5, 2, 7) ➞ true\n  any_null(3, 2, 2) ➞ false\n  any_null(3, -2, 1) ➞ true\n  any_null(3.6, -2.2, 2) ➞ false\n  */\nconst any_null = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are undefined.\n  Returns false in any other cases.\n  Examples\n  any_undefined(5, 2, 7) ➞ true\n  any_undefined(3, 2, 2) ➞ false\n  any_undefined(3, -2, 1) ➞ true\n  any_undefined(3.6, -2.2, 2) ➞ false\n  */\nconst any_undefined = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are NaNs.\n  Returns false in any other cases.\n  Examples\n  any_nan(5, 2, 7) ➞ true\n  any_nan(3, 2, 2) ➞ false\n  any_nan(3, -2, 1) ➞ true\n  any_nan(3.6, -2.2, 2) ➞ false\n  */\nconst any_nan = (x, y, z) => {\n  if (x === y || x === z) return true\n  if (x === -y || x === -z) return true\n  if (y === -x || y === -z) return true\n  if (z === -x || z === -y) return true\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are dates.\n  Returns false in any other cases.\n  Examples\n  any_date(5, 2, 7) ➞ true\n  any_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = ''\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i]\n    const letterIndex = letter.charCodeAt(0) - 65\n    const letterIndex2 = letterIndex + 2\n    const letterIndex3 = letterIndex + 3\n    const letterIndex4 = letterIndex + 4\n    const letterIndex5 = letterIndex + 5\n    const letterIndex6 = letterIndex + 6\n    const letterIndex7 = letterIndex + 7\n    const letterIndex8 = letterIndex + 8\n    const letterIndex9 = letterIndex + 9\n    const letterIndex10 = letterIndex + 10\n    const letterIndex11 = letterIndex + 11\n    const letterIndex12 = letterIndex + 12\n    const letterIndex13 = letterIndex + 13\n    const letterIndex14 = letterIndex + 14\n    const letterIndex15 = letterIndex + 15\n    const letterIndex16 = letterIndex + 16\n    const letterIndex17 = letterIndex + 17\n    const letterIndex18 = letterIndex + 18\n    const letterIndex19 = letterIndex + 19\n    const letterIndex20 = letterIndex + 20\n    const letterIndex21 = letterIndex + 21\n    const letterIndex22 = letterIndex + 22\n    const letterIndex23 = letterIndex + 23\n    const letterIndex24 = letterIndex + 24\n    const letterIndex25 = letterIndex + 25\n    const letterIndex26 = letterIndex + 26\n    const letterIndex27 = letterIndex + 27\n    const letterIndex28 = letterIndex + 28\n    const letterIndex29 = letterIndex + 29\n    const letterIndex30 = letterIndex + 30\n    const letterIndex31 = letterIndex + 31\n    const letterIndex32 = letterIndex + 32\n    const letterIndex33 = letterIndex + 33\n    const letterIndex34 = letterIndex + 34\n    const letterIndex35 = letterIndex + 35\n    const letterIndex36 = letterIndex + 36\n    const letterIndex37 = letterIndex + 37\n    const letterIndex38 = letterIndex + 38\n    const letterIndex39 = letterIndex + 39\n    const letterIndex40 = letterIndex + 40\n    const letterIndex41 = letterIndex + 41\n    const letterIndex42 = letterIndex + 42\n    const letterIndex43 = letterIndex + 43\n    const letterIndex44 = letterIndex + 44\n    const letterIndex45 = letterIndex + 45\n    const letterIndex46 = letterIndex + 46\n    const letterIndex47 = letterIndex + 47\n    const letterIndex48 = letterIndex + 48\n    const letterIndex49 = letterIndex + 49\n    const letterIndex50 = letterIndex + 50\n    const letterIndex51 = letterIndex + 51\n    const letterIndex52 = letterIndex + 52\n    const letterIndex53 = letterIndex + 53\n    const letterIndex54 = letterIndex + 54\n    const letterIndex55 = letterIndex + 55\n    const letterIndex56 = letterIndex + 56\n    const letterIndex57 = letterIndex + 57\n    const letterIndex58 = letterIndex + 58\n    const letterIndex59 = letterIndex + 59\n    const letterIndex60 = letterIndex + 60\n    const letterIndex61 = letterIndex + 61\n    const letterIndex62 = letterIndex + 62\n    const letterIndex63 = letterIndex + 63\n    const letterIndex64 = letterIndex + 64\n    const letterIndex65 = letterIndex + 65\n    const letterIndex66 = letterIndex + 66\n    const letterIndex67 = letterIndex + 67\n    const letterIndex68 = letterIndex + 68\n    const letterIndex69 = letterIndex + 69\n    const letterIndex70 = letterIndex + 70\n    const letterIndex71 = letterIndex + 71\n    const letterIndex72 = letterIndex + 72\n    const letterIndex73 = letterIndex + 73\n    const letterIndex74 = letterIndex + 74\n    const letterIndex75 = letterIndex + 75\n    const letterIndex76 = letterIndex + 76\n    const letterIndex77 = letterIndex + 77\n    const letterIndex78 = letterIndex + 78\n    const letterIndex79 = letterIndex + 79\n    const letterIndex80 = letterIndex + 80\n    const letterIndex81 = letterIndex + 81\n    const letterIndex82 = letterIndex + 82\n    const letterIndex83 = letterIndex + 83\n    const letterIndex84 = letterIndex + 84\n    const letterIndex85 = letterIndex + 85\n    const letterIndex86 = letterIndex + 86\n    const letterIndex87 = letterIndex + 87\n    const letterIndex88 = letterIndex + 88\n    const letterIndex89 = letterIndex + 89\n    const letterIndex90 = letterIndex + 90\n    const letterIndex91 = letterIndex + 91\n    const letterIndex92 = letterIndex + 92\n    const letterIndex93 = letterIndex + 93\n    const letterIndex94 = letterIndex + 94\n    const letterIndex95 = letterIndex + 95\n    const letterIndex96 = letterIndex + 96\n    const letterIndex97 = letterIndex + 97\n    const letterIndex98 = letterIndex + 98\n    const letterIndex99 = letterIndex + 99\n    const letterIndex100 = letterIndex + 100\n    const letterIndex101 = letterIndex + 101\n    const letterIndex102 = letterIndex + 102\n    const letterIndex103 = letterIndex + 103\n    const letterIndex104 = letterIndex + 104\n    const letterIndex105 = letterIndex + 105\n    const letterIndex106 = letterIndex + 106\n    const letterIndex107 = letterIndex + 107\n    const letterIndex108 = letterIndex + 108\n    const letterIndex109 = letterIndex + 109\n    const letterIndex110 = letterIndex + 110\n    const letterIndex111 = letterIndex + 111\n    const letterIndex112 = letterIndex + 112\n    const letterIndex113 = letterIndex + 113\n    const letterIndex114 = letterIndex + 114\n    const letterIndex115 = letterIndex + 115\n    const letterIndex116 = letterIndex + 116\n    const letterIndex117 = letterIndex + 117\n    const letterIndex118 = letterIndex + 118\n    const letterIndex119 = letterIndex + 119\n    const letterIndex120 = letterIndex + 120\n    const letterIndex121 = letterIndex + 121\n    const letterIndex122 = letterIndex + 122\n    const letterIndex123 = letterIndex + 123\n    const letterIndex124 = letterIndex + 124\n    const letterIndex125 = letterIndex + 125\n    const letterIndex126 = letterIndex + 126\n    const letterIndex127 = letterIndex + 127\n    const letterIndex128 = letterIndex + 128\n    const letterIndex129 = letterIndex + 129\n    const letterIndex130 = letterIndex + 130\n    const letterIndex131 = letterIndex + 131\n    const letterIndex132 = letterIndex + 132\n    const letterIndex133 = letterIndex + 133\n    const letterIndex134 = letterIndex + 134\n    const letterIndex135 = letterIndex + 135\n    const letterIndex136 = letterIndex + 136\n    const letterIndex137 = letterIndex + 137\n    const letterIndex138 = letterIndex + 138\n    const letterIndex139 = letterIndex + 139\n    const letterIndex140 = letterIndex + 140\n    const letterIndex141 = letterIndex + 141\n    const letterIndex142 = letterIndex + 142\n    const letterIndex143 = letter", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let isPrime = true;\n    for (let j = Math.ceil(Math.sqrt(num)); j > 0; j--) {\n      if (num % j === 0) {\n        isPrime = false;\n      }\n    }\n    if (isPrime) {\n      sum += num;\n      if (sum > max) {\n        max = sum;\n      }\n    }\n  }\n  return max;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return the sum of the factors.\n\n  Examples:\n  For lst = [2,3,5,7,11] the output should be [2,3]\n  For lst = [2,3,5,7,11,13] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997] the output should be [2,3]\n  For lst = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive_with_keys = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_keys_case_insensitive_with_keys_case_insensitive_with_keys_case_insensitive = (dict) => {\n  let keys = Object.keys(dict);\n  for(let i = 0; i < keys.length; i++){\n    if(typeof dict[keys[i]]!== \"string\"){\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (is_prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array of integers and returns an array of the integers that are not prime\n  numbers.\n  for example:\n  not_prime([2,3,5,7]) => [2,3,5,7,11]\n  not_prime([2,3,5,7,11,13,17]) => [2,3,5,7,11,13,17]\n  not_prime([2,3,5,7,11,13,17,19]) => [2,3,5,7,11,13,17,19]\n  not_prime([]) => []\n  not_prime([2,3,5,7,11,13,17,19,21]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75]) => [2,3,5,7,11,13,17,19]\n  not_prime([2,3,5,7,11,13,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply2 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply3 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply4 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply5 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply6 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply7 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply8 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply9 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply10 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply11 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply12 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply13 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply14 = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i].value * b[i].value;\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 2\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I'\n      || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  count_consonants('aBCdEf') returns 3\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 0\n  */\nconst count_consonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D'\n      || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H'\n      || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L'\n      || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P'\n      || s[i] === 'q' || s[i] === 'Q' || s[i] === 'r' || s[i] === 'R' || s[i] ==='s' || s[i] === 'S'\n      || s[i] === 't' || s[i] === 'T' || s[i] === 'v' || s[i] === 'V' || s[i] === 'w' || s[i] === 'W'\n      || s[i] === 'x' || s[i] === 'X' || s[i] === 'y' || s[i] === 'Y' || s[i] === 'z' || s[i] === 'Z') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices.\n  \n  For example:\n  count_spaces('aBCdEf') returns 2\n  count_spaces('abcdefg') returns 0\n  count_spaces('dBBE') returns 0\n  */\nconst count_spaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] ==='') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices.\n  \n  For example:\n  count_digits('aBCdEf') returns 2\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= '0' && s[i] <= '9') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of upper case letters in even indices.\n  \n  For example:\n  count_upper_letters('aBCdEf') returns 1\n  count_upper_letters('abcdefg') returns 0\n  count_upper_letters('dBBE') returns 0\n  */\nconst count_upper_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lower case letters in even indices.\n  \n  For example:\n  count_lower_letters('aBCdEf') returns 1\n  count_lower_letters('abcdefg') returns 0\n  count_lower_letters('dBBE') returns 0\n  */\nconst count_lower_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of upper case letters in odd indices.\n  \n  For example:\n  count_upper_letters('aBCdEf') returns 0\n  count_upper_letters('abcdefg') returns 0\n  count_upper_letters('dBBE') returns 1\n  */\nconst count_upper_letters_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lower case letters in odd indices.\n  \n  For example:\n  count_lower_letters('aBCdEf') returns 0\n  count_lower_letters('abcdefg') returns 0\n  count_lower_letters('dBBE') returns 0\n  */\nconst count_lower_letters_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  count_vowels('aBCdEf') returns 0\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'a' || s[i] === 'A' || s[i] === 'e' || s[i] === 'E' || s[i] === 'i' || s[i] === 'I'\n      || s[i] === 'o' || s[i] === 'O' || s[i] === 'u' || s[i] === 'U') {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  count_consonants('aBCdEf') returns 0\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 0\n  */\nconst count_consonants_odd = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] === 'b' || s[i] === 'B' || s[i] === 'c' || s[i] === 'C' || s[i] === 'd' || s[i] === 'D'\n      || s[i] === 'f' || s[i] === 'F' || s[i] === 'g' || s[i] === 'G' || s[i] === 'h' || s[i] === 'H'\n      || s[i] === 'j' || s[i] === 'J' || s[i] === 'k' || s[i] === 'K' || s[i] === 'l' || s[i] === 'L'\n      || s[i] ==='m' || s[i] === 'M' || s[i] === 'n' || s[i] === 'N' || s[i] === 'p' || s[i] === 'P'\n      || s[i] ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_integer(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_decimal(\"10\")\n  10\n  >>> closest_decimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_decimal(\"14.5\") should\n  return 15.3 and closest_decimal(\"-14.5\") should return -15.3\n  */\nconst closest_decimal = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_decimal(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_number(\"10\")\n  10\n  >>> closest_number(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_number(\"14.5\") should\n  return 15.3 and closest_number(\"-14.5\") should return -15.3\n  */\nconst closest_number = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_number(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_percentage(\"10\")\n  10\n  >>> closest_percentage(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_percentage(\"14.5\") should\n  return 15.3 and closest_percentage(\"-14.5\") should return -15.3\n  */\nconst closest_percentage = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_percentage(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_date(\"14.5\") should\n  return 15.3 and closest_date(\"-14.5\") should return -15.3\n  */\nconst closest_date = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_date(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_time(\"14.5\") should\n  return 15.3 and closest_time(\"-14.5\") should return -15.3\n  */\nconst closest_time = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_time(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_date(\"14.5\") should\n  return 15.3 and closest_date(\"-14.5\") should return -15.3\n  */\nconst closest_date = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_date(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_time(\"10\")\n  10\n  >>> closest_time(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_time(\"14.5\") should\n  return 15.3 and closest_time(\"-14.5\") should return -15.3\n  */\nconst closest_time = (value) => {\n  let closest;\n  const difference = Math.abs(value - closest_time(value));\n  if (difference < 1) {\n    closest = value;\n  } else {\n    closest = Math.ceil(difference * 100) / 100;\n  }\n  return closest;\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest number to it. If the number is equidistant\n  from two numbers, round it away from zero.\n  Examples\n  >>> closest_date(\"10\")\n  10\n  >>> closest_date(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_date(\"14.5\") should\n  return 15.3 and closest_date(\"-14.5\") should return -15.3\n  */\nconst closest_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
