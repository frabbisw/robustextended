{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length - 1; i++) {\n    const difference = Math.abs(numbers[i] - numbers[i + 1]);\n    if (difference < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.indexOf(array[i])!== i) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns true if given array contains only unique elements.\n * Note: This is not the same as 'array' contains only unique elements.\n * Returns false for empty array.\n * >>> is_unique([1, 2, 3])\n  true\n  >>> is_unique([1, 2, 3])\n  false\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  true\n  >>> is_unique([1, 1, 2, 2, 3, 3])\n  false\n  */\nconst is_unique = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const groups = [];\n  let current_group = [];\n  let open_brace_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      open_brace_count++;\n      current_group.push(char);\n    } else if (char === ')') {\n      open_brace_count--;\n      if (open_brace_count === 0) {\n        groups.push(current_group);\n        current_group = [];\n      }\n    } else {\n      current_group.push(char);\n    }\n  }\n\n  if (current_group.length > 0) {\n    groups.push(current_group);\n  }\n\n  return groups;\n};\n\n/* Input to this function is a string containing multiple group", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longestPalindrome = '';\n  let longestPalindromeLength = 0;\n  let longestPalindromePrefix = '';\n  let longestPalindromeSuffix = '';\n  let longestPalindromeSuffixLength = 0;\n  let longestPalindromeSuffixReverse = '';\n  let longestPalindromeSuffixReverseLength = 0;\n  let longestPalindromeSuffixReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverseReverseReverseReverse = '';\n  let longestPalindromeSuffixReverseReverseReverseReverseLength = 0;\n  let longestPalindromeSuffixReverseReverse", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the order of the array before returning it.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"John\", \"is\", \"name\", \"my\", \"Hi\"]\n  words_string(\"One, two, three, four, five, six\") == [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n  */\nconst words_string_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse_and_reverse = (s) => {\n  const words = s.split(/,|\\s/);\n  return words.reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().map(w => w.trim());\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words in reverse order and \n  then reverse the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 13\n  choose_num(13, 12) = -1\n  */\nconst choose_num_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_odd(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_odd = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_odd(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\nconst choose_num_range_even = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return choose_num_range_even(x / 2, y);\n};\n\n/*This function takes two positive numbers x and y and returns the\n  biggest integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 15\n  choose_num(13, 12) = -1\n  */\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += i;\n  }\n  return result / Math.pow(2, Math.ceil(Math.log2(m) - Math.log2(n)));\n};\n\n/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let result = 0;\n  for (let i = n; i <= m; i++) {\n    result += ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits2 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits3 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits4 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits5 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits6 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits7 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits8 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits9 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits10 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits11 = (x) => {\n  let result = [];\n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      if (item % 2!== 0) {\n        result.push(item);\n      }\n    } else {\n      result.push(item);\n    }\n  });\n  return result.sort((a, b) => a - b);\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit and odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 33, 15]\n  >>> unique_digits([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(arr3[i] + '-' + One[arr3[i]]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_2 = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(One[arr3[i]] + '-' + arr3[i]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_3 = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(arr3[i] + '-' + One[arr3[i]]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_4 = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(One[arr3[i]] + '-' + arr3[i]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_5 = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(arr3[i] + '-' + One[arr3[i]]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_6 = (arr) => {\n  let result = [];\n  let arr2 = arr.sort((a, b) => a - b);\n  let arr3 = arr2.reverse();\n  for (let i = 0; i < arr3.length; i++) {\n    result.push(One[arr3[i]] + '-' + arr3[i]);\n  }\n  return result;\n}\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(i * factorials[i - 1]);\n    } else {\n      factorials.push(i);\n    }\n  }\n  return factorials;\n};\n\n// TESTS\nconst tests = [\n  [\n    1,\n    [1, 2, 6],\n    [1, 3, 6],\n    [1, 4, 6],\n    [1, 5, 6],\n    [1, 6, 6],\n    [1, 7, 6],\n    [1, 8, 6],\n    [1, 9, 6],\n    [1, 10, 6],\n    [1, 11, 6],\n    [1, 12, 6],\n    [1, 13, 6],\n    [1, 14, 6],\n    [1, 15, 6],\n    [1, 16, 6],\n    [1, 17, 6],\n    [1, 18, 6],\n    [1, 19, 6],\n    [1, 20, 6],\n    [1, 21, 6],\n    [1, 22, 6],\n    [1, 23, 6],\n    [1, 24, 6],\n    [1, 25, 6],\n    [1, 26, 6],\n    [1, 27, 6],\n    [1, 28, 6],\n    [1, 29, 6],\n    [1, 30, 6],\n    [1, 31, 6],\n    [1, 32, 6],\n    [1, 33, 6],\n    [1, 34, 6],\n    [1, 35, 6],\n    [1, 36, 6],\n    [1, 37, 6],\n    [1, 38, 6],\n    [1, 39, 6],\n    [1, 40, 6],\n    [1, 41, 6],\n    [1, 42, 6],\n    [1, 43, 6],\n    [1, 44, 6],\n    [1, 45, 6],\n    [1, 46, 6],\n    [1, 47, 6],\n    [1, 48, 6],\n    [1, 49, 6],\n    [1, 50, 6],\n    [1, 51, 6],\n    [1, 52, 6],\n    [1, 53, 6],\n    [1, 54, 6],\n    [1, 55, 6],\n    [1, 56, 6],\n    [1, 57, 6],\n    [1, 58, 6],\n    [1, 59, 6],\n    [1, 60, 6],\n    [1, 61, 6],\n    [1, 62, 6],\n    [1, 63, 6],\n    [1, 64, 6],\n    [1, 65, 6],\n    [1, 66, 6],\n    [1, 67, 6],\n    [1, 68, 6],\n    [1, 69, 6],\n    [1, 70, 6],\n    [1, 71, 6],\n    [1, 72, 6],\n    [1, 73, 6],\n    [1, 74, 6],\n    [1, 75, 6],\n    [1, 76, 6],\n    [1, 77, 6],\n    [1, 78, 6],\n    [1, 79, 6],\n    [1, 80, 6],\n    [1, 81, 6],\n    [1, 82, 6],\n    [1, 83, 6],\n    [1, 84, 6],\n    [1, 85, 6],\n    [1, 86, 6],\n    [1, 87, 6],\n    [1, 88, 6],\n    [1, 89, 6],\n    [1, 90, 6],\n    [1, 91, 6],\n    [1, 92, 6],\n    [1, 93, 6],\n    [1, 94, 6],\n    [1, 95, 6],\n    [1, 96, 6],\n    [1, 97, 6],\n    [1, 98, 6],\n    [1, 99, 6],\n    [1, 100, 6],\n    [1, 101, 6],\n    [1, 102, 6],\n    [1, 103, 6],\n    [1, 104, 6],\n    [1, 105, 6],\n    [1, 106, 6],\n    [1, 107, 6],\n    [1, 108, 6],\n    [1, 109, 6],\n    [1, 110, 6],\n    [1, 111, 6],\n    [1, 112, 6],\n    [1, 113, 6],\n    [1, 114, 6],\n    [1, 115, 6],\n    [1, 116, 6],\n    [1, 117, 6],\n    [1, 118, 6],\n    [1, 119, 6],\n    [1, 120, 6],\n    [1, 121, 6],\n    [1, 122, 6],\n    [1, 123, 6],\n    [1, 124, 6],\n    [1, 125, 6],\n    [1, 126, 6],\n    [1, 127, 6],\n    [1, 128, 6],\n    [1, 129, 6],\n    [1, 130, 6],\n    [1, 131, 6],\n    [1, 132, 6],\n    [1, 133, 6],\n    [1, 134, 6],\n    [1, 135, 6],\n    [1, 136, 6],\n    [1, 137, 6],\n    [1, 138, 6],\n    [1, 139, 6],\n    [1, 140, 6],\n    [1, 141, 6],\n    [1, 142, 6],\n    [1, 143, 6],\n    [1, 144, 6],\n    [1, 145, 6],\n    [1, 146, 6],\n    [1, 147, 6],\n    [1, 148, 6],\n    [1, 149, 6],\n    [1, 150, 6],\n    [1, 151, 6],\n    [1, 152, 6],\n    [1, 153, 6],\n    [1, 154, 6],\n    [1, 155, 6],\n    [1, 156, 6],\n    [1, 157, 6],\n    [1, 158, 6],\n    [1, 159, 6],\n    [1, 160, 6],\n    [1, 161, 6],\n    [1, 162, 6],\n    [1, 163, 6],\n    [1, 164, 6],\n    [1, 165, 6],\n    [1, 166, 6],\n    [1, 167, 6],\n    [1, 168, 6],\n    [1, 169, 6],\n    [1, 170, 6],\n    [1, 171, 6],\n    [1, 172, 6],\n    [1, 173, 6],\n    [1, 174, 6],\n    [1, 175, 6],\n    [1, 176, 6],\n    [1, 177, 6],\n    [1, 178, 6],\n    [1, 179, 6],\n    [1, 180, 6],\n    [1, 181, 6],\n    [1, 182, 6],\n    [1, 183, 6],\n    [1, 184, 6],\n    [1, 185, 6],\n    [1, 186, 6],\n    [1, 187, 6],\n    [1, 188, 6],\n    [1, 189, 6],\n    [1, 190, 6],\n    [1, 191, 6],\n    [1, 192, 6],\n    [1, 193, 6],\n    [1, 194, 6],\n    [1, 195, 6],\n    [1, 196, 6],\n    [1, 197, 6],\n    [1, 198, 6],\n    [1, 199, 6],\n    [1, 200, 6],\n    [1, 201, 6],\n    [1, 202, 6],\n    [1, 203, 6],\n    [1, 204, 6],\n    [1, 205, 6],\n    [1, 206, 6],\n    [1, 207, 6],\n    [1, 208, 6],\n    [1, 209, 6],\n    [1, 210, 6],\n    [1, 211, 6],\n    [1, 212, 6],\n    [1, 213, 6],\n    [1, 214, 6],\n    [1, 215, 6],\n    [1, 216, 6],\n    [1, 217, 6],\n    [1, 218, 6],\n    [1, 219, 6],\n    [1, 220, 6],\n    [1, 221, 6],\n    [1, 222, 6],\n    [1, 223, 6],\n    [1, 224, 6],\n    [1, 225, 6],\n    [1, 226, 6],\n    [1, 227, 6],\n    [1, 228, 6],\n    [1, 229, 6],\n    [1, 230, 6],\n    [1, 231, 6],\n    [1, 232, 6],\n    [1, 233, 6],\n    [1, 234, 6],\n    [1, 235, 6],\n    [1, 236, 6],\n    [1, 237, 6],\n    [1, 238, 6],\n    [1, 239, 6],\n    [1, 240, 6],\n    [1, 241, 6],\n    [1, 242, 6],\n    [1, 243, 6],\n    [1, 244, 6],\n    [1, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const evenPalindromes = Math.floor(n / 2);\n  const oddPalindromes = n - evenPalindromes;\n\n  return [evenPalindromes, oddPalindromes];\n};\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "<|endoftext|>/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num < 0) {\n      num *= -1;\n    }\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let count = 0;\n  let flag = true;\n  while (count < arr.length - 1) {\n    flag = flag && arr[0] > arr[arr.length - 1];\n    if (flag) {\n      arr.shift();\n      arr.push(arr[0]);\n    }\n    count++;\n  }\n  return flag;\n};\n\n/*\n  Given an array arr of N integers, your task is to find and print the\n  number of subarrays whose sum is equal to the given number K.\n\n  Input Format:\n  \n  First line contains N, the number of elements in the given array.\n  \n  Next line contains N space separated integers arr[1], arr[2],..., arr[N].\n  \n  Next line contains K, the sum of the subarrays.\n  \n  Output Format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following format:\n  \n  Print the required number of subarrays in the following ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] ^ b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '100')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] & b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '100')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] | b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '100'\n  */\nconst string_not = (a) => {\n  const a_array = a.split('').map(Number);\n  const a_length = a_array.length;\n  const result = new Array(a_length);\n  for (let i = 0; i < a_length; i++) {\n    result[i] = ~a_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '100')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] & b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '100')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] | b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '100'\n  */\nconst string_not = (a) => {\n  const a_array = a.split('').map(Number);\n  const a_length = a_array.length;\n  const result = new Array(a_length);\n  for (let i = 0; i < a_length; i++) {\n    result[i] = ~a_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '100')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] & b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('000', '100')\n  '100'\n  */\nconst string_or = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);\n  for (let i = 0; i < a_max; i++) {\n    result[i] = a_array[i] | b_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('000')\n  '100'\n  */\nconst string_not = (a) => {\n  const a_array = a.split('').map(Number);\n  const a_length = a_array.length;\n  const result = new Array(a_length);\n  for (let i = 0; i < a_length; i++) {\n    result[i] = ~a_array[i];\n  }\n  return result.join('');\n};\n\n/* Input are two strings a and b consisting of 0s and 1s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('000', '100')\n  '100'\n  */\nconst string_and = (a, b) => {\n  const a_array = a.split('').map(Number);\n  const b_array = b.split('').map(Number);\n  const a_length = a_array.length;\n  const b_length = b_array.length;\n  const a_max = Math.max(a_length, b_length);\n  const b_max = Math.max(a_length, b_length);\n  const a_min = Math.min(a_length, b_length);\n  const b_min = Math.min(a_length, b_length);\n  const result = new Array(a_max);", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // Your code here\n};\n\n// Run tests\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  test.split(' ').forEach((letter) => {\n    if (histogram[letter]) {\n      histogram[letter]++;\n    } else {\n      histogram[letter] = 1;\n    }\n  });\n  return histogram;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = '';\n  let isPalindrome = true;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== c[i]) {\n      result += s[i];\n    } else {\n      isPalindrome = false;\n    }\n  }\n  return [result, isPalindrome];\n};\n\n/*Task\n  You are given a string s and an integer k. Your task is to find the longest substring in s that contains at most k characters.\n  Example\n  For s = \"abcabcbb\", k = 3, the result should be \"abc\".\n  For s = \"bbbbb\", k = 1 (note that \"bbbb\" has two 'b's but you only need one), the result should be \"b\".\n  For s = \"pwwkew\", k = 3 (note that \"kew\" has three 'k's but you need only two), the result should be \"w\".\n  For s = \"pwwkew\", k = 5 (note that \"kew\" has five 'k's but you need only two), the result should be \"\".\n  For s = \"pwwkew\", k = 7 (note that \"kew\" has seven 'k's but you need only two), the result should be \"pww\".\n  For s = \"pwwkew\", k = 8 (note that \"kew\" has eight 'k's but you need only two), the result should be \"pwwke\".\n  For s = \"pwwkew\", k = 9 (note that \"kew\" has nine 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 10 (note that \"kew\" has ten 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 11 (note that \"kew\" has eleven 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 12 (note that \"kew\" has twelve 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 13 (note that \"kew\" has thirteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 14 (note that \"kew\" has fourteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 15 (note that \"kew\" has fifteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 16 (note that \"kew\" has sixteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 17 (note that \"kew\" has seventeen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 18 (note that \"kew\" has eighteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 19 (note that \"kew\" has nineteen 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 20 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 21 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 22 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 23 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 24 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 25 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 26 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 27 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 28 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 29 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 30 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 31 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 32 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 33 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 34 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 35 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 36 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 37 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 38 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 39 (note that \"kew\" has twenty 'k's but you need only two), the result should be \"pwwkew\".\n  For s = \"pwwkew\", k = 40 (note that \"kew\" has twenty 'k's but you need only ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  let odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    odd_count += odd_digits(lst[i]);\n  }\n  return [`${odd_count} odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> even_count(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_count(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_count = (lst) => {\n  let even_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_count += even_digits(lst[i]);\n  }\n  return [`${even_count} even digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count = (lst) => {\n  let even_odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_odd_count += even_digits(lst[i]) + odd_digits(lst[i]);\n  }\n  return [`${even_odd_count} even and odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count_2 = (lst) => {\n  let even_odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_odd_count += even_digits(lst[i]) + odd_digits(lst[i]);\n  }\n  return [`${even_odd_count} even and odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count_3 = (lst) => {\n  let even_odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_odd_count += even_digits(lst[i]) + odd_digits(lst[i]);\n  }\n  return [`${even_odd_count} even and odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count_4 = (lst) => {\n  let even_odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_odd_count += even_digits(lst[i]) + odd_digits(lst[i]);\n  }\n  return [`${even_odd_count} even and odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> even_odd_count(['3',\"11111111\"])\n  [\"the number of even and odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even and odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst even_odd_count_5 = (lst) => {\n  let even_odd_count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    even_odd_count += even_digits(lst[i]) + odd_digits(lst[i]);\n  }\n  return [`${even_odd_count} even and odd digits in ${lst}`];\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even and odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even and odd digits in the i'th string of the input.\n\n  >>> even_odd_count(['1234567'])\n  [\"the number of even and odd elements 4n the str4", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      const next = nums[j];\n      if (curr + next < min) {\n        min = curr + next;\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  max_sub_array_sum([2, 3, 4, 1, 2, 4]) == 6\n  max_sub_array_sum([-1, -2, -3]) == -3\n  */\nconst max_sub_array_sum = (nums) => {\n  let max = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      const next = nums[j];\n      if (curr + next > max) {\n        max = curr + next;\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array of integers nums, find the sum of all even numbers in nums.\n  Example\n  sum_even_numbers([2, 3, 4, 1, 2, 4]) == 6\n  sum_even_numbers([-1, -2, -3]) == -3\n  */\nconst sum_even_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 2 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all odd numbers in nums.\n  Example\n  sum_odd_numbers([2, 3, 4, 1, 2, 4]) == 3\n  sum_odd_numbers([-1, -2, -3]) == -1\n  */\nconst sum_odd_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 2 === 1) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the product of all numbers in nums.\n  Example\n  product_of_numbers([2, 3, 4, 1, 2, 4]) == 24\n  product_of_numbers([-1, -2, -3]) == -1\n  */\nconst product_of_numbers = (nums) => {\n  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    product *= curr;\n  }\n  return product;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 3.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 6\n  sum_of_divisible_numbers([-1, -2, -3]) == -3\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 10\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of integers nums, find the sum of all numbers in nums that\n  are divisible by both 3 and 5.\n  Example\n  sum_of_divisible_numbers([2, 3, 4, 1, 2, 4]) == 15\n  sum_of_divisible_numbers([-1, -2, -3]) == -5\n  */\nconst sum_of_divisible_numbers = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    const curr = nums[i];\n    if (curr % 3 === 0 && curr % 5 === 0) {\n      sum += curr;\n    }\n  }\n  return sum;\n};\n\n/*\n  Given an array of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity).fill(0);\n  \n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[grid[i][j]] += 1;\n      }\n    }\n  }\n  \n  let count = 0;\n  \n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i] > 0) count += buckets[i] / n;\n  }\n  \n  return count;\n};\n\n/**\n * Your max_fill function will be called as such:\n * max_fill(grid, capacity)\n * where grid is a list of lists of integers, and capacity is an integer that represents the number of buckets.\n * Return the maximum number of times that you can empty the buckets.\n */\nconst maxFill = function(grid, capacity) {\n  // code here\n};\n\nexport { max_fill, maxFill };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the coins cannot exceed the sum of the coins.\n    * The amount of the coins cannot exceed the sum of the coins.\n*/\nconst min_coins = (coins) => {\n  // code here\n};\n\nexport { min_coins };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the coins cannot exceed the sum of the coins.\n    * The amount of the coins cannot exceed the sum of the coins.\n*/\nconst min_coins = (coins) => {\n  // code here\n};\n\nexport { min_coins };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the coins cannot exceed the sum of the coins.\n    * The amount of the coins cannot exceed the sum of the coins.\n*/\nconst min_coins = (coins) => {\n  // code here\n};\n\nexport { min_coins };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the coins cannot exceed the sum of the coins.\n    * The amount of the coins cannot exceed the sum of the coins.\n*/\nconst min_coins = (coins) => {\n  // code here\n};\n\nexport { min_coins };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the coins cannot exceed the sum of the coins.\n    * The amount of the coins cannot exceed the sum of the coins.\n*/\nconst min_coins = (coins) => {\n  // code here\n};\n\nexport { min_coins };\n\n/*\n  You are given a list of integers representing the amount of money you have\n  in a bank account. Write a function that takes in a list of integers and\n  returns the minimum number of coins you can collect by buying one dollar\n  and one penny.\n\n  Example 1:\n    Input: [1, 5, 10, 20, 30]\n    Output: 3\n  \n  Example 2:\n    Input: [1, 5, 10, 20, 30]\n    Output: 4\n  \n  Example 3:\n    Input: [1, 5, 10, 20, 30]\n    Output: 5\n  \n  Constraints:\n    * The amount of money in the bank account cannot exceed 1,000,000.\n    * The amount of the coins cannot exceed 1,000.\n    * The amount of the ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => a - b).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_2 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_2([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_2([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_2([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_3 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_3([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_3([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_3([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_4 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_4([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_4([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_4([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_5 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_5([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_5([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_5([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_6 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array_reverse_6([1, 5, 2, 3, 4]) == [5, 4, 3, 2, 1]\n  >>> sort_array_reverse_6([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array_reverse_6([1, 0, 2, 3, 4]) [0, 4, 3, 2, 1]\n  */\nconst sort_array_reverse_7 = (arr) => {\n  const len = arr.length;\n  const ones = Array.from({ length: len }, () => 0);\n  const decs = Array.from({ length: len }, () => 0);\n  for (let i = 0; i < len; i++) {\n    ones[arr[i]]++;\n    decs[arr[i]] = arr[i];\n  }\n  return [...ones].sort((a, b) => b - a).map((i) => decs[i]);\n};\n\n/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in descending order.\n  For similar ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n vowels, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"lamb\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"sam\"]\n  */\nconst select_words = (s, n) => {\n  let res = [];\n  \n  if(s === \"\"){\n    return res;\n  }\n  \n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i) === \" \"){\n      res.push(s.substr(0, i));\n      s = s.substr(i + 1);\n      \n      if(s.length < n){\n        break;\n      }\n    }\n  }\n  \n  return res;\n};\n\n/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowels_count = vowels.length;\n  let vowels_count_from_right = vowels_count - 1;\n  let vowels_count_from_left = vowels_count - 2;\n  let vowels_count_from_middle = vowels_count - 3;\n  let vowels_count_from_middle2 = vowels_count - 4;\n  let vowels_count_from_middle3 = vowels_count - 5;\n  let vowels_count_from_middle4 = vowels_count - 6;\n  let vowels_count_from_middle5 = vowels_count - 7;\n  let vowels_count_from_middle6 = vowels_count - 8;\n  let vowels_count_from_middle7 = vowels_count - 9;\n  let vowels_count_from_middle8 = vowels_count - 10;\n  let vowels_count_from_middle9 = vowels_count - 11;\n  let vowels_count_from_middle10 = vowels_count - 12;\n  let vowels_count_from_middle11 = vowels_count - 13;\n  let vowels_count_from_middle12 = vowels_count - 14;\n  let vowels_count_from_middle13 = vowels_count - 15;\n  let vowels_count_from_middle14 = vowels_count - 16;\n  let vowels_count_from_middle15 = vowels_count - 17;\n  let vowels_count_from_middle16 = vowels_count - 18;\n  let vowels_count_from_middle17 = vowels_count - 19;\n  let vowels_count_from_middle18 = vowels_count - 20;\n  let vowels_count_from_middle19 = vowels_count - 21;\n  let vowels_count_from_middle20 = vowels_count - 22;\n  let vowels_count_from_middle21 = vowels_count - 23;\n  let vowels_count_from_middle22 = vowels_count - 24;\n  let vowels_count_from_middle23 = vowels_count - 25;\n  let vowels_count_from_middle24 = vowels_count - 26;\n  let vowels_count_from_middle25 = vowels_count - 27;\n  let vowels_count_from_middle26 = vowels_count - 28;\n  let vowels_count_from_middle27 = vowels_count - 29;\n  let vowels_count_from_middle28 = vowels_count - 30;\n  let vowels_count_from_middle29 = vowels_count - 31;\n  let vowels_count_from_middle30 = vowels_count - 32;\n  let vowels_count_from_middle31 = vowels_count - 33;\n  let vowels_count_from_middle32 = vowels_count - 34;\n  let vowels_count_from_middle33 = vowels_count - 35;\n  let vowels_count_from_middle34 = vowels_count - 36;\n  let vowels_count_from_middle35 = vowels_count - 37;\n  let vowels_count_from_middle36 = vowels_count - 38;\n  let vowels_count_from_middle37 = vowels_count - 39;\n  let vowels_count_from_middle38 = vowels_count - 40;\n  let vowels_count_from_middle39 = vowels_count - 41;\n  let vowels_count_from_middle40 = vowels_count - 42;\n  let vowels_count_from_middle41 = vowels_count - 43;\n  let vowels_count_from_middle42 = vowels_count - 44;\n  let vowels_count_from_middle43 = vowels_count - 45;\n  let vowels_count_from_middle44 = vowels_count - 46;\n  let vowels_count_from_middle45 = vowels_count - 47;\n  let vowels_count_from_middle46 = vowels_count - 48;\n  let vowels_count_from_middle47 = vowels_count - 49;\n  let vowels_count_from_middle48 = vowels_count - 50;\n  let vowels_count_from_middle49 = vowels_count - 51;\n  let vowels_count_from_middle50 = vowels_count - 52;\n  let vowels_count_from_middle51 = vowels_count - 53;\n  let vowels_count_from_middle52 = vowels_count - 54;\n  let vowels_count_from_middle53 = vowels_count - 55;\n  let vowels_count_from_middle54 = vowels_count - 56;\n  let vowels_count_from_middle55 = vowels_count - 57;\n  let vowels_count_from_middle56 = vowels_count - 58;\n  let vowels_count_from_middle57 = vowels_count - 59;\n  let vowels_count_from_middle58 = vowels_count - 60;\n  let vowels_count_from_middle59 = vowels_count - 61;\n  let vowels_count_from_middle60 = vowels_count - 62;\n  let vowels_count_from_middle61 = vowels_count - 63;\n  let vowels_count_from_middle62 = vowels_count - 64;\n  let vowels_count_from_middle63 = vowels_count - 65;\n  let vowels_count_from_middle64 = vowels_count - 66;\n  let vowels_count_from_middle65 = vowels_count - 67;\n  let vowels_count_from_middle66 = vowels_count - 68;\n  let vowels_count_from_middle67 = vowels_count - 69;\n  let vowels_count_from_middle68 = vowels_count - 70;\n  let vowels_count_from_middle69 = vowels_count - 71;\n  let vowels_count_from_middle70 = vowels_count - 72;\n  let vowels_count_from_middle71 = vowels_count - 73;\n  let vowels_count_from_middle72 = vowels_count - 74;\n  let vowels_count_from_middle73 = vowels_count - 75;\n  let vowels_count_from_middle74 = vowels_count - 76;\n  let vowels_count_from_middle75 = vowels_count - 77;\n  let vowels_count_from_middle76 = vowels_count - 78;\n  let vowels_count_from_middle77 = vowels_count - 79;\n  let vowels_count_from_middle78 = vowels_count - 80;\n  let vowels_count_from_middle79 = vowels_count - 81;\n  let vowels_count_from_middle80 = vowels_count - 82;\n  let vowels_count_from_middle81 = vowels_count - 83;\n  let vowels_count_from_middle82 = vowels_count - 84;\n  let vowels_count_from_middle83 = vowels_count - 85;\n  let vowels_count_from_middle84 = vowels_count - 86;\n  let vowels_count_from_middle85 = vowels_count - 87;\n  let vowels_count_from_middle86 = vowels_count - 88;\n  let vowels_count_from_middle87 = vowels_count - 89;\n  let vowels_count_from_middle88 = vowels_count - 90;\n  let vowels_count_from_middle89 = vowels_count - 91;\n  let vowels_count_from_middle90 = vowels_count - 92;\n  let vowels_count_from_middle91 = vowels_count - 93;\n  let vowels_count_from_middle92 = vowels_count - 94;\n  let vowels_count_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can do it in less than or equal to T length, and return\n  'No' otherwise.\n  Examples:\n  convert_string(\"(()())\", \"()()()\") == 'Yes'\n  convert_string(\"(()())\", \"()()()\") == 'No'\n  */\nconst convert_string = (S, T) => {\n  const stack = [];\n  const result = [];\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '(') {\n      stack.push(S[i]);\n    } else if (S[i] === ')') {\n      if (stack.length === 0) {\n        result.push('No');\n      } else {\n        const lastElem = stack.pop();\n        if (lastElem === '(') {\n          result.push('Yes');\n        } else {\n          result.push('No');\n        }\n      }\n    }\n  }\n  return result.join('');\n};\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of steps required to convert this string into another string T.\n  For example, given S = \"(()())\", T = \"()()()\", the minimum number of steps is\n  3.\n  Return 'Yes' if you can ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "<|endoftext|>/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n\n  const longestString = strings[0]\n  let longestStringLength = longestString.length\n\n  for (let i = 1; i < strings.length; i++) {\n    const currentString = strings[i]\n    const currentStringLength = currentString.length\n\n    if (currentStringLength > longestStringLength) {\n      longestString = currentString\n      longestStringLength = currentStringLength\n    }\n  }\n\n  return longestString\n}\n\n/* Return the first string that starts with the given string. Return null if none exists.\n  >>> first('abc', 'ab')\n  'ab'\n  >>> first('abc', 'bc')\n  null\n  */\nconst first = (strings, prefix) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the last string that starts with the given string. Return null if none exists.\n  >>> last('abc', 'ab')\n  'c'\n  >>> last('abc', 'bc')\n  null\n  */\nconst last = (strings, prefix) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].startsWith(prefix)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that ends with the given string. Return null if none exists.\n  >>> last('abc', 'ab')\n  'c'\n  >>> last('abc', 'bc')\n  null\n  */\nconst last = (strings, suffix) => {\n  for (let i = strings.length - 1; i >= 0; i--) {\n    if (strings[i].endsWith(suffix)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  >>> contains('abc', 'ab')\n  'ab'\n  >>> contains('abc', 'bc')\n  null\n  */\nconst contains = (strings, substring) => {\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      return strings[i]\n    }\n  }\n\n  return null\n}\n\n/* Return the string that contains the given string. Return null if none exists.\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let maxArr = [];\n  for (let i = 0; i < k; i++) {\n    maxArr.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    maxArr.push(arr[i]);\n  }\n  return maxArr;\n};\n\nexport { maximum, maximum2 };\n\n/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, -5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [-4, 4, -4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-1, -2, -3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  let minArr = [];\n  for (let i = 0; i < k; i++) {\n    minArr.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    minArr.push(arr[i]);\n  }\n  return minArr;\n};\n\nexport { minimum, minimum2 };\n\n/*\n  Given an array arr of integers, return a new array with the largest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [-2, 0, 3, -4]\n      Output: [-6, 0, 12, -24]\n\n  Example 2:\n\n      Input: [-2, 0, 3, -4, 5, 2, -1]\n      Output: [-6, 0, 12, -24, -6, 24, 120]\n\n  Example 3:\n\n      Input: [-2, 0, 3, -4, -5, 2, -1]\n      Output: [-6, 0, -12, -24, -6, 24, 120]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. 1 <= arr.length ≤ 1000\n      3. -1000<= arr[i] ≤ 1000\n      4. arr[i] can only be 1 or -1.\n*/\nconst largestProduct = (arr) => {\n  let maxProd = 0;\n  for (let i = 0; i < arr.length; i++) {\n    maxProd = Math.max(maxProd, arr[i] * arr[i]);\n  }\n  return maxProd;\n};\n\nexport { largestProduct };\n\n/*\n  Given an array arr of integers, return a new array with the smallest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [-2, 0, 3, -4]\n      Output: [-6, 0, 12, -24]\n\n  Example 2:\n\n      Input: [-2, 0, 3, -4, 5, 2, -1]\n      Output: [-6, 0, 12, -24, -6, 24, 120]\n\n  Example 3:\n\n      Input: [-2, 0, 3, -4, -5, 2, -1]\n      Output: [-6, 0, -12, -24, -6, 24, 120]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. 1 <= arr.length ≤ 1000\n      3. -1000<= arr[i] ≤ 1000\n      4. arr[i] can only be 1 or -1.\n*/\nconst smallestProduct = (arr) => {\n  let minProd = 1;\n  for (let i = 0; i < arr.length; i++) {\n    minProd = Math.min(minProd, arr[i] * arr[i]);\n  }\n  return minProd;\n};\n\nexport { smallestProduct };\n\n/*\n  Given an array arr of integers, return a new array with the largest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [-2, 0, 3, -4]\n      Output: [-6, 0, 12, -24]\n\n  Example 2:\n\n      Input: [-2, 0, 3, -4, 5, 2, -1]\n      Output: [-6, 0, 12, -24, -6, 24, 120]\n\n  Example 3:\n\n      Input: [-2, 0, 3, -4, -5, 2, -1]\n      Output: [-6, 0, -12, -24, -6, 24, 120]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. 1 <= arr.length ≤ 1000\n      3. -1000<= arr[i] ≤ 1000\n      4. arr[i] can only be 1 or -1.\n*/\nconst largestProduct2 = (arr) => {\n  let maxProd = 1;\n  for (let i = 0; i < arr.length; i++) {\n    maxProd = Math.max(maxProd, arr[i] * arr[i]);\n  }\n  return maxProd;\n};\n\nexport { largestProduct2 };\n\n/*\n  Given an array arr of integers, return a new array with the smallest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [-2, 0, 3, -4]\n      Output: [-6, 0, 12, -24]\n\n  Example 2:\n\n      Input: [-2, 0, 3, -4, 5, 2, -1]\n      Output: [-6, 0, 12, -24, -6, 24, 120]\n\n  Example 3:\n\n      Input: [-2, 0, 3, -4, -5, 2, -1]\n      Output: [-6, 0, -12, -24, -6, 24, 120]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. 1 <= arr.length ≤ 1000\n      3. -1000<= arr[i] ≤ 1000\n      4. arr[i] can only be 1 or -1.\n*/\nconst smallestProduct2 = (arr) => {\n  let minProd = 1;\n  for (let i = 0; i < arr.length; i++) {\n    minProd = Math.min(minProd, arr[i] * arr[i]);\n  }\n  return minProd;\n};\n\nexport { smallestProduct2 };\n\n/*\n  Given an array arr of integers, return a new array with the largest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [-2, 0, 3, -4]\n      Output: [-6, 0, 12, -24]\n\n  Example 2:\n\n      Input: [-2, 0, 3, -4, 5, 2, -1]\n      Output: [-6, 0, 12, -24, -6, 24, 120]\n\n  Example 3:\n\n      Input: [-2, 0, 3, -4, -5, 2, -1]\n      Output: [-6, 0, -12, -24, -6, 24, 120]\n\n  Note:\n      1. You may assume k is always valid, 1 ≤ k ≤ arr.length.\n      2. 1 <= arr.length ≤ 1000\n      3. -1000<= arr[i] ≤ 1000\n      4. arr[i] can only be 1 or -1.\n*/\nconst largestProduct3 = (arr) => {\n  let maxProd = 1;\n  for (let i = 0; i < arr.length; i++) {\n    maxProd = Math.max(maxProd, arr[i] * arr[i]);\n  }\n  return maxProd;\n};\n\nexport { largestProduct3 };\n\n/*\n  Given an array arr of integers, return a new array with the smallest \n  product of any two numbers in the array. \n  \n  Example 1:\n\n      Input: [", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*Given a non-empty array of strings, return the length of the shortest string in the array.\n  \n\n  Examples\n  lengthOfShortestString([\"a\", \"b\", \"c\"]) ==> 3\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\"]) ==> 4\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\"]) ==> 5\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> 6\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> 7\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> 8\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]) ==> 9\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]) ==> 10\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]) ==> 11\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]) ==> 12\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"]) ==> 13\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]) ==> 14\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"]) ==> 15\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) ==> 16\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"]) ==> 17\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"]) ==> 18\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"]) ==> 19\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"]) ==> 20\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"]) ==> 21\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"]) ==> 22\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"]) ==> 23\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"]) ==> 24\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"]) ==> 25\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) ==> 26\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\"]) ==> 27\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\"]) ==> 28\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\"]) ==> 29\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\"]) ==> 30\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\"]) ==> 31\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) ==> 32\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) ==> 33\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) ==> 34\n  lengthOfShortestString([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(arr[i]);\n  }\n  for (let i = k; i < arr.length; i++) {\n    res.push(arr[i]);\n  }\n  return res.reduce((a, b) => a + b);\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [11", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [];\n  let current_number = 1;\n  let previous_number = 1;\n  while (current_number <= n) {\n    if (current_number % 2 === 0) {\n      odd_collatz.push(previous_number);\n    } else {\n      odd_collatz.push(previous_number * 3 + 1);\n    }\n    previous_number = current_number;\n    current_number = previous_number;\n  }\n  return odd_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let current_number = 1;\n  let previous_number = 1;\n  while (current_number <= n) {\n    if (current_number % 2 === 0) {\n      even_collatz.push(previous_number);\n    } else {\n      even_collatz.push(previous_number * 3 + (current_number % 2 === 1? 1 : 0));\n    }\n    previous_number = current_number;\n    current_number = previous_number;\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let current_number = 1;\n  let previous_number = 1;\n  while (current_number <= n) {\n    if (current_number % 2 === 0) {\n      even_collatz.push(previous_number);\n    } else {\n      even_collatz.push(previous_number * 3 + (current_number % 2 === 1? 1 : 0));\n    }\n    previous_number = current_number;\n    current_number = previous_number;\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let current_number = 1;\n  let previous_number = 1;\n  while (current_number <= n) {\n    if (current_number % 2 === 0) {\n      even_collatz.push(previous_number);\n    } else {\n      even_collatz.push(previous_number * 3 + (current_number % 2 === 1? 1 : 0));\n    }\n    previous_number = current_number;\n    current_number = previous_number;\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let current_number = 1;\n  let previous_number = 1;\n  while (current_number <= n) {\n    if (current_number % 2 === 0) {\n      even_collatz.push(previous_number);\n    } else {\n      even_collatz.push(previous_number * 3 + (current_number % 2 === 1? 1 : 0));\n    }\n    previous_number = current_number;\n    current_number = previous_number;\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_od", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  let dateArray = date.split('-');\n  let months = dateArray[0].split('');\n  let days = dateArray[1].split('');\n  let years = dateArray[2].split('');\n  let valid = true;\n  \n  if(dateArray[0].length < 1 || dateArray[0].length > 2 || dateArray[1].length < 1 || dateArray[1].length > 2 || dateArray[2].length < 1 || dateArray[2].length > 2 || months.length < 1 || months.length > 12 || days.length < 1 || days.length > 31 || years.length < 1 || years.length > 4) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 2 || dateArray[0].length > 2 || dateArray[1].length < 2 || dateArray[1].length > 2 || dateArray[2].length < 2 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 3 || dateArray[0].length > 2 || dateArray[1].length < 3 || dateArray[1].length > 2 || dateArray[2].length < 3 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 4 || dateArray[0].length > 2 || dateArray[1].length < 4 || dateArray[1].length > 2 || dateArray[2].length < 4 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 5 || dateArray[0].length > 2 || dateArray[1].length < 5 || dateArray[1].length > 2 || dateArray[2].length < 5 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 6 || dateArray[0].length > 2 || dateArray[1].length < 6 || dateArray[1].length > 2 || dateArray[2].length < 6 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 7 || dateArray[0].length > 2 || dateArray[1].length < 7 || dateArray[1].length > 2 || dateArray[2].length < 7 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 8 || dateArray[0].length > 2 || dateArray[1].length < 8 || dateArray[1].length > 2 || dateArray[2].length < 8 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || years[0] < 1 || years[0] > 4 || years[1] < 1 || years[1] > 4 || years[2] < 1 || years[2] > 4) {\n    valid = false;\n  }\n  \n  if(dateArray[0].length < 9 || dateArray[0].length > 2 || dateArray[1].length < 9 || dateArray[1].length > 2 || dateArray[2].length < 9 || dateArray[2].length > 2) {\n    valid = false;\n  }\n  \n  if(months[0] < 1 || months[0] > 12 || months[1] < 1 || months[1] > 12 || months[2] < 1 || months[2] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1] > 31 || days[2] < 1 || days[2] > 31 || year", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(\" \");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_comma = (txt) => {\n  const words = txt.split(\",\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on commas if no commas exists in the text you\n  should split on whitespaces if no whitespaces exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capital = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacommacommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacommacommacommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacommacommacommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet, ord('A') = 1, ord('B') = 2,... ord('Z') = 26\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_capitalcommacommacommacommacommacomma = (txt) => {\n  const words = txt.split(\"\");\n  return words.filter((word) => word.length > 0);\n};\n\n/* Given a string of words, return a list of words split on whitespaces if no whitespaces exists in the text you\n  should split on commas if no commas exists in the text you\n  should return the number of upper-case letters with odd order in the\n  alphabet", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_desc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending or descending order. If list has more than 1 duplicate of\n  the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ true\n  */\nconst is_sorted_asc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_asc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]) ➞ false\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ false\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted_desc = (lst) => {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5]", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < start2) {\n    const temp = start1\n    start1 = start2\n    start2 = temp\n  }\n  if (end1 < end2) {\n    const temp = end1\n    end1 = end2\n    end2 = temp\n  }\n  if (start1 > end2) {\n    return false\n  }\n  if (start2 === end2) {\n    return true\n  }\n  if (start1 === end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end2) {\n    return true\n  }\n  if (start1 < end2 && start2 < end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end1) {\n    return true\n  }\n  if (start2 < end1 && start1 < end2) {\n    return true\n  }\n  if (start2 < end2 && start1 < end1) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of union of these two \n  intervals is a prime number.\n  Example, the union of the intervals (1, 3), (2, 4) is (1, 4)\n  which its length is 4, which is a prime number.\n  If the length of the union is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  union((1, 2), (2, 3)) ==> \"NO\"\n  union((-1, 1), (0, 4)) ==> \"NO\"\n  union((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst union = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < start2) {\n    const temp = start1\n    start1 = start2\n    start2 = temp\n  }\n  if (end1 < end2) {\n    const temp = end1\n    end1 = end2\n    end2 = temp\n  }\n  if (start1 > end2) {\n    return false\n  }\n  if (start2 === end2) {\n    return true\n  }\n  if (start1 === end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end2) {\n    return true\n  }\n  if (start1 < end2 && start2 < end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end1) {\n    return true\n  }\n  if (start2 < end1 && start1 < end2) {\n    return true\n  }\n  if (start2 < end2 && start1 < end1) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (-1, 1)\n  which its length is -1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < start2) {\n    const temp = start1\n    start1 = start2\n    start2 = temp\n  }\n  if (end1 < end2) {\n    const temp = end1\n    end1 = end2\n    end2 = temp\n  }\n  if (start1 > end2) {\n    return false\n  }\n  if (start2 === end2) {\n    return true\n  }\n  if (start1 === end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end2) {\n    return true\n  }\n  if (start1 < end2 && start2 < end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end1) {\n    return true\n  }\n  if (start2 < end1 && start1 < end2) {\n    return true\n  }\n  if (start2 < end2 && start1 < end1) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of difference of these two \n  intervals is a prime number.\n  Example, the difference of the intervals (1, 3), (2, 4) is (-1, 1)\n  which its length is -1, which not a prime number.\n  If the length of the difference is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  difference((1, 2), (2, 3)) ==> \"NO\"\n  difference((-1, 1), (0, 4)) ==> \"NO\"\n  difference((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst difference = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  if (start1 < start2) {\n    const temp = start1\n    start1 = start2\n    start2 = temp\n  }\n  if (end1 < end2) {\n    const temp = end1\n    end1 = end2\n    end2 = temp\n  }\n  if (start1 > end2) {\n    return false\n  }\n  if (start2 === end2) {\n    return true\n  }\n  if (start1 === end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end2) {\n    return true\n  }\n  if (start1 < end2 && start2 < end1) {\n    return true\n  }\n  if (start1 < end1 && start2 < end1) {\n    return true\n  }\n  if (start2 < end1 && start1 < end2) {\n    return true\n  }\n  if (start2 < end2 && start1 < end1) {\n    return true\n  }\n  return false\n}\n\n/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  let sum = 0\n  let product = 1\n\n  for (let i = 0; i < arr.length; i++) {\n    const sign = arr[i] < 0? -1 : 1\n    sum += sign * Math.pow(Math.abs(arr[i]), 2)\n    product *= sign\n  }\n\n  return sum * product\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path2 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path3 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path4 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path5 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path6 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A[i * N + j] > lst_B[i * N + j]) {\n        lst_A[i * N + j] = lst_B[i * N + j];\n      }\n    }\n  }\n  const ans = [];\n  let i = 0;\n  while (i < N * N) {\n    ans.push(lst_A[i]);\n    i++;\n  }\n  return ans;\n};\n\n// another\nconst min_path7 = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const lst_A = new Array(N * N).fill(0);\n  const lst_B = new Array(N * N).fill(0);\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < m; j++) {\n      lst_A[i * N + j] = grid[i][j];\n      lst_B[i * N + j] = grid[i][j];\n    }\n  }\n  for (let i = 1; i < N; i++) {\n    for (let j = 1; j < m; j++) {\n      if (lst_A", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) return a;\n  return greatest_common_divisor(b, a % b);\n};\n\n// Return the least common multiple of two integers a and b\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24\n// >>> least_common_multiple(8, 15)\n// 24", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let arr = [];\n  arr.push(3);\n  if (n % 2 === 0) {\n    for (let i = 3; i <= n; i++) {\n      arr.push(i + n / 2);\n    }\n  } else {\n    for (let i = 3; i <= n; i++) {\n      arr.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n  }\n  return arr;\n};\n\n/*Everyone knows Spiral sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Spiral sequence.\n  Spiral sequence is defined by the recurrence:\n  spiral(1) = 1\n  spiral(n) = n * spiral(n - 1), if n is odd.\n  spiral(n) = spiral(n - 1) + spiral(n - 2), if n is even.\n  For example:\n  spiral(3) = 3\n  spiral(4) = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(1) + spiral(4)\n         = spiral(3) + spiral(2) + spiral(", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = n; i > 0; i /= 2) {\n    product *= i;\n  }\n  return product;\n};\n\n/*Given a positive integer n, return the sum of the even digits.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1\n  digits(235) == 7\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 2.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 2\n  digits(235) == 14\n  */\nconst digitSum2 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 2;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 3.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6\n  digits(235) == 42\n  */\nconst digitSum3 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 3;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 4.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12\n  digits(235) == 216\n  */\nconst digitSum4 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 4;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 5.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24\n  digits(235) == 312\n  */\nconst digitSum5 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 5;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 6.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 48\n  digits(235) == 576\n  */\nconst digitSum6 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 6;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 7.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 96\n  digits(235) == 1584\n  */\nconst digitSum7 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 7;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 8.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 192\n  digits(235) == 2384\n  */\nconst digitSum8 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 8;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 9.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 384\n  digits(235) == 5712\n  */\nconst digitSum9 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 9;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 10.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 768\n  digits(235) == 1536\n  */\nconst digitSum10 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 11.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 1536\n  digits(235) == 3072\n  */\nconst digitSum11 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 11;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 12.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 3072\n  digits(235) == 6096\n  */\nconst digitSum12 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 12;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 13.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 6096\n  digits(235) == 12288\n  */\nconst digitSum13 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 13;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 14.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 12288\n  digits(235) == 24576\n  */\nconst digitSum14 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 14;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 15.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 24576\n  digits(235) == 49153\n  */\nconst digitSum15 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 15;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 16.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)  == 0\n  digits(4)  == 49153\n  digits(235) == 983040\n  */\nconst digitSum16 = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i /= 2) {\n    sum += i * 16;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of the even digits multiplied by 17.\n  Return 0 if all digits are odd.\n  For example:\n  digits(1)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const open_brackets = string.match(/\\[/g) || []\n  const close_brackets = string.match(/\\]/g) || []\n  return open_brackets.some((open_bracket) => {\n    return close_brackets.some((close_bracket) => {\n      return open_bracket === close_bracket\n    })\n  })\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the sum of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 15\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 3\n  */\nconst sum_numbers = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return Math.round(sum);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_squares_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares_numbers_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 24\n  For lst = [1,3,5,7] the output should be 15\n  For lst = [1.4,4.2,0] the output should be 6\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares_numbers_numbers_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst product_numbers_squares_numbers_numbers_numbers_numbers_numbers = (lst) => {\n  let product = 1;\n  for (let i = 0; i < lst.length; i++) {\n    product *= Math.pow(lst[i], 2);\n  }\n  return Math.round(product);\n};\n\n/*You are given a list of numbers.\n  You need to return the product of numbers in the given list,\n  round each element in the list to the upper int(Ceiling) ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  const last_char_lower = last_char.toLowerCase();\n  const last_char_upper = last_char.toUpperCase();\n  const last_char_not_a_word = last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== last_char_upper &&\n                              last_char_lower!== ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let largest = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[largest]) {\n      largest = i;\n    }\n  }\n  return largest;\n};\n\n/*Create a function which returns the smallest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 1\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let smallest = arr.length - 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < arr[smallest]) {\n      smallest = i;\n    }\n  }\n  return smallest;\n};\n\n/*Create a function which returns the index of the element which occurs\n  most frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] > max) {\n      max = freq[i];\n    }\n  }\n  return freq.indexOf(max);\n};\n\n/*Create a function which returns the index of the element which occurs\n  least frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 1\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] < min) {\n      min = freq[i];\n    }\n  }\n  return freq.indexOf(min);\n};\n\n/*Create a function which returns the index of the element which occurs\n  least frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] > max) {\n      max = freq[i];\n    }\n  }\n  return freq.indexOf(max);\n};\n\n/*Create a function which returns the index of the element which occurs\n  most frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] < min) {\n      min = freq[i];\n    }\n  }\n  return freq.indexOf(min);\n};\n\n/*Create a function which returns the index of the element which occurs\n  least frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 4\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] > max) {\n      max = freq[i];\n    }\n  }\n  return freq.indexOf(max);\n};\n\n/*Create a function which returns the index of the element which occurs\n  least frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 5\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] < min) {\n      min = freq[i];\n    }\n  }\n  return freq.indexOf(min);\n};\n\n/*Create a function which returns the index of the element which occurs\n  most frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 6\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] > max) {\n      max = freq[i];\n    }\n  }\n  return freq.indexOf(max);\n};\n\n/*Create a function which returns the index of the element which occurs\n  least frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 7\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] < min) {\n      min = freq[i];\n    }\n  }\n  return freq.indexOf(min);\n};\n\n/*Create a function which returns the index of the element which occurs\n  most frequently in the given array. If no such element exists then return\n  -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 8\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let freq = [];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (freq.indexOf(arr[i]) === -1) {\n      freq.push(arr[i]);\n    } else {\n      freq[freq.indexOf(arr[i])]++;\n    }\n  }\n  for (let i = 0; i < freq.length; i++) {\n    if (freq[i] > max) {\n      max = freq[i];\n    }\n  }\n  return freq.indexOf(max);\n};", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.max(a, b));\n    const b = negative.reduce((a, b) => Math.min(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n    const a = positive.reduce((a, b) => Math.min(a, b));\n    const b = negative.reduce((a, b) => Math.max(a, b));\n    return [a, b];\n  }\n  return [null, null];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the smallest of negative integers, and 'b' is the largest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 7)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const positive = lst.filter((x) => x > 0);\n  const negative = lst.filter((x) => x < 0);\n  if (positive.length > 0 && negative.length > 0) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (a === b) return null\n  if (a === null || b === null) return null\n  if (a === undefined) return b\n  if (b === undefined) return a\n  if (a === \"\") return b\n  if (b === \"\") return a\n  if (a === \".\") return b\n  if (b === \".\") return a\n  if (a === \",\") return b\n  if (b === \",\") return a\n  if (a === \"-\") return b\n  if (b === \"-\") return a\n  if (a === \"+\") return b\n  if (b === \"+\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") return b\n  if (b === \"4\") return a\n  if (a === \"5\") return b\n  if (b === \"5\") return a\n  if (a === \"6\") return b\n  if (b === \"6\") return a\n  if (a === \"7\") return b\n  if (b === \"7\") return a\n  if (a === \"8\") return b\n  if (b === \"8\") return a\n  if (a === \"9\") return b\n  if (b === \"9\") return a\n  if (a === \".0\") return b\n  if (b === \".0\") return a\n  if (a === \"0\") return b\n  if (b === \"0\") return a\n  if (a === \"1\") return b\n  if (b === \"1\") return a\n  if (a === \"2\") return b\n  if (b === \"2\") return a\n  if (a === \"3\") return b\n  if (b === \"3\") return a\n  if (a === \"4\") ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even_neg(4) == false\n  is_equal_to_sum_even_neg(6) == false\n  is_equal_to_sum_even_neg(8) == true\n  */\nconst is_equal_to_sum_even_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_odd_neg(4) == false\n  is_equal_to_sum_odd_neg(6) == false\n  is_equal_to_sum_odd_neg(8) == true\n  */\nconst is_equal_to_sum_odd_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive integers\n  Example\n  is_equal_to_sum_int(4) == false\n  is_equal_to_sum_int(6) == false\n  is_equal_to_sum_int(8) == true\n  */\nconst is_equal_to_sum_int = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative integers\n  Example\n  is_equal_to_sum_int(4) == false\n  is_equal_to_sum_int(6) == false\n  is_equal_to_sum_int(8) == true\n  */\nconst is_equal_to_sum_int_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers\n  Example\n  is_equal_to_sum_real(4) == false\n  is_equal_to_sum_real(6) == false\n  is_equal_to_sum_real(8) == true\n  */\nconst is_equal_to_sum_real = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative real numbers\n  Example\n  is_equal_to_sum_real(4) == false\n  is_equal_to_sum_real(6) == false\n  is_equal_to_sum_real(8) == true\n  */\nconst is_equal_to_sum_real_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive complex numbers\n  Example\n  is_equal_to_sum_complex(4) == false\n  is_equal_to_sum_complex(6) == false\n  is_equal_to_sum_complex(8) == true\n  */\nconst is_equal_to_sum_complex = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative complex numbers\n  Example\n  is_equal_to_sum_complex(4) == false\n  is_equal_to_sum_complex(6) == false\n  is_equal_to_sum_complex(8) == true\n  */\nconst is_equal_to_sum_complex_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive complex numbers or integers\n  Example\n  is_equal_to_sum_complex_int_or_float(4) == false\n  is_equal_to_sum_complex_int_or_float(6) == false\n  is_equal_to_sum_complex_int_or_float(8) == true\n  */\nconst is_equal_to_sum_complex_int_or_float = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative complex numbers or integers\n  Example\n  is_equal_to_sum_complex_int_or_float(4) == false\n  is_equal_to_sum_complex_int_or_float(6) == false\n  is_equal_to_sum_complex_int_or_float(8) == true\n  */\nconst is_equal_to_sum_complex_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive real numbers or integers\n  Example\n  is_equal_to_sum_real_int_or_float(4) == false\n  is_equal_to_sum_real_int_or_float(6) == false\n  is_equal_to_sum_real_int_or_float(8) == true\n  */\nconst is_equal_to_sum_real_int_or_float_neg = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n    if (sum % 2 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n can be written ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_20 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_21 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_22 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_23 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_24 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_25 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*\n  A function that receives an array of integers and returns the sum of the squared numbers.\n*/\nconst sum_of_squares_26 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = [];\n  let prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i];\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = [];\n  let suffix = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    suffix += string[i];\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {\n  const substrings = [];\n  let substring = '';\n  for (let i = 0; i < string.length; i++) {\n    substring += string[i];\n    substrings.push(substring);\n  }\n  return substrings;\n};\n\n/* Return list of all substrings from shortest to longest of the input string\n  >>> all_substrings('abc')\n  ['', 'a', 'ab', 'abc']\n  */\nconst all_substrings = (string) => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n};\n\n/*\n  Given a string, return a new string with each word capitalized.\n  \n  capitalize(\"this is a test!\") == \"This Is A Test!\"\n  capitalize(\"this isn't a test!\") == \"This Is Not A Test!\"\n  capitalize(\"this isn't a test! \") == \"This Is Not A Test! \"\n  capitalize(\"this isn't a test! \") == \"This Is Not A Test! \"\n  capitalize(\"this isn't a test!!\") == \"This Is Not A Test!!\"\n  capitalize(\"this isn't a test!! \") == \"This Is Not A Test!!!\"\n  capitalize(\"this isn't a test!!!\") == \"This Is Not A Test!!!!\"\n  */\nconst capitalize = (text) => {\n  return text.charAt(0).toUpperCase() + text.slice(1);\n};\n\n/*\n  Given a string, return a new string with each word capitalized and each \n  space replaced with a dash. \n  \n  capitalize_and_dash(\"this is a test!\") == \"This-Is-A-Test!\"\n  capitalize_and_dash(\"this isn't a test!\") == \"This-Is-Not-A-Test!\"\n  capitalize_and_dash(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash(\"this isn't a test!!\") == \"This-Is-Not-A-Test!!\"\n  capitalize_and_dash(\"this isn't a test!! \") == \"This-Is-Not-A-Test!!!\"\n  capitalize_and_dash(\"this isn't a test!!!\") == \"This-Is-Not-A-Test!!!!\"\n  */\nconst capitalize_and_dash = (text) => {\n  return text.replace(/\\s+/g, \"-\").replace(/\\b[a-z]/g, (c) => c.toUpperCase());\n};\n\n/*\n  Given a string, return a new string with each word capitalized and each \n  space replaced with a dash and each punctuation character replaced with a \n  dash.\n  \n  capitalize_and_dash_and_punct(\"this is a test!\") == \"This-Is-A-Test!\"\n  capitalize_and_dash_and_punct(\"this isn't a test!\") == \"This-Is-Not-A-Test!\"\n  capitalize_and_dash_and_punct(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct(\"this isn't a test!!\") == \"This-Is-Not-A-Test!!\"\n  capitalize_and_dash_and_punct(\"this isn't a test!! \") == \"This-Is-Not-A-Test!!!\"\n  capitalize_and_dash_and_punct(\"this isn't a test!!!\") == \"This-Is-Not-A-Test!!!!\"\n  */\nconst capitalize_and_dash_and_punct = (text) => {\n  return text.replace(/\\s+/g, \"-\").replace(/\\b[a-z]/g, (c) => c.toUpperCase())\n   .replace(/[.,!?;:]/g, \"-\");\n};\n\n/*\n  Given a string, return a new string with each word capitalized and each \n  space replaced with a dash and each punctuation character replaced with a \n  dash and each word beginning with a capital letter replaced with a dash. \n  \n  capitalize_and_dash_and_punct_and_cap(\"this is a test!\") == \"This-Is-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test!\") == \"This-Is-Not-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test!!\") == \"This-Is-Not-A-Test!!\"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test!! \") == \"This-Is-Not-A-Test!!!\"\n  capitalize_and_dash_and_punct_and_cap(\"this isn't a test!!!\") == \"This-Is-Not-A-Test!!!!\"\n  */\nconst capitalize_and_dash_and_punct_and_cap = (text) => {\n  return text.replace(/\\s+/g, \"-\").replace(/\\b[a-z]/g, (c) => c.toUpperCase())\n   .replace(/[.,!?;:]/g, \"-\").replace(/\\b[A-Z]/g, (c) => c.toLowerCase());\n};\n\n/*\n  Given a string, return a new string with each word capitalized and each \n  space replaced with a dash and each punctuation character replaced with a \n  dash and each word beginning with a capital letter replaced with a dash. \n  \n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this is a test!\") == \"This-Is-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test!\") == \"This-Is-Not-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test!!\") == \"This-Is-Not-A-Test!!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test!! \") == \"This-Is-Not-A-Test!!!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap(\"this isn't a test!!!\") == \"This-Is-Not-A-Test!!!!\"\n  */\nconst capitalize_and_dash_and_punct_and_cap_and_cap = (text) => {\n  return text.replace(/\\s+/g, \"-\").replace(/\\b[a-z]/g, (c) => c.toUpperCase())\n   .replace(/[.,!?;:]/g, \"-\").replace(/\\b[A-Z]/g, (c) => c.toLowerCase())\n   .replace(/\\b[A-Z]/g, (c) => c.toLowerCase());\n};\n\n/*\n  Given a string, return a new string with each word capitalized and each \n  space replaced with a dash and each punctuation character replaced with a \n  dash and each word beginning with a capital letter replaced with a dash. \n  \n  capitalize_and_dash_and_punct_and_cap_and_cap_and_cap(\"this is a test!\") == \"This-Is-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap_and_cap(\"this isn't a test!\") == \"This-Is-Not-A-Test!\"\n  capitalize_and_dash_and_punct_and_cap_and_cap_and_cap(\"this isn't a test! \") == \"This-Is-Not-A-Test! \"\n  capitalize_and_dash_and_punct_and_cap_and_cap_and_cap(\"this isn't a test!", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[0-9]{3}\\.[a-z][a-z]$/;\n  const result = regex.test(file_name);\n  return result;\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    } else if (lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n// TESTS\n\nconst tests = [\n  [1, 2],\n  [],\n  [-1, -5, 2, -1, -5],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_2 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_2 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_3 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_3 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_4 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_4 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_5 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_5 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_6 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_6 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_7 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_7 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_8 = (sentence) => {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length % 2 === 1) {\n      result.push(word);\n    }\n  }\n  return result.join(\" \");\n};\n\nexport { words_in_sentence_8 };\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(denom);\n};\n\n/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numer, denom] = x.split(\"/\").map(Number);\n  return numer / denom === parseInt(numer) && numer / denom === parseInt(", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => a - b);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points_reverse([1, 11, -1, -11, -12]) == [-11, -11, -12, -1, 1]\n  >>> order_by_points_reverse([]) == []\n  */\nconst order_by_points_reverse = (nums) => {\n  const map = new Map();\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    const digits = num.toString().split('');\n    const sumOfDigits = digits.reduce((acc, digit) => acc + parseInt(digit, 10), 0);\n    map.set(sumOfDigits, num);\n  }\n  return Array.from(map.values()).sort((a, b) => b - a);\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 4 === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of the elements in the array.\n  For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  */\nconst sum = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of the elements in the array.\n  For example:\n  product([1, 2, 3, 4, 5]) => 120\n  */\nconst product = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    product *= nums[i];\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  max([-10, -5, 2, 3]) => 3\n  */\nconst max = (nums) => {\n  let max = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > max){\n      max = nums[i];\n    }\n  }\n  return max;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  min([-10, -5, 2, 3]) => -10\n  */\nconst min = (nums) => {\n  let min = nums[0];\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] < min){\n      min = nums[i];\n    }\n  }\n  return min;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array.\n  For example:\n  sum([-10, -5, 2, 3]) => -5\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the elements in the array.\n  For example:\n  product([-10, -5, 2, 3]) => -300\n  */\nconst productOfAll = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    product *= nums[i];\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([-10, -5, 2, 3]) => [-10, 2]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] < min){\n      min = nums[i];\n    }\n    if(nums[i] > max){\n      max = nums[i];\n    }\n  }\n  return [min, max];\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the even numbers in the array.\n  For example:\n  sumEven([2, 7, -5, -3]) => 5\n  */\nconst sumEven = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] % 2 === 0){\n      sum += nums[i];\n    }\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the odd numbers in the array.\n  For example:\n  sumOdd([7, -5, -3, 2, -1]) => 6\n  */\nconst sumOdd = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] % 2 === 1){\n      sum += nums[i];\n    }\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the even numbers in the array.\n  For example:\n  productEven([2, 7, -5, -3]) => -27\n  */\nconst productEven = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] % 2 === 0){\n      product *= nums[i];\n    }\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the odd numbers in the array.\n  For example:\n  productOdd([7, -5, -3, 2, -1]) => -45\n  */\nconst productOdd = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] % 2 === 1){\n      product *= nums[i];\n    }\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the numbers in the array.\n  For example:\n  sum([1, 2, 3, 4, 5]) => 15\n  */\nconst sum = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the numbers in the array.\n  For example:\n  product([1, 2, 3, 4, 5]) => 120\n  */\nconst product = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    product *= nums[i];\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest number in the array.\n  For example:\n  max([-10, -5, 2, 3]) => 3\n  */\nconst max = (nums) => {\n  let max = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > max){\n      max = nums[i];\n    }\n  }\n  return max;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the smallest number in the array.\n  For example:\n  min([-10, -5, 2, 3]) => -10\n  */\nconst min = (nums) => {\n  let min = nums[0];\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] < min){\n      min = nums[i];\n    }\n  }\n  return min;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the sum of all the elements in the array.\n  For example:\n  sum([-10, -5, 2, 3]) => -5\n  */\nconst sumOfAll = (nums) => {\n  let sum = 0;\n  for(let i = 0; i < nums.length; i++){\n    sum += nums[i];\n  }\n  return sum;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the product of all the elements in the array.\n  For example:\n  product([-10, -5, 2, 3]) => -300\n  */\nconst productOfAll = (nums) => {\n  let product = 1;\n  for(let i = 0; i < nums.length; i++){\n    product *= nums[i];\n  }\n  return product;\n}\n\n/*Write a function that takes an array of numbers as input and returns \n  the largest and smallest numbers in the array.\n  For example:\n  minMax([-10, -5, 2, 3]) => [-10, 2]\n  */\nconst minMax = (nums) => {\n  let min = nums[0];\n  let max = nums[0];\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] < min){\n      min = nums[i];\n    }\n    if(nums[i", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n    let a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i + j + k === 2 * i) {\n                    a[i] = a[j] + a[k];\n                }\n            }\n        }\n    }\n    return a.filter(x => x % 3 === 0).length;\n};\n\nconsole.log(get_max_triples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| c |>\nYes, I agree with you. But the OP wants O(n^2) complexity. So, I think this is the best answer.\n<|/ c |>\n<| c |>\nThe complexity is O(n^2) because of the nested loops. If you don't believe me, try it out yourself.\n<|/ c |>\n<| c |>\nI agree with you. But the OP wants O(n^2) complexity. So, I think this is the best answer.\n<|/ c |>\n<| c |>\nI agree with you. But the OP wants O(n^2) complexity. So, I think this is the best answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a tags=algorithm,javascript,arrays |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a dscore=0 |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP wants.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction maxTriples(n) {\n  let a = new Array(n).fill(0);\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if ((i + j + k) === 2 * i) {\n          a[i] = a[j] + a[k];\n        }\n      }\n    }\n  }\n  return a.filter(x => x % 3 === 0).length;\n}\n\nconsole.log(maxTriples(5));</code>\n<|/ a tags=algorithm,javascript,arrays |>\n<| c |>\nThe complexity is O(n^3). Not sure if this is what the OP", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    const planetOrbits = planetOrbits(planet)\n    return planetOrbits.map(orbit => orbit.name)\n  })\n  const orbitsBetweenPlanets = orbits.map(orbitsBetweenPlanets)\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.map(\n    orbitsBetweenPlanetsSorted\n  )\n  const orbitsBetweenPlanetsSortedUnique = orbitsBetweenPlanetsSorted.filter(\n    orbitsBetweenPlanetsSortedUnique\n  )\n  return orbitsBetweenPlanetsSortedUnique\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf2 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    const planetOrbits = planetOrbits(planet)\n    return planetOrbits.map(orbit => orbit.name)\n  })\n  const orbitsBetweenPlanets = orbits.map(orbitsBetweenPlanets)\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.map(\n    orbitsBetweenPlanetsSorted\n  )\n  const orbitsBetweenPlanetsSortedUnique = orbitsBetweenPlanetsSorted.filter(\n    orbitsBetweenPlanetsSortedUnique\n  )\n  return orbitsBetweenPlanetsSortedUnique\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf3 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    const planetOrbits = planetOrbits(planet)\n    return planetOrbits.map(orbit => orbit.name)\n  })\n  const orbitsBetweenPlanets = orbits.map(orbitsBetweenPlanets)\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.map(\n    orbitsBetweenPlanetsSorted\n  )\n  const orbitsBetweenPlanetsSortedUnique = orbitsBetweenPlanetsSorted.filter(\n    orbitsBetweenPlanetsSortedUnique\n  )\n  return orbitsBetweenPlanetsSortedUnique\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf4 = (planet1, planet2) => {\n  const planets = [planet1, planet2]\n  const orbits = planets.map(planet => {\n    const planetOrbits = planetOrbits(planet)\n    return planetOrbits.map(orbit => orbit.name)\n  })\n  const orbitsBetweenPlanets = orbits.map(orbitsBetweenPlanets)\n  const orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.map(\n    orbitsBetweenPlanetsSorted\n  )\n  const orbitsBetweenPlanetsSortedUnique = orbitsBetweenPlanetsSorted.filter(\n    orbitsBetweenPlanetsSortedUnique\n  )\n  return orbitsBetweenPlanetsSortedUnique\n}\n\n/* There are eight planets in our solar system: the closer to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the distance to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n// DO NOT MODIFY ANYTHING BELOW\nconst sorted_list_sum = (lst) => {\n  // Write your code here\n};\n\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const strs = [];\n  for (let i = 0; i < n; i++) {\n    strs.push(String(i));\n  }\n  return strs.join('", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*A simple program which should return the value of x if n is \n  a ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n};\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nThank you so much! This was exactly what I was looking for!\n<|/ c |>\n<| c |>\nNo problem, glad I could help!\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a tags=javascript,arrays |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nWhile this code may answer the question, providing additional context regarding how and/or why it solves the problem would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction compare(game, guess) {\n  let result = [];\n  for (let i = 0; i < guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i]);\n    if (guess[i] === game[i]) {\n      result.push(0);\n    } else {\n      result.push(diff);\n    }\n  }\n  return result;\n}\n\n// keep this function call here \n// to see how to enter arguments in JavaScript scroll down\ncompare(game, guess);\n</code>\n<|/ a tags=javascript,arrays |>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const class_name_length = class_name.length;\n  const extension_length = extensions.length;\n  let strength = 0;\n  let strongest_extension = '';\n\n  for (let i = 0; i < extension_length; i++) {\n    const extension = extensions[i];\n    const extension_length = extension.length;\n    const extension_length_lowercase = extension_length.toLowerCase();\n    const extension_length_uppercase = extension_length.toUpperCase();\n    const extension_length_length_lowercase = extension_length_lowercase.length;\n    const extension_length_length_uppercase = extension_length_uppercase.length;\n\n    if (extension_length_length_lowercase === extension_length_length_uppercase) {\n      if (extension_length_lowercase === extension_length) {\n        strength = -1;\n      } else {\n        strength = extension_length_lowercase - extension_length_uppercase;\n      }\n    } else {\n      if (extension_length_lowercase === extension_length_uppercase) {\n        strength = -1;\n      } else {\n        strength = extension_length_length_lowercase - extension_length_length_uppercase;\n      }\n    }\n\n    if (strength > 0) {\n      strongest_extension = `${class_name}.${extension}`;\n      break;\n    }\n  }\n\n  return strongest_extension;\n};\n\n/*\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n  Write a function that returns the number of times a substring appears in a\n  given string. For example, the substring 'ab' appears twice in 'ababab'.\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) < 0) return false;\n  }\n  return true;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n  for (let i = 0; i < b.length; i++) {\n    if (a.indexOf(b[i]) >= 0) return true;\n  }\n  return false;\n};\n\n/*You are given 2 words. You need to return true if the second word is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => true\n  cycpattern_check(\"hello\",\"ell\") => false\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string. return a tuple that has the number of characters in the string and their frequency.\n\n   Example:\n      count_characters('abc') ==> (3, {a: 3, b: 2, c: 3})\n      count_characters('ab') ==> (2, {a: 2, b: 1})\n      count_characters('') ==> (0, {})\n*/\nconst count_characters = (str) => {\n  const chars = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (chars[char]) {\n      chars[char]++;\n    } else {\n      chars[char] = 1;\n    }\n  }\n  return [str.length, chars];\n};\n\n/*Given a string. return a tuple that has the number of words in the string and their frequency.\n\n   Example:\n      count_words('abc def ghi') ==> (3, {abc: 1, def: 1, ghi: 1})\n      count_words('abc def') ==> (2, {abc: 1, def: 1})\n      count_words('') ==> (0, {})\n*/\nconst count_words = (str) => {\n  const words = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char ==='') {\n      if (words[char]) {\n        words[char]++;\n      } else {\n        words[char] = 1;\n      }\n    }\n  }\n  return [str.length, words];\n};\n\n/*Given a string. return a tuple that has the number of sentences in the string and their frequency.\n\n   Example:\n      count_sentences('abc def ghi') ==> (3, {abc: 1, def: 1, ghi: 1})\n      count_sentences('abc def') ==> (2, {abc: 1, def: 1})\n      count_sentences('') ==> (0, {})\n*/\nconst count_sentences = (str) => {\n  const sentences = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === '.') {\n      if (sentences[char]) {\n        sentences[char]++;\n      } else {\n        sentences[char] = 1;\n      }\n    }\n  }\n  return [str.length, sentences];\n};\n\n/*Given a string. return a tuple that has the number of uppercase letters in the string and their frequency.\n\n   Example:\n      count_uppercase('abc def ghi') ==> (3, {A: 1, B: 1, C: 1, D: 1, E: 1, F: 1, G: 1, H: 1, I: 1})\n      count_uppercase('abc def') ==> (2, {A: 1, B: 1, C: 1, D: 1})\n      count_uppercase('') ==> (0, {})\n*/\nconst count_uppercase = (str) => {\n  const uppercase = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === char.toUpperCase()) {\n      if (uppercase[char]) {\n        uppercase[char]++;\n      } else {\n        uppercase[char] = 1;\n      }\n    }\n  }\n  return [str.length, uppercase];\n};\n\n/*Given a string. return a tuple that has the number of lowercase letters in the string and their frequency.\n\n   Example:\n      count_lowercase('abc def ghi') ==> (3, {a: 1, b: 1, c: 1, d: 1, e: 1, f: 1, g: 1, h: 1, i: 1})\n      count_lowercase('abc def') ==> (2, {a: 1, b: 1, c: 1, d: 1})\n      count_lowercase('') ==> (0, {})\n*/\nconst count_lowercase = (str) => {\n  const lowercase = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === char.toLowerCase()) {\n      if (lowercase[char]) {\n        lowercase[char]++;\n      } else {\n        lowercase[char] = 1;\n      }\n    }\n  }\n  return [str.length, lowercase];\n};\n\n/*Given a string. return a tuple that has the number of digits in string and their frequency.\n\n   Example:\n      count_digits('abc def ghi') ==> (3, {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1})\n      count_digits('abc def') ==> (2, {1: 1, 2: 1, 3: 1})\n      count_digits('') ==> (0, {})\n*/\nconst count_digits = (str) => {\n  const digits = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === char.toString().match(/\\d/g)) {\n      if (digits[char]) {\n        digits[char]++;\n      } else {\n        digits[char] = 1;\n      }\n    }\n  }\n  return [str.length, digits];\n};\n\n/*Given a string. return a tuple that has the number of punctuations in string and their frequency.\n\n   Example:\n      count_punctuations('abc def ghi') ==> (3, {.: 1,,: 1, :: 1})\n      count_punctuations('abc def') ==> (2, {.: 1,,: 1})\n      count_punctuations('') ==> (0, {})\n*/\nconst count_punctuations = (str) => {\n  const punctuations = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === char.toString().match(/[!,.?]/g)) {\n      if (punctuations[char]) {\n        punctuations[char]++;\n      } else {\n        punctuations[char] = 1;\n      }\n    }\n  }\n  return [str.length, punctuations];\n};\n\n/*Given a string. return a tuple that has the number of special characters in string and their frequency.\n\n   Example:\n      count_special('abc def ghi') ==> (3, {!: 1,.: 1,?: 1})\n      count_special('abc def') ==> (2, {!: 1,.: 1})\n      count_special('') ==> (0, {})\n*/\nconst count_special = (str) => {\n  const special = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === char.toString().match(/[!,.?]/g)) {\n      if (special[char]) {\n        special[char]++;\n      } else {\n        special[char] = 1;\n      }\n    }\n  }\n  return [str.length, special];\n};\n\n/*Given a string. return a tuple that has the number of words in the string and their frequency.\n\n   Example:\n      count_words('abc def ghi') ==> (3, {abc: 1, def: 1, ghi: 1})\n      count_words('abc def') ==> (2, {abc: 1, def: 1})\n      count_words('') ==> (0, {})\n*/\nconst count_words = (str) => {\n  const words = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char ==='') {\n      if (words[char]) {\n        words[char]++;\n      } else {\n        words[char] = 1;\n      }\n    }\n  }\n  return [str.length, words];\n};\n\n/*Given a string. return a tuple that has the number of sentences in the string and their frequency.\n\n   Example:\n      count_sentences('abc def ghi') ==> (3, {abc: 1, def: 1, ghi: 1})\n      count_sentences('abc def') ==> (2, {abc: 1, def: 1})\n      count_sentences('') ==> (0, {})\n*/\nconst count_sentences = (str) => {\n  const sentences = {};\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const roman = roman_numeral_map[number];\n  if (roman === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return roman.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'XIX'\n  >>> int_to_mini_roman(152) == 'CLII'\n  >>> int_to_mini_roman(426) == 'CDXXVI'\n  */\nconst int_to_mini_roman_uppercase = (number) => {\n  const roman = roman_numeral_map[number];\n  if (roman === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return roman.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  */\nconst int_to_decimal_lowercase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  */\nconst int_to_decimal_uppercase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and uppercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  */\nconst int_to_decimal_lowercase_and_uppercase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  */\nconst int_to_decimal_uppercase_and_lowercase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in lowercase and uppercase and in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  >>> int_to_decimal_mixedcase(19) == '19'\n  >>> int_to_decimal_mixedcase(152) == '152'\n  >>> int_to_decimal_mixedcase(426) == '426'\n  */\nconst int_to_decimal_lowercase_and_uppercase_and_mixedcase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toLowerCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and lowercase and in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  >>> int_to_decimal_mixedcase(19) == '19'\n  >>> int_to_decimal_mixedcase(152) == '152'\n  >>> int_to_decimal_mixedcase(426) == '426'\n  */\nconst int_to_decimal_uppercase_and_lowercase_and_mixedcase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and lowercase and in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_to_decimal_lowercase(152) == '152'\n  >>> int_to_decimal_lowercase(426) == '426'\n  >>> int_to_decimal_mixedcase(19) == '19'\n  >>> int_to_decimal_mixedcase(152) == '152'\n  >>> int_to_decimal_mixedcase(426) == '426'\n  */\nconst int_to_decimal_uppercase_and_lowercase_and_mixedcase = (number) => {\n  const decimal = number_to_decimal_map[number];\n  if (decimal === undefined) {\n    throw new Error(`Invalid number: ${number}`);\n  }\n  return decimal.toUpperCase();\n};\n\n/*\n  Given a positive integer, obtain its decimal equivalent as a string,\n  and return it in uppercase and lowercase and in mixed case.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_decimal_mixedcase(19) == '19'\n  >>> int_to_decimal_mixedcase(152) == '152'\n  >>> int_to_decimal_mixedcase(426) == '426'\n  >>> int_to_decimal_uppercase(19) == '19'\n  >>> int_to_decimal_uppercase(152) == '152'\n  >>> int_to_decimal_uppercase(426) == '426'\n  >>> int_to_decimal_lowercase(19) == '19'\n  >>> int_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab * bc > ac * bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ab == ac;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal\n  Example:\n  equilateral_triangle(3, 4, 5) == true\n  equilateral_triangle(1, 2, 3) == false\n  */\nconst equilateral_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a isosceles triangle, false otherwise.\n  A isosceles triangle is a triangle in which all angles are equal\n  Example:\n  isosceles_triangle(3, 4, 5) == true\n  isosceles_triangle(1, 2, 3) == false\n  */\nconst isosceles_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc || ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a scalene triangle, false otherwise.\n  A scalene triangle is a triangle in which all angles are equal\n  Example:\n  scalene_triangle(3, 4, 5) == true\n  scalene_triangle(1, 2, 3) == false\n  */\nconst scalene_triangle = (a, b, c) => {\n  const ab = a - b;\n  const bc = b - c;\n  const ac = a - c;\n  return ab == bc && ac == bc;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings and returns their average.\n  The list contains different words. Return the average of the words. If multiple\n  strings have an average of 0, return 0.\n\n  find_avg([\"name\", \"of\", \"string\"]) === 2.5\n  find_avg([\"name\", \"enam\", \"game\"]) === 1.5\n  find_avg([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_avg = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    sum += count;\n    count = 0;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their median.\n  The list contains different words. Return the median of the words. If multiple\n  strings have an median of 0, return 0.\n\n  find_median([\"name\", \"of\", \"string\"]) === 0\n  find_median([\"name\", \"enam\", \"game\"]) === 0\n  find_median([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_median = (words) => {\n  let sortedWords = words.sort((a, b) => b.length - a.length);\n  let middle = Math.floor(sortedWords.length / 2);\n  let median = 0;\n  if (sortedWords.length % 2 === 0) {\n    median = sortedWords[middle];\n  } else {\n    median = (sortedWords[middle - 1] + sortedWords[middle]) / 2;\n  }\n  return median;\n};\n\n/*Write a function that accepts a list of strings and returns their mode.\n  The list contains different words. Return the mode of the words. If multiple\n  strings have an mode of 0, return 0.\n\n  find_mode([\"name\", \"of\", \"string\"]) === 0\n  find_mode([\"name\", \"enam\", \"game\"]) === 0\n  find_mode([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_mode = (words) => {\n  let mode = 0;\n  let maxCount = 0;\n  let maxWord = \"\";\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count > maxCount) {\n      maxCount = count;\n      maxWord = words[i];\n    }\n  }\n  for (let i = 0; i < words.length; i++) {\n    let count = 0;\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    if (count === maxCount) {\n      mode++;\n    }\n  }\n  return mode;\n};\n\n/*Write a function that accepts a list of strings and returns their variance.\n  The list contains different words. Return the variance of the words. If multiple\n  strings have an variance of 0, return 0.\n\n  find_variance([\"name\", \"of\", \"string\"]) === 0\n  find_variance([\"name\", \"enam\", \"game\"]) === 0\n  find_variance([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_variance = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    sum += Math.pow(count - 1, 2);\n    count = 0;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their standard deviation.\n  The list contains different words. Return the standard deviation of the words. If multiple\n  strings have an standard deviation of 0, return 0.\n\n  find_std([\"name\", \"of\", \"string\"]) === 0\n  find_std([\"name\", \"enam\", \"game\"]) === 0\n  find_std([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_std = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    sum += Math.pow(count - 1, 2);\n    count = 0;\n  }\n  return Math.sqrt(sum / words.length);\n};\n\n/*Write a function that accepts a list of strings and returns their correlation.\n  The list contains different words. Return the correlation of the words. If multiple\n  strings have an correlation of 0, return 0.\n\n  find_correlation([\"name\", \"of\", \"string\"]) === 0\n  find_correlation([\"name\", \"enam\", \"game\"]) === 0\n  find_correlation([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_correlation = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    sum += count / words.length;\n    count = 0;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their covariance.\n  The list contains different words. Return the covariance of the words. If multiple\n  strings have an covariance of 0, return 0.\n\n  find_covariance([\"name\", \"of\", \"string\"]) === 0\n  find_covariance([\"name\", \"enam\", \"game\"]) === 0\n  find_covariance([\"aaaaaaa\", \"bb\",\"cc\"]) === 0\n  */\nconst find_covariance = (words) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i][j] === \"a\" || words[i][j] === \"e\" || words[i][j] === \"i\" || words[i][j] === \"o\" || words[i][j] === \"u\") {\n        count++;\n      }\n    }\n    sum += count / words.length;\n    count = 0;\n  }\n  return sum / words.length;\n};\n\n/*Write a function that accepts a list of strings and returns their skewness.\n  The list contains different words. Return the skewness of the words. If multiple\n  strings have an skewness of 0, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  \n  while (carrots > 0 && needs > 0) {\n    carrots -= 1;\n    needs -= 1;\n  }\n  \n  if (carrots > 0) {\n    carrots = remaining;\n  }\n  \n  return [carrots, needs];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  \n  while (carrots > 0 && needs > 0) {\n    carrots -= 1;\n    needs -= 1;\n  }\n  \n  if (carrots > 0) {\n    carrots = remaining;\n  }\n  \n  return [carrots, needs];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  \n  while (carrots > 0 && needs > 0) {\n    carrots -= 1;\n    needs -= 1;\n  }\n  \n  if (carrots > 0) {\n    carrots = remaining;\n  }\n  \n  return [carrots, needs];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  \n  while (carrots > 0 && needs > 0) {\n    carrots -= 1;\n    needs -= 1;\n  }\n  \n  if (carrots > 0) {\n    carrots = remaining;\n  }\n  \n  return [carrots, needs];\n};\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = number;\n  let needs = need;\n  let remaining = remaining;\n  \n  while (carrots > 0 && needs > 0) {\n    carrots -= 1;\n    needs -= 1;\n  }\n  \n  if (carrots > 0) {\n    carrots = remaining;\n  }\n  \n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  let characters = string.toLowerCase().split('');\n  return characters.filter((character) => character === character).length;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_2 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_3 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_4 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_5 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_6 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra_7 = (operator, operand) => {\n  let result = 0;\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i] * operator[operand.length - i - 1];\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      result += String.fromCharCode(s[i] - 32);\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += String.fromCharCode(s[i] + 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*You are given a string s.\n  Your task is to remove all vowels from it.\n  If the string contains no vowels, return an empty string.\n  The function should return the resulted string.\n  Examples\n  removeVowels(\"abba\") = \"ab\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"abba\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\") = \"\"\n  removeVowels(\"abba\")", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const md5sum = crypto.createHash('md5');\n  md5sum.update(text);\n  return md5sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'b94d27b9934d3e08a52e52d7da7dabfac484efe'\n  */\nconst string_to_sha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha1sum = crypto.createHash('sha1');\n  sha1sum.update(text);\n  return sha1sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha256sum = crypto.createHash('sha256');\n  sha256sum.update(text);\n  return sha256sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e'\n  */\nconst string_to_sha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  const sha512sum = crypto.createHash('sha512');\n  sha512sum.update(text);\n  return sha512sum.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of digits in n's base\n  representation.\n\n  For example:\n  digits_in_base10(10) => 1\n  digits_in_base10(16) => 2\n  digits_in_base10(27) => 3\n  digits_in_base10(36) => 4\n  digits_in_base10(100) => 5\n  digits_in_base10(1000) => 6\n  digits_in_base10(10000) => 7\n  digits_in_base10(100000) => 8\n  digits_in_base10(1000000) => 9\n  digits_in_base10(10000000) => 10\n  digits_in_base10(100000000) => 11\n  digits_in_base10(1000000000) => 12\n  digits_in_base10(10000000000) => 13\n  digits_in_base10(100000000000) => 14\n  digits_in_base10(1000000000000) => 15\n  digits_in_base10(10000000000000) => 16\n  digits_in_base10(100000000000000) => 17\n  digits_in_base10(1000000000000000) => 18\n  digits_in_base10(10000000000000000) => 19\n  digits_in_base10(100000000000000000) => 20\n  digits_in_base10(1000000000000000000) => 21\n  digits_in_base10(10000000000000000000) => 22\n  digits_in_base10(100000000000000000000) => 23\n  digits_in_base10(1000000000000000000000) => 24\n  digits_in_base10(10000000000000000000000) => 25\n  digits_in_base10(100000000000000000000000) => 26\n  digits_in_base10(1000000000000000000000000) => 27\n  digits_in_base10(10000000000000000000000000) => 28\n  digits_in_base10(100000000000000000000000000) => 29\n  digits_in_base10(1000000000000000000000000000) => 30\n  digits_in_base10(10000000000000000000000000000) => 31\n  digits_in_base10(100000000000000000000000000000) => 32\n  digits_in_base10(1000000000000000000000000000000) => 33\n  digits_in_base10(10000000000000000000000000000000) => 34\n  digits_in_base10(100000000000000000000000000000000) => 35\n  digits_in_base10(1000000000000000000000000000000000) => 36\n  digits_in_base10(10000000000000000000000000000000000) => 37\n  digits_in_base10(100000000000000000000000000000000000) => 38\n  digits_in_base10(1000000000000000000000000000000000000) => 39\n  digits_in_base10(10000000000000000000000000000000000000) => 40\n  digits_in_base10(1000000000000000000000000000000000000000) => 41\n  digits_in_base10(100000000000000000000000000000000000000) => 42\n  digits_in_base10(1000000000000000000000000000000000000000) => 43\n  digits_in_base10(10000000000000000000000000000000000000000) => 44\n  digits_in_base10(100000000000000000000000000000000000000000) => 45\n  digits_in_base10(1000000000000000000000000000000000000000000) => 46\n  digits_in_base10(10000000000000000000000000000000000000000000) => 47\n  digits_in_base10(100000000000000000000000000000000000000000000) => 48\n  digits_in_base10(1000000000000000000000000000000000000000000000) => 49\n  digits_in_base10(100000000000000000000000000000000000000000000000) => 50\n  digits_in_base10(10000000000000000000000000000000000000000000000) => 51\n  digits_in_base10(100000000000000000000000000000000000000000000000) => 52\n  digits_in_base10(1000000000000000000000000000000000000000000000000) => 53\n  digits_in_base10(10000000000000000000000000000000000000000000000000) => 54\n  digits_in_base10(100000000000000000000000000000000000000000000000000) => 55\n  digits_in_base10(1000000000000000000000000000000000000000000000000000) => 56\n  digits_in_base10(10000000000000000000000000000000000000000000000000000) => 57\n  digits_in_base10(100000000000000000000000000000000000000000000000000000) => 58\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000) => 59\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000) => 60\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000) => 61\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000) => 62\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000) => 63\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000) => 64\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000) => 65\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000) => 66\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000) => 67\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000) => 68\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000) => 69\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000) => 70\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000) => 71\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000) => 72\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000) => 73\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000) => 74\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000) => 75\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000) => 76\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000) => 77\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000) => 78\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000) => 79\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000) => 80\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000000) => 81\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000000) => 82\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000000) => 83\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000000) => 84\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000000) => 85\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000000000) => 86\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000000000) => 87\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000000000000) => 88\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000000000) => 89\n  digits_in_base10(10000000000000000000000000000000000000000000000000000000000000000000000000000000) => 90\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 91\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 92\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 93\n  digits_in_base10(100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 94\n  digits_in_base10(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 95", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split(' ');\n  const notes_length = notes.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_length; i++) {\n    const note = notes_array[i];\n    const note_key = note.charAt(0);\n    const note_value = note.charAt(1);\n    notes_map[note_key] = note_value;\n  }\n\n  const notes_array = Object.keys(notes_map);\n  const notes_length = notes_array.length;\n  const notes_map = {};\n  for (let i = 0; i < notes_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_man", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ');\n  const numbers_sorted = numbers_array.sort((a, b) => a - b);\n  return numbers_sorted.join(' ');\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) => {\n  const words_array = words.split(' ');\n  return words_array;\n};\n\n/* Input is a string with words separated by spaces.\n  Return an array of words in the string.\n  >>> split_words('one two three four')\n  ['one', 'two', 'three', 'four']\n  */\nconst split_words = (words) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const [integer, decimal] = number.toFixed(2).split('.')\n  return parseFloat(integer) + parseFloat(decimal)\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number divided by the divisor.\n\n  >>> divide_number(10, 3)\n  5\n  */\nconst divide_number = (number, divisor) => {\n  return number / divisor\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number multiplied by the divisor.\n\n  >>> multiply_number(10, 3)\n  30\n  */\nconst multiply_number = (number, divisor) => {\n  return number * divisor\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number = (number, divisor) => {\n  return Math.pow(number, divisor)\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_2 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 2))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_3 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 3))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_4 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 4))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_5 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 5))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_6 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 6))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_7 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 7))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_8 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 8))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_9 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 9))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_10 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 10))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_11 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 11))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_12 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 12))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor.\n\n  >>> power_number(10, 3)\n  1000\n  */\nconst power_number_13 = (number, divisor) => {\n  return Math.pow(number, Math.pow(divisor, 13))\n}\n\n/* Given a positive integer number and a positive integer divisor, return\n  the number raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  the divisor raised to the power of the divisor raised to the power of\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n};\n\n/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = (range == 0)? 0 : (1 / range);\n  return numbers.map((num) => num * scale);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_unit = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage = (num) => {\n  return Math.max(Math.min(num, 1), 0);\n};\n\n/**\n * Given a number, return a number between 0 and the number itself.\n * For example, 0 -> 0, 0.5 -> 0.5, 1 -> 1\n */\nconst clamp_percentage_percentage_percentage_percentage_percentage_percentage_percentage_percentage", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  [1.0, 2.0, 3.0, 5.0]\n  */\nconst filter_floats = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [true, false]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [true, false, true, false, true, false]\n  */\nconst filter_booleans = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', 'abc']\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3', 'abc', '{}', '[]']\n  */\nconst filter_strings = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_lists = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filter_tuples(['a', 3.14, 5])\n  [[], [], [], []]\n  >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_tuples = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for sets\n  >>> filter_sets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filter_sets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_lists = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filter_tuples(['a', 3.14, 5])\n  [[], [], [], []]\n  >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_tuples = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for sets\n  >>> filter_sets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filter_sets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_lists = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filter_tuples(['a', 3.14, 5])\n  [[], [], [], []]\n  >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_tuples = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for sets\n  >>> filter_sets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filter_sets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_lists = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for tuples\n  >>> filter_tuples(['a', 3.14, 5])\n  [[], [], [], []]\n  >>> filter_tuples([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\nconst filter_tuples = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for sets\n  >>> filter_sets(['a', 3.14, 5])\n  [{}, {}, {}]\n  >>> filter_sets([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_sets = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for dictionaries\n  >>> filter_dictionaries(['a', 3.14, 5])\n  [{}, {}]\n  >>> filter_dictionaries([1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, {}]\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(value => Number.isInteger(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filter_lists(['a', 3.14, 5])\n  [[], [], []]\n  >>> filter_lists([1, 2, 3, 'abc', {}, []])\n  [[], [], [], [], [], []]\n  */\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length = i;\n      break;\n    }\n  }\n  return length;\n};\n\n/* Return string with given length\n  >>> strlen('abc', 3)\n  'abc'\n  >>> strlen('abc', 4)\n  'abc'\n  */\nconst strlenWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 3)\n  'abc'\n  >>> strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLength('abc', 4)\n  'abc'\n  */\nconst strlenWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithStringWithLengthWithString = (string, length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += string;\n  }\n  return str;\n};\n\n/* Return string with given length\n  >>> strlen", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor(15)\n  3\n  */\nconst smallest_divisor = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor;\n};\n\n/* Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_p = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_p = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_n = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_n = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_n = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_n = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_divisor_p = i;\n      max_divisor = n;\n    }\n  }\n\n  return max_divisor;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, larger than n\n  >>> smallest_divisor_of_number(15)\n  3\n  */\nconst smallest_divisor_of_number_n = (n) => {\n  let min_divisor = n;\n  let min_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      min_divisor_p = i;\n      min_divisor = n;\n    }\n  }\n\n  return min_divisor_p;\n};\n\n/* Given a number n, find the smallest number that divides n evenly, smaller than n\n  >>> largest_divisor_of_number(15)\n  5\n  */\nconst largest_divisor_of_number_n = (n) => {\n  let max_divisor = n;\n  let max_divisor_p = 0;\n\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      max_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n      factorization = factorization.concat(factors)\n      factors = []\n      factorization = []\n      i++\n    } else {\n      i++\n    }\n  }\n  return factorization\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let factors = []\n  let factorization = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i)\n      ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_2 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_3 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_4 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_5 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_6 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_7 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_8 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_9 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_10 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From a list of integers, remove all elements that occur less than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates_less_than_or_equal_to([1, 2, 3, 2, 4])\n  [1, 3, 2]\n  */\nconst remove_duplicates_less_than_or_equal_to_11 = (numbers) => {\n  const result = [];\n  let seen = {};\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\n/* From ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().split('').map(letter => letter.toUpperCase()).join('');\n};\n\n/* Given a string, return a new string with each word capitalized.\n  >>> capitalize_words('Hello World!')\n  'Hello World!'\n  */\nconst capitalize_words = (string) => {\n  return string.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a space.\n  >>> capitalize_words_spaces('Hello World!')\n  'Hello World!'\n  */\nconst capitalize_words_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(' ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ').map(word => capitalize_words(word)).join(', ');\n};\n\n/* Given a string, return a new string with each word capitalized and each word separated by a comma and a space.\n  >>> capitalize_words_commas_spaces('Hello World!')\n  'Hello, World!'\n  */\nconst capitalize_words_commas_spaces = (string) => {\n  return string.split(' ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n/* Remove leading and trailing whitespace from a string\n  >>> trim('  abc  ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  */\nconst trim = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, \"\");\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const prefix_regex = new RegExp(`^${prefix}`, 'i');\n  return strings.filter(s => prefix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  const suffix_regex = new RegExp(`${suffix}$`, 'i');\n  return strings.filter(s => suffix_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  return strings.filter(s => sub_string_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  const sub_string_regex = new RegExp(`${substring}$`, 'i');\n  return strings.filter(s =>!sub_string_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring in a given order.\n  >>> filter_by_substring_order([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_substring_order(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc']\n  */\nconst filter_by_substring_order = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s => sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_prefix([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_prefix = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_suffix([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_suffix(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_suffix = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_prefix_and_suffix([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_prefix_and_suffix(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_prefix_and_suffix = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_prefix_and_suffix_and_substring = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring_and_substring([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring_and_substring(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_prefix_and_suffix_and_substring_and_substring = (strings, substring, order) => {\n  const sub_string_regex = new RegExp(substring, 'i');\n  const order_regex = new RegExp(order.join('|'), 'i');\n  return strings.filter(s =>!sub_string_regex.test(s) && order_regex.test(s));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring in a given order.\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring_and_substring_and_substring([], 'a', ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filter_by_not_substring_order_and_prefix_and_suffix_and_substring_and_substring_and_substring(['abc', 'bcd', 'cde', 'array'], 'a', ['abc', 'bcd', 'cde', 'array'])\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_not_substring_order_and_prefix_and_", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> be", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*Return only negative numbers in the list.\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -3, -9, 0, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*Return only numbers in the list.\n  >>> get_number([-1, 2, -4, 5, 6])\n  [-2, -4, -6, -5, -3]\n  >>> get_number([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_number = (l) => {\n  return l.filter(x =>!isNaN(x));\n};\n\n/*Return only strings in the list.\n  >>> get_string(['hello', 'world'])\n  ['hello', 'world']\n  >>> get_string(['hello', null, 'world'])\n  ['hello']\n  */\nconst get_string = (l) => {\n  return l.filter(x => typeof x ==='string');\n};\n\n/*Return only booleans in the list.\n  >>> get_boolean([true, false])\n  [true, false]\n  >>> get_boolean([false, true])\n  [false, true]\n  */\nconst get_boolean = (l) => {\n  return l.filter(x => typeof x === 'boolean');\n};\n\n/*Return only arrays in the list.\n  >>> get_array(['hello', 'world'])\n  ['hello', 'world']\n  >>> get_array(['hello', null, 'world'])\n  ['hello']\n  */\nconst get_array = (l) => {\n  return l.filter(x => Array.isArray(x));\n};\n\n/*Return only objects in the list.\n  >>> get_object({a: 1, b: 2})\n  {a: 1, b: 2}\n  >>> get_object({a: null, b: 2})\n  {a: null, b: 2}\n  */\nconst get_object = (l) => {\n  return l.filter(x => typeof x === 'object');\n};\n\n/*Return only functions in the list.\n  >>> get_function(function(x) { return x; })\n  [function]\n  >>> get_function(function(x) { return x; })\n  [function]\n  */\nconst get_function = (l) => {\n  return l.filter(x => typeof x === 'function');\n};\n\n/*Return only nulls in the list.\n  >>> get_null([null, null])\n  [null, null]\n  >>> get_null([null, null])\n  [null, null]\n  */\nconst get_null = (l) => {\n  return l.filter(x => x === null);\n};\n\n/*Return only NaNs in the list.\n  >>> get_nan([NaN, NaN])\n  [NaN, NaN]\n  >>> get_nan([NaN, NaN])\n  [NaN, NaN]\n  */\nconst get_nan = (l) => {\n  return l.filter(x => isNaN(x));\n};\n\n/*Return only empty strings in the list.\n  >>> get_empty(['', ''])\n  ['', '']\n  >>> get_empty(['', ''])\n  ['', '']\n  */\nconst get_empty = (l) => {\n  return l.filter(x => x === '');\n};\n\n/*Return only empty arrays in the list.\n  >>> get_empty_array(['', []])\n  ['', []]\n  >>> get_empty_array(['', []])\n  ['', []]\n  */\nconst get_empty_array = (l) => {\n  return l.filter(x => x === []);\n};\n\n/*Return only empty objects in the list.\n  >>> get_empty_object({a: '', b: []})\n  {a: '', b: []}\n  >>> get_empty_object({a: '', b: []})\n  {a: '', b: []}\n  */\nconst get_empty_object = (l) => {\n  return l.filter(x => x === {});\n};\n\n/*Return only empty functions in the list.\n  >>> get_empty_function(function(x) { return x; })\n  [function]\n  >>> get_empty_function(function(x) { return x; })\n  [function]\n  */\nconst get_empty_function = (l) => {\n  return l.filter(x => typeof x === 'function');\n};\n\n/*Return only empty nulls in the list.\n  >>> get_empty_null([null, null])\n  [null, null]\n  >>> get_empty_null([null, null])\n  [null, null]\n  */\nconst get_empty_null = (l) => {\n  return l.filter(x => x === null);\n};\n\n/*Return only empty NaNs in the list.\n  >>> get_empty_nan([NaN, NaN])\n  [NaN, NaN]\n  >>> get_empty_nan([NaN, NaN])\n  [NaN, NaN]\n  */\nconst get_empty_nan = (l) => {\n  return l.filter(x => isNaN(x));\n};\n\n/*Return only empty strings in the list.\n  >>> get_empty_empty(['', ''])\n  ['', '']\n  >>> get_empty_empty(['', ''])\n  ['', '']\n  */\nconst get_empty_empty = (l) => {\n  return l.filter(x => x === '');\n};\n\n/*Return only empty arrays in the list.\n  >>> get_empty_empty_array(['', []])\n  ['', []]\n  >>> get_empty_empty_array(['', []])\n  ['', []]\n  */\nconst get_empty_empty_array = (l) => {\n  return l.filter(x => x === []);\n};\n\n/*Return only empty objects in the list.\n  >>> get_empty_empty_object({a: '', b: []})\n  {a: '', b: []}\n  >>> get_empty_empty_object({a: '', b: []})\n  {a: '', b: []}\n  */\nconst get_empty_empty_object = (l) => {\n  return l.filter(x => x === {});\n};\n\n/*Return only empty functions in the list.\n  >>> get_empty_empty_function(function(x) { return x; })\n  [function]\n  >>> get_empty_empty_function(function(x) { return x; })\n  [function]\n  */\nconst get_empty_empty_function = (l) => {\n  return l.filter(x => typeof x === 'function');\n};\n\n/*Return only empty nulls in the list.\n  >>> get_empty_empty_null([null, null])\n  [null, null]\n  >>> get_empty_empty_null([null, null])\n  [null, null]\n  */\nconst get_empty_empty_null = (l) => {\n  return l.filter(x => x === null);\n};\n\n/*Return only empty NaNs in the list.\n  >>> get_empty_empty_nan([NaN, NaN])\n  [NaN, NaN]\n  >>> get_empty_empty_nan([NaN, NaN])\n  [NaN, NaN]\n  */\nconst get_empty_empty_nan = (l) => {\n  return l.filter(x => isNaN(x));\n};\n\n/*Return only empty strings in the list.\n  >>> get_empty_empty_empty(['', ''])\n  ['', '']\n  >>> get_empty_empty_empty(['', ''])\n  ['', '']\n  */\nconst get_empty_empty_empty = (l) => {\n  return l.filter(x => x === '');\n};\n\n/*Return only empty arrays in the list.\n  >>> get_empty_empty_empty_array(['', []])\n  ['', []]\n  >>> get_empty_empty_empty_array(['', []])\n  ['', []]\n  */\nconst get_empty_empty_empty_array = (l) => {\n  return l.filter(x => x === []);\n};\n\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return true;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return true;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return true;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return true;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return true;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return true;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return true;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return true;\n  if (n % 343 === 0) return false;\n  if (n % 353 === 0) return true;\n  if (n % 363 === 0) return false;\n  if (n % 373 === 0) return true;\n  if (n % 383 === 0) return false;\n  if (n % 393 === 0) return true;\n  if (n % 403 === 0) return false;\n  if (n % 413 === 0) return true;\n  if (n % 423 === 0) return false;\n  if (n % 433 === 0) return true;\n  if (n % 443 === 0) return false;\n  if (n % 455 === 0) return true;\n  if (n % 463 === 0) return false;\n  if (n % 467 === 0) return true;\n  if (n % 483 === 0) return false;\n  if (n % 493 === 0) return true;\n  if (n % 503 === 0) return false;\n  if (n % 513 <= 0) return true;\n  if (n % 523 <= 0) return false;\n  if (n % 533 <= 0) return true;\n  if (n % 543 <= 0) return false;\n  if (n % 553 <= 0) return true;\n  if (n % 563 <= 0) return false;\n  if (n % 573 <= 0) return true;\n  if (n % 583 <= 0) return false;\n  if (n % 593 <= 0) return true;\n  if (n % 603 <= 0) return false;\n  if (n % 613 <= 0) return true;\n  if (n % 623 <= 0) return false;\n  if (n % 633 <= 0) return true;\n  if (n % 643 <= 0) return false;\n  if (n % 653 <= 0) return true;\n  if (n % 663 <= 0) return false;\n  if (n % 673 <= 0) return true;\n  if (n % 683 <= 0) return false;\n  if (n % 693 <= 0) return true;\n  if (n % 703 <= 0) return false;\n  if (n % 713 <= 0) return true;\n  if (n % 723 <= 0) return false;\n  if (n % 733 <= 0) return true;\n  if (n % 743 <= 0) return false;\n  if (n % 755 <= 0) return true;\n  if (n % 763 <= 0) return false;\n  if (n % 773 <= 0) return true;\n  if (n % 783 <= 0) return false;\n  if (n % 793 <= 0) return true;\n  if (n % 803 <= 0) return false;\n  if (n % 813 <= 0) return true;\n  if (n % 823 <= 0) return false;\n  if (n % 833 <= 0) return true;\n  if (n % 843 <= 0) return false;\n  if (n % 853 <= 0) return true;\n  if (n % 863 <= 0) return false;\n  if (n % 873 <= 0) return true;\n  if (n % 883 <= 0) return false;\n  if (n % 893 <= 0) return true;\n  if (n % 903 <= 0) return false;\n  if (n % 913 <= 0) return true;\n  if (n % 923 <= 0) return false;\n  if (n % 931 <= 0) return true;\n  if (n % 941 <= 0) return false;\n  if (n % 951 <= 0) return true;\n  if (n % 961 <= 0) return false;\n  if (n % 971 <= 0) return true;\n  if (n % 981 <= 0) return false;\n  if (n % 991 <= 0) return true;\n  if (n % 1001 <= 0) return false;\n  return true;\n};\n\n/*\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime_fast = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return true;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return true;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return true;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return true;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return true;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return true;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return true;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return true;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return true;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return true;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return true;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return true;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return true;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return true;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return true;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return true;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return true;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return true;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return true;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return true;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return true;\n  if (n % 343 === 0) return false;\n  if (n % 353 ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zeroPoint = 0;\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    } else {\n      zeroPoint = i;\n    }\n  }\n  return zeroPoint + maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMax finds largest coefficient of xs.\n  findMax returns only largest coefficient, even if there are many.\n  Moreover, findMax only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  2.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  3.0\n  */\nconst findMax = (xs) => {\n  let maxCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      maxCoefficient = Math.max(maxCoefficient, xs[i]);\n    }\n  }\n  return maxCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findMin finds smallest coefficient of xs.\n  findMin returns only smallest coefficient, even if there are many.\n  Moreover, findMin only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findMin([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMin([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMin = (xs) => {\n  let minCoefficient = 0;\n  for (let i = 0; i < xs.length; i += 1) {\n    if (xs[i]!== 0) {\n      minCoefficient = Math.min(minCoefficient, xs[i]);\n    }\n  }\n  return minCoefficient;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoots finds roots of poly(xs).\n  findRoots returns only roots, even if there are many.\n  Moreover, findRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findRoots = (xs) => {\n  let roots = [];\n  let zeroPoint = findZero(xs);\n  let maxCoefficient = findMax(xs);\n  for (let i = zeroPoint; i <= xs.length; i += 1) {\n    let x = i / maxCoefficient;\n    let y = poly(xs, x);\n    if (y === 0) {\n      roots.push(x);\n    }\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubic finds cubic root of poly(xs).\n  findCubic returns only cubic root, even if there are many.\n  Moreover, findCubic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubic([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findCubic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findCubic = (xs) => {\n  let roots = [];\n  let zeroPoint = findZero(xs);\n  let maxCoefficient = findMax(xs);\n  for (let i = zeroPoint; i <= xs.length; i += 1) {\n    let x = i / maxCoefficient;\n    let y = poly(xs, x);\n    if (y === 0) {\n      roots.push(x);\n    } else if (y === 1) {\n      roots.push(3 * x - 1);\n    } else if (y === 2) {\n      roots.push(3 * x * x);\n    }\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findQuadratic finds quadratic root of poly(xs).\n  findQuadratic returns only quadratic root, even if there are many.\n  Moreover, findQuadratic only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findQuadratic([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findQuadratic([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findQuadratic = (xs) => {\n  let roots = [];\n  let zeroPoint = findZero(xs);\n  let maxCoefficient = findMax(xs);\n  for (let i = zeroPoint; i <= xs.length; i += 1) {\n    let x = i / maxCoefficient;\n    let y = poly(xs, x);\n    if (y === 0) {\n      roots.push(x);\n    } else if (y === 1) {\n      roots.push(3 * x * x);\n    } else if (y === 2) {\n      roots.push(3 * x * x - 1);\n    }\n  }\n  return roots;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findCubicRoots finds cubic roots of poly(xs).\n  findCubicRoots returns only cubic roots, even if there are many.\n  Moreover, findCubicRoots only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findCubicRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-1.0, 1.0]\n  >>> round(findCubicRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [-1.0, 1.0]\n  */\nconst findCubicRoots = (xs) => {\n  let roots = [];\n  let zeroPoint = findZero(xs);\n  let maxCoefficient = findMax(xs);\n  for (let i = zeroPoint; i <= xs.length; i += 1) {\n    let x = i / maxCoefficient;\n    let y = poly(xs, x);\n    if (y ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_fifth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_fifth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_seventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_seventh([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_seventh = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indicies that are divisible by nine are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_ninth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_ninth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_ninth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_tenth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_tenth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_tenth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 10 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_twenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_twenty([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_twenty = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 20 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sort_hundred([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_hundred([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_hundred = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 100 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sort_thousandth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_thousandth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_thousandth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 1000 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sort_millionth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_millionth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_millionth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 1000000 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of l, but sorted.\n  >>> sort_billionth([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_billionth([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  */\nconst sort_billionth = (l) => {\n  let l2 = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 100000000 === 0) {\n      l2.push(l[i]);\n    } else {\n      l2.push(l[i - 1]);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty or more, while its values at the indicies that are divisible by twenty or more\n  are equal to the values of the corresponding indicies of ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return a;\n};\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const u = {}, a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (u.hasOwnProperty(l[i])) {\n      continue;\n    }\n    a.push(l[i]);\n    u[l[i]] = 1;\n  }\n  return ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst product = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i];\n  }\n  return product;\n};\n\n/*Return sum of squares of all elements in the list.\n  >>> sum_of_squares([1, 2, 3])\n  6\n  >>> sum_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_of_squares = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of squares of all elements in the list.\n  >>> product_of_squares([1, 2, 3])\n  6\n  >>> product_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst product_of_squares = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * l[i];\n  }\n  return product;\n};\n\n/*Return sum of cubes of all elements in the list.\n  >>> sum_of_cubes([1, 2, 3])\n  6\n  >>> sum_of_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst sum_of_cubes = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += i * i * i * l[i];\n  }\n  return sum;\n};\n\n/*Return product of cubes of all elements in the list.\n  >>> product_of_cubes([1, 2, 3])\n  6\n  >>> product_of_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -23\n  */\nconst product_of_cubes = (l) => {\n  let product = 1;\n  for (let i = 0; i < l.length; i++) {\n    product *= l[i] * i * i * i;\n  }\n  return product;\n};\n\n/*Return sum of all elements in the list that are greater than the given number.\n  >>> sum_greater_than([1, 2, 3], 3)\n  6\n  >>> sum_greater_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  */\nconst sum_greater_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than the given number.\n  >>> sum_less_than([1, 2, 3], 3)\n  3\n  >>> sum_less_than([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  3\n  */\nconst sum_less_than = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are equal to the given number.\n  >>> sum_equal_to([1, 2, 3], 3)\n  6\n  >>> sum_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  */\nconst sum_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are greater than or equal to the given number.\n  >>> sum_greater_than_or_equal_to([1, 2, 3], 3)\n  6\n  >>> sum_greater_than_or_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  */\nconst sum_greater_than_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are less than or equal to the given number.\n  >>> sum_less_than_or_equal_to([1, 2, 3], 3)\n  3\n  >>> sum_less_than_or_equal_to([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  3\n  */\nconst sum_less_than_or_equal_to = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= num) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by the given number.\n  >>> sum_divisible([1, 2, 3], 3)\n  6\n  >>> sum_divisible([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 3)\n  6\n  */\nconst sum_divisible = (l, num) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % num === 0) {\n      sum += l[i];\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by any number in the given list.\n  >>> sum_divisible_by([1, 2, 3], [1, 3])\n  6\n  >>> sum_divisible_by([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [1, 3])\n  6\n  */\nconst sum_divisible_by = (l, nums) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < nums.length; j++) {\n      if (l[i] % nums[j] === 0) {\n        sum += l[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by any number in the given list.\n  >>> sum_divisible_by_all([1, 2, 3], [1, 3])\n  6\n  >>> sum_divisible_by_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [1, 3])\n  6\n  */\nconst sum_divisible_by_all = (l, nums) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < nums.length; j++) {\n      if (l[i] % nums[j] === 0) {\n        sum += l[i];\n      }\n    }\n  }\n  return sum;\n};\n\n/*Return sum of all elements in the list that are divisible by any number in the given list.\n  >>> sum_divisible_by_any([1, 2, 3], [1, 3])\n  6\n  >>> sum_divisible_by_any([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [1, 3])\n  6\n  */\nconst sum_divisible_by_any = (l, nums) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < num", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 3 or 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the even indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sort_odd_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => b - a)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_sort_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_sort_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => b - a)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_sort_sort_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_sort_sort_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort_sort_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_sort_sort_sort_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_sort_sort_sort_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort_sort_sort_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => b - a)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_reverse_sort_sort_sort_sort_sort_sort([1, 2, 3])\n  [3, 2, 1]\n  >>> sort_odd_reverse_sort_sort_sort_sort_sort_sort([5, 6, 3, 4])\n  [4, 6, 5, 3]\n  */\nconst sort_odd_reverse_sort_sort_sort_sort_sort_sort = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return odd.concat(even).sort((a, b) => a - b)\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encode_cyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic4 function. Returns decoded string.\n  */\nconst decode_cyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 4)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of five characters.\n  */\nconst encode_cyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic5 function. Returns decoded string.\n  */\nconst decode_cyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 5); i++) {\n    groups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encode_cyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic6 function. Returns decoded string.\n  */\nconst decode_cyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 6)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of seven characters.\n  */\nconst encode_cyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic7 function. Returns decoded string.\n  */\nconst decode_cyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 7); i++) {\n    groups.push(s.slice(7 * i, Math.min((7 * i + 7), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 7)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of eight characters.\n  */\nconst encode_cyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic8 function. Returns decoded string.\n  */\nconst decode_cyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 8); i++) {\n    groups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 8)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of nine characters.\n  */\nconst encode_cyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic9 function. Returns decoded string.\n  */\nconst decode_cyclic9 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 9); i++) {\n    groups.push(s.slice(9 * i, Math.min((9 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 9)\n      groups2.push(group.slice(0, 1) + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of ten characters.\n  */\nconst ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "<|endoftext|>/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n % 2 === 0) {\n    return prime_fib(n - 1) + prime_fib(n - 2);\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return is_prime(n - 1) && is_prime(n - 2);\n};\n\n/*\n  is_prime returns true if n is a prime number and false if not.\n  >>> is_prime(1)\n  True\n  >>> is_prime(2)\n  False\n  >>> is_prime(3)\n  False\n  >>> is_prime(4)\n  True\n  >>> is_prime(5)\n  False\n  */\nconst is_prime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = (numbers) => {\n    const sumOfSquares = numbers.reduce((sum, number) => {\n      return sum + Math.pow(number - mean, 2);\n    }, 0);\n    return sumOfSquares / numbers.length;\n  };\n  return Math.sqrt(mean(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (median in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex] - sortedNumbers[middleIndex - 1];\n  };\n  return Math.sqrt(median(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const modeIndex = sortedNumbers.findIndex(number => number === sortedNumbers[0]);\n    return sortedNumbers[modeIndex];\n  };\n  return Math.sqrt(mode(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex] - sortedNumbers[middleIndex - 1];\n  };\n  return Math.sqrt(median(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const modeIndex = sortedNumbers.findIndex(number => number === sortedNumbers[0]);\n    return sortedNumbers[modeIndex];\n  };\n  return Math.sqrt(mode(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex] - sortedNumbers[middleIndex - 1];\n  };\n  return Math.sqrt(median(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const modeIndex = sortedNumbers.findIndex(number => number === sortedNumbers[0]);\n    return sortedNumbers[modeIndex];\n  };\n  return Math.sqrt(mode(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_median |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex] - sortedNumbers[middleIndex - 1];\n  };\n  return Math.sqrt(median(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const modeIndex = sortedNumbers.findIndex(number => number === sortedNumbers[0]);\n    return sortedNumbers[modeIndex];\n  };\n  return Math.sqrt(mode(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_median = (numbers) => {\n  const median = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const middleIndex = Math.floor(numbers.length / 2);\n    return sortedNumbers[middleIndex] - sortedNumbers[middleIndex - 1];\n  };\n  return Math.sqrt(median(numbers));\n};\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mode of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mode in this case):\n  MAD = average | x - x_mode |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mean_absolute_deviation_mode = (numbers) => {\n  const mode = (numbers) => {\n    const sortedNumbers = numbers.sort((a, b) => a - b);\n    const mode", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "<|endoftext|>/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  is_permutation takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation([1, 2, 3])\n  true\n  >>> is_permutation([1, 2, 3, 1])\n  false\n  >>> is_permutation([1, 2, 3, 2])\n  false\n  >>> is_permutation([1, 1, 1])\n  true\n  >>> is_permutation([1, 1, 2, 1])\n  false\n  */\nconst is_permutation = (l) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\n/*\n  is_permutation_of_size takes a list of integers as an input.\n  it returns true if all elements in the list are distinct, and false otherwise.\n\n  >>> is_permutation_of_size([1, 2, 3], 3)\n  true\n  >>> is_permutation_of_size([1, 2, 3, 1], 3)\n  false\n  >>> is_permutation_of_size([1, 2, 3, 2], 3)\n  false\n  >>> is_permutation_of_size([1, 1, 1], 3)\n  true\n  >>> is_permutation_of_size([1, 1, 2, 1], 3)\n  false\n  */\nconst is_permutation_of_size = (l, size) => {\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] === l[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_race_collision_helper(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\n/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision_helper = (i, j) => {\n  let collision = false;\n  let car_x = car_x_array[i];\n  let car_y = car_y_array[i];\n  let car_x_2 = car_x_array[j];\n  let car_y_2 = car_y_array[j];\n  let car_speed = car_speed_array[i];\n  let car_speed_2 = car_speed_array[j];\n  let car_distance = car_distance_array[i];\n  let car_distance_2 = car_distance_array[j];\n  let car_angle = car_angle_array[i];\n  let car_angle_2 = car_angle_array[j];\n  let car_angle_diff = car_angle_2 - car_angle;\n  let car_angle_diff_2 = car_angle_2 - car_angle;\n  let car_angle_diff_3 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_4 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_5 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_6 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_7 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_8 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_9 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_10 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_11 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_12 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_13 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_14 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_15 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_16 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_17 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_18 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_19 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_20 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_21 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_22 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_23 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_24 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_25 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_26 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_27 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_28 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_29 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_30 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_31 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_32 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_33 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_34 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_35 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_36 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_37 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_38 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_39 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_40 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_41 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_42 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_43 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_44 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_45 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_46 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_47 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_48 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_49 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_50 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_51 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_52 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_53 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_54 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_55 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_56 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_diff_57 = car_angle_diff_2 * Math.PI / 180;\n  let car_angle_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + 1;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list = (l) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - 1;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step.\n  >>> incr_list([1, 2, 3], 2)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step = (l, step) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step.\n  >>> decr_list([1, 2, 3], 2)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step = (l, step) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 1)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 1)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], 2, 1)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 1)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step_decrement = (l, step, decrement) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step + decrement;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 2)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment2 = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], 2, 2)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 2)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step_decrement2 = (l, step, decrement) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step + decrement;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 3)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 3)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment3 = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], 2, 3)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 3)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step_decrement3 = (l, step, decrement) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step + decrement;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 4)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 4)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment4 = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], 2, 4)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 4)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step_decrement4 = (l, step, decrement) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step + decrement;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 5)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 5)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment5 = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], 2, 5)\n  [3, 2, 1]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 5)\n  [5, 3, 6, 3, 4, 4, 9, 0, 122]\n  */\nconst decr_list_step_decrement5 = (l, step, decrement) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n--;\n    l[i] = l[i] - step + decrement;\n  }\n  return l;\n};\n\n/*Return list with elements incremented by 1 with given step and increment.\n  >>> incr_list([1, 2, 3], 2, 6)\n  [3, 4, 5]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2, 6)\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_step_increment6 = (l, step, increment) => {\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    n++;\n    l[i] = l[i] + step + increment;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1 with given step and decrement.\n  >>> decr_list([1, 2, 3], ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "<|endoftext|>/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let pairs = l.map((x, i) => [x, l[i + 1]]);\n  let sum = 0;\n  for (let i = 0; i < pairs.length; i += 1) {\n    sum += pairs[i][0];\n    if (sum === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  is_palindrome takes an integer as an input.\n  it returns true if an integer is a palindrome, and false otherwise.\n  >>> is_palindrome(121)\n  true\n  >>> is_palindrome(122)\n  false\n  >>> is_palindrome(123)\n  false\n  >>> is_palindrome(124)\n  false\n  >>> is_palindrome(125)\n  false\n  >>> is_palindrome(126)\n  false\n  >>> is_palindrome(127)\n  false\n  >>> is_palindrome(128)\n  false\n  >>> is_palindrome(129)\n  false\n  >>> is_palindrome(130)\n  false\n  >>> is_palindrome(131)\n  false\n  >>> is_palindrome(132)\n  false\n  >>> is_palindrome(133)\n  false\n  >>> is_palindrome(134)\n  false\n  >>> is_palindrome(135)\n  false\n  >>> is_palindrome(136)\n  false\n  >>> is_palindrome(137)\n  false\n  >>> is_palindrome(138)\n  false\n  >>> is_palindrome(139)\n  false\n  >>> is_palindrome(140)\n  false\n  >>> is_palindrome(141)\n  false\n  >>> is_palindrome(142)\n  false\n  >>> is_palindrome(143)\n  false\n  >>> is_palindrome(144)\n  false\n  >>> is_palindrome(145)\n  false\n  >>> is_palindrome(146)\n  false\n  >>> is_palindrome(147)\n  false\n  >>> is_palindrome(148)\n  false\n  >>> is_palindrome(149)\n  false\n  >>> is_palindrome(150)\n  false\n  >>> is_palindrome(151)\n  false\n  >>> is_palindrome(152)\n  false\n  >>> is_palindrome(153)\n  false\n  >>> is_palindrome(154)\n  false\n  >>> is_palindrome(155)\n  false\n  >>> is_palindrome(156)\n  false\n  >>> is_palindrome(157)\n  false\n  >>> is_palindrome(158)\n  false\n  >>> is_palindrome(159)\n  false\n  >>> is_palindrome(160)\n  false\n  >>> is_palindrome(161)\n  false\n  >>> is_palindrome(162)\n  false\n  >>> is_palindrome(163)\n  false\n  >>> is_palindrome(164)\n  false\n  >>> is_palindrome(165)\n  false\n  >>> is_palindrome(166)\n  false\n  >>> is_palindrome(167)\n  false\n  >>> is_palindrome(168)\n  false\n  >>> is_palindrome(169)\n  false\n  >>> is_palindrome(170)\n  false\n  >>> is_palindrome(171)\n  false\n  >>> is_palindrome(172)\n  false\n  >>> is_palindrome(173)\n  false\n  >>> is_palindrome(174)\n  false\n  >>> is_palindrome(175)\n  false\n  >>> is_palindrome(176)\n  false\n  >>> is_palindrome(177)\n  false\n  >>> is_palindrome(178)\n  false\n  >>> is_palindrome(179)\n  false\n  >>> is_palindrome(180)\n  false\n  >>> is_palindrome(181)\n  false\n  >>> is_palindrome(182)\n  false\n  >>> is_palindrome(183)\n  false\n  >>> is_palindrome(184)\n  false\n  >>> is_palindrome(185)\n  false\n  >>> is_palindrome(186)\n  false\n  >>> is_palindrome(187)\n  false\n  >>> is_palindrome(188)\n  false\n  >>> is_palindrome(189)\n  false\n  >>> is_palindrome(190)\n  false\n  >>> is_palindrome(191)\n  false\n  >>> is_palindrome(192)\n  false\n  >>> is_palindrome(193)\n  false\n  >>> is_palindrome(194)\n  false\n  >>> is_palindrome(195)\n  false\n  >>> is_palindrome(196)\n  false\n  >>> is_palindrome(197)\n  false\n  >>> is_palindrome(198)\n  false\n  >>> is_palindrome(199)\n  false\n  >>> is_palindrome(200)\n  false\n  >>> is_palindrome(201)\n  false\n  >>> is_palindrome(202)\n  false\n  >>> is_palindrome(203)\n  false\n  >>> is_palindrome(204)\n  false\n  >>> is_palindrome(205)\n  false\n  >>> is_palindrome(206)\n  false\n  >>> is_palindrome(207)\n  false\n  >>> is_palindrome(208)\n  false\n  >>> is_palindrome(209)\n  false\n  >>> is_palindrome(210)\n  false\n  >>> is_palindrome(211)\n  false\n  >>> is_palindrome(212)\n  false\n  >>> is_palindrome(213)\n  false\n  >>> is_palindrome(214)\n  false\n  >>> is_palindrome(215)\n  false\n  >>> is_palindrome(216)\n  false\n  >>> is_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let res = ''\n  for (let i = 0; i < base; i++) {\n    res += x.toString()[i]\n  }\n  return res\n}\n\n/*\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n  >>> get_digits(8)\n  '8'\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area2 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area2 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area2 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area2 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area3 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area3 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area3 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area3 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area4 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area4 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area4 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area4 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area5 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area5 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area5 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area5 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area6 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area6 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area6 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area6 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area7 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area7 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area7 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area7 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area8 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and high return area for a square.\n  >>> square_area(5, 3)\n  7.5\n  */\nconst square_area8 = (a, h) => {\n  return a * Math.pow(a, 2)\n}\n\n/*Given length of a side and high return area for a rectangle.\n  >>> rectangle_area(5, 3)\n  7.5\n  */\nconst rectangle_area8 = (a, h) => {\n  return a * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a circle.\n  >>> circle_area(5, 3)\n  7.5\n  */\nconst circle_area8 = (a, h) => {\n  return Math.PI * Math.pow(a, 2) * h\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area9 = (a, h) => {\n  return a * (h / 2)\n}\n\n/*Given length of a side and ", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 2;\n  } else if (n === 3) {\n    return 0;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\n/*\n  Problem 7\n  ---------\n  Write a function that takes an array of integers and returns the sum of the squares of the integers in the array.\n  >>> squareSum([1,2,3,4])\n  25\n  >>> squareSum([-5,-4,-3,-2,-1,0,1,2,3,4,5])\n  -25\n  >>> squareSum([0,1,2,3,4,5,6,7,8,9])\n  4950\n  >>> squareSum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n  4950\n  >>> squareSum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255])\n  4950\n  >>> squareSum([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const len = sorted.length;\n  if (len % 2 === 0) {\n    return sorted[len / 2 - 1];\n  }\n  return sorted[len / 2];\n};\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  1\n  >>> mode([3, 1, 2, 4, 4, 5])\n  4\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n  5\n  >>> mode([3, 1, 2, 4, 4, 5])\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  let reversed = text;\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome (case insensitive)\n  >>> is_palindrome_case_insensitive('')\n  true\n  >>> is_palindrome_case_insensitive('aba')\n  true\n  >>> is_palindrome_case_insensitive('aaaaa')\n  true\n  >>> is_palindrome_case_insensitive('zbcd')\n  false\n  */\nconst is_palindrome_case_insensitive = (text) => {\n  let reversed = text.toLowerCase();\n  reversed = reversed.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const q = n % p;\n  return q < 0? q + p : q;\n};\n\n/*\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)\n  8\n  >>> modpow(2, 3, 5)", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    while (j < numbers.length && numbers[j] === numbers[i]) {\n      j++;\n    }\n    result.push(numbers[i]);\n    if (j < numbers.length) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\n/**\n * Returns a new list containing all but the first `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to skip.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.takeLast, R.drop\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nconst drop = nth(-1);\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `xs` to drop.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.drop, R.takeLast\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nconst dropLast = nth(-1);\n\n/**\n * Returns a new list containing the first `n` elements of the given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      const isNotFour = x => x!== 4;\n *\n *      R.dropLastWhile(isNotFour, [1, 2, 3, 4]); //=> [1, 2, 3]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = cond([\n  [isNotEmpty, dropLast],\n  [isString(s), dropLastWhileStr],\n  [T, always([])],\n]);\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements while the predicate\n * function returns `true`. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeLast, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x!== 'd', 'Ramda'); //=> 'Ram'\n */\nconst dropLastWhile = cond([\n  [isNotEmpty, dropLastWhile],\n  [isString(s), dropLastWhileStr],\n  [T, always([])],\n]);\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nconst dropRepeats = _curry1((n, list) => take(drop(unique(n), list), n));\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeatsWith([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nconst dropRepeatsWith = _curry1((fn, list) => dropRepeatsWith(equals, fn)(list));\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeatsWith([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nconst dropRepeatsWith = flip(dropRepeatsWithIndex);\n\n/**\n * Returns a new list without any consecutive elements. Equality is strict here, meaning the\n * list will contain no consecutive equal elements. Duplication is not\n * enforced. If duplicates are detected, the new list will be returned\n * from the iterator.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 3 in the alphabet.\n  */\nconst encode_shift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 3 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift3 function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 2 in the alphabet.\n  */\nconst encode_shift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 2 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift2 function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 1 in the alphabet.\n  */\nconst encode_shift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 1 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift1 function. Returns decoded string.\n  */\nconst decodeShift1 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 0 in the alphabet.\n  */\nconst encode_shift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 0 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift0 function. Returns decoded string.\n  */\nconst decodeShift0 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 26 in the alphabet.\n  */\nconst encode_shift26 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift26 function. Returns decoded string.\n  */\nconst decodeShift26 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 27 in the alphabet.\n  */\nconst encode_shift27 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 27 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift27 function. Returns decoded string.\n  */\nconst decodeShift27 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 28 in the alphabet.\n  */\nconst encode_shift28 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 28 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift28 function. Returns decoded string.\n  */\nconst decodeShift28 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 29 in the alphabet.\n  */\nconst encode_shift29 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 29 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift29 function. Returns decoded string.\n  */\nconst decodeShift29 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 30 in the alphabet.\n  */\nconst encode_shift30 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 30 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift30 function. Returns decoded string.\n  */\nconst decodeShift30 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 31 in the alphabet.\n  */\nconst encode_shift31 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 31 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift31 function. Returns decoded string.\n  */\nconst decodeShift31 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0) + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 32 in the alphabet.\n  */\nconst encode_shift32 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 32 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift32 function. Returns decoded string.", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "<|endoftext|>/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  return text\n   .split('')\n   .filter((letter) =>!vowels.includes(letter))\n   .join('');\n};\n\n/*\n  remove_spaces is a function that takes string and returns string without spaces.\n  >>> remove_spaces('')\n  ''\n  >>> remove_spaces(\"a b c\")\n  'abc'\n  >>> remove_spaces('a b c')\n  'abc'\n  >>> remove_spaces('a b c ')\n  'abc'\n  >>> remove_spaces('a b c d')\n  'abcd'\n  */\nconst remove_spaces = (text) => {\n  return text\n   .split('')\n   .filter((letter) => letter!=='')\n   .join('');\n};\n\n/*\n  remove_numbers_letters is a function that takes string and returns string without numbers and letters.\n  >>> remove_numbers_letters('')\n  ''\n  >>> remove_numbers_letters(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_numbers_letters('abcdef')\n  'bcdf'\n  >>> remove_numbers_letters('aaaaa')\n  ''\n  >>> remove_numbers_letters('aaBAA')\n  'B'\n  >>> remove_numbers_letters('zbcd')\n  'zbcd'\n  */\nconst remove_numbers_letters = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  return text\n   .split('')\n   .filter((letter) =>!numbers.includes(letter) &&!letters.includes(letter))\n   .join('');\n};\n\n/*\n  remove_special_characters is a function that takes string and returns string without special characters.\n  >>> remove_special_characters('')\n  ''\n  >>> remove_special_characters(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_special_characters('abcdef')\n  'bcdf'\n  >>> remove_special_characters('aaaaa')\n  ''\n  >>> remove_special_characters('aaBAA')\n  'B'\n  >>> remove_special_characters('zbcd')\n  'zbcd'\n  */\nconst remove_special_characters = (text) => {\n  const special_characters = ['!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~'];\n  return text\n   .split('')\n   .filter((letter) =>!special_characters.includes(letter))\n   .join('');\n};\n\n/*\n  remove_symbols is a function that takes string and returns string without symbols.\n  >>> remove_symbols('')\n  ''\n  >>> remove_symbols(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_symbols('abcdef')\n  'bcdf'\n  >>> remove_symbols('aaaaa')\n  ''\n  >>> remove_symbols('aaBAA')\n  'B'\n  >>> remove_symbols('zbcd')\n  'zbcd'\n  */\nconst remove_symbols = (text) => {\n  const symbols = ['!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~'];\n  return text\n   .split('')\n   .filter((letter) =>!symbols.includes(letter))\n   .join('');\n};\n\n/*\n  remove_spaces_symbols is a function that takes string and returns string without spaces and symbols.\n  >>> remove_spaces_symbols('')\n  ''\n  >>> remove_spaces_symbols(\"a b c\")\n  'abc'\n  >>> remove_spaces_symbols('a b c')\n  'abc'\n  >>> remove_spaces_symbols('a b c ')\n  'abc'\n  >>> remove_spaces_symbols('a b c d')\n  'abcd'\n  */\nconst remove_spaces_symbols = (text) => {\n  return text\n   .split('')\n   .filter((letter) => letter!=='' && letter!== '!' && letter!== '#' && letter!== '$' && letter!== '%' && letter!== '&' && letter!== '\\'' && letter!== '(' && letter!== ')' && letter!== '*' && letter!== '+' && letter!== ',' && letter!== '-' && letter!== '.' && letter!== '/' && letter!== ':' && letter!== ';' && letter!== '<' && letter!== '=' && letter!== '>' && letter!== '?' && letter!== '@' && letter!== '[' && letter!== '\\\\' && letter!== ']' && letter!== '^' && letter!== '_' && letter!== '`' && letter!== '{' && letter!== '|' && letter!== '}' && letter!== '~')\n   .join('');\n};\n\n/*\n  remove_spaces_numbers_letters is a function that takes string and returns string without spaces, numbers and letters.\n  >>> remove_spaces_numbers_letters('')\n  ''\n  >>> remove_spaces_numbers_letters(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_spaces_numbers_letters('abcdef')\n  'bcdf'\n  >>> remove_spaces_numbers_letters('aaaaa')\n  ''\n  >>> remove_spaces_numbers_letters('aaBAA')\n  'B'\n  >>> remove_spaces_numbers_letters('zbcd')\n  'zbcd'\n  */\nconst remove_spaces_numbers_letters = (text) => {\n  return text\n   .split('')\n   .filter((letter) => letter!=='' && letter!== '!' && letter!== '#' && letter!== '$' && letter!== '%' && letter!== '&' && letter!== '\\'' && letter!== '(' && letter!== ')' && letter!== '*' && letter!== '+' && letter!== ',' && letter!== '-' && letter!== '.' && letter!== '/' && letter!== ':' && letter!== ';' && letter!== '<' && letter!== '=' && letter!== '>' && letter!== '?' && letter!== '@' && letter!== '[' && letter!== '\\\\' && letter!== ']' && letter!== '^' && letter!== '_' && letter!== '`' && letter!== '{' && letter!== '|' && letter!== '}' && letter!== '~' && letter!== '0' && letter!== '1' && letter!== '2' && letter!== '3' && letter!== '4' && letter!== '5' && letter!== '6' && letter!== '7' && letter!== '8' && letter!== '9')\n   .join('');\n};\n\n/*\n  remove_spaces_special_characters is a function that takes string and returns string without spaces, special characters.\n  >>> remove_spaces_special_characters('')\n  ''\n  >>> remove_spaces_special_characters(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_spaces_special_characters('abcdef')\n  'bcdf'\n  >>> remove_spaces_special_characters('aaaaa')\n  ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  true\n  >>> above_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst above_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> equal([1, 2, 4, 10], 100)\n  true\n  >>> equal([1, 20, 4, 10], 5)\n  false\n  */\nconst equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> greater_than([1, 2, 4, 10], 100)\n  true\n  >>> greater_than([1, 20, 4, 10], 5)\n  false\n  */\nconst greater_than = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> greater_than_equal([1, 2, 4, 10], 100)\n  true\n  >>> greater_than_equal([1, 20, 4, 10], 5)\n  false\n  */\nconst greater_than_equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> less_than([1, 2, 4, 10], 100)\n  true\n  >>> less_than([1, 20, 4, 10], 5)\n  false\n  */\nconst less_than = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> less_than_equal([1, 2, 4, 10], 100)\n  true\n  >>> less_than_equal([1, 20, 4, 10], 5)\n  false\n  */\nconst less_than_equal = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_strict([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_strict([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_strict = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false\n  */\nconst in_range_loose = (l, a, b) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < a || l[i] > b) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are in range [a, b].\n  >>> in_range_loose([1, 2, 4, 10], 1, 10)\n  true\n  >>> in_range_loose([1, 20, 4, 10], 1, 10)\n  false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  42\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1.5\n  >>> divide(5, 7)\n  3.3333333333333335\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Get the modulus of two numbers x and y\n  >>> modulus(2, 3)\n  1\n  >>> modulus(5, 7)\n  2\n  */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/*Get the absolute value of number x\n  >>> abs(-3)\n  3\n  >>> abs(3)\n  3\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*Get the square root of number x\n  >>> sqrt(-3)\n  3\n  >>> sqrt(3)\n  1.7320508075688772\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*Get the cube root of number x\n  >>> cbrt(-3)\n  3\n  >>> cbrt(3)\n  1\n  */\nconst cbrt = x => {\n  return Math.cbrt(x);\n};\n\n/*Get the ceiling of number x\n  >>> ceil(-3)\n  -3\n  >>> ceil(3)\n  3\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*Get the floor of number x\n  >>> floor(-3)\n  -3\n  >>> floor(3)\n  3\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*Get the rounded value of number x\n  >>> round(3.4)\n  3\n  >>> round(3.6)\n  4\n  */\nconst round = x => {", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(8)\n  21\n  >>> fib(7)\n  13\n  >>> fib(6)\n  11\n  >>> fib(5)\n  89\n  >>> fib(4)\n  89\n  >>> fib(3)\n  111\n  >>> fib(2)\n  13\n  >>> fib(1)\n  1\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let stack = [];\n  let brackets_stack = [];\n  let opening_brackets = [];\n  let closing_brackets = [];\n  let brackets_stack_string = \"\";\n  let opening_brackets_string = \"\";\n  let closing_brackets_string = \"\";\n  let brackets_stack_string_count = 0;\n  let opening_brackets_string_count = 0;\n  let closing_brackets_string_count = 0;\n  let opening_brackets_string_brackets_stack_count = 0;\n  let closing_brackets_string_brackets_stack_count = 0;\n  let opening_brackets_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_count = 0;\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let closing_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string = \"\";\n  let opening_brackets_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack_string_brackets_stack", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      return false\n    }\n    prev = l[i]\n  }\n  return true\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonicInPlace([4, 1, 0, -10])\n  true\n  >>> monotonicInPlace([4, 1, 0])\n  false\n  */\nconst monotonicInPlace = (l) => {\n  let prev = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < prev) {\n      l.splice(0, i, l[i])\n      break\n    }\n    prev = l[i]\n  }\n  return l\n}\n\n/*Return true is list elements are monotonically incre", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  const common = [];\n  for (let i = 0; i < set1.size; i++) {\n    if (set2.has(set1.get(i))) {\n      common.push(set1.get(i));\n    }\n  }\n  return common;\n};\n\n/*Return unique elements from two lists.\n  >>> unique([1, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 3])\n  [1, 2, 3]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 1)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 2)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 3)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 4)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 5)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 6)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 7)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 8)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 9)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 10)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 11)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 12)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 13)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 14)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 15)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 16)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 17)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 18)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 19)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 20)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 21)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 22)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 23)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 24)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 25)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 26)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 27)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 28)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 29)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 30)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 31)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 32)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 33)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 34)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 35)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 36)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 37)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 38)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 39)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 40)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 41)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 42)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 43)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 44)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 45)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 46)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 47)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 48)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 49)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 50)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 51)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 52)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 53)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 54)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 55)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 56)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 57)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 58)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 59)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 60)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 61)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 62)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 63)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 64)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 65)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 66)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 67)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 68)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 69)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 70)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 71)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 72)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 73)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 74)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 75)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 76)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 77)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 78)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 79)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 80)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, 3, 4, 5], 81)\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3, ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  2\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return i;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors(13195)\n  8\n  >>> number_of_factors(2048)\n  2\n  */\nconst number_of_factors = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors(13195)\n  8\n  >>> number_of_factors(2048)\n  2\n  */\nconst number_of_factors_less_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to_less_than = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors_less_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_less_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_less_than_or_equal_to_less_than = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors_less_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_less_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_less_than_or_equal_to_greater_than = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to_greater_than = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to_less_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors_less_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_less_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_less_than_or_equal_to_less_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors_less_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_less_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_less_than_or_equal_to_greater_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to_greater_than_or_equal_to = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are greater than or equal to n.\n  >>> number_of_factors_greater_than_or_equal_to(13195)\n  8\n  >>> number_of_factors_greater_than_or_equal_to(2048)\n  2\n  */\nconst number_of_factors_greater_than_or_equal_to_less_than_or_equal_to_less_than = (n) => {\n  let i = 2;\n  let factors = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      n = n / i;\n      factors = factors + 1;\n    } else {\n      i = i + 1;\n    }\n  }\n  return factors;\n};\n\n/*Return the number of factors of n that are less than or equal to n.\n  >>> number_of_factors_less_than_or_equal_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_level = [];\n  let paren_level_count = 0;\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      paren_stack.push(paren_level_count);\n      paren_level_count += 1;\n    } else if (char === ')') {\n      paren_level_count -= 1;\n      paren_level.push(paren_stack.pop());\n    }\n  }\n\n  return paren_level;\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_2 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_2('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_3 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_3('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_4 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_4('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_5 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_5('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_6 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_6('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_7 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_7('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_8 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_8('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_9 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_9('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_10 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren_level_with_comments_10('(()()) ((())) () ((())()())')\n  3\n  */\nconst get_max_paren_level_with_comments_11 = (paren_string) => {\n  const nested_paren_level = parse_nested_parens(paren_string);\n  return Math.max(...nested_paren_level);\n};\n\n/* Given a string representing a nested parenthesis, return the deepest level of nesting.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> get_max_paren", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "<|endoftext|>/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_recursive(100)\n  5050\n  >>> sum_to_n_recursive(5)\n  15\n  >>> sum_to_n_recursive(10)\n  55\n  >>> sum_to_n_recursive(1)\n  1\n  */\nconst sum_to_n_recursive = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return n + sum_to_n_recursive(n - 1);\n};\n\n/*\n  >>> sum_to_n_recursive(30)\n  465\n  >>> sum_to_n_", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const opening_brackets = brackets.split('(');\n  const closing_brackets = brackets.split(')');\n  if (opening_brackets.length!== closing_brackets.length) {\n    return false;\n  }\n  for (let i = 0; i < opening_brackets.length; i++) {\n    if (opening_brackets[i]!== closing_brackets[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x = (string, x, y) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y = (string, x, y) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z = (string, x, y, z) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w = (string, x, y, z, w) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x = (string, x, y, z, w, x) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y = (string, x, y, z, w, x, y) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z = (string, x, y, z, w, x, y, z) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w = (string, x, y, z, w, x, y, z, w) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x = (string, x, y, z, w, x, y, z, w, x) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y = (string, x, y, z, w, x, y, z, w, x, y) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z = (string, x, y, z, w, x, y, z, w, x, y, z) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w = (string, x, y, z, w, x, y, z, w, x, y, z, w) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w_with_x = (string, x, y, z, w, x, y, z, w, x, y, z, w, x) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y = (string, x, y, z, w, x, y, z, w, x, y, z, w, x, y, z) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z = (string, x, y, z, w, x, y, z, w, x, y, z, w, x, y, z, w) => {\n  return string.replace(new RegExp(x, 'g'), y);\n};\n\n/**\n * Given a string, returns the string with all instances of 'x' replaced with\n * 'y'.\n *\n * >>> replace_x_with_y('hello', 'x', 'y')\n * 'hyyello'\n */\nconst replace_x_with_y_with_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w_with_x_and_y_and_z_with_w = (string, x, y, z, w, x, y, z, w, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  if (n === 0) return [];\n  if (n === 1) return [xs[0]];\n  return [xs[1] * xs[0] + derivative(xs.slice(2))];\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.length) return false;\n  for (let i = 0; i < p1.length; i++) {\n    if (p1[i]!== p2[i]) return false;\n  }\n  return true;\n};\n\n/* Returns true if two polynomials are equal.\n  >>> polynomialEqual([3, 1, 2, 4, 5], [3, 1, 2, 4, 5])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 20])\n  True\n  >>> polynomialEqual([1, 4, 12, 20], [1, 4, 12, 21])\n  False\n  */\nconst polynomialsEqual = (p1, p2) => {\n  if (p1.length!== p2.", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of all even numbers in the array.\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> sumEvens([1, 2, 3, 4, 5])\n  6\n  >>> ", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "<|endoftext|>/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map which takes a string representing\n  a word as input and returns the number of vowels in the string. Vowels\n  in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but\n  only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map(\"abcde\")\n  2\n  >>> vowels_count_with_map(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\nconst vowels_count_with_map_and_filter = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (vowels_map.includes(s[i])) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*Write a function vowels_count_with_map_and_filter that takes a string\n  representing a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel,\n  but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count_with_map_and_filter(\"abcde\")\n  2\n  >>> vowels_count_with_map_and_filter(\"ACEDY\")\n  3\n  */\n", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = x.toString().split('');\n  digits = digits.reverse();\n  digits = digits.splice(0, shift);\n  return digits.reverse().join('');\n};\n\n/*\n  Given a string, return a new string with the first letter capitalized.\n  >>> capitalize('hello')\n  'Hello'\n  >>> capitalize('hello world')\n  'Hello World'\n  >>> capitalize('hello world', 2)\n  'Hello World'\n  >>> capitalize('hello world', 3)\n  'Hello World'\n  >>> capitalize('hello world', 4)\n  'Hello World'\n  >>> capitalize('hello world', 5)\n  'Hello World'\n  >>> capitalize('hello world', 6)\n  'Hello World'\n  >>> capitalize('hello world', 7)\n  'Hello World'\n  >>> capitalize('hello world', 8)\n  'Hello World'\n  >>> capitalize('hello world', 9)\n  'Hello World'\n  >>> capitalize('hello world', 10)\n  'Hello World'\n  >>> capitalize('hello world', 11)\n  'Hello World'\n  >>> capitalize('hello world', 12)\n  'Hello World'\n  >>> capitalize('hello world', 13)\n  'Hello World'\n  >>> capitalize('hello world', 14)\n  'Hello World'\n  >>> capitalize('hello world', 15)\n  'Hello World'\n  >>> capitalize('hello world', 16)\n  'Hello World'\n  >>> capitalize('hello world', 17)\n  'Hello World'\n  >>> capitalize('hello world', 18)\n  'Hello World'\n  >>> capitalize('hello world', 19)\n  'Hello World'\n  >>> capitalize('hello world', 20)\n  'Hello World'\n  >>> capitalize('hello world', 21)\n  'Hello World'\n  >>> capitalize('hello world', 22)\n  'Hello World'\n  >>> capitalize('hello world', 23)\n  'Hello World'\n  >>> capitalize('hello world', 24)\n  'Hello World'\n  >>> capitalize('hello world', 25)\n  'Hello World'\n  >>> capitalize('hello world', 26)\n  'Hello World'\n  >>> capitalize('hello world', 27)\n  'Hello World'\n  >>> capitalize('hello world', 28)\n  'Hello World'\n  >>> capitalize('hello world', 29)\n  'Hello World'\n  >>> capitalize('hello world', 30)\n  'Hello World'\n  >>> capitalize('hello world', 31)\n  'Hello World'\n  >>> capitalize('hello world', 32)\n  'Hello World'\n  >>> capitalize('hello world', 33)\n  'Hello World'\n  >>> capitalize('hello world', 34)\n  'Hello World'\n  >>> capitalize('hello world', 35)\n  'Hello World'\n  >>> capitalize('hello world', 36)\n  'Hello World'\n  >>> capitalize('hello world', 37)\n  'Hello World'\n  >>> capitalize('hello world', 38)\n  'Hello World'\n  >>> capitalize('hello world', 39)\n  'Hello World'\n  >>> capitalize('hello world', 40)\n  'Hello World'\n  >>> capitalize('hello world', 41)\n  'Hello World'\n  >>> capitalize('hello world', 42)\n  'Hello World'\n  >>> capitalize('hello world', 43)\n  'Hello World'\n  >>> capitalize('hello world', 44)\n  'Hello World'\n  >>> capitalize('hello world', 45)\n  'Hello World'\n  >>> capitalize('hello world', 46)\n  'Hello World'\n  >>> capitalize('hello world', 47)\n  'Hello World'\n  >>> capitalize('hello world', 48)\n  'Hello World'\n  >>> capitalize('hello world', 49)\n  'Hello World'\n  >>> capitalize('hello world', 50)\n  'Hello World'\n  >>> capitalize('hello world', 51)\n  'Hello World'\n  >>> capitalize('hello world', 52)\n  'Hello World'\n  >>> capitalize('hello world', 53)\n  'Hello World'\n  >>> capitalize('hello world', 54)\n  'Hello World'\n  >>> capitalize('hello world', 55)\n  'Hello World'\n  >>> capitalize('hello world', 56)\n  'Hello World'\n  >>> capitalize('hello world', 57)\n  'Hello World'\n  >>> capitalize('hello world', 58)\n  'Hello World'\n  >>> capitalize('hello world', 59)\n  'Hello World'\n  >>> capitalize('hello world', 60)\n  'Hello World'\n  >>> capitalize('hello world', 61)\n  'Hello World'\n  >>> capitalize('hello world', 62)\n  'Hello World'\n  >>> capitalize('hello world', 63)\n  'Hello World'\n  >>> capitalize('hello world', 64)\n  'Hello World'\n  >>> capitalize('hello world', 65)\n  'Hello World'\n  >>> capitalize('hello world', 66)\n  'Hello World'\n  >>> capitalize('hello world', 67)\n  'Hello World'\n  >>> capitalize('hello world', 68)\n  'Hello World'\n  >>> capitalize('hello world', 69)\n  'Hello World'\n  >>> capitalize('hello world', 70)\n  'Hello World'\n  >>> capitalize('hello world', 71)\n  'Hello World'\n  >>> capitalize('hello world', 72)\n  'Hello World'\n  >>> capitalize('hello world', 73)\n  'Hello World'\n  >>> capitalize('hello world', 74)\n  'Hello World'\n  >>> capitalize('hello world', 75)\n  'Hello World'\n  >>> capitalize('hello world', 76)\n  'Hello World'\n  >>> capitalize('hello world', 77)\n  'Hello World'\n  >>> capitalize('hello world', 78)\n  'Hello World'\n  >>> capitalize('hello world', 79)\n  'Hello World'\n  >>> capitalize('hello world', 80)\n  'Hello World'\n  >>> capitalize('hello world', 81)\n  'Hello World'\n  >>> capitalize('hello world', 82)\n  'Hello World'\n  >>> capitalize('hello world', 83)\n  'Hello World'\n  >>> capitalize('hello world', 84)\n  'Hello World'\n  >>> capitalize('hello world', 85)\n  'Hello World'\n  >>> capitalize('hello world', 86)\n  'Hello World'\n  >>> capitalize('hello world', 87)\n  'Hello World'\n  >>> capitalize('hello world', 88)\n  'Hello World'\n  >>> capitalize('hello world', 89)\n  'Hello World'\n  >>> capitalize('hello world', 90)\n  'Hello World'\n  >>> capitalize('hello world', 91)\n  'Hello World'\n  >>> capitalize('hello world', 92)\n  'Hello World'\n  >>> capitalize('hello world', 93)\n  'Hello World'\n  >>> capitalize('hello world', 94)\n  'Hello World'\n  >>> capitalize('hello world', 95)\n  'Hello World'\n  >>> capitalize('hello world', 96)\n  'Hello World'\n  >>> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57) {\n      sum += code;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 13\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 13\n      digit_sum(\"aAaaaXa\") => 15\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n    if (code >= 48", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  s.split(\" \").forEach((e) => {\n    if (e === \"apples\") {\n      apples++;\n    } else if (e === \"oranges\") {\n      oranges++;\n    } else if (e === \"mangoes\") {\n      mangoes++;\n    }\n    total++;\n  });\n  return total - mangoes - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  s.split(\" \").forEach((e) => {\n    if (e === \"apples\") {\n      apples++;\n    } else if (e === \"oranges\") {\n      oranges++;\n    } else if (e === \"mangoes\") {\n      mangoes++;\n    }\n    total++;\n  });\n  return total - mangoes - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  s.split(\" \").forEach((e) => {\n    if (e === \"apples\") {\n      apples++;\n    } else if (e === \"oranges\") {\n      oranges++;\n    } else if (e === \"mangoes\") {\n      mangoes++;\n    }\n    total++;\n  });\n  return total - mangoes - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  s.split(\" \").forEach((e) => {\n    if (e === \"apples\") {\n      apples++;\n    } else if (e === \"oranges\") {\n      oranges++;\n    } else if (e === \"mangoes\") {\n      mangoes++;\n    }\n    total++;\n  });\n  return total - mangoes - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n  let oranges = 0;\n  let mangoes = 0;\n  let total = 0;\n  s.split(\" \").forEach((e) => {\n    if (e === \"apples\") {\n      apples++;\n    } else if (e === \"oranges\") {\n      oranges++;\n    } else if (e === \"mangoes\") {\n      mangoes++;\n    }\n    total++;\n  });\n  return total - mangoes - oranges - apples - n;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let apples = 0;\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const evenValues = arr.filter((n) => n % 2 === 0);\n  if (evenValues.length === 0) return [];\n  const smallestEvenValue = Math.min(...evenValues);\n  const index = evenValues.indexOf(smallestEvenValue);\n  return [smallestEvenValue, index];\n};\n\nexport { pluck };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOdd = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOdd };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddIndex };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex2 = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddIndex2 };\n\n/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest odd value.\n  If multiple nodes with the same smallest odd value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no odd values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [3, 1]\n      Explanation: 3 has the smallest odd value, and 3 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [1, 3]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluckOddIndex3 = (arr) => {\n  const oddValues = arr.filter((n) => n % 2 === 1);\n  if (oddValues.length === 0) return [];\n  const smallestOddValue = Math.min(...oddValues);\n  const index = oddValues.indexOf(smallestOddValue);\n  return [smallestOddValue, index];\n};\n\nexport { pluckOddIndex3 };\n\n/*\n  \"Given an array representing a ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let freq = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      freq = i;\n    }\n  }\n  if (freq >= lst[freq]) {\n    return freq;\n  }\n  return -1;\n};\n\n/*\n  You are given a list of integers representing a sequence of words. Write a function that returns a string\n  that represents the longest word in the given string.\n  Examples:\n      longestWord(\"Hello World!\") == \"World\"\n      longestWord(\"Hello World!\") == \"Hello\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longestWord(\"Hello World!\") == \"Hello World!\"\n      longest", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['bacd', 'cde']\n  */\nconst filter_by_not_substring = (strings, substring) => {\n  return strings.filter(string =>!string.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filter_by_not_substring([], 'a')\n  []\n  >>> filter_by_not_substring(['abc', 'bacd', 'cde', '", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const sorted_list = lst.slice();\n  sorted_list.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n  return sorted_list;\n};\n\n/*\n  Given a string, return a new string with each character replaced with a new character.\n\n  Examples:\n  replace_char('hello', 'o', 'z') == 'hlez'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'\n  replace_char('hello', 'a', 'z') == 'hezl'", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a > b + c || b > a + c || c > a + b) {\n    return -1;\n  }\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  const is_palindromic = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i]!== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const is_sum_less_than_or_equal_to_max = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  return is_balanced(q) && is_palindromic(q) && is_sum_less_than_or_equal_to_max(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  const is_palindromic = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i]!== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const is_sum_less_than_or_equal_to_max = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  return is_balanced(q) && is_palindromic(q) && is_sum_less_than_or_equal_to_max(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  const is_palindromic = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i]!== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const is_sum_less_than_or_equal_to_max = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  return is_balanced(q) && is_palindromic(q) && is_sum_less_than_or_equal_to_max(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const max_weight = w;\n  const max_sum = max_weight * max_weight;\n  const is_balanced = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  const is_palindromic = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    while (i < j) {\n      if (arr[i]!== arr[j]) {\n        return false;\n      }\n      i++;\n      j--;\n    }\n    return true;\n  };\n  const is_sum_less_than_or_equal_to_max = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n      sum += arr[i];\n      if (sum > max_sum) return false;\n    }\n    return true;\n  };\n  return is_balanced(q) && is_palindromic(q) && is_sum_less_than_or_equal_to_max(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let min = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        min = Math.min(min, j + 1);\n      }\n    }\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_2 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_3 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_4 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_5 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_6 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_7 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_8 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read the same backwards and forwards.\n  In one change, you can change one element to any other element.\n\n  For example:\n  max_change([1,2,3,5,4,7,9,6]) == 9\n  max_change([1, 2, 3, 4, 3, 2, 2]) == 3\n  max_change([1, 2, 3, 2, 1]) == 6\n  */\nconst max_change_9 = (arr) => {\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0; j--) {\n      if (arr[j]!== arr[j + 1]) {\n        max = Math.max(max, j + 1);\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given an array arr of integers, find the maximum number that needs to be changed to make the\n  array palindromic. A palindromic array is an array that is read ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst2;\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_underscore('hi') ➞ 'hi_I'\n  to_underscore('Hi') ➞ 'Hi_i'\n  to_underscore('Hi') ➞ 'Hi_I'\n  to_underscore('Hi') ➞ 'Hi_i'\n  to_underscore('Hi') ➞ 'Hi_I'\n  */\nconst to_underscore = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('_');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_underscore('hi') ➞ 'hi_I'\n  to_underscore('Hi') ➞ 'Hi_i'\n  to_underscore('Hi') ➞ 'Hi_I'\n  to_underscore('Hi') ➞ 'Hi_i'\n  to_underscore('Hi') ➞ 'Hi_I'\n  */\nconst to_camel_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_camel_case('hi') ➞ 'hi'\n  to_camel_case('Hi') ➞ 'Hi'\n  to_camel_case('Hi') ➞ 'Hi'\n  to_camel_case('Hi') ➞ 'Hi'\n  to_camel_case('Hi') ➞ 'Hi'\n  */\nconst to_pascal_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_pascal_case('hi') ➞ 'Hi'\n  to_pascal_case('Hi') ➞ 'Hi'\n  to_pascal_case('Hi') ➞ 'Hi'\n  to_pascal_case('Hi') ➞ 'Hi'\n  to_pascal_case('Hi') ➞ 'Hi'\n  */\nconst to_snake_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('_');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_snake_case('hi') ➞ 'hi'\n  to_snake_case('Hi') ➞ 'Hi'\n  to_snake_case('Hi') ➞ 'Hi'\n  to_snake_case('Hi') ➞ 'Hi'\n  to_snake_case('Hi') ➞ 'Hi'\n  */\nconst to_kebab_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toLowerCase())\n   .join('');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_kebab_case('hi') ➞ 'hi'\n  to_kebab_case('Hi') ➞ 'Hi'\n  to_kebab_case('Hi') ➞ 'Hi'\n  to_kebab_case('Hi') ➞ 'Hi'\n  to_kebab_case('Hi') ➞ 'Hi'\n  */\nconst to_title_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_title_case('hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  */\nconst to_title_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_title_case('hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  */\nconst to_title_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_title_case('hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  */\nconst to_title_case = (str) => {\n  return str\n   .split('')\n   .map((char) => char.toUpperCase())\n   .join(' ');\n};\n\n/*\n  Write a function that accepts a string and returns the string with all the chars\n  in lower case and all the chars in upper case separated by underscores.\n\n  Examples\n  to_title_case('hi') ➞ 'Hi'\n  to_title_case('Hi') ➞ 'Hi'\n  to_title_case('Hi') ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false\n  }\n  let b = 1\n  let c = 2\n  let d = 2\n  let e = 2\n  let f = 1\n  let g = 1\n  let h = 1\n  let i = 2\n  let j = 2\n  let k = 2\n  let l = 1\n  let m = 2\n  let n = 2\n  let o = 2\n  let p = 2\n  let q = 2\n  let r = 2\n  let s = 2\n  let t = 2\n  let u = 2\n  let v = 1\n  let w = 1\n  let x = 1\n  let y = 1\n  let z = 1\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = f\n  let g = g\n  let h = h\n  let i = i\n  let j = j\n  let k = k\n  let l = l\n  let m = m\n  let n = n\n  let o = o\n  let p = p\n  let q = q\n  let r = r\n  let s = s\n  let t = t\n  let u = u\n  let v = v\n  let w = w\n  let x = x\n  let y = y\n  let z = z\n  let a = a\n  let b = b\n  let c = c\n  let d = d\n  let e = e\n  let f = ", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 0) return true;\n  if (n === 1) return true;\n  if (n % 2 === 0) return false;\n  if (n % 3 === 0) return false;\n  if (n % 5 === 0) return false;\n  if (n % 7 === 0) return false;\n  if (n % 11 === 0) return false;\n  if (n % 13 === 0) return false;\n  if (n % 17 === 0) return false;\n  if (n % 19 === 0) return false;\n  if (n % 23 === 0) return false;\n  if (n % 29 === 0) return false;\n  if (n % 31 === 0) return false;\n  if (n % 37 === 0) return false;\n  if (n % 43 === 0) return false;\n  if (n % 53 === 0) return false;\n  if (n % 63 === 0) return false;\n  if (n % 73 === 0) return false;\n  if (n % 83 === 0) return false;\n  if (n % 93 === 0) return false;\n  if (n % 103 === 0) return false;\n  if (n % 113 === 0) return false;\n  if (n % 123 === 0) return false;\n  if (n % 133 === 0) return false;\n  if (n % 143 === 0) return false;\n  if (n % 153 === 0) return false;\n  if (n % 163 === 0) return false;\n  if (n % 173 === 0) return false;\n  if (n % 183 === 0) return false;\n  if (n % 193 === 0) return false;\n  if (n % 203 === 0) return false;\n  if (n % 213 === 0) return false;\n  if (n % 223 === 0) return false;\n  if (n % 233 === 0) return false;\n  if (n % 243 === 0) return false;\n  if (n % 253 === 0) return false;\n  if (n % 263 === 0) return false;\n  if (n % 273 === 0) return false;\n  if (n % 283 === 0) return false;\n  if (n % 293 === 0) return false;\n  if (n % 303 === 0) return false;\n  if (n % 313 === 0) return false;\n  if (n % 323 === 0) return false;\n  if (n % 333 === 0) return false;\n  if (n % 343 === 0) return false;\n  if (n % 353 === 0) return false;\n  if (n % 363 === 0) return false;\n  if (n % 373 === 0) return false;\n  if (n % 383 === 0) return false;\n  if (n % 393 === 0) return false;\n  if (n % 403 === 0) return false;\n  if (n % 413 === 0) return false;\n  if (n % 423 === 0) return false;\n  if (n % 433 === 0) return false;\n  if (n % 443 === 0) return false;\n  if (n % 454 === 0) return false;\n  if (n % 463 === 0) return false;\n  if (n % 474 === 0) return false;\n  if (n % 484 === 0) return false;\n  if (n % 494 === 0) return false;\n  if (n % 504 === 0) return false;\n  if (n % 513 === 0) return false;\n  if (n % 523 === 0) return false;\n  if (n % 533 === 0) return false;\n  if (n % 543 === 0) return false;\n  if (n % 553 === 0) return false;\n  if (n % 563 === 0) return false;\n  if (n % 573 === 0) return false;\n  if (n % 583 === 0) return false;\n  if (n % 593 === 0) return false;\n  if (n % 603 === 0) return false;\n  if (n % 613 === 0) return false;\n  if (n % 623 === 0) return false;\n  if (n % 633 === 0) return false;\n  if (n % 643 === 0) return false;\n  if (n % 653 === 0) return false;\n  if (n % 663 === 0) return false;\n  if (n % 673 === 0) return false;\n  if (n % 683 === 0) return false;\n  if (n % 693 === 0) return false;\n  if (n % 703 === 0) return false;\n  if (n % 713 === 0) return false;\n  if (n % 723 === 0) return false;\n  if (n % 733 === 0) return false;\n  if (n % 743 === 0) return false;\n  if (n % 754 === 0) return false;\n  if (n % 763 === 0) return false;\n  if (n % 773 === 0) return false;\n  if (n % 783 === 0) return false;\n  if (n % 793 === 0) return false;\n  if (n % 803 === 0) return false;\n  if (n % 813 ===0) return false;\n  if (n % 823 === 0) return false;\n  if (n % 833 === 0) return false;\n  if (n % 843 === 0) return false;\n  if (n % 853 === 0) return false;\n  if (n % 863 === 0) return false;\n  if (n % 873 === 0) return false;\n  if (n % 883 === 0) return false;\n  if (n % 893 === 0) return false;\n  if (n % 903 === 0) return false;\n  if (n % 913 === 0) return false;\n  if (n % 923 === 0) return false;\n  if (n % 931 === 0) return false;\n  if (n % 941 === 0) return false;\n  if (n % 951 === 0) return false;\n  if (n % 961 === 0) return false;\n  if (n % 971 === 0) return false;\n  if (n % 981 === 0) return false;\n  if (n % 991 === 0) return false;\n  if (n % 1001 === 0) return false;\n  return true;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  is_simple_power(5, 4) => true\n  is_simple_power(5, 5) => true\n  is_simple_power(5, 6) => false\n  is_simple_power(5, 7) => false\n  is_simple_power(5, 8) => false\n  is_simple_power(5, 9) => false\n  is_simple_power(5, 10) => false\n  is_simple_power(5, 11) => false\n  is_simple_power(5, 12) => false\n  is_simple_power(5, 13) => false\n  is_simple_power(5, 14) => false\n  is_simple_power(5, 15) => false\n  is_simple_power(5, 16) => false\n  is_simple_power(5, 17) => false\n  is_simple_power(5, 18) => false\n  is_simple_power(5, 19) => false\n  is_simple_power(5, 20) => false\n  is_simple_power(5, 21) => false\n  is_simple_power(5, 22) => false\n  is_simple_power(5, 23) => false\n  is_simple_power(5, 24) => false\n  is_simple_power(5, 25) => false\n  is_simple_power(5, 26) => false\n  is_simple_power(5, 27) => false\n  is_simple_power(5, 28) => false\n  is_simple_power(5, 29) => false\n  is_simple_power(5, 30) => false\n  is_simple_power(5, 31) => false\n  is_simple_power(5, 32) => false\n  is_simple_power(5, 33) => false\n  is_simple_power(5, 34) => false\n  is_simple_power(5, 35) => false\n  is_simple_power(5, 36) => false\n  is_simple_power(5, 37) => false\n  is_simple_power(5, 38) => false\n  is_simple_power(5, 39) => false\n  is_simple_power(5, 40) => false\n  is_simple_power(5, 41) => false\n  is_simple_power(5, 42) => false\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0 || a === 1 || a === 2 || a === 3 || a === 4 || a === 5 || a === 6 || a === 7 || a === 8 || a === 9 || a === 10) return true\n  return false\n}\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let hex_num = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_num = hex_num * 16 + num.charCodeAt(i) - 48;\n    } else {\n      hex_num = hex_num * 16 + num.charCodeAt(i);\n    }\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key2 = (num) => {\n  let hex_num = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_num = hex_num * 16 + num.charCodeAt(i) - 48;\n    } else {\n      hex_num = hex_num * 16 + num.charCodeAt(i);\n    }\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key3 = (num) => {\n  let hex_num = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_num = hex_num * 16 + num.charCodeAt(i) - 48;\n    } else {\n      hex_num = hex_num * 16 + num.charCodeAt(i);\n    }\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key4 = (num) => {\n  let hex_num = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num.charCodeAt(i) >= 48 && num.charCodeAt(i) <= 57) {\n      hex_num = hex_num * 16 + num.charCodeAt(i) - 48;\n    } else {\n      hex_num = hex_num * 16 + num.charCodeAt(i);\n    }\n  }\n  return hex_num;\n};\n\n/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key5 = (num) => {\n  let hex_num = 0;\n  for (let i = 0; i < num.length; i++) {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let remainder = decimal;\n  let decimalDigits = 1;\n  while (decimal!== 0) {\n    remainder *= 2;\n    decimal -= decimalDigits;\n    decimalDigits++;\n  }\n  while (decimalDigits > 0) {\n    binary += remainder % 2;\n    remainder = Math.floor(remainder / 2);\n    decimalDigits--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to a decimal number. The binary number\n  will be given as a string. The function should return the decimal number as a number.\n  Examples:\n  binary_to_decimal(\"1111\") returns 15\n  binary_to_decimal(\"100000\") returns 32\n*/\nconst binary_to_decimal = (binary) => {\n  let decimal = 0;\n  let decimalDigits = 1;\n  while (binary!== '0') {\n    decimal += binary % 10;\n    binary = Math.floor(binary / 10);\n    decimalDigits++;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a decimal number to binary number. The decimal number\n  will be given as a number. The function should return the binary number as a string.\n  Examples:\n  decimal_to_binary(15) returns \"1111\"\n  decimal_to_binary(32) returns \"100000\"\n*/\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let remainder = decimal;\n  let decimalDigits = 1;\n  while (decimal!== 0) {\n    remainder *= 2;\n    decimal -= decimalDigits;\n    decimalDigits++;\n  }\n  while (decimalDigits > 0) {\n    binary += remainder % 2;\n    remainder = Math.floor(remainder / 2);\n    decimalDigits--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a decimal number to hexadecimal number. The decimal number\n  will be given as a number. The function should return the hexadecimal number as a string.\n  Examples:\n  decimal_to_hexadecimal(15) returns \"f1\"\n  decimal_to_hexadecimal(32) returns \"100000\"\n*/\nconst decimal_to_hexadecimal = (decimal) => {\n  let hexadecimal = '';\n  let remainder = decimal;\n  let decimalDigits = 1;\n  while (decimal!== 0) {\n    remainder *= 16;\n    decimal -= decimalDigits;\n    decimalDigits++;\n  }\n  while (decimalDigits > 0) {\n    hexadecimal += remainder % 16;\n    remainder = Math.floor(remainder / 16);\n    decimalDigits--;\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to decimal number. The hexadecimal\n  number will be given as a string. The function should return the decimal number as a number.\n  Examples:\n  hexadecimal_to_decimal(\"f1\") returns 15\n  hexadecimal_to_decimal(\"100000\") returns 32\n*/\nconst hexadecimal_to_decimal = (hexadecimal) => {\n  let decimal = 0;\n  let decimalDigits = 1;\n  while (hexadecimal!== '0') {\n    decimal += hexadecimal % 10;\n    hexadecimal = Math.floor(hexadecimal / 10);\n    decimalDigits++;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary number. The hexadecimal\n  number will be given as a string. The function should return the binary number as a string.\n  Examples:\n  hexadecimal_to_binary(\"f1\") returns \"1111\"\n  hexadecimal_to_binary(\"100000\") returns \"100000\"\n*/\nconst hexadecimal_to_binary = (hexadecimal) => {\n  let binary = '';\n  let remainder = hexadecimal;\n  let hexadecimalDigits = 1;\n  while (hexadecimal!== '0') {\n    remainder *= 2;\n    hexadecimal -= hexadecimalDigits;\n    hexadecimalDigits++;\n  }\n  while (hexadecimalDigits > 0) {\n    binary += remainder % 2;\n    remainder = Math.floor(remainder / 2);\n    hexadecimalDigits--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to decimal number. The binary number\n  will be given as a string. The function should return the decimal number as a number.\n  Examples:\n  binary_to_decimal(\"1111\") returns 15\n  binary_to_decimal(\"100000\") returns 32\n*/\nconst binary_to_decimal = (binary) => {\n  let decimal = 0;\n  let decimalDigits = 1;\n  while (binary!== '0') {\n    decimal += binary % 10;\n    binary = Math.floor(binary / 10);\n    decimalDigits++;\n  }\n  return decimal;\n};\n\n/*\n  Write a function that will convert a binary number to hexadecimal number. The binary number\n  will be given as a string. The function should return the hexadecimal number as a string.\n  Examples:\n  binary_to_hexadecimal(\"1111\") returns \"f1\"\n  binary_to_hexadecimal(\"100000\") returns \"100000\"\n*/\nconst binary_to_hexadecimal = (binary) => {\n  let hexadecimal = '';\n  let remainder = binary;\n  let binaryDigits = 1;\n  while (binary!== '0') {\n    remainder *= 16;\n    binary -= binaryDigits;\n    binaryDigits++;\n  }\n  while (binaryDigits > 0) {\n    hexadecimal += remainder % 16;\n    remainder = Math.floor(remainder / 16);\n    binaryDigits--;\n  }\n  return hexadecimal;\n};\n\n/*\n  Write a function that will convert a hexadecimal number to binary number. The hexadecimal\n  number will be given as a string. The function should return the binary number as a string.\n  Examples:\n  hexadecimal_to_binary(\"f1\") returns \"1111\"\n  hexadecimal_to_binary(\"100000\") returns \"100000\"\n*/\nconst hexadecimal_to_binary = (hexadecimal) => {\n  let binary = '';\n  let remainder = hexadecimal;\n  let hexadecimalDigits = 1;\n  while (hexadecimal!== '0') {\n    remainder *= 2;\n    hexadecimal -= hexadecimalDigits;\n    hexadecimalDigits++;\n  }\n  while (hexadecimalDigits > 0) {\n    binary += remainder % 2;\n    remainder = Math.floor(remainder / 2);\n    hexadecimalDigits--;\n  }\n  return binary;\n};\n\n/*\n  Write a function that will convert a binary number to octal number. The binary number\n  will be given as a string. The function should return the octal number as a string.\n  Examples:\n  binary_to_octal(\"1111\") returns \"111\"\n  binary_to_octal(\"100000\") returns \"100000\"\n*/\nconst binary_to_octal = (binary) => {\n  let octal = '';\n  let remainder = binary;\n  let binaryDigits = 1;\n  while (binary!== '0') {\n    remainder *= 8;\n    binary -= binaryDigits;\n    binaryDigits++;\n  }\n  while (binaryDigits > 0) {\n    octal += remainder % 8;\n    remainder = Math.floor(remainder / 8);\n    binaryDigits--;\n  }\n  return octal;\n};\n\n/*\n  Write ", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list([])\n  (0, 0)\n  >>> sum_product_list([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_2([])\n  (0, 0)\n  >>> sum_product_list_2([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_2 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_3([])\n  (0, 0)\n  >>> sum_product_list_3([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_3 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_4([])\n  (0, 0)\n  >>> sum_product_list_4([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_4 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_5([])\n  (0, 0)\n  >>> sum_product_list_5([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_5 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_6([])\n  (0, 0)\n  >>> sum_product_list_6([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_6 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_7([])\n  (0, 0)\n  >>> sum_product_list_7([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_7 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_8([])\n  (0, 0)\n  >>> sum_product_list_8([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_8 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_9([])\n  (0, 0)\n  >>> sum_product_list_9([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_9 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_10([])\n  (0, 0)\n  >>> sum_product_list_10([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_10 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_11([])\n  (0, 0)\n  >>> sum_product_list_11([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_11 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_12([])\n  (0, 0)\n  >>> sum_product_list_12([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_12 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_13([])\n  (0, 0)\n  >>> sum_product_list_13([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_13 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;\n  }\n  return [sum, product];\n};\n\n/* Given a list of integers, return a new list consisting of a sum of the integers in the list\n  and a new list consisting of the product of the integers in the list.\n  >>> sum_product_list_14([])\n  (0, 0)\n  >>> sum_product_list_14([1, 2, 3, 4])\n  (3, 24)\n  */\nconst sum_product_list_14 = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= int;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) return false\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i]!== s[i + 1]) return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z.\n  For example:\n  is_alphabet(a) => true\n  is_alphabet(ab) => false\n  is_alphabet(abc) => false\n  is_alphabet(abca) => false\n  is_alphabet(abcde) => true\n  is_alphabet(xyy) => false\n  */\nconst is_alphabet = (s) => {\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] < 'a' || s[i] > 'z') return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it contains only letters A-Z.\n  For example:\n  is_upper_case(a) => true\n  is_upper_case(ab) => false\n  is_upper_case(abc) => false\n  is_upper_case(abca) => false\n  is_upper_case(abcde) => true\n  is_upper_case(xyy) => false\n  */\nconst is_upper_case = (s) => {\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] < 'A' || s[i] > 'Z') return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z and A-Z.\n  For example:\n  is_alpha_upper_case(a) => true\n  is_alpha_upper_case(ab) => false\n  is_alpha_upper_case(abc) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abcde) => true\n  is_alpha_upper_case(xyy) => false\n  */\nconst is_alpha_upper_case = (s) => {\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] < 'a' || s[i] > 'z') return false\n    if (s[i] < 'A' || s[i] > 'Z') return false\n  }\n  return true\n}\n\n/*You are given a string s.\n  Your task is to check if it contains only letters a-z and A-Z.\n  Your function should return true if and only if the string contains only letters a-z and A-Z.\n  For example:\n  is_alpha_upper_case(a) => true\n  is_alpha_upper_case(ab) => false\n  is_alpha_upper_case(abc) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abcde) => true\n  is_alpha_upper_case(xyy) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca) => false\n  is_alpha_upper_case(abca", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let letter_grades = [];\n  for (let i = 0; i < grades.length; i++) {\n    let gpa = grades[i];\n    let letter_grade;\n    if (gpa > 3.7) {\n      letter_grade = \"A+\";\n    } else if (gpa > 3.3) {\n      letter_grade = \"A\";\n    } else if (gpa > 3) {\n      letter_grade = \"A-\";\n    } else if (gpa > 2.7) {\n      letter_grade = \"B+\";\n    } else if (gpa > 2.3) {\n      letter_grade = \"B\";\n    } else if (gpa > 2) {\n      letter_grade = \"B-\";\n    } else if (gpa > 1.7) {\n      letter_grade = \"C+\";\n    } else if (gpa > 1.3) {\n      letter_grade = \"C\";\n    } else if (gpa > 1) {\n      letter_grade = \"C-\";\n    } else if (gpa > 0.7) {\n      letter_grade = \"D+\";\n    } else if (gpa > 0) {\n      letter_grade = \"D\";\n    } else if (gpa > 0) {\n      letter_grade = \"D-\";\n    } else {\n      letter_grade = \"E\";\n    }\n    letter_grades.push(letter_grade);\n  }\n  return letter_grades;\n};\n\n/*\n  Write a function that takes an array of numbers and returns an array of\n  the even numbers in that array. For example, [1, 2, 3, 4] returns [2, 4].\n  Write a function that takes an array of numbers and returns an array of\n  the odd numbers in that array. For example, [1, 2, 3, 4] returns [1, 3].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 3 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 5 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 7 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 11 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 13 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 17 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 19 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 23 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 29 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 31 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 37 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 41 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 43 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 47 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 53 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 59 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 61 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 67 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 71 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 73 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 79 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 83 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 89 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 93 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 97 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 101 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 103 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, 5].\n  Write a function that takes an array of numbers and returns an array of\n  the numbers that are divisible by 107 in that array. For example, [1, 2, 3, 4]\n  returns [1, 3, ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let prime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== '0') {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  contains only letters a-z or A-Z or false otherwise\n  Examples\n  is_valid_email('removed@example.com') == true\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false\n  is_valid_email('removed@example.com') == false", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i === 1 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_2 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_3 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_4 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_5 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_6 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_7 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_8 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_9 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_10 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_11 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_12 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_13 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_14 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_15 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_16 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_17 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_18 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_19 = (n) => {\n  let count = 0;\n  let i = 0;\n  while (i < n) {\n    if (i === 0 || i === n - 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst starts_zero_ends_20 = (n) => {\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let result = '';\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  while (sum > 0) {\n    result += sum % 2;\n    sum = Math.floor(sum / 2);\n  }\n  return result;\n};\n\n/*Given a positive integer N, return the sum of its digits in binary.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst addOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at even indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return odd.concat(even)\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst addOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = (lst) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even.push(lst[i])\n    } else {\n      odd.push(lst[i])\n    }\n  }\n  return even.concat(odd)\n}\n\n/*Given a non-empty list of integers lst. add the odd ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) + 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) + 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!! olleH'\n  */\nconst anti_shuffle_des = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_des_2 = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!! olleH'\n  */\nconst anti_shuffle_des_3 = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_des_4 = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'olleh'\n  anti_shuffle('Hello World!!!') returns 'World!!! olleH'\n  */\nconst anti_shuffle_des_5 = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle_des_6 = (s) => {\n  let new_s = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n    let n = s.charCodeAt(i);\n    if (n >= 65 && n <= 90) {\n      new_s += String.fromCharCode((n - 32) - 65);\n    } else if (n >= 97 && n <= 122) {\n      new_s += String.fromCharCode((n - 32) - 97);\n    } else {\n      new_s += c;\n    }\n  }\n  return new_s;\n};\n\n/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  descending order based on ascii value.\n  ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const result = [];\n  const rows = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push(i);\n      }\n    });\n    return acc;\n  }, []);\n  rows.sort((a, b) => b - a);\n  rows.forEach((row) => {\n    const cols = lst[row].sort((a, b) => b - a);\n    result.push([row, cols]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_col([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_col([], 1) == []\n  get_col([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_col = (lst, x) => {\n  const result = [];\n  const cols = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push(i);\n      }\n    });\n    return acc;\n  }, []);\n  cols.sort((a, b) => a - b);\n  cols.forEach((col) => {\n    const rows = lst[col].sort((a, b) => a - b);\n    result.push([col, rows]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const result = [];\n  const cols = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push(i);\n      }\n    });\n    return acc;\n  }, []);\n  cols.sort((a, b) => a - b);\n  cols.forEach((col) => {\n    const rows = lst[col].sort((a, b) => b - a);\n    result.push([col, rows]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const result = [];\n  const rows = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push(i);\n      }\n    });\n    return acc;\n  }, []);\n  rows.sort((a, b) => b - a);\n  rows.forEach((row) => {\n    const cols = lst[row].sort((a, b) => b - a);\n    result.push([row, cols]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (lst, x) => {\n  const result = [];\n  const cols = lst.reduce((acc, cur) => {\n    cur.forEach((col, i) => {\n      if (col === x) {\n        acc.push(i);\n      }\n    });\n    return acc;\n  }, []);\n  cols.sort((a, b) => a - b);\n  cols.forEach((col) => {\n    const rows = lst[col].sort((a, b) => b - a);\n    result.push([col, rows]);\n  });\n  return result;\n};\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_diag([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 0), (2, 0), (3, 1), (3, 2), (3, 3)]\n  get_diag([], 1) == []\n  get_diag([[], [1], [1, 2, 3]], 3) == [(2, 3), (2, 2), (2, 1)]\n  */\nconst get_diag = (l", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_2 = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_3 = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_4 = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_5 = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_6 = (array) => {\n  const len = array.length;\n  if (len <= 1) {\n    return array;\n  }\n  const mid = Math.floor(len / 2);\n  const left = array.slice(0, mid);\n  const right = array.slice(mid);\n  const leftSum = left\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const rightSum = right\n   .map((value) => value + value)\n   .reduce((sum, value) => sum + value, 0);\n  const isOdd = (leftSum + rightSum) % 2 === 1;\n  const result = isOdd? left.concat(right) : right.concat(left);\n  return result;\n};\n\n/*\n  Given an array of non-negative ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let rotatedAlphabet = alphabet.split('')\n   .map(letter => letter.split('').reverse().join(''))\n   .join('');\n  let rotateds = s.split('')\n   .map(letter => letter.split('').reverse().join(''))\n   .join('');\n  let rotatedsArr = rotateds.split('');\n  let rotatedsArrLength = rotatedsArr.length;\n  let rotatedsArrIndex = 0;\n  let rotatedsArrIndex2 = 0;\n  let rotatedsArrIndex3 = 0;\n  let rotatedsArrIndex4 = 0;\n  let rotatedsArrIndex5 = 0;\n  let rotatedsArrIndex6 = 0;\n  let rotatedsArrIndex7 = 0;\n  let rotatedsArrIndex8 = 0;\n  let rotatedsArrIndex9 = 0;\n  let rotatedsArrIndex10 = 0;\n  let rotatedsArrIndex11 = 0;\n  let rotatedsArrIndex12 = 0;\n  let rotatedsArrIndex13 = 0;\n  let rotatedsArrIndex14 = 0;\n  let rotatedsArrIndex15 = 0;\n  let rotatedsArrIndex16 = 0;\n  let rotatedsArrIndex17 = 0;\n  let rotatedsArrIndex18 = 0;\n  let rotatedsArrIndex19 = 0;\n  let rotatedsArrIndex20 = 0;\n  let rotatedsArrIndex21 = 0;\n  let rotatedsArrIndex22 = 0;\n  let rotatedsArrIndex23 = 0;\n  let rotatedsArrIndex24 = 0;\n  let rotatedsArrIndex25 = 0;\n  let rotatedsArrIndex26 = 0;\n  let rotatedsArrIndex27 = 0;\n  let rotatedsArrIndex28 = 0;\n  let rotatedsArrIndex29 = 0;\n  let rotatedsArrIndex30 = 0;\n  let rotatedsArrIndex31 = 0;\n  let rotatedsArrIndex32 = 0;\n  let rotatedsArrIndex33 = 0;\n  let rotatedsArrIndex34 = 0;\n  let rotatedsArrIndex35 = 0;\n  let rotatedsArrIndex36 = 0;\n  let rotatedsArrIndex37 = 0;\n  let rotatedsArrIndex38 = 0;\n  let rotatedsArrIndex39 = 0;\n  let rotatedsArrIndex40 = 0;\n  let rotatedsArrIndex41 = 0;\n  let rotatedsArrIndex42 = 0;\n  let rotatedsArrIndex43 = 0;\n  let rotatedsArrIndex44 = 0;\n  let rotatedsArrIndex45 = 0;\n  let rotatedsArrIndex46 = 0;\n  let rotatedsArrIndex47 = 0;\n  let rotatedsArrIndex48 = 0;\n  let rotatedsArrIndex49 = 0;\n  let rotatedsArrIndex50 = 0;\n  let rotatedsArrIndex51 = 0;\n  let rotatedsArrIndex52 = 0;\n  let rotatedsArrIndex53 = 0;\n  let rotatedsArrIndex54 = 0;\n  let rotatedsArrIndex55 = 0;\n  let rotatedsArrIndex56 = 0;\n  let rotatedsArrIndex57 = 0;\n  let rotatedsArrIndex58 = 0;\n  let rotatedsArrIndex59 = 0;\n  let rotatedsArrIndex60 = 0;\n  let rotatedsArrIndex61 = 0;\n  let rotatedsArrIndex62 = 0;\n  let rotatedsArrIndex63 = 0;\n  let rotatedsArrIndex64 = 0;\n  let rotatedsArrIndex65 = 0;\n  let rotatedsArrIndex66 = 0;\n  let rotatedsArrIndex67 = 0;\n  let rotatedsArrIndex68 = 0;\n  let rotatedsArrIndex69 = 0;\n  let rotatedsArrIndex70 = 0;\n  let rotatedsArrIndex71 = 0;\n  let rotatedsArrIndex72 = 0;\n  let rotatedsArrIndex73 = 0;\n  let rotatedsArrIndex74 = 0;\n  let rotatedsArrIndex75 = 0;\n  let rotatedsArrIndex76 = 0;\n  let rotatedsArrIndex77 = 0;\n  let rotatedsArrIndex78 = 0;\n  let rotatedsArrIndex79 = 0;\n  let rotatedsArrIndex80 = 0;\n  let rotatedsArrIndex81 = 0;\n  let rotatedsArrIndex82 = 0;\n  let rotatedsArrIndex83 = 0;\n  let rotatedsArrIndex84 = 0;\n  let rotatedsArrIndex85 = 0;\n  let rotatedsArrIndex86 = 0;\n  let rotatedsArrIndex87 = 0;\n  let rotatedsArrIndex88 = 0;\n  let rotatedsArrIndex89 = 0;\n  let rotatedsArrIndex90 = 0;\n  let rotatedsArrIndex91 = 0;\n  let rotatedsArrIndex92 = 0;\n  let rotatedsArrIndex93 = 0;\n  let rotatedsArrIndex94 = 0;\n  let rotatedsArrIndex95 = 0;\n  let rotatedsArrIndex96 = 0;\n  let rotatedsArrIndex97 = 0;\n  let rotatedsArrIndex98 = 0;\n  let rotatedsArrIndex99 = 0;\n  let rotatedsArrIndex100 = 0;\n  let rotatedsArrIndex101 = 0;\n  let rotatedsArrIndex102 = 0;\n  let rotatedsArrIndex103 = 0;\n  let rotatedsArrIndex104 = 0;\n  let rotatedsArrIndex105 = 0;\n  let rotatedsArrIndex106 = 0;\n  let rotatedsArrIndex107 = 0;\n  let rotatedsArrIndex108 = 0;\n  let rotatedsArrIndex109 = 0;\n  let rotatedsArrIndex110 = 0;\n  let rotatedsArrIndex111 = 0;\n  let rotatedsArrIndex112 = 0;\n  let rotatedsArrIndex113 = 0;\n  let rotatedsArrIndex114 = 0;\n  let rotatedsArrIndex115 = 0;\n  let rotatedsArrIndex116 = 0;\n  let rotatedsArrIndex117 = 0;\n  let rotatedsArrIndex118 = 0;\n  let rotatedsArrIndex119 = 0;\n  let rotatedsArrIndex120 = 0;\n  let rotatedsArrIndex121 = 0;\n  let rotatedsArrIndex122 = 0;\n  let rotatedsArrIndex123 = 0;\n  let rotatedsArrIndex124 = 0;\n  let rotatedsArrIndex125 = 0;\n  let rotatedsArrIndex126 = 0;\n  let rotatedsArrIndex127 = 0;\n  let rotatedsArrIndex128 = 0;\n  let rotatedsArrIndex129 = 0;\n  let rotatedsArrIndex130 = 0;\n  let rotatedsArrIndex131 = 0;\n  let rotatedsArrIndex132 = 0;\n  let rotatedsArrIndex133 = 0;\n  let rotatedsArrIndex134 = 0;\n  let rotatedsArrIndex135 = 0;\n  let rotatedsArrIndex136 = 0;\n  let rotatedsArrIndex137 = 0;\n  let rotatedsArrIndex138 = 0;\n  let rotatedsArrIndex139 = 0;\n  let rotatedsArrIndex140 = 0;\n  let rotatedsArrIndex141 = 0;\n  let rotatedsArrIndex142 = 0;\n  let rotatedsArrIndex143 = 0;\n  let rotatedsArrIndex144 = 0;\n  let rotatedsArrIndex145 = 0;\n  let rotatedsArrIndex146 = 0;\n  let rotatedsArrIndex147 = 0;\n  let rotatedsArrIndex148 = 0;\n  let rotatedsArr", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const result = [];\n  let max;\n  for (let i = 0; i < numbers.length; i++) {\n    max = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > max) {\n        max = numbers[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rolling_min = (numbers) => {\n  const result = [];\n  let min;\n  for (let i = 0; i < numbers.length; i++) {\n    min = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] < min) {\n        min = numbers[j];\n      }\n    }\n    result.push(min);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n  in the sequence.\n  >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 6, 6, 6, 6, 6]\n  */\nconst rolling_sum = (numbers) => {\n  const result = [];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    result.push(sum);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling average element found until given moment\n  in the sequence.\n  >>> rolling_average([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_average = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let average;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  average = sum / numbers.length;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(average);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n  in the sequence.\n  >>> rolling_median([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_median = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let median;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  median = sum / numbers.length;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(median);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n  in the sequence.\n  >>> rolling_mode([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 2, 2, 2]\n  */\nconst rolling_mode = (numbers) => {\n  const result = [];\n  let mode;\n  let max;\n  for (let i = 0; i < numbers.length; i++) {\n    max = numbers[i];\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[j] > max) {\n        max = numbers[j];\n      }\n    }\n    result.push(max);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_variance([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_variance = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let variance;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  variance = sum / numbers.length;\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(variance);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  standard_deviation = Math.sqrt(sum / numbers.length);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(standard_deviation);\n  }\n  return result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n  in the sequence.\n  >>> rolling_standard_deviation([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2.5, 2.5, 2.5, 2.5, 2.5]\n  */\nconst rolling_standard_deviation = (numbers) => {\n  const result = [];\n  let sum = 0;\n  let standard_deviation;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length < 2) return null\n  return lst[1]\n}\n\n// Tests\nconsole.log(next_smallest([1, 2, 3, 4, 5])) // 2\nconsole.log(next_smallest([5, 1, 4, 3, 2])) // 2\nconsole.log(next_smallest([])) // null\nconsole.log(next_smallest([1, 1])) // null\nconsole.log(next_smallest([2, 1])) // 1\nconsole.log(next_smallest([3, 1])) // 1\nconsole.log(next_smallest([4, 1])) // 1\nconsole.log(next_smallest([5, 1])) // 1\nconsole.log(next_smallest([6, 1])) // null\nconsole.log(next_smallest([7, 1])) // null\nconsole.log(next_smallest([8, 1])) // null\nconsole.log(next_smallest([9, 1])) // null\nconsole.log(next_smallest([10, 1])) // null\nconsole.log(next_smallest([11, 1])) // null\nconsole.log(next_smallest([12, 1])) // null\nconsole.log(next_smallest([13, 1])) // null\nconsole.log(next_smallest([14, 1])) // null\nconsole.log(next_smallest([15, 1])) // null\nconsole.log(next_smallest([16, 1])) // null\nconsole.log(next_smallest([17, 1])) // null\nconsole.log(next_smallest([18, 1])) // null\nconsole.log(next_smallest([19, 1])) // null\nconsole.log(next_smallest([20, 1])) // null\nconsole.log(next_smallest([21, 1])) // null\nconsole.log(next_smallest([22, 1])) // null\nconsole.log(next_smallest([23, 1])) // null\nconsole.log(next_smallest([24, 1])) // null\nconsole.log(next_smallest([25, 1])) // null\nconsole.log(next_smallest([26, 1])) // null\nconsole.log(next_smallest([27, 1])) // null\nconsole.log(next_smallest([28, 1])) // null\nconsole.log(next_smallest([29, 1])) // null\nconsole.log(next_smallest([30, 1])) // null\nconsole.log(next_smallest([31, 1])) // null\nconsole.log(next_smallest([32, 1])) // null\nconsole.log(next_smallest([33, 1])) // null\nconsole.log(next_smallest([34, 1])) // null\nconsole.log(next_smallest([35, 1])) // null\nconsole.log(next_smallest([36, 1])) // null\nconsole.log(next_smallest([37, 1])) // null\nconsole.log(next_smallest([38, 1])) // null\nconsole.log(next_smallest([39, 1])) // null\nconsole.log(next_smallest([40, 1])) // null\nconsole.log(next_smallest([41, 1])) // null\nconsole.log(next_smallest([42, 1])) // null\nconsole.log(next_smallest([43, 1])) // null\nconsole.log(next_smallest([44, 1])) // null\nconsole.log(next_smallest([45, 1])) // null\nconsole.log(next_smallest([46, 1])) // null\nconsole.log(next_smallest([47, 1])) // null\nconsole.log(next_smallest([48, 1])) // null\nconsole.log(next_smallest([49, 1])) // null\nconsole.log(next_smallest([50, 1])) // null\nconsole.log(next_smallest([51, 1])) // null\nconsole.log(next_smallest([52, 1])) // null\nconsole.log(next_smallest([53, 1])) // null\nconsole.log(next_smallest([54, 1])) // null\nconsole.log(next_smallest([55, 1])) // null\nconsole.log(next_smallest([56, 1])) // null\nconsole.log(next_smallest([57, 1])) // null\nconsole.log(next_smallest([58, 1])) // null\nconsole.log(next_smallest([59, 1])) // null\nconsole.log(next_smallest([60, 1])) // null\nconsole.log(next_smallest([61, 1])) // null\nconsole.log(next_smallest([62, 1])) // null\nconsole.log(next_smallest([63, 1])) // null\nconsole.log(next_smallest([64, 1])) // null\nconsole.log(next_smallest([65, 1])) // null\nconsole.log(next_smallest([66, 1])) // null\nconsole.log(next_smallest([67, 1])) // null\nconsole.log(next_smallest([68, 1])) // null\nconsole.log(next_smallest([69, 1])) // null\nconsole.log(next_smallest([70, 1])) // null\nconsole.log(next_smallest([71, 1])) // null\nconsole.log(next_smallest([72, 1])) // null\nconsole.log(next_smallest([73, 1])) // null\nconsole.log(next_smallest([74, 1])) // null\nconsole.log(next_smallest([75, 1])) // null\nconsole.log(next_smallest([76, 1])) // null\nconsole.log(next_smallest([77, 1])) // null\nconsole.log(next_smallest([78, 1])) // null\nconsole.log(next_smallest([79, 1])) // null\nconsole.log(next_smallest([80, 1])) // null\nconsole.log(next_smallest([81, 1])) // null\nconsole.log(next_smallest([82, 1])) // null\nconsole.log(next_smallest([83, 1])) // null\nconsole.log(next_smallest([84, 1])) // null\nconsole.log(next_smallest([85, 1])) // null\nconsole.log(next_smallest([86, 1])) // null\nconsole.log(next_smallest([87, 1])) // null\nconsole.log(next_smallest([88, 1])) // null\nconsole.log(next_smallest([89, 1])) // null\nconsole.log(next_smallest([90, 1])) // null\nconsole.log(next_smallest([91, 1])) // null\nconsole.log(next_smallest([92, 1])) // null\nconsole.log(next_smallest([93, 1])) // null\nconsole.log(next_smallest([94, 1])) // null\nconsole.log(next_smallest([95, 1])) // null\nconsole.log(next_smallest([96, 1])) // null\nconsole.log(next_smallest([97, 1])) // null\nconsole.log(next_smallest([98, 1])) // null\nconsole.log(next_smallest([99, 1])) // null\nconsole.log(next_smallest([100, 1])) // null\nconsole.log(next_smallest([101, 1])) // null\nconsole.log(next_smallest([102, 1])) // null\nconsole.log(next_smallest([103, 1])) // null\nconsole.log(next_smallest([104, 1])) // null\nconsole.log(next_smallest([105, 1])) // null\nconsole.log(next_smallest([106, 1])) // null\nconsole.log(next_smallest([107, 1])) // null\nconsole.log(next_smallest([108, 1])) // null\nconsole.log(next_smallest([109, 1])) // null\nconsole.log(next_smallest([110, 1])) // null\nconsole.log(next_smallest([111, 1])) // null\nconsole.log(next_smallest([112, 1])) // null\nconsole.log(next_smallest([113, 1])) // null\nconsole.log(next_smallest([114, 1])) // null\nconsole.log(next_smallest([115, 1])) // null\nconsole.log(next_smallest([116, 1])) // null\nconsole.log(next_smallest([117, 1])) // null\nconsole.log(next_smallest([118, 1])) // null\nconsole.log(next_smallest([119, 1])) // null\nconsole.log(next_smallest([120, 1])) // null\nconsole.log(next_smallest([121, 1])) // null\nconsole.log(next_smallest([122, 1])) // null\nconsole.log(next_smallest([123, 1])) ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let boredoms = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') boredoms++\n  }\n  return boredoms\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of sadness. A sadness is a sentence that starts with the word \"U\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_sad(\"Hello world\")\n  0\n  >>> is_sad(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_sad = (S) => {\n  let sadness = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'U') sadness++\n  }\n  return sadness\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') anger++\n  }\n  return anger\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') fear++\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') disgust++\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of joy. A joy is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_joy(\"Hello world\")\n  0\n  >>> is_joy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_joy = (S) => {\n  let joy = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') joy++\n  }\n  return joy\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') fear++\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_disgust = (S) => {\n  let disgust = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'O') disgust++\n  }\n  return disgust\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of joy. A joy is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_joy(\"Hello world\")\n  0\n  >>> is_joy(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_joy = (S) => {\n  let joy = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') joy++\n  }\n  return joy\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of anger. An anger is a sentence that starts with the word \"E\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_anger(\"Hello world\")\n  0\n  >>> is_anger(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_anger = (S) => {\n  let anger = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'E') anger++\n  }\n  return anger\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of fear. An fear is a sentence that starts with the word \"A\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_fear(\"Hello world\")\n  0\n  >>> is_fear(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_fear = (S) => {\n  let fear = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'A') fear++\n  }\n  return fear\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of disgust. An disgust is a sentence that starts with the word \"O\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_disgust(\"Hello world\")\n  0\n  >>> is_disgust(\"The sky is blue. The ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  all_int(5, 2, 7) ➞ true\n  all_int(3, 2, 2) ➞ true\n  all_int(3, -2, 1) ➞ false\n  all_int(3.6, -2.2, 2) ➞ true\n  */\nconst all_int = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if any number is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, 2, 2) ➞ false\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ true\n  */\nconst any_int_or_zero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  all_int_or_zero(5, 2, 7) ➞ true\n  all_int_or_zero(3, 2, 2) ➞ true\n  all_int_or_zero(3, -2, 1) ➞ true\n  all_int_or_zero(3.6, -2.2, 2) ➞ true\n  */\nconst all_int_or_zero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero(5, 2, 7) ➞ true\n  any_int_or_zero(3, 2, 2) ➞ true\n  any_int_or_zero(3, -2, 1) ➞ true\n  any_int_or_zero(3.6, -2.2, 2) ➞ true\n  */\nconst any_int_or_zero_or_one = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  all_int_or_zero_or_one(5, 2, 7) ➞ true\n  all_int_or_zero_or_one(3, 2, 2) ➞ true\n  all_int_or_zero_or_one(3, -2, 1) ➞ true\n  all_int_or_zero_or_one(3.6, -2.2, 2) ➞ true\n  */\nconst all_int_or_zero_or_one = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int_or_zero_or_one(5, 2, 7) ➞ true\n  any_int_or_zero_or_one(3, 2, 2) ➞ true\n  any_int_or_zero_or_one(3, -2, 1) ➞ true\n  any_int_or_zero_or_one(3.6, -2.2, 2) ➞ true\n  */\nconst any_int_or_zero_or_one_or_zero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  all_int_or_zero_or_one_or_zero(5, 2, 7) ➞ true\n  all_int_or_zero_or_one_or_zero(3, 2, 2) ➞ true\n  all_int_or_zero_or_one_or_zero(3, -2, 1) ➞ true\n  all_int_or_zero_or_one_or_zero(3.6, -2.2, 2) ➞ true\n  */\nconst all_int_or_zero_or_one_or_zero = (x, y, z) => {\n  if (x === y && x === z) {\n    return true;\n  }\n  if (x === y || x === z || y === z) {\n    return false;\n  }\n  if (x % y === 0 && x % z === 0) {\n    return true;\n  }\n  if (y % x === 0 && y % z === 0) {\n    return true;\n  }\n  if (z % x === 0 && z % y === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if all numbers are equal to the sum of the other two, and all numbers are ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    \n    for (let j = 0; j < vowels.length; j++) {\n      if (vowels[j] === letter) {\n        const nextLetter = message[i + 1];\n        \n        if (nextLetter === vowels[j]) {\n          newMessage = newMessage.replace(vowels[j], letter);\n          i++;\n        }\n      }\n    }\n  }\n  \n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let newMessage = message;\n  \n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i].toLowerCase();\n    const vowels = ['a', 'e', 'i', '", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*You are given a list of integers. You need to find the largest prime factor of the given number and return its value.\n\n  Examples:\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,11,13] the output should be 3\n  For lst = [2,3,5,7,11,13] the output should be 7\n  For lst = [2,3,5,7,11,13] the output should be 13\n  For lst = [2,3,5,7,11,13] the output should be 2\n  For lst = [2,3,5,7,11,13] the output should be 5\n  For lst = [2,3,5,7,11,13] the output should be 11\n  For lst = [2,3,5,7,", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj_with_obj_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj_with_obj_with_obj_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj_with_obj_with_obj_with_obj_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toLowerCase() === dict[key].toUpperCase()) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_with_obj_with_obj_with_obj_with_obj_with_obj_with_obj = (dict) => {\n  if (Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in dict) {", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    const prime = is_prime(i);\n    if (prime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an array and returns the sum of the squares of the integers in the array.\n  for example:\n  square_of_array([1,2,3]) => 9\n  square_of_array([1,4,9,16]) => 5040\n  square_of_array([]) => 0\n  square_of_array([1,4,9,16]) => 5040\n  square_of_array([1,4,9,16]) => 5040\n  */\nconst square_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array and returns the sum of the integers in the array.\n  for example:\n  sum_of_array([1,2,3]) => 6\n  sum_of_array([1,4,9,16]) => 5040\n  sum_of_array([]) => 0\n  sum_of_array([1,4,9,16]) => 5040\n  sum_of_array([1,4,9,16]) => 5040\n  */\nconst sum_of_array = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    product *= arr[i];\n  }\n  return product;\n};\n\n/*Implement a function that takes an array and returns the product of the integers in the array.\n  for example:\n  product_of_array([1,2,3]) => 6\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([]) => 0\n  product_of_array([1,4,9,16]) => 5040\n  product_of_array([1,4,9,16]) => 5040\n  */\nconst product_of_array = (arr) => {\n  let product", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    product += b[i] - '0';\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  add(148, 412) should return 164.\n  add(19, 28) should return 72.\n  add(2020, 1851) should return 2020.\n  add(14,-15) should return 20.\n  */\nconst add = (a, b) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++) {\n    sum += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    sum += b[i] - '0';\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  subtract(148, 412) should return -16.\n  subtract(19, 28) should return -7.\n  subtract(2020, 1851) should return -2020.\n  subtract(14,-15) should return -20.\n  */\nconst subtract = (a, b) => {\n  let difference = 0;\n  for (let i = 0; i < a.length; i++) {\n    difference += a[i] - '0';\n  }\n  for (let i = 0; i < b.length; i++) {\n    difference += b[i] - '0';\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  divide(148, 412) should return 4.\n  divide(19, 28) should return 2.\n  divide(2020, 1851) should return 2020.\n  divide(14,-15) should return 0.\n  */\nconst divide = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += a[i] / b[i];\n  }\n  return quotient;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return -16.\n  remainder(19, 28) should return -7.\n  remainder(2020, 1851) should return -2020.\n  remainder(14,-15) should return -20.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += a[i] % b[i];\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits, rounded down.\n  Assume the input is always valid.\n  Examples:\n  floor(148, 412) should return 4.\n  floor(19, 28) should return 2.\n  floor(2020, 1851) should return 2020.\n  floor(14,-15) should return 0.\n  */\nconst floor = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += Math.floor(a[i] / b[i]);\n  }\n  return quotient;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits, rounded down.\n  Assume the input is always valid.\n  Examples:\n  floor(148, 412) should return -16.\n  floor(19, 28) should return -7.\n  floor(2020, 1851) should return 2020.\n  floor(14,-15) should return -20.\n  */\nconst floorRemainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += Math.floor(a[i] % b[i]);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the quotient of their unit digits, rounded up.\n  Assume the input is always valid.\n  Examples:\n  ceil(148, 412) should return 4.\n  ceil(19, 28) should return 2.\n  ceil(2020, 1851) should return 2020.\n  ceil(14,-15) should return 0.\n  */\nconst ceil = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += Math.ceil(a[i] / b[i]);\n  }\n  return quotient;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits, rounded up.\n  Assume the input is always valid.\n  Examples:\n  ceil(148, 412) should return -16.\n  ceil(19, 28) should return -7.\n  ceil(2020, 1851) should return 2020.\n  ceil(14,-15) should return -20.\n  */\nconst ceilRemainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += Math.ceil(a[i] % b[i]);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits, rounded down.\n  Assume the input is always valid.\n  Examples:\n  round(148, 412) should return 4.\n  round(19, 28) should return 2.\n  round(2020, 1851) should return 2020.\n  round(14,-15) should return 0.\n  */\nconst round = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += Math.round(a[i] / b[i]);\n  }\n  return quotient;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits, rounded down.\n  Assume the input is always valid.\n  Examples:\n  round(148, 412) should return -16.\n  round(19, 28) should return -7.\n  round(2020, 1851) should return 2020.\n  round(14,-15) should return -20.\n  */\nconst roundRemainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += Math.round(a[i] % b[i]);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits, rounded up.\n  Assume the input is always valid.\n  Examples:\n  round(148, 412) should return 4.\n  round(19, 28) should return 2.\n  round(2020, 1851) should return 2020.\n  round(14,-15) should return 0.\n  */\nconst ceiling = (a, b) => {\n  let quotient = 0;\n  for (let i = 0; i < a.length; i++) {\n    quotient += Math.ceil(a[i] / b[i]);\n  }\n  return quotient;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of their unit digits, rounded up.\n  Assume the input is always valid.\n  Examples:\n  round(148, 412) should return -16.\n  round(19, 28) should return -7.\n  round(2020, 1851) should return 2020.\n  round(14,-15) should return -20.\n  */\nconst ceilingRemainder = (a, b) => {\n  let remainder = 0;\n  for (let i = 0; i < a.length; i++) {\n    remainder += Math.ceil(a[i] % b[i]);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 0\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  count_vowels('aBCdEf') returns 2\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 0\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  count_consonants('aBCdEf') returns 3\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 0\n  */\nconst count_consonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices. \n  \n  For example:\n  count_spaces('aBCdEf') returns 2\n  count_spaces('abcdefg') returns 0\n  count_spaces('dBBE') returns 0\n  */\nconst count_spaces = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) ==='') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in even indices. \n  \n  For example:\n  count_digits('aBCdEf') returns 2\n  count_digits('abcdefg') returns 0\n  count_digits('dBBE') returns 0\n  */\nconst count_digits = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === '0' || s.charAt(i) === '1' || s.charAt(i) === '2' || s.charAt(i) === '3' || s.charAt(i) === '4' || s.charAt(i) === '5' || s.charAt(i) === '6' || s.charAt(i) === '7' || s.charAt(i) === '8' || s.charAt(i) === '9') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase letters in even indices. \n  \n  For example:\n  count_upper_letters('aBCdEf') returns 2\n  count_upper_letters('abcdefg') returns 0\n  count_upper_letters('dBBE') returns 0\n  */\nconst count_upper_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase letters in even indices. \n  \n  For example:\n  count_lower_letters('aBCdEf') returns 2\n  count_lower_letters('abcdefg') returns 0\n  count_lower_letters('dBBE') returns 0\n  */\nconst count_lower_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices. \n  \n  For example:\n  count_vowel_letters('aBCdEf') returns 2\n  count_vowel_letters('abcdefg') returns 0\n  count_vowel_letters('dBBE') returns 0\n  */\nconst count_vowel_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'a' || s.charAt(i) === 'e' || s.charAt(i) === 'i' || s.charAt(i) === 'o' || s.charAt(i) === 'u') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices. \n  \n  For example:\n  count_consonant_letters('aBCdEf') returns 3\n  count_consonant_letters('abcdefg') returns 0\n  count_consonant_letters('dBBE') returns 0\n  */\nconst count_consonant_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) === 'b' || s.charAt(i) === 'c' || s.charAt(i) === 'd' || s.charAt(i) === 'f' || s.charAt(i) === 'g' || s.charAt(i) === 'h' || s.charAt(i) === 'j' || s.charAt(i) === 'k' || s.charAt(i) === 'l' || s.charAt(i) ==='m' || s.charAt(i) === 'n' || s.charAt(i) === 'p' || s.charAt(i) === 'q' || s.charAt(i) === 'r' || s.charAt(i) ==='s' || s.charAt(i) === 't' || s.charAt(i) === 'v' || s.charAt(i) === 'w' || s.charAt(i) === 'x' || s.charAt(i) === 'y' || s.charAt(i) === 'z') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of spaces in even indices. \n  \n  For example:\n  count_space_letters('aBCdEf') returns 2\n  count_space_letters('abcdefg') returns 0\n  count_space_letters('dBBE') returns 0\n  */\nconst count_space_letters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (i % 2 === 0) {\n      if (s.charAt(i) ==='') {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of digits in ", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest float to it. If the number is equidistant\n  from two floats, round it away from zero.\n  Examples\n  >>> closest_float(\"10.5\")\n  10.5\n  >>> closest_float(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example closest_float(\"14.5\") should\n  return 14.5 and closest_float(\"-14.5\") should return -14.5.\n  */\nconst closest_float = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest decimal to it. If the number is equidistant\n  from two decimals, round it away from zero.\n  Examples\n  >>> closest_decimal(\"10.5\")\n  10.5\n  >>> closest_decimal(\"15.3\")\n  15.3\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two decimals, the one you should return is the one that is the\n  farthest from zero. For example closest_decimal(\"14.5\") should\n  return 14.5 and closest_decimal(\"-14.5\") should return -14.5.\n  */\nconst closest_decimal = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest whole number to it. If the number is equidistant\n  from two whole numbers, round it away from zero.\n  Examples\n  >>> closest_whole_number(\"10.5\")\n  10.5\n  >>> closest_whole_number(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two whole numbers, the one you should return is the one that is the\n  farthest from zero. For example closest_whole_number(\"14.5\") should\n  return 15 and closest_whole_number(\"-14.5\") should return -15.\n  */\nconst closest_whole_number = (value) => {\n  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n  return diff < 0.5? Math.floor(num) : Math.ceil(num);\n};\n\n/* Create a function that takes a value (string", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
